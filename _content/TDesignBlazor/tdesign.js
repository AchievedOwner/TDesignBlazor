/**
 * tdesign v0.46.1
 * (c) 2022 tdesign
 * @license MIT
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@vue/composition-api'), require('vue')) :
  typeof define === 'function' && define.amd ? define(['exports', '@vue/composition-api', 'vue'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.TDesign = {}, global.VueCompositionAPI, global.Vue));
})(this, (function (exports, VueCompositionAPI, Vue) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var VueCompositionAPI__default = /*#__PURE__*/_interopDefaultLegacy(VueCompositionAPI);
  var Vue__default = /*#__PURE__*/_interopDefaultLegacy(Vue);

  function _defineProperty$3(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function setStyle(el, styles) {
    var keys = Object.keys(styles);
    keys.forEach(function (key) {
      el.style[key] = styles[key];
    });
  }

  function _objectWithoutPropertiesLoose$2(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties$2(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose$2(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _arrayLikeToArray$1(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  function _unsupportedIterableToArray$1(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest();
  }

  function getIEVersion$1() {
    var _navigator = navigator,
        userAgent = _navigator.userAgent;
    var isIE = userAgent.indexOf("compatible") > -1 && userAgent.indexOf("MSIE") > -1;
    var isIE11 = userAgent.indexOf("Trident") > -1 && userAgent.indexOf("rv:11.0") > -1;

    if (isIE) {
      var reIE = new RegExp("MSIE (\\d+\\.\\d+);");
      var match = userAgent.match(reIE);
      if (!match) return -1;
      var fIEVersion = parseFloat(match[1]);
      return fIEVersion < 7 ? 6 : fIEVersion;
    }

    if (isIE11) {
      return 11;
    }

    return Number.MAX_SAFE_INTEGER;
  }

  function ownKeys$34(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$33(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$34(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$34(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function circleAdapter(circleElem) {
    var _window, _window$getComputedSt2, _window2, _window2$navigator;

    var basicStyle = {};

    if (!circleElem) {
      return;
    }

    var _window$getComputedSt = (_window = window) === null || _window === void 0 ? void 0 : (_window$getComputedSt2 = _window.getComputedStyle) === null || _window$getComputedSt2 === void 0 ? void 0 : _window$getComputedSt2.call(_window, circleElem),
        color = _window$getComputedSt.color,
        fontSize = _window$getComputedSt.fontSize;

    var ua = (_window2 = window) === null || _window2 === void 0 ? void 0 : (_window2$navigator = _window2.navigator) === null || _window2$navigator === void 0 ? void 0 : _window2$navigator.userAgent;
    var isSafari = /Safari/.test(ua) && !/Chrome/.test(ua);

    if (isSafari) {
      basicStyle = {
        transformOrigin: "-1px -1px",
        transform: "scale(".concat(parseInt(fontSize, 10) / 14, ")")
      };
    }

    if (color && getIEVersion$1() > 11) {
      var matched = color.match(/[\d.]+/g);
      var endColor = matched ? "rgba(".concat(matched[0], ", ").concat(matched[1], ", ").concat(matched[2], ", 0)") : "";
      setStyle(circleElem, _objectSpread$33(_objectSpread$33({}, basicStyle), {}, {
        background: "conic-gradient(from 90deg at 50% 50%,".concat(endColor, " 0deg, ").concat(color, " 360deg)")
      }));
    } else {
      setStyle(circleElem, _objectSpread$33(_objectSpread$33({}, basicStyle), {}, {
        background: ""
      }));
    }
  }

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  var _listCacheClear = listCacheClear;

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  var eq_1 = eq;

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function assocIndexOf(array, key) {
    var length = array.length;

    while (length--) {
      if (eq_1(array[length][0], key)) {
        return length;
      }
    }

    return -1;
  }

  var _assocIndexOf = assocIndexOf;

  /** Used for built-in method references. */

  var arrayProto = Array.prototype;
  /** Built-in value references. */

  var splice = arrayProto.splice;
  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function listCacheDelete(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }

    var lastIndex = data.length - 1;

    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }

    --this.size;
    return true;
  }

  var _listCacheDelete = listCacheDelete;

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function listCacheGet(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
  }

  var _listCacheGet = listCacheGet;

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function listCacheHas(key) {
    return _assocIndexOf(this.__data__, key) > -1;
  }

  var _listCacheHas = listCacheHas;

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }

    return this;
  }

  var _listCacheSet = listCacheSet;

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  } // Add methods to `ListCache`.


  ListCache.prototype.clear = _listCacheClear;
  ListCache.prototype['delete'] = _listCacheDelete;
  ListCache.prototype.get = _listCacheGet;
  ListCache.prototype.has = _listCacheHas;
  ListCache.prototype.set = _listCacheSet;
  var _ListCache = ListCache;

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */

  function stackClear() {
    this.__data__ = new _ListCache();
    this.size = 0;
  }

  var _stackClear = stackClear;

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);
    this.size = data.size;
    return result;
  }

  var _stackDelete = stackDelete;

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  var _stackGet = stackGet;

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  var _stackHas = stackHas;

  function _typeof$1(obj) {
    "@babel/helpers - typeof";

    return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof$1(obj);
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn) {
    var module = { exports: {} };
  	return fn(module, module.exports), module.exports;
  }

  var freeGlobal = _typeof$1(commonjsGlobal) == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var _freeGlobal = freeGlobal;

  /** Detect free variable `self`. */

  var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof$1(self)) == 'object' && self && self.Object === Object && self;
  /** Used as a reference to the global object. */

  var root$1 = _freeGlobal || freeSelf || Function('return this')();
  var _root = root$1;

  /** Built-in value references. */

  var _Symbol2 = _root.Symbol;
  var _Symbol = _Symbol2;

  /** Used for built-in method references. */

  var objectProto$i = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$g = objectProto$i.hasOwnProperty;
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */

  var nativeObjectToString$1 = objectProto$i.toString;
  /** Built-in value references. */

  var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;
  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */

  function getRawTag(value) {
    var isOwn = hasOwnProperty$g.call(value, symToStringTag$1),
        tag = value[symToStringTag$1];

    try {
      value[symToStringTag$1] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString$1.call(value);

    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag;
      } else {
        delete value[symToStringTag$1];
      }
    }

    return result;
  }

  var _getRawTag = getRawTag;

  /** Used for built-in method references. */
  var objectProto$h = Object.prototype;
  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */

  var nativeObjectToString = objectProto$h.toString;
  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */

  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  var _objectToString = objectToString;

  /** `Object#toString` result references. */

  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';
  /** Built-in value references. */

  var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */

  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }

    return symToStringTag && symToStringTag in Object(value) ? _getRawTag(value) : _objectToString(value);
  }

  var _baseGetTag = baseGetTag;

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = _typeof$1(value);

    return value != null && (type == 'object' || type == 'function');
  }

  var isObject_1 = isObject;

  /** `Object#toString` result references. */

  var asyncTag = '[object AsyncFunction]',
      funcTag$2 = '[object Function]',
      genTag$1 = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';
  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */

  function isFunction(value) {
    if (!isObject_1(value)) {
      return false;
    } // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.


    var tag = _baseGetTag(value);
    return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
  }

  var isFunction_1 = isFunction;

  /** Used to detect overreaching core-js shims. */

  var coreJsData = _root['__core-js_shared__'];
  var _coreJsData = coreJsData;

  /** Used to detect methods masquerading as native. */

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();
  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */


  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  var _isMasked = isMasked;

  /** Used for built-in method references. */
  var funcProto$2 = Function.prototype;
  /** Used to resolve the decompiled source of functions. */

  var funcToString$2 = funcProto$2.toString;
  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString$2.call(func);
      } catch (e) {}

      try {
        return func + '';
      } catch (e) {}
    }

    return '';
  }

  var _toSource = toSource;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */

  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  /** Used to detect host constructors (Safari). */

  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  /** Used for built-in method references. */

  var funcProto$1 = Function.prototype,
      objectProto$g = Object.prototype;
  /** Used to resolve the decompiled source of functions. */

  var funcToString$1 = funcProto$1.toString;
  /** Used to check objects for own properties. */

  var hasOwnProperty$f = objectProto$g.hasOwnProperty;
  /** Used to detect if a method is native. */

  var reIsNative = RegExp('^' + funcToString$1.call(hasOwnProperty$f).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */

  function baseIsNative(value) {
    if (!isObject_1(value) || _isMasked(value)) {
      return false;
    }

    var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
    return pattern.test(_toSource(value));
  }

  var _baseIsNative = baseIsNative;

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  var _getValue = getValue;

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */

  function getNative(object, key) {
    var value = _getValue(object, key);
    return _baseIsNative(value) ? value : undefined;
  }

  var _getNative = getNative;

  /* Built-in method references that are verified to be native. */

  var Map$1 = _getNative(_root, 'Map');
  var _Map = Map$1;

  /* Built-in method references that are verified to be native. */

  var nativeCreate = _getNative(Object, 'create');
  var _nativeCreate = nativeCreate;

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */

  function hashClear() {
    this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
    this.size = 0;
  }

  var _hashClear = hashClear;

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  var _hashDelete = hashDelete;

  /** Used to stand-in for `undefined` hash values. */

  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';
  /** Used for built-in method references. */

  var objectProto$f = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$e = objectProto$f.hasOwnProperty;
  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function hashGet(key) {
    var data = this.__data__;

    if (_nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED$2 ? undefined : result;
    }

    return hasOwnProperty$e.call(data, key) ? data[key] : undefined;
  }

  var _hashGet = hashGet;

  /** Used for built-in method references. */

  var objectProto$e = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$d = objectProto$e.hasOwnProperty;
  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function hashHas(key) {
    var data = this.__data__;
    return _nativeCreate ? data[key] !== undefined : hasOwnProperty$d.call(data, key);
  }

  var _hashHas = hashHas;

  /** Used to stand-in for `undefined` hash values. */

  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';
  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */

  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = _nativeCreate && value === undefined ? HASH_UNDEFINED$1 : value;
    return this;
  }

  var _hashSet = hashSet;

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  } // Add methods to `Hash`.


  Hash.prototype.clear = _hashClear;
  Hash.prototype['delete'] = _hashDelete;
  Hash.prototype.get = _hashGet;
  Hash.prototype.has = _hashHas;
  Hash.prototype.set = _hashSet;
  var _Hash = Hash;

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */

  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new _Hash(),
      'map': new (_Map || _ListCache)(),
      'string': new _Hash()
    };
  }

  var _mapCacheClear = mapCacheClear;

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = _typeof$1(value);

    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  var _isKeyable = isKeyable;

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */

  function getMapData(map, key) {
    var data = map.__data__;
    return _isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  var _getMapData = getMapData;

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function mapCacheDelete(key) {
    var result = _getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  var _mapCacheDelete = mapCacheDelete;

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function mapCacheGet(key) {
    return _getMapData(this, key).get(key);
  }

  var _mapCacheGet = mapCacheGet;

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function mapCacheHas(key) {
    return _getMapData(this, key).has(key);
  }

  var _mapCacheHas = mapCacheHas;

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */

  function mapCacheSet(key, value) {
    var data = _getMapData(this, key),
        size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  var _mapCacheSet = mapCacheSet;

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;
    this.clear();

    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  } // Add methods to `MapCache`.


  MapCache.prototype.clear = _mapCacheClear;
  MapCache.prototype['delete'] = _mapCacheDelete;
  MapCache.prototype.get = _mapCacheGet;
  MapCache.prototype.has = _mapCacheHas;
  MapCache.prototype.set = _mapCacheSet;
  var _MapCache = MapCache;

  /** Used as the size to enable large array optimizations. */

  var LARGE_ARRAY_SIZE$1 = 200;
  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */

  function stackSet(key, value) {
    var data = this.__data__;

    if (data instanceof _ListCache) {
      var pairs = data.__data__;

      if (!_Map || pairs.length < LARGE_ARRAY_SIZE$1 - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }

      data = this.__data__ = new _MapCache(pairs);
    }

    data.set(key, value);
    this.size = data.size;
    return this;
  }

  var _stackSet = stackSet;

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */

  function Stack(entries) {
    var data = this.__data__ = new _ListCache(entries);
    this.size = data.size;
  } // Add methods to `Stack`.


  Stack.prototype.clear = _stackClear;
  Stack.prototype['delete'] = _stackDelete;
  Stack.prototype.get = _stackGet;
  Stack.prototype.has = _stackHas;
  Stack.prototype.set = _stackSet;
  var _Stack = Stack;

  var defineProperty = function () {
    try {
      var func = _getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }();

  var _defineProperty$2 = defineProperty;

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */

  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && _defineProperty$2) {
      _defineProperty$2(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  var _baseAssignValue = baseAssignValue;

  /**
   * This function is like `assignValue` except that it doesn't assign
   * `undefined` values.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */

  function assignMergeValue(object, key, value) {
    if (value !== undefined && !eq_1(object[key], value) || value === undefined && !(key in object)) {
      _baseAssignValue(object, key, value);
    }
  }

  var _assignMergeValue = assignMergeValue;

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function (object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];

        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }

      return object;
    };
  }

  var _createBaseFor = createBaseFor;

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */

  var baseFor = _createBaseFor();
  var _baseFor = baseFor;

  var _cloneBuffer = createCommonjsModule(function (module, exports) {
    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Built-in value references. */

    var Buffer = moduleExports ? _root.Buffer : undefined,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */

    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }

      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }

    module.exports = cloneBuffer;
  });

  /** Built-in value references. */

  var Uint8Array = _root.Uint8Array;
  var _Uint8Array = Uint8Array;

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */

  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));
    return result;
  }

  var _cloneArrayBuffer = cloneArrayBuffer;

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */

  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  var _cloneTypedArray = cloneTypedArray;

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
        length = source.length;
    array || (array = Array(length));

    while (++index < length) {
      array[index] = source[index];
    }

    return array;
  }

  var _copyArray = copyArray;

  /** Built-in value references. */

  var objectCreate = Object.create;
  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */

  var baseCreate = function () {
    function object() {}

    return function (proto) {
      if (!isObject_1(proto)) {
        return {};
      }

      if (objectCreate) {
        return objectCreate(proto);
      }

      object.prototype = proto;
      var result = new object();
      object.prototype = undefined;
      return result;
    };
  }();

  var _baseCreate = baseCreate;

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  var _overArg = overArg;

  /** Built-in value references. */

  var getPrototype = _overArg(Object.getPrototypeOf, Object);
  var _getPrototype = getPrototype;

  /** Used for built-in method references. */
  var objectProto$d = Object.prototype;
  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$d;
    return value === proto;
  }

  var _isPrototype = isPrototype;

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */

  function initCloneObject(object) {
    return typeof object.constructor == 'function' && !_isPrototype(object) ? _baseCreate(_getPrototype(object)) : {};
  }

  var _initCloneObject = initCloneObject;

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && _typeof$1(value) == 'object';
  }

  var isObjectLike_1 = isObjectLike;

  /** `Object#toString` result references. */

  var argsTag$3 = '[object Arguments]';
  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */

  function baseIsArguments(value) {
    return isObjectLike_1(value) && _baseGetTag(value) == argsTag$3;
  }

  var _baseIsArguments = baseIsArguments;

  /** Used for built-in method references. */

  var objectProto$c = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$c = objectProto$c.hasOwnProperty;
  /** Built-in value references. */

  var propertyIsEnumerable$1 = objectProto$c.propertyIsEnumerable;
  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */

  var isArguments = _baseIsArguments(function () {
    return arguments;
  }()) ? _baseIsArguments : function (value) {
    return isObjectLike_1(value) && hasOwnProperty$c.call(value, 'callee') && !propertyIsEnumerable$1.call(value, 'callee');
  };
  var isArguments_1 = isArguments;

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;
  var isArray_1 = isArray;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$2 = 9007199254740991;
  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$2;
  }

  var isLength_1 = isLength;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */

  function isArrayLike(value) {
    return value != null && isLength_1(value.length) && !isFunction_1(value);
  }

  var isArrayLike_1 = isArrayLike;

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */

  function isArrayLikeObject(value) {
    return isObjectLike_1(value) && isArrayLike_1(value);
  }

  var isArrayLikeObject_1 = isArrayLikeObject;

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  var stubFalse_1 = stubFalse;

  var isBuffer_1 = createCommonjsModule(function (module, exports) {
    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Built-in value references. */

    var Buffer = moduleExports ? _root.Buffer : undefined;
    /* Built-in method references for those with the same name as other `lodash` methods. */

    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */

    var isBuffer = nativeIsBuffer || stubFalse_1;
    module.exports = isBuffer;
  });

  /** `Object#toString` result references. */

  var objectTag$4 = '[object Object]';
  /** Used for built-in method references. */

  var funcProto = Function.prototype,
      objectProto$b = Object.prototype;
  /** Used to resolve the decompiled source of functions. */

  var funcToString = funcProto.toString;
  /** Used to check objects for own properties. */

  var hasOwnProperty$b = objectProto$b.hasOwnProperty;
  /** Used to infer the `Object` constructor. */

  var objectCtorString = funcToString.call(Object);
  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */

  function isPlainObject(value) {
    if (!isObjectLike_1(value) || _baseGetTag(value) != objectTag$4) {
      return false;
    }

    var proto = _getPrototype(value);

    if (proto === null) {
      return true;
    }

    var Ctor = hasOwnProperty$b.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }

  var isPlainObject_1 = isPlainObject;

  /** `Object#toString` result references. */

  var argsTag$2 = '[object Arguments]',
      arrayTag$2 = '[object Array]',
      boolTag$4 = '[object Boolean]',
      dateTag$3 = '[object Date]',
      errorTag$3 = '[object Error]',
      funcTag$1 = '[object Function]',
      mapTag$6 = '[object Map]',
      numberTag$4 = '[object Number]',
      objectTag$3 = '[object Object]',
      regexpTag$3 = '[object RegExp]',
      setTag$6 = '[object Set]',
      stringTag$4 = '[object String]',
      weakMapTag$2 = '[object WeakMap]';
  var arrayBufferTag$3 = '[object ArrayBuffer]',
      dataViewTag$4 = '[object DataView]',
      float32Tag$2 = '[object Float32Array]',
      float64Tag$2 = '[object Float64Array]',
      int8Tag$2 = '[object Int8Array]',
      int16Tag$2 = '[object Int16Array]',
      int32Tag$2 = '[object Int32Array]',
      uint8Tag$2 = '[object Uint8Array]',
      uint8ClampedTag$2 = '[object Uint8ClampedArray]',
      uint16Tag$2 = '[object Uint16Array]',
      uint32Tag$2 = '[object Uint32Array]';
  /** Used to identify `toStringTag` values of typed arrays. */

  var typedArrayTags = {};
  typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
  typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$4] = typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] = typedArrayTags[errorTag$3] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$6] = typedArrayTags[numberTag$4] = typedArrayTags[objectTag$3] = typedArrayTags[regexpTag$3] = typedArrayTags[setTag$6] = typedArrayTags[stringTag$4] = typedArrayTags[weakMapTag$2] = false;
  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */

  function baseIsTypedArray(value) {
    return isObjectLike_1(value) && isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
  }

  var _baseIsTypedArray = baseIsTypedArray;

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  var _baseUnary = baseUnary;

  var _nodeUtil = createCommonjsModule(function (module, exports) {
    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */

    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */

    var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Detect free variable `process` from Node.js. */

    var freeProcess = moduleExports && _freeGlobal.process;
    /** Used to access faster Node.js helpers. */

    var nodeUtil = function () {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        } // Legacy `process.binding('util')` for Node.js < 10.


        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }();

    module.exports = nodeUtil;
  });

  /* Node.js helper references. */

  var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;
  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */

  var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;
  var isTypedArray_1 = isTypedArray;

  /**
   * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function safeGet(object, key) {
    if (key === 'constructor' && typeof object[key] === 'function') {
      return;
    }

    if (key == '__proto__') {
      return;
    }

    return object[key];
  }

  var _safeGet = safeGet;

  /** Used for built-in method references. */

  var objectProto$a = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$a = objectProto$a.hasOwnProperty;
  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */

  function assignValue(object, key, value) {
    var objValue = object[key];

    if (!(hasOwnProperty$a.call(object, key) && eq_1(objValue, value)) || value === undefined && !(key in object)) {
      _baseAssignValue(object, key, value);
    }
  }

  var _assignValue = assignValue;

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */

  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }

      if (isNew) {
        _baseAssignValue(object, key, newValue);
      } else {
        _assignValue(object, key, newValue);
      }
    }

    return object;
  }

  var _copyObject = copyObject;

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }

    return result;
  }

  var _baseTimes = baseTimes;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$1 = 9007199254740991;
  /** Used to detect unsigned integer values. */

  var reIsUint = /^(?:0|[1-9]\d*)$/;
  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */

  function isIndex(value, length) {
    var type = _typeof$1(value);

    length = length == null ? MAX_SAFE_INTEGER$1 : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  var _isIndex = isIndex;

  /** Used for built-in method references. */

  var objectProto$9 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$9 = objectProto$9.hasOwnProperty;
  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */

  function arrayLikeKeys(value, inherited) {
    var isArr = isArray_1(value),
        isArg = !isArr && isArguments_1(value),
        isBuff = !isArr && !isArg && isBuffer_1(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? _baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$9.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
      key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
      isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
      _isIndex(key, length)))) {
        result.push(key);
      }
    }

    return result;
  }

  var _arrayLikeKeys = arrayLikeKeys;

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn(object) {
    var result = [];

    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }

    return result;
  }

  var _nativeKeysIn = nativeKeysIn;

  /** Used for built-in method references. */

  var objectProto$8 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$8 = objectProto$8.hasOwnProperty;
  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */

  function baseKeysIn(object) {
    if (!isObject_1(object)) {
      return _nativeKeysIn(object);
    }

    var isProto = _isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$8.call(object, key)))) {
        result.push(key);
      }
    }

    return result;
  }

  var _baseKeysIn = baseKeysIn;

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */

  function keysIn(object) {
    return isArrayLike_1(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
  }

  var keysIn_1 = keysIn;

  /**
   * Converts `value` to a plain object flattening inherited enumerable string
   * keyed properties of `value` to own properties of the plain object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Object} Returns the converted plain object.
   * @example
   *
   * function Foo() {
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.assign({ 'a': 1 }, new Foo);
   * // => { 'a': 1, 'b': 2 }
   *
   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
   * // => { 'a': 1, 'b': 2, 'c': 3 }
   */

  function toPlainObject(value) {
    return _copyObject(value, keysIn_1(value));
  }

  var toPlainObject_1 = toPlainObject;

  /**
   * A specialized version of `baseMerge` for arrays and objects which performs
   * deep merges and tracks traversed objects enabling objects with circular
   * references to be merged.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {string} key The key of the value to merge.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} mergeFunc The function to merge values.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */

  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = _safeGet(object, key),
        srcValue = _safeGet(source, key),
        stacked = stack.get(srcValue);

    if (stacked) {
      _assignMergeValue(object, key, stacked);
      return;
    }

    var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
    var isCommon = newValue === undefined;

    if (isCommon) {
      var isArr = isArray_1(srcValue),
          isBuff = !isArr && isBuffer_1(srcValue),
          isTyped = !isArr && !isBuff && isTypedArray_1(srcValue);
      newValue = srcValue;

      if (isArr || isBuff || isTyped) {
        if (isArray_1(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject_1(objValue)) {
          newValue = _copyArray(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = _cloneBuffer(srcValue, true);
        } else if (isTyped) {
          isCommon = false;
          newValue = _cloneTypedArray(srcValue, true);
        } else {
          newValue = [];
        }
      } else if (isPlainObject_1(srcValue) || isArguments_1(srcValue)) {
        newValue = objValue;

        if (isArguments_1(objValue)) {
          newValue = toPlainObject_1(objValue);
        } else if (!isObject_1(objValue) || isFunction_1(objValue)) {
          newValue = _initCloneObject(srcValue);
        }
      } else {
        isCommon = false;
      }
    }

    if (isCommon) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack['delete'](srcValue);
    }

    _assignMergeValue(object, key, newValue);
  }

  var _baseMergeDeep = baseMergeDeep;

  /**
   * The base implementation of `_.merge` without support for multiple sources.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} [customizer] The function to customize merged values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */

  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }

    _baseFor(source, function (srcValue, key) {
      stack || (stack = new _Stack());

      if (isObject_1(srcValue)) {
        _baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
      } else {
        var newValue = customizer ? customizer(_safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;

        if (newValue === undefined) {
          newValue = srcValue;
        }

        _assignMergeValue(object, key, newValue);
      }
    }, keysIn_1);
  }

  var _baseMerge = baseMerge;

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity(value) {
    return value;
  }

  var identity_1 = identity;

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);

      case 1:
        return func.call(thisArg, args[0]);

      case 2:
        return func.call(thisArg, args[0], args[1]);

      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }

    return func.apply(thisArg, args);
  }

  var _apply = apply;

  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeMax$4 = Math.max;
  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */

  function overRest(func, start, transform) {
    start = nativeMax$4(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax$4(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }

      index = -1;
      var otherArgs = Array(start + 1);

      while (++index < start) {
        otherArgs[index] = args[index];
      }

      otherArgs[start] = transform(array);
      return _apply(func, this, otherArgs);
    };
  }

  var _overRest = overRest;

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */
  function constant(value) {
    return function () {
      return value;
    };
  }

  var constant_1 = constant;

  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */

  var baseSetToString = !_defineProperty$2 ? identity_1 : function (func, string) {
    return _defineProperty$2(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant_1(string),
      'writable': true
    });
  };
  var _baseSetToString = baseSetToString;

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeNow = Date.now;
  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */

  function shortOut(func) {
    var count = 0,
        lastCalled = 0;
    return function () {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;

      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }

      return func.apply(undefined, arguments);
    };
  }

  var _shortOut = shortOut;

  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */

  var setToString = _shortOut(_baseSetToString);
  var _setToString = setToString;

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */

  function baseRest(func, start) {
    return _setToString(_overRest(func, start, identity_1), func + '');
  }

  var _baseRest = baseRest;

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */

  function isIterateeCall(value, index, object) {
    if (!isObject_1(object)) {
      return false;
    }

    var type = _typeof$1(index);

    if (type == 'number' ? isArrayLike_1(object) && _isIndex(index, object.length) : type == 'string' && index in object) {
      return eq_1(object[index], value);
    }

    return false;
  }

  var _isIterateeCall = isIterateeCall;

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */

  function createAssigner(assigner) {
    return _baseRest(function (object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;
      customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

      if (guard && _isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }

      object = Object(object);

      while (++index < length) {
        var source = sources[index];

        if (source) {
          assigner(object, source, index, customizer);
        }
      }

      return object;
    });
  }

  var _createAssigner = createAssigner;

  /**
   * This method is like `_.merge` except that it accepts `customizer` which
   * is invoked to produce the merged values of the destination and source
   * properties. If `customizer` returns `undefined`, merging is handled by the
   * method instead. The `customizer` is invoked with six arguments:
   * (objValue, srcValue, key, object, source, stack).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} customizer The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   if (_.isArray(objValue)) {
   *     return objValue.concat(srcValue);
   *   }
   * }
   *
   * var object = { 'a': [1], 'b': [2] };
   * var other = { 'a': [3], 'b': [4] };
   *
   * _.mergeWith(object, other, customizer);
   * // => { 'a': [1, 3], 'b': [2, 4] }
   */

  var mergeWith$1 = _createAssigner(function (object, source, srcIndex, customizer) {
    _baseMerge(object, source, srcIndex, customizer);
  });
  var mergeWith_1 = mergeWith$1;

  /**
   * This method is like `_.assign` except that it recursively merges own and
   * inherited enumerable string keyed properties of source objects into the
   * destination object. Source properties that resolve to `undefined` are
   * skipped if a destination value exists. Array and plain object properties
   * are merged recursively. Other objects and value types are overridden by
   * assignment. Source objects are applied from left to right. Subsequent
   * sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 0.5.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = {
   *   'a': [{ 'b': 2 }, { 'd': 4 }]
   * };
   *
   * var other = {
   *   'a': [{ 'c': 3 }, { 'e': 5 }]
   * };
   *
   * _.merge(object, other);
   * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
   */

  var merge = _createAssigner(function (object, source, srcIndex) {
    _baseMerge(object, source, srcIndex);
  });
  var merge_1$1 = merge;

  var defaultConfig = {
    classPrefix: "t",
    animation: {
      include: ["ripple", "expand", "fade"],
      exclude: []
    },
    calendar: {
      firstDayOfWeek: 1,
      fillWithZero: true,
      controllerConfig: void 0
    },
    icon: {},
    input: {
      autocomplete: ""
    },
    dialog: {
      closeOnEscKeydown: true,
      closeOnOverlayClick: true,
      confirmBtnTheme: {
        "default": "primary",
        info: "primary",
        warning: "primary",
        danger: "primary",
        success: "primary"
      }
    },
    popconfirm: {
      confirmBtnTheme: {
        "default": "primary",
        warning: "primary",
        danger: "primary"
      }
    },
    table: {
      expandIcon: void 0,
      sortIcon: void 0,
      filterIcon: void 0,
      treeExpandAndFoldIcon: void 0,
      hideSortTips: false
    },
    select: {
      clearIcon: void 0,
      filterable: false
    },
    drawer: {
      closeOnEscKeydown: true,
      closeOnOverlayClick: true,
      size: "small"
    },
    tree: {
      folderIcon: void 0
    },
    datePicker: {
      firstDayOfWeek: 1
    },
    steps: {
      errorIcon: void 0
    },
    tag: {
      closeIcon: void 0
    },
    form: {
      requiredMark: true
    }
  };

  var defaultZhCN = {
    pagination: {
      itemsPerPage: "{size} \u6761/\u9875",
      jumpTo: "\u8DF3\u81F3",
      page: "\u9875",
      total: "\u5171 {total} \u9879\u6570\u636E"
    },
    cascader: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    calendar: {
      yearSelection: "{year} \u5E74",
      monthSelection: "{month} \u6708",
      yearRadio: "\u5E74",
      monthRadio: "\u6708",
      hideWeekend: "\u9690\u85CF\u5468\u672B",
      showWeekend: "\u663E\u793A\u5468\u672B",
      today: "\u4ECA\u5929",
      thisMonth: "\u672C\u6708",
      week: "\u4E00,\u4E8C,\u4E09,\u56DB,\u4E94,\u516D,\u65E5",
      cellMonth: "\u4E00\u6708,\u4E8C\u6708,\u4E09\u6708,\u56DB\u6708,\u4E94\u6708,\u516D\u6708,\u4E03\u6708,\u516B\u6708,\u4E5D\u6708,\u5341\u6708,\u5341\u4E00\u6708,\u5341\u4E8C\u6708"
    },
    transfer: {
      title: "{checked} / {total} \u9879",
      empty: "\u6682\u65E0\u6570\u636E",
      placeholder: "\u8BF7\u8F93\u5165\u5173\u952E\u8BCD\u641C\u7D22"
    },
    timePicker: {
      now: "\u6B64\u523B",
      confirm: "\u786E\u5B9A",
      anteMeridiem: "\u4E0A\u5348",
      postMeridiem: "\u4E0B\u5348",
      placeholder: "\u9009\u62E9\u65F6\u95F4"
    },
    dialog: {
      confirm: "\u786E\u8BA4",
      cancel: "\u53D6\u6D88"
    },
    drawer: {
      confirm: "\u786E\u8BA4",
      cancel: "\u53D6\u6D88"
    },
    popconfirm: {
      confirm: {
        content: "\u786E\u5B9A"
      },
      cancel: {
        content: "\u53D6\u6D88"
      }
    },
    table: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u540E",
      loadingMoreText: "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A",
      filterInputPlaceholder: "\u8BF7\u8F93\u5165\u5185\u5BB9\uFF08\u65E0\u9ED8\u8BA4\u503C\uFF09",
      sortAscendingOperationText: "\u70B9\u51FB\u5347\u5E8F",
      sortCancelOperationText: "\u70B9\u51FB\u53D6\u6D88\u6392\u5E8F",
      sortDescendingOperationText: "\u70B9\u51FB\u964D\u5E8F",
      clearFilterResultButtonText: "\u6E05\u7A7A\u7B5B\u9009",
      columnConfigButtonText: "\u5217\u914D\u7F6E",
      columnConfigTitleText: "\u8868\u683C\u5217\u914D\u7F6E",
      columnConfigDescriptionText: "\u8BF7\u9009\u62E9\u9700\u8981\u5728\u8868\u683C\u4E2D\u663E\u793A\u7684\u6570\u636E\u5217",
      confirmText: "\u786E\u8BA4",
      cancelText: "\u53D6\u6D88",
      resetText: "\u91CD\u7F6E",
      selectAllText: "\u5168\u9009",
      searchResultText: "\u641C\u7D22\u201C{result}\u201D\uFF0C\u627E\u5230 {count} \u6761\u7ED3\u679C"
    },
    select: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    tree: {
      empty: "\u6682\u65E0\u6570\u636E"
    },
    treeSelect: {
      empty: "\u6682\u65E0\u6570\u636E",
      loadingText: "\u52A0\u8F7D\u4E2D",
      placeholder: "\u8BF7\u9009\u62E9"
    },
    datePicker: {
      placeholder: {
        date: "\u8BF7\u9009\u62E9\u65E5\u671F",
        month: "\u8BF7\u9009\u62E9\u6708\u4EFD",
        year: "\u8BF7\u9009\u62E9\u5E74\u4EFD"
      },
      weekdays: ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u65E5"],
      months: ["1 \u6708", "2 \u6708", "3 \u6708", "4 \u6708", "5 \u6708", "6 \u6708", "7 \u6708", "8 \u6708", "9 \u6708", "10 \u6708", "11 \u6708", "12 \u6708"],
      quarters: ["\u4E00\u5B63\u5EA6", "\u4E8C\u5B63\u5EA6", "\u4E09\u5B63\u5EA6", "\u56DB\u5B63\u5EA6"],
      rangeSeparator: " - ",
      direction: "ltr",
      format: "YYYY-MM-DD",
      dayAriaLabel: "\u65E5",
      weekAbbreviation: "\u5468",
      yearAriaLabel: "\u5E74",
      monthAriaLabel: "\u6708",
      confirm: "\u786E\u5B9A",
      selectTime: "\u9009\u62E9\u65F6\u95F4",
      selectDate: "\u9009\u62E9\u65E5\u671F",
      nextYear: "\u4E0B\u4E00\u5E74",
      preYear: "\u4E0A\u4E00\u5E74",
      nextMonth: "\u4E0B\u4E2A\u6708",
      preMonth: "\u4E0A\u4E2A\u6708",
      preDecade: "\u4E0A\u4E2A\u5341\u5E74",
      nextDecade: "\u4E0B\u4E2A\u5341\u5E74",
      now: "\u5F53\u524D"
    },
    upload: {
      sizeLimitMessage: "\u56FE\u7247\u5927\u5C0F\u4E0D\u80FD\u8D85\u8FC7 {sizeLimit}",
      cancelUploadText: "\u53D6\u6D88\u4E0A\u4F20",
      triggerUploadText: {
        fileInput: "\u9009\u62E9\u6587\u4EF6",
        image: "\u70B9\u51FB\u4E0A\u4F20\u56FE\u7247",
        normal: "\u70B9\u51FB\u4E0A\u4F20",
        reupload: "\u91CD\u65B0\u4E0A\u4F20",
        continueUpload: "\u7EE7\u7EED\u4E0A\u4F20",
        "delete": "\u5220\u9664"
      },
      dragger: {
        dragDropText: "\u91CA\u653E\u9F20\u6807",
        draggingText: "\u62D6\u62FD\u5230\u6B64\u533A\u57DF",
        clickAndDragText: "\u70B9\u51FB\u4E0A\u65B9\u201C\u9009\u62E9\u6587\u4EF6\u201D\u6216\u5C06\u6587\u4EF6\u62D6\u62FD\u5230\u6B64\u533A\u57DF"
      },
      file: {
        fileNameText: "\u6587\u4EF6\u540D",
        fileSizeText: "\u6587\u4EF6\u5927\u5C0F",
        fileStatusText: "\u72B6\u6001",
        fileOperationText: "\u64CD\u4F5C",
        fileOperationDateText: "\u4E0A\u4F20\u65E5\u671F"
      },
      progress: {
        uploadingText: "\u4E0A\u4F20\u4E2D",
        waitingText: "\u5F85\u4E0A\u4F20",
        failText: "\u4E0A\u4F20\u5931\u8D25",
        successText: "\u4E0A\u4F20\u6210\u529F"
      }
    },
    form: {
      errorMessage: {
        date: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        url: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        required: "${name}\u5FC5\u586B",
        max: "${name}\u5B57\u7B26\u957F\u5EA6\u4E0D\u80FD\u8D85\u8FC7 ${validate} \u4E2A\u5B57\u7B26\uFF0C\u4E00\u4E2A\u4E2D\u6587\u7B49\u4E8E\u4E24\u4E2A\u5B57\u7B26",
        min: "${name}\u5B57\u7B26\u957F\u5EA6\u4E0D\u80FD\u5C11\u4E8E ${validate} \u4E2A\u5B57\u7B26\uFF0C\u4E00\u4E2A\u4E2D\u6587\u7B49\u4E8E\u4E24\u4E2A\u5B57\u7B26",
        len: "${name}\u5B57\u7B26\u957F\u5EA6\u5FC5\u987B\u662F ${validate}",
        "enum": "${name}\u53EA\u80FD\u662F${validate}\u7B49",
        idcard: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        telnumber: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        pattern: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684${name}",
        validator: "${name}\u4E0D\u7B26\u5408\u8981\u6C42",
        "boolean": "${name}\u6570\u636E\u7C7B\u578B\u5FC5\u987B\u662F\u5E03\u5C14\u7C7B\u578B",
        number: "${name}\u5FC5\u987B\u662F\u6570\u5B57"
      }
    },
    input: {
      placeholder: "\u8BF7\u8F93\u5165"
    },
    list: {
      loadingText: "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u7B49",
      loadingMoreText: "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A"
    },
    alert: {
      expandText: "\u5C55\u5F00\u66F4\u591A",
      collapseText: "\u6536\u8D77"
    },
    anchor: {
      copySuccessText: "\u94FE\u63A5\u590D\u5236\u6210\u529F",
      copyText: "\u590D\u5236\u94FE\u63A5"
    },
    colorPicker: {
      swatchColorTitle: "\u7CFB\u7EDF\u9884\u8BBE\u989C\u8272",
      recentColorTitle: "\u6700\u8FD1\u4F7F\u7528\u989C\u8272",
      clearConfirmText: "\u786E\u5B9A\u6E05\u7A7A\u6700\u8FD1\u4F7F\u7528\u7684\u989C\u8272\u5417\uFF1F"
    }
  };

  var defaultGlobalConfig = merge_1$1(defaultConfig, defaultZhCN);
  var mergeWith = function mergeWith(defaultGlobalConfig2, injectConfig) {
    return mergeWith_1(defaultGlobalConfig2, injectConfig, function (objValue, srcValue) {
      if (Array.isArray(objValue)) {
        return srcValue;
      }
    });
  };

  function getConfigReceiverMixins(_componentName) {
    return Vue__default["default"].extend({
      name: "TConfigProvider",
      inject: {
        globalConfig: {
          "default": void 0
        }
      },
      computed: {
        global: function global() {
          var data = this.globalConfig || defaultGlobalConfig;
          return data[_componentName];
        },
        classPrefix: function classPrefix() {
          var _this$globalConfig;

          return ((_this$globalConfig = this.globalConfig) === null || _this$globalConfig === void 0 ? void 0 : _this$globalConfig.classPrefix) || (defaultGlobalConfig === null || defaultGlobalConfig === void 0 ? void 0 : defaultGlobalConfig.classPrefix);
        },
        componentName: function componentName() {
          var _this$globalConfig2;

          var classPrefix = ((_this$globalConfig2 = this.globalConfig) === null || _this$globalConfig2 === void 0 ? void 0 : _this$globalConfig2.classPrefix) || (defaultGlobalConfig === null || defaultGlobalConfig === void 0 ? void 0 : defaultGlobalConfig.classPrefix);
          return "".concat(classPrefix, "-").concat(_componentName);
        },
        commonSizeClassName: function commonSizeClassName() {
          return {
            small: "".concat(this.classPrefix, "-size-s"),
            medium: "".concat(this.classPrefix, "-size-m"),
            large: "".concat(this.classPrefix, "-size-l"),
            "default": "",
            xs: "".concat(this.classPrefix, "-size-xs"),
            xl: "".concat(this.classPrefix, "-size-xl"),
            block: "".concat(this.classPrefix, "-size-full-width")
          };
        },
        commonStatusClassName: function commonStatusClassName() {
          return {
            loading: "".concat(this.classPrefix, "-is-loading"),
            loadMore: "".concat(this.classPrefix, "-is-load-more"),
            disabled: "".concat(this.classPrefix, "-is-disabled"),
            focused: "".concat(this.classPrefix, "-is-focused"),
            success: "".concat(this.classPrefix, "-is-success"),
            error: "".concat(this.classPrefix, "-is-error"),
            warning: "".concat(this.classPrefix, "-is-warning"),
            selected: "".concat(this.classPrefix, "-is-selected"),
            active: "".concat(this.classPrefix, "-is-active"),
            checked: "".concat(this.classPrefix, "-is-checked"),
            current: "".concat(this.classPrefix, "-is-current"),
            hidden: "".concat(this.classPrefix, "-is-hidden"),
            visible: "".concat(this.classPrefix, "-is-visible"),
            expanded: "".concat(this.classPrefix, "-is-expanded"),
            indeterminate: "".concat(this.classPrefix, "-is-indeterminate")
          };
        }
      },
      methods: {
        t: function t(pattern, placement) {
          if (typeof pattern === "string") {
            if (!placement) return pattern;
            var regexp = /\{\s*([\w-]+)\s*\}/g;
            var translated = pattern.replace(regexp, function (match, key) {
              if (placement) {
                return String(placement[key]);
              }

              return "";
            });
            return translated;
          }

          if (typeof pattern === "function") {
            return pattern(placement);
          }

          return "";
        }
      }
    });
  }
  function getGlobalIconMixins() {
    return Vue__default["default"].extend({
      name: "TGlobalIcon",
      inject: {
        globalConfig: {
          "default": void 0
        }
      },
      methods: {
        useGlobalIcon: function useGlobalIcon(tdIcon) {
          var iconGlobalData = (this.globalConfig || defaultGlobalConfig).icon;
          var resultIcon = {};
          Object.keys(tdIcon).forEach(function (key) {
            resultIcon[key] = (iconGlobalData === null || iconGlobalData === void 0 ? void 0 : iconGlobalData[key]) || tdIcon[key];
          });
          return resultIcon;
        }
      }
    });
  }
  function getKeepAnimationMixins() {
    return Vue__default["default"].extend({
      name: "TKeepAnimation",
      inject: {
        globalConfig: {
          "default": void 0
        }
      },
      computed: {
        keepAnimation: function keepAnimation() {
          var animationConfig = {
            include: ["ripple", "expand", "fade"],
            exclude: []
          };

          if (this.globalConfig && this.globalConfig.animation) {
            animationConfig = mergeWith_1(animationConfig, this.globalConfig.animation, function (objValue, srcValue) {
              if (Array.isArray(objValue)) {
                return srcValue;
              }
            });
          }

          var isKeep = function isKeep(type) {
            return animationConfig && !animationConfig.exclude.includes(type) && animationConfig.include.includes(type);
          };

          return {
            ripple: isKeep("ripple"),
            expand: isKeep("expand"),
            fade: isKeep("fade")
          };
        }
      }
    });
  }
  function getClassPrefixMixins(_componentName2) {
    return Vue__default["default"].extend({
      name: "TClassPrefixProvider",
      inject: {
        globalConfig: {
          "default": void 0
        }
      },
      computed: {
        classPrefix: function classPrefix() {
          var _this$globalConfig3;

          return ((_this$globalConfig3 = this.globalConfig) === null || _this$globalConfig3 === void 0 ? void 0 : _this$globalConfig3.classPrefix) || defaultGlobalConfig.classPrefix;
        },
        componentName: function componentName() {
          var _this$globalConfig4;

          var classPrefix = ((_this$globalConfig4 = this.globalConfig) === null || _this$globalConfig4 === void 0 ? void 0 : _this$globalConfig4.classPrefix) || defaultGlobalConfig.classPrefix;
          return "".concat(classPrefix, "-").concat(_componentName2);
        },
        commonSizeClassName: function commonSizeClassName() {
          return {
            small: "".concat(this.classPrefix, "-size-s"),
            medium: "".concat(this.classPrefix, "-size-m"),
            large: "".concat(this.classPrefix, "-size-l"),
            "default": "",
            xs: "".concat(this.classPrefix, "-size-xs"),
            xl: "".concat(this.classPrefix, "-size-xl"),
            block: "".concat(this.classPrefix, "-size-full-width")
          };
        },
        commonStatusClassName: function commonStatusClassName() {
          return {
            loading: "".concat(this.classPrefix, "-is-loading"),
            loadMore: "".concat(this.classPrefix, "-is-load-more"),
            disabled: "".concat(this.classPrefix, "-is-disabled"),
            focused: "".concat(this.classPrefix, "-is-focused"),
            success: "".concat(this.classPrefix, "-is-success"),
            error: "".concat(this.classPrefix, "-is-error"),
            warning: "".concat(this.classPrefix, "-is-warning"),
            selected: "".concat(this.classPrefix, "-is-selected"),
            active: "".concat(this.classPrefix, "-is-active"),
            checked: "".concat(this.classPrefix, "-is-checked"),
            current: "".concat(this.classPrefix, "-is-current"),
            hidden: "".concat(this.classPrefix, "-is-hidden"),
            visible: "".concat(this.classPrefix, "-is-visible"),
            expanded: "".concat(this.classPrefix, "-is-expanded"),
            indeterminate: "".concat(this.classPrefix, "-is-indeterminate")
          };
        }
      }
    });
  }

  function mixins() {
    for (var _len = arguments.length, mixins2 = new Array(_len), _key = 0; _key < _len; _key++) {
      mixins2[_key] = arguments[_key];
    }

    return Vue__default["default"].extend({
      mixins: mixins2
    });
  }

  var classPrefixMixins$U = getClassPrefixMixins("loading");
  var GradientIcon = mixins(classPrefixMixins$U).extend({
    name: "TLoadingGradient",
    mounted: function mounted() {
      var _this = this;

      this.$nextTick(function () {
        _this.updateColor();
      });
    },
    updated: function updated() {
      this.updateColor();
    },
    methods: {
      updateColor: function updateColor() {
        var circleElem = this.$refs.circle;
        circleAdapter(circleElem);
      }
    },
    render: function render() {
      var h = arguments[0];
      var classes = ["".concat(this.classPrefix, "-loading__gradient"), "".concat(this.classPrefix, "-icon-loading")];
      return h("svg", {
        "class": classes,
        "attrs": {
          "viewBox": "0 0 14 14",
          "version": "1.1",
          "width": "1em",
          "height": "1em",
          "xmlns": "http://www.w3.org/2000/svg"
        }
      }, [h("foreignObject", {
        "attrs": {
          "x": "1",
          "y": "1",
          "width": "12",
          "height": "12"
        }
      }, [h("div", {
        "class": "".concat(this.classPrefix, "-loading__gradient-conic"),
        "ref": "circle"
      })])]);
    }
  });

  var performanceNow = createCommonjsModule(function (module) {
    // Generated by CoffeeScript 1.12.2
    (function () {
      var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

      if (typeof performance !== "undefined" && performance !== null && performance.now) {
        module.exports = function () {
          return performance.now();
        };
      } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
        module.exports = function () {
          return (getNanoSeconds() - nodeLoadTime) / 1e6;
        };

        hrtime = process.hrtime;

        getNanoSeconds = function getNanoSeconds() {
          var hr;
          hr = hrtime();
          return hr[0] * 1e9 + hr[1];
        };

        moduleLoadTime = getNanoSeconds();
        upTime = process.uptime() * 1e9;
        nodeLoadTime = moduleLoadTime - upTime;
      } else if (Date.now) {
        module.exports = function () {
          return Date.now() - loadTime;
        };

        loadTime = Date.now();
      } else {
        module.exports = function () {
          return new Date().getTime() - loadTime;
        };

        loadTime = new Date().getTime();
      }
    }).call(commonjsGlobal);
  });

  var root = typeof window === 'undefined' ? commonjsGlobal : window,
      vendors = ['moz', 'webkit'],
      suffix = 'AnimationFrame',
      raf = root['request' + suffix],
      caf = root['cancel' + suffix] || root['cancelRequest' + suffix];

  for (var i = 0; !raf && i < vendors.length; i++) {
    raf = root[vendors[i] + 'Request' + suffix];
    caf = root[vendors[i] + 'Cancel' + suffix] || root[vendors[i] + 'CancelRequest' + suffix];
  } // Some versions of FF have rAF but not cAF


  if (!raf || !caf) {
    var last$1 = 0,
        id = 0,
        queue = [],
        frameDuration = 1000 / 60;

    raf = function raf(callback) {
      if (queue.length === 0) {
        var _now = performanceNow(),
            next = Math.max(0, frameDuration - (_now - last$1));

        last$1 = next + _now;
        setTimeout(function () {
          var cp = queue.slice(0); // Clear queue here to prevent
          // callbacks from appending listeners
          // to the current frame's queue

          queue.length = 0;

          for (var i = 0; i < cp.length; i++) {
            if (!cp[i].cancelled) {
              try {
                cp[i].callback(last$1);
              } catch (e) {
                setTimeout(function () {
                  throw e;
                }, 0);
              }
            }
          }
        }, Math.round(next));
      }

      queue.push({
        handle: ++id,
        callback: callback,
        cancelled: false
      });
      return id;
    };

    caf = function caf(handle) {
      for (var i = 0; i < queue.length; i++) {
        if (queue[i].handle === handle) {
          queue[i].cancelled = true;
        }
      }
    };
  }

  var raf_1 = function raf_1(fn) {
    // Wrap in a new function to prevent
    // `cancel` potentially being assigned
    // to the native rAF function
    return raf.call(root, fn);
  };

  var cancel = function cancel() {
    caf.apply(root, arguments);
  };

  var polyfill = function polyfill(object) {
    if (!object) {
      object = root;
    }

    object.requestAnimationFrame = raf;
    object.cancelAnimationFrame = caf;
  };
  raf_1.cancel = cancel;
  raf_1.polyfill = polyfill;

  /** `Object#toString` result references. */

  var stringTag$3 = '[object String]';
  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a string, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */

  function isString(value) {
    return typeof value == 'string' || !isArray_1(value) && isObjectLike_1(value) && _baseGetTag(value) == stringTag$3;
  }

  var isString_1 = isString;

  var easeInOutCubic = function easeInOutCubic(current, start, end, duration) {
    var change = (end - start) / 2;
    var time = current / (duration / 2);

    if (time < 1) {
      return change * time * time * time + start;
    }

    time -= 2;
    return change * (time * time * time + 2) + start;
  };

  var isServer = Vue__default["default"].prototype.$isServer || typeof window === "undefined";
  var trim = function trim(str) {
    return (str || "").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, "");
  };
  var on$1 = function () {
    if (!isServer && document.addEventListener) {
      return function (element, event, handler, options) {
        if (element && event && handler) {
          element.addEventListener(event, handler, options);
          return function () {
            return off$1(element, event, handler, options);
          };
        }
      };
    }

    return function (element, event, handler) {
      if (element && event && handler) {
        element.attachEvent("on".concat(event), handler);
        return function () {
          return off$1(element, event, handler);
        };
      }
    };
  }();
  var off$1 = function () {
    if (!isServer && document.removeEventListener) {
      return function (element, event, handler, options) {
        if (element && event) {
          element.removeEventListener(event, handler, options);
        }
      };
    }

    return function (element, event, handler) {
      if (element && event) {
        element.detachEvent("on".concat(event), handler);
      }
    };
  }();
  function once(element, event, handler, options) {
    var handlerFn = typeof handler === "function" ? handler : handler.handleEvent;

    var callback = function callback(evt) {
      handlerFn(evt);
      off$1(element, event, callback, options);
    };

    on$1(element, event, callback, options);
  }
  function hasClass(el, cls) {
    if (!el || !cls) return false;
    if (cls.indexOf(" ") !== -1) throw new Error("className should not contain space.");

    if (el.classList) {
      return el.classList.contains(cls);
    }

    return " ".concat(el.className, " ").indexOf(" ".concat(cls, " ")) > -1;
  }
  function addClass(el, cls) {
    if (!el) return;
    var curClass = el.className;
    var classes = (cls || "").split(" ");

    for (var i = 0, j = classes.length; i < j; i++) {
      var clsName = classes[i];
      if (!clsName) continue;

      if (el.classList) {
        el.classList.add(clsName);
      } else if (!hasClass(el, clsName)) {
        curClass += " ".concat(clsName);
      }
    }

    if (!el.classList) {
      el.className = curClass;
    }
  }
  function removeClass(el, cls) {
    if (!el || !cls) return;
    var classes = cls.split(" ");
    var curClass = " ".concat(el.className, " ");

    for (var i = 0, j = classes.length; i < j; i++) {
      var clsName = classes[i];
      if (!clsName) continue;

      if (el.classList) {
        el.classList.remove(clsName);
      } else if (hasClass(el, clsName)) {
        curClass = curClass.replace(" ".concat(clsName, " "), " ");
      }
    }

    if (!el.classList) {
      el.className = trim(curClass);
    }
  }
  var getAttach = function getAttach(node, triggerNode) {
    var attachNode = typeof node === "function" ? node(triggerNode) : node;

    if (!attachNode) {
      return document.body;
    }

    if (isString_1(attachNode)) {
      return document.querySelector(attachNode);
    }

    if (attachNode instanceof HTMLElement) {
      return attachNode;
    }

    return document.body;
  };
  var getScrollContainer = function getScrollContainer() {
    var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "body";

    if (isString_1(container)) {
      return document.querySelector(container);
    }

    if (typeof container === "function") {
      return container();
    }

    return container;
  };

  function isWindow(obj) {
    return obj && obj === obj.window;
  }

  function getScroll(target, isLeft) {
    if (typeof window === "undefined" || !target) {
      return 0;
    }

    var method = isLeft ? "scrollLeft" : "scrollTop";
    var result = 0;

    if (isWindow(target)) {
      result = target[isLeft ? "pageXOffset" : "pageYOffset"];
    } else if (target instanceof Document) {
      result = target.documentElement[method];
    } else if (target) {
      result = target[method];
    }

    return result;
  }
  function scrollTo(target, opt) {
    var _opt$container = opt.container,
        container = _opt$container === void 0 ? window : _opt$container,
        _opt$duration = opt.duration,
        duration = _opt$duration === void 0 ? 450 : _opt$duration,
        _opt$easing = opt.easing,
        easing = _opt$easing === void 0 ? easeInOutCubic : _opt$easing;
    var scrollTop = getScroll(container);
    var startTime = Date.now();
    return new Promise(function (res) {
      var fnc = function fnc() {
        var timestamp = Date.now();
        var time = timestamp - startTime;
        var nextScrollTop = easing(Math.min(time, duration), scrollTop, target, duration);

        if (isWindow(container)) {
          container.scrollTo(window.pageXOffset, nextScrollTop);
        } else if (container instanceof HTMLDocument || container.constructor.name === "HTMLDocument") {
          container.documentElement.scrollTop = nextScrollTop;
        } else {
          container.scrollTop = nextScrollTop;
        }

        if (time < duration) {
          raf_1(fnc);
        } else {
          raf_1(res);
        }
      };

      raf_1(fnc);
    });
  }
  var isNodeOverflow = function isNodeOverflow(ele) {
    var _ele$clientWidth = ele.clientWidth,
        clientWidth = _ele$clientWidth === void 0 ? 0 : _ele$clientWidth,
        _ele$scrollWidth = ele.scrollWidth,
        scrollWidth = _ele$scrollWidth === void 0 ? 0 : _ele$scrollWidth;
    return scrollWidth > clientWidth;
  };
  var removeDom = function removeDom(el) {
    if (el.remove) {
      el.remove();
    } else {
      el.parentNode.removeChild(el);
    }
  };

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }

    return result;
  }

  var _arrayMap = arrayMap;

  /** `Object#toString` result references. */

  var symbolTag$3 = '[object Symbol]';
  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */

  function isSymbol(value) {
    return _typeof$1(value) == 'symbol' || isObjectLike_1(value) && _baseGetTag(value) == symbolTag$3;
  }

  var isSymbol_1 = isSymbol;

  /** Used as references for various `Number` constants. */

  var INFINITY$2 = 1 / 0;
  /** Used to convert symbols to primitives and strings. */

  var symbolProto$2 = _Symbol ? _Symbol.prototype : undefined,
      symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined;
  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */

  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }

    if (isArray_1(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return _arrayMap(value, baseToString) + '';
    }

    if (isSymbol_1(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY$2 ? '-0' : result;
  }

  var _baseToString = baseToString;

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */

  function toString(value) {
    return value == null ? '' : _baseToString(value);
  }

  var toString_1 = toString;

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : length + start;
    }

    end = end > length ? length : end;

    if (end < 0) {
      end += length;
    }

    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);

    while (++index < length) {
      result[index] = array[index + start];
    }

    return result;
  }

  var _baseSlice = baseSlice;

  /**
   * Casts `array` to a slice if it's needed.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {number} start The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the cast slice.
   */

  function castSlice(array, start, end) {
    var length = array.length;
    end = end === undefined ? length : end;
    return !start && end >= length ? array : _baseSlice(array, start, end);
  }

  var _castSlice = castSlice;

  /** Used to compose unicode character classes. */
  var rsAstralRange$3 = "\\ud800-\\udfff",
      rsComboMarksRange$4 = "\\u0300-\\u036f",
      reComboHalfMarksRange$4 = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange$4 = "\\u20d0-\\u20ff",
      rsComboRange$4 = rsComboMarksRange$4 + reComboHalfMarksRange$4 + rsComboSymbolsRange$4,
      rsVarRange$3 = "\\ufe0e\\ufe0f";
  /** Used to compose unicode capture groups. */

  var rsZWJ$3 = "\\u200d";
  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */

  var reHasUnicode = RegExp('[' + rsZWJ$3 + rsAstralRange$3 + rsComboRange$4 + rsVarRange$3 + ']');
  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */

  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  var _hasUnicode = hasUnicode;

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  var _asciiToArray = asciiToArray;

  /** Used to compose unicode character classes. */
  var rsAstralRange$2 = "\\ud800-\\udfff",
      rsComboMarksRange$3 = "\\u0300-\\u036f",
      reComboHalfMarksRange$3 = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange$3 = "\\u20d0-\\u20ff",
      rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3,
      rsVarRange$2 = "\\ufe0e\\ufe0f";
  /** Used to compose unicode capture groups. */

  var rsAstral$1 = '[' + rsAstralRange$2 + ']',
      rsCombo$3 = '[' + rsComboRange$3 + ']',
      rsFitz$2 = "\\ud83c[\\udffb-\\udfff]",
      rsModifier$2 = '(?:' + rsCombo$3 + '|' + rsFitz$2 + ')',
      rsNonAstral$2 = '[^' + rsAstralRange$2 + ']',
      rsRegional$2 = "(?:\\ud83c[\\udde6-\\uddff]){2}",
      rsSurrPair$2 = "[\\ud800-\\udbff][\\udc00-\\udfff]",
      rsZWJ$2 = "\\u200d";
  /** Used to compose unicode regexes. */

  var reOptMod$2 = rsModifier$2 + '?',
      rsOptVar$2 = '[' + rsVarRange$2 + ']?',
      rsOptJoin$2 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$2, rsRegional$2, rsSurrPair$2].join('|') + ')' + rsOptVar$2 + reOptMod$2 + ')*',
      rsSeq$2 = rsOptVar$2 + reOptMod$2 + rsOptJoin$2,
      rsSymbol$1 = '(?:' + [rsNonAstral$2 + rsCombo$3 + '?', rsCombo$3, rsRegional$2, rsSurrPair$2, rsAstral$1].join('|') + ')';
  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

  var reUnicode$1 = RegExp(rsFitz$2 + '(?=' + rsFitz$2 + ')|' + rsSymbol$1 + rsSeq$2, 'g');
  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

  function unicodeToArray(string) {
    return string.match(reUnicode$1) || [];
  }

  var _unicodeToArray = unicodeToArray;

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */

  function stringToArray(string) {
    return _hasUnicode(string) ? _unicodeToArray(string) : _asciiToArray(string);
  }

  var _stringToArray = stringToArray;

  /**
   * Creates a function like `_.lowerFirst`.
   *
   * @private
   * @param {string} methodName The name of the `String` case method to use.
   * @returns {Function} Returns the new case function.
   */

  function createCaseFirst(methodName) {
    return function (string) {
      string = toString_1(string);
      var strSymbols = _hasUnicode(string) ? _stringToArray(string) : undefined;
      var chr = strSymbols ? strSymbols[0] : string.charAt(0);
      var trailing = strSymbols ? _castSlice(strSymbols, 1).join('') : string.slice(1);
      return chr[methodName]() + trailing;
    };
  }

  var _createCaseFirst = createCaseFirst;

  /**
   * Converts the first character of `string` to upper case.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.upperFirst('fred');
   * // => 'Fred'
   *
   * _.upperFirst('FRED');
   * // => 'FRED'
   */

  var upperFirst = _createCaseFirst('toUpperCase');
  var upperFirst_1 = upperFirst;

  /**
   * Converts the first character of `string` to upper case and the remaining
   * to lower case.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to capitalize.
   * @returns {string} Returns the capitalized string.
   * @example
   *
   * _.capitalize('FRED');
   * // => 'Fred'
   */

  function capitalize(string) {
    return upperFirst_1(toString_1(string).toLowerCase());
  }

  var capitalize_1 = capitalize;

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }

    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }

    return accumulator;
  }

  var _arrayReduce = arrayReduce;

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function (key) {
      return object == null ? undefined : object[key];
    };
  }

  var _basePropertyOf = basePropertyOf;

  /** Used to map Latin Unicode letters to basic Latin letters. */

  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',
    '\xc1': 'A',
    '\xc2': 'A',
    '\xc3': 'A',
    '\xc4': 'A',
    '\xc5': 'A',
    '\xe0': 'a',
    '\xe1': 'a',
    '\xe2': 'a',
    '\xe3': 'a',
    '\xe4': 'a',
    '\xe5': 'a',
    '\xc7': 'C',
    '\xe7': 'c',
    '\xd0': 'D',
    '\xf0': 'd',
    '\xc8': 'E',
    '\xc9': 'E',
    '\xca': 'E',
    '\xcb': 'E',
    '\xe8': 'e',
    '\xe9': 'e',
    '\xea': 'e',
    '\xeb': 'e',
    '\xcc': 'I',
    '\xcd': 'I',
    '\xce': 'I',
    '\xcf': 'I',
    '\xec': 'i',
    '\xed': 'i',
    '\xee': 'i',
    '\xef': 'i',
    '\xd1': 'N',
    '\xf1': 'n',
    '\xd2': 'O',
    '\xd3': 'O',
    '\xd4': 'O',
    '\xd5': 'O',
    '\xd6': 'O',
    '\xd8': 'O',
    '\xf2': 'o',
    '\xf3': 'o',
    '\xf4': 'o',
    '\xf5': 'o',
    '\xf6': 'o',
    '\xf8': 'o',
    '\xd9': 'U',
    '\xda': 'U',
    '\xdb': 'U',
    '\xdc': 'U',
    '\xf9': 'u',
    '\xfa': 'u',
    '\xfb': 'u',
    '\xfc': 'u',
    '\xdd': 'Y',
    '\xfd': 'y',
    '\xff': 'y',
    '\xc6': 'Ae',
    '\xe6': 'ae',
    '\xde': 'Th',
    '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    "\u0100": 'A',
    "\u0102": 'A',
    "\u0104": 'A',
    "\u0101": 'a',
    "\u0103": 'a',
    "\u0105": 'a',
    "\u0106": 'C',
    "\u0108": 'C',
    "\u010A": 'C',
    "\u010C": 'C',
    "\u0107": 'c',
    "\u0109": 'c',
    "\u010B": 'c',
    "\u010D": 'c',
    "\u010E": 'D',
    "\u0110": 'D',
    "\u010F": 'd',
    "\u0111": 'd',
    "\u0112": 'E',
    "\u0114": 'E',
    "\u0116": 'E',
    "\u0118": 'E',
    "\u011A": 'E',
    "\u0113": 'e',
    "\u0115": 'e',
    "\u0117": 'e',
    "\u0119": 'e',
    "\u011B": 'e',
    "\u011C": 'G',
    "\u011E": 'G',
    "\u0120": 'G',
    "\u0122": 'G',
    "\u011D": 'g',
    "\u011F": 'g',
    "\u0121": 'g',
    "\u0123": 'g',
    "\u0124": 'H',
    "\u0126": 'H',
    "\u0125": 'h',
    "\u0127": 'h',
    "\u0128": 'I',
    "\u012A": 'I',
    "\u012C": 'I',
    "\u012E": 'I',
    "\u0130": 'I',
    "\u0129": 'i',
    "\u012B": 'i',
    "\u012D": 'i',
    "\u012F": 'i',
    "\u0131": 'i',
    "\u0134": 'J',
    "\u0135": 'j',
    "\u0136": 'K',
    "\u0137": 'k',
    "\u0138": 'k',
    "\u0139": 'L',
    "\u013B": 'L',
    "\u013D": 'L',
    "\u013F": 'L',
    "\u0141": 'L',
    "\u013A": 'l',
    "\u013C": 'l',
    "\u013E": 'l',
    "\u0140": 'l',
    "\u0142": 'l',
    "\u0143": 'N',
    "\u0145": 'N',
    "\u0147": 'N',
    "\u014A": 'N',
    "\u0144": 'n',
    "\u0146": 'n',
    "\u0148": 'n',
    "\u014B": 'n',
    "\u014C": 'O',
    "\u014E": 'O',
    "\u0150": 'O',
    "\u014D": 'o',
    "\u014F": 'o',
    "\u0151": 'o',
    "\u0154": 'R',
    "\u0156": 'R',
    "\u0158": 'R',
    "\u0155": 'r',
    "\u0157": 'r',
    "\u0159": 'r',
    "\u015A": 'S',
    "\u015C": 'S',
    "\u015E": 'S',
    "\u0160": 'S',
    "\u015B": 's',
    "\u015D": 's',
    "\u015F": 's',
    "\u0161": 's',
    "\u0162": 'T',
    "\u0164": 'T',
    "\u0166": 'T',
    "\u0163": 't',
    "\u0165": 't',
    "\u0167": 't',
    "\u0168": 'U',
    "\u016A": 'U',
    "\u016C": 'U',
    "\u016E": 'U',
    "\u0170": 'U',
    "\u0172": 'U',
    "\u0169": 'u',
    "\u016B": 'u',
    "\u016D": 'u',
    "\u016F": 'u',
    "\u0171": 'u',
    "\u0173": 'u',
    "\u0174": 'W',
    "\u0175": 'w',
    "\u0176": 'Y',
    "\u0177": 'y',
    "\u0178": 'Y',
    "\u0179": 'Z',
    "\u017B": 'Z',
    "\u017D": 'Z',
    "\u017A": 'z',
    "\u017C": 'z',
    "\u017E": 'z',
    "\u0132": 'IJ',
    "\u0133": 'ij',
    "\u0152": 'Oe',
    "\u0153": 'oe',
    "\u0149": "'n",
    "\u017F": 's'
  };
  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */

  var deburrLetter = _basePropertyOf(deburredLetters);
  var _deburrLetter = deburrLetter;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */

  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
  /** Used to compose unicode character classes. */

  var rsComboMarksRange$2 = "\\u0300-\\u036f",
      reComboHalfMarksRange$2 = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange$2 = "\\u20d0-\\u20ff",
      rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2;
  /** Used to compose unicode capture groups. */

  var rsCombo$2 = '[' + rsComboRange$2 + ']';
  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */

  var reComboMark = RegExp(rsCombo$2, 'g');
  /**
   * Deburrs `string` by converting
   * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
   * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
   * letters to basic Latin letters and removing
   * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to deburr.
   * @returns {string} Returns the deburred string.
   * @example
   *
   * _.deburr('déjà vu');
   * // => 'deja vu'
   */

  function deburr(string) {
    string = toString_1(string);
    return string && string.replace(reLatin, _deburrLetter).replace(reComboMark, '');
  }

  var deburr_1 = deburr;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */

  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  var _asciiWords = asciiWords;

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */

  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  var _hasUnicodeWord = hasUnicodeWord;

  /** Used to compose unicode character classes. */
  var rsAstralRange$1 = "\\ud800-\\udfff",
      rsComboMarksRange$1 = "\\u0300-\\u036f",
      reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange$1 = "\\u20d0-\\u20ff",
      rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
      rsDingbatRange = "\\u2700-\\u27bf",
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = "\\u2000-\\u206f",
      rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange$1 = "\\ufe0e\\ufe0f",
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
  /** Used to compose unicode capture groups. */

  var rsApos$1 = "['\u2019]",
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo$1 = '[' + rsComboRange$1 + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange$1 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz$1 = "\\ud83c[\\udffb-\\udfff]",
      rsModifier$1 = '(?:' + rsCombo$1 + '|' + rsFitz$1 + ')',
      rsNonAstral$1 = '[^' + rsAstralRange$1 + ']',
      rsRegional$1 = "(?:\\ud83c[\\udde6-\\uddff]){2}",
      rsSurrPair$1 = "[\\ud800-\\udbff][\\udc00-\\udfff]",
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ$1 = "\\u200d";
  /** Used to compose unicode regexes. */

  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod$1 = rsModifier$1 + '?',
      rsOptVar$1 = '[' + rsVarRange$1 + ']?',
      rsOptJoin$1 = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
      rsEmoji = '(?:' + [rsDingbat, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsSeq$1;
  /** Used to match complex or compound words. */

  var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');
  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */

  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  var _unicodeWords = unicodeWords;

  /**
   * Splits `string` into an array of its words.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to inspect.
   * @param {RegExp|string} [pattern] The pattern to match words.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the words of `string`.
   * @example
   *
   * _.words('fred, barney, & pebbles');
   * // => ['fred', 'barney', 'pebbles']
   *
   * _.words('fred, barney, & pebbles', /[^, ]+/g);
   * // => ['fred', 'barney', '&', 'pebbles']
   */

  function words(string, pattern, guard) {
    string = toString_1(string);
    pattern = guard ? undefined : pattern;

    if (pattern === undefined) {
      return _hasUnicodeWord(string) ? _unicodeWords(string) : _asciiWords(string);
    }

    return string.match(pattern) || [];
  }

  var words_1 = words;

  /** Used to compose unicode capture groups. */

  var rsApos = "['\u2019]";
  /** Used to match apostrophes. */

  var reApos = RegExp(rsApos, 'g');
  /**
   * Creates a function like `_.camelCase`.
   *
   * @private
   * @param {Function} callback The function to combine each word.
   * @returns {Function} Returns the new compounder function.
   */

  function createCompounder(callback) {
    return function (string) {
      return _arrayReduce(words_1(deburr_1(string).replace(reApos, '')), callback, '');
    };
  }

  var _createCompounder = createCompounder;

  /**
   * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the camel cased string.
   * @example
   *
   * _.camelCase('Foo Bar');
   * // => 'fooBar'
   *
   * _.camelCase('--foo-bar--');
   * // => 'fooBar'
   *
   * _.camelCase('__FOO_BAR__');
   * // => 'fooBar'
   */

  var camelCase = _createCompounder(function (result, word, index) {
    word = word.toLowerCase();
    return result + (index ? capitalize_1(word) : word);
  });
  var camelCase_1 = camelCase;

  /**
   * Converts `string` to
   * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the kebab cased string.
   * @example
   *
   * _.kebabCase('Foo Bar');
   * // => 'foo-bar'
   *
   * _.kebabCase('fooBar');
   * // => 'foo-bar'
   *
   * _.kebabCase('__FOO_BAR__');
   * // => 'foo-bar'
   */

  var kebabCase = _createCompounder(function (result, word, index) {
    return result + (index ? '-' : '') + word.toLowerCase();
  });
  var kebabCase_1 = kebabCase;

  var RenderJsTypes = [Function, String, Number, Boolean, Object, Array];

  function handleSlots$1(vm, params, name) {
    var _vm$$scopedSlots$came, _vm$$scopedSlots, _vm$$scopedSlots$keba, _vm$$scopedSlots2;

    var node = (_vm$$scopedSlots$came = (_vm$$scopedSlots = vm.$scopedSlots)[camelCase_1(name)]) === null || _vm$$scopedSlots$came === void 0 ? void 0 : _vm$$scopedSlots$came.call(_vm$$scopedSlots, params);
    if (node) return node;
    node = (_vm$$scopedSlots$keba = (_vm$$scopedSlots2 = vm.$scopedSlots)[kebabCase_1(name)]) === null || _vm$$scopedSlots$keba === void 0 ? void 0 : _vm$$scopedSlots$keba.call(_vm$$scopedSlots2, params);
    if (node) return node;
    return null;
  }

  var getValueRenderWay = function getValueRenderWay(value) {
    if (["string", "number", "boolean"].includes(_typeof$1(value))) return "text"
    /* Text */
    ;

    if (_typeof$1(value) === "object") {
      if (!(value instanceof Array) && value && value.context instanceof Vue__default["default"]) {
        return "vnode"
        /* VNode */
        ;
      }

      return "jsonstring"
      /* JsonString */
      ;
    }

    return "unknown"
    /* Unknown */
    ;
  };

  Vue__default["default"].extend({
    name: "render-tnode-template",
    functional: true,
    props: {
      render: RenderJsTypes,
      params: null
    },
    render: function render(h, ctx) {
      var _renderMap;

      var _ctx$props = ctx.props,
          render = _ctx$props.render,
          params = _ctx$props.params;
      var renderResult = typeof render === "function" ? render(h, params) : render;
      var renderWay = getValueRenderWay(renderResult);

      var renderText = function renderText(c) {
        return ctx.__proto__._v(c);
      };

      var renderMap = (_renderMap = {}, _defineProperty$3(_renderMap, "text"
      /* Text */
      , function text(c) {
        return renderText(c);
      }), _defineProperty$3(_renderMap, "jsonstring"
      /* JsonString */
      , function jsonstring(c) {
        return renderText(JSON.stringify(c, null, 2));
      }), _defineProperty$3(_renderMap, "vnode"
      /* VNode */
      , function vnode(c) {
        return c;
      }), _renderMap);
      return renderMap[renderWay] ? renderMap[renderWay](renderResult) : h();
    }
  });
  var renderTNodeJSX = function renderTNodeJSX(vm, name, options) {
    var params = _typeof$1(options) === "object" && "params" in options ? options.params : null;
    var defaultNode = _typeof$1(options) === "object" && "defaultNode" in options ? options.defaultNode : options;
    var propsNode = vm[name];
    if (propsNode === false) return;

    if (propsNode === true && defaultNode) {
      return handleSlots$1(vm, params, name) || defaultNode;
    }

    if (typeof propsNode === "function") return propsNode(vm.$createElement, params);
    var isPropsEmpty = [void 0, params, ""].includes(propsNode);

    if (isPropsEmpty && (vm.$scopedSlots[camelCase_1(name)] || vm.$scopedSlots[kebabCase_1(name)])) {
      return handleSlots$1(vm, params, name);
    }

    return propsNode;
  };
  var renderTNodeJSXDefault = function renderTNodeJSXDefault(vm, name, options) {
    var defaultNode = _typeof$1(options) === "object" && "defaultNode" in options ? options.defaultNode : options;
    return renderTNodeJSX(vm, name, options) || defaultNode;
  };
  var renderContent = function renderContent(vm, name1, name2, options) {
    var params = _typeof$1(options) === "object" && "params" in options ? options.params : null;
    var defaultNode = _typeof$1(options) === "object" && "defaultNode" in options && options.defaultNode;
    defaultNode = _typeof$1(options) === "object" && "context" in options && options;
    var toParams = params ? {
      params: params
    } : void 0;
    var node1 = renderTNodeJSX(vm, name1, toParams);
    var node2 = renderTNodeJSX(vm, name2, toParams);
    var r = [void 0, null, ""].includes(node1) ? node2 : node1;
    return [void 0, null, ""].includes(r) ? defaultNode : r;
  };

  var TransferDom = {
    inserted: function inserted(el, binding) {
      if (!binding.value) return;
      var parentNode = getAttach(binding.value);
      parentNode === null || parentNode === void 0 ? void 0 : parentNode.appendChild(el);
    }
  };

  var props$1b = {
    attach: {
      type: [String, Function],
      "default": ""
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    delay: {
      type: Number,
      "default": 0
    },
    fullscreen: Boolean,
    indicator: {
      type: [Boolean, Function],
      "default": true
    },
    inheritColor: Boolean,
    loading: {
      type: Boolean,
      "default": true
    },
    preventScrollThrough: {
      type: Boolean,
      "default": true
    },
    showOverlay: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium"
    },
    text: {
      type: [String, Function]
    },
    zIndex: {
      type: Number
    }
  };

  function ownKeys$33(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$32(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$33(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$33(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$T = getClassPrefixMixins("loading");
  var _Loading = mixins(classPrefixMixins$T).extend({
    name: "TLoading",
    props: _objectSpread$32({}, props$1b),
    directives: {
      TransferDom: TransferDom
    },
    data: function data() {
      return {
        delayShowLoading: false
      };
    },
    created: function created() {
      this.delay && this.countDelay();
    },
    watch: {
      loading: {
        handler: function handler(value) {
          if (value) {
            this.countDelay();
            this.lockFullscreen && addClass(document.body, "".concat(this.componentName, "--lock"));
          } else {
            this.lockFullscreen && removeClass(document.body, "".concat(this.componentName, "--lock"));
          }
        },
        immediate: true
      }
    },
    computed: {
      styles: function styles() {
        var styles = {};

        if (this.zIndex !== void 0) {
          styles.zIndex = this.zIndex;
        }

        if (!["small", "medium", "large"].includes(this.size)) {
          styles["font-size"] = this.size;
        }

        return styles;
      },
      showText: function showText() {
        return Boolean(this.text || this.$scopedSlots.text);
      },
      baseClasses: function baseClasses() {
        return ["".concat(this.componentName, "--center"), this.commonSizeClassName[this.size], _defineProperty$3({}, "".concat(this.componentName, "--inherit-color"), this.inheritColor)];
      },
      hasContent: function hasContent() {
        return Boolean(this["default"] || this.$scopedSlots["default"] || this.content || this.$scopedSlots.content);
      },
      withContentClasses: function withContentClasses() {
        return this.baseClasses.concat([this.componentName, "".concat(this.componentName, "--full"), _defineProperty$3({}, "".concat(this.componentName, "__overlay"), this.showOverlay)]);
      },
      fullScreenClasses: function fullScreenClasses() {
        return [this.componentName, "".concat(this.componentName, "__fullscreen"), "".concat(this.componentName, "--center"), "".concat(this.componentName, "__overlay")];
      },
      attachClasses: function attachClasses() {
        return this.baseClasses.concat([this.componentName, "".concat(this.componentName, "--full"), _defineProperty$3({}, "".concat(this.componentName, "__overlay"), this.showOverlay)]);
      },
      normalClasses: function normalClasses() {
        return this.baseClasses.concat([this.componentName]);
      },
      lockFullscreen: function lockFullscreen() {
        return this.preventScrollThrough && this.fullscreen;
      },
      delayCounted: function delayCounted() {
        return Boolean(!this.delay || this.delay && this.delayShowLoading);
      },
      showWrapLoading: function showWrapLoading() {
        return this.hasContent && this.loading && this.delayCounted;
      },
      showFullScreenLoading: function showFullScreenLoading() {
        return this.fullscreen && this.loading && this.delayCounted;
      },
      showAttachedLoading: function showAttachedLoading() {
        return this.attach && this.loading && this.delayCounted;
      }
    },
    methods: {
      countDelay: function countDelay() {
        var _this = this;

        this.delayShowLoading = false;
        var timer = setTimeout(function () {
          _this.delayShowLoading = true;
          clearTimeout(timer);
        }, this.delay);
      }
    },
    render: function render() {
      var h = arguments[0];
      var defaultIndicator = h(GradientIcon, {
        "attrs": {
          "size": this.size
        }
      });
      var indicator = this.loading && renderTNodeJSX(this, "indicator", defaultIndicator);
      var text = this.showText && h("div", {
        "class": "".concat(this.classPrefix, "-loading__text")
      }, [renderTNodeJSX(this, "text")]);

      if (this.fullscreen) {
        if (!this.showFullScreenLoading) return null;
        return h("div", {
          "class": this.fullScreenClasses,
          "style": this.styles,
          "directives": [{
            name: "transfer-dom",
            value: this.attach
          }]
        }, [h("div", {
          "class": this.baseClasses
        }, [indicator, text])]);
      }

      if (this.hasContent) {
        return h("div", {
          "class": "".concat(this.componentName, "__parent")
        }, [renderContent(this, "default", "content"), this.showWrapLoading && h("div", {
          "class": this.withContentClasses,
          "style": this.styles
        }, [indicator, text])]);
      }

      if (this.attach) {
        if (!this.showAttachedLoading) return;
        return h("div", {
          "class": this.attachClasses,
          "style": this.styles,
          "directives": [{
            name: "transfer-dom",
            value: this.attach
          }]
        }, [indicator, text]);
      }

      return h("div", {
        "class": this.normalClasses,
        "style": this.styles
      }, [indicator, text]);
    }
  });

  function ownKeys$32(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$31(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$32(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$32(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function withInstall(comp, dep) {
    var _c$options, _Vue$_installedPlugin;

    var c = comp;
    var name = (c === null || c === void 0 ? void 0 : (_c$options = c.options) === null || _c$options === void 0 ? void 0 : _c$options.name) || c.name;

    c.install = function (Vue2, config) {
      var defaults = {
        prefix: "t"
      };

      var installConfig = _objectSpread$31(_objectSpread$31({}, defaults), config);

      var defaultPrefix = capitalize_1(defaults.prefix);
      var componentName = name.replace(defaultPrefix, "").replace("-mapprops", "");
      componentName = capitalize_1(installConfig.prefix) + componentName;
      Vue2.component(componentName, comp);
    };

    if (dep && (Vue__default["default"] === null || Vue__default["default"] === void 0 ? void 0 : (_Vue$_installedPlugin = Vue__default["default"]._installedPlugins) === null || _Vue$_installedPlugin === void 0 ? void 0 : _Vue$_installedPlugin.indexOf(dep)) === -1) {
      Vue__default["default"].use(dep);
    }

    return comp;
  }

  var prefix = "t";

  function ownKeys$31(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$30(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$31(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$31(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var lockClass = "".concat(prefix, "-loading--lock");
  var fullScreenLoadingInstance = null;

  function createLoading(options) {
    var props = _objectSpread$30({}, options);

    var loading = new _Loading({
      propsData: _objectSpread$30({}, props)
    }).$mount();
    var attach = getAttach(props.attach);

    if (attach) {
      attach.appendChild(loading.$el);
    } else {
      console.error("attach is not exist");
    }

    var loadingInstance = {
      hide: function hide() {
        loading.loading = false;
        loading.$el.parentNode.removeChild(loading.$el);
      }
    };
    return loadingInstance;
  }

  function produceLoading(props) {
    if (props === true) {
      fullScreenLoadingInstance = createLoading({
        fullscreen: true,
        loading: true,
        attach: "body"
      });
      return fullScreenLoadingInstance;
    }

    if (props === false) {
      removeClass(document.body, lockClass);
      fullScreenLoadingInstance.hide();
      fullScreenLoadingInstance = null;
      return;
    }

    return createLoading(props);
  }

  var LoadingPlugin = produceLoading;

  LoadingPlugin.install = function () {
    Vue__default["default"].prototype.$loading = produceLoading;
  };

  var Loading = withInstall(_Loading);

  var props$1a = {
    block: Boolean,
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    href: String,
    ghost: Boolean,
    icon: {
      type: Function
    },
    loading: Boolean,
    shape: {
      type: String,
      "default": "rectangle",
      validator: function validator(val) {
        return ["rectangle", "square", "round", "circle"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    tag: {
      type: String,
      "default": void 0,
      validator: function validator(val) {
        return ["button", "a", "div"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": void 0,
      validator: function validator(val) {
        return ["default", "primary", "danger", "warning", "success"].includes(val);
      }
    },
    type: {
      type: String,
      "default": "button",
      validator: function validator(val) {
        return ["submit", "reset", "button"].includes(val);
      }
    },
    variant: {
      type: String,
      "default": "base",
      validator: function validator(val) {
        return ["base", "outline", "dashed", "text"].includes(val);
      }
    },
    onClick: Function
  };

  var Ripple = {
    startTimeId: null,
    finishTimeId: null,
    inserted: function inserted(el, binding) {
      if (binding.value === false) return;
      var period = 200;
      var defaultBg = "rgba(0, 0, 0, 0.35)";
      var bg = binding.value === true || binding.value == null ? defaultBg : binding.value;
      var rippleContainer = document.createElement("div");
      var hasCreateContainer = false;
      var count = 0;
      el.addEventListener("pointerdown", function (e) {
        if (el.classList.contains("".concat(prefix, "-is-active")) || el.classList.contains("".concat(prefix, "-is-disabled")) || el.classList.contains("".concat(prefix, "-is-checked"))) {
          return;
        }

        if (e.button !== 0) return;

        if (bg === defaultBg && el !== null && el !== void 0 && el.dataset.ripple) {
          bg = el.dataset.ripple;
        }

        var cssVariable = getComputedStyle(el).getPropertyValue("--ripple-color");

        if (cssVariable) {
          bg = cssVariable;
        }

        var elBorder = parseInt(getComputedStyle(el).borderWidth.replace("px", ""), 10);
        var border = elBorder > 0 ? elBorder : 0;
        var width = el.offsetWidth;
        var height = el.offsetHeight;
        var style = getComputedStyle(el);

        if (!hasCreateContainer) {
          hasCreateContainer = true;
          setStyle(rippleContainer, {
            position: "absolute",
            left: "".concat(0 - border, "px"),
            top: "".concat(0 - border, "px"),
            width: "".concat(width, "px"),
            height: "".concat(height, "px"),
            borderRadius: style.borderRadius,
            pointerEvents: "none",
            overflow: "hidden"
          });
          el.appendChild(rippleContainer);
        }

        var ripple = document.createElement("div");
        setStyle(ripple, {
          marginTop: "0",
          marginLeft: "0",
          right: "".concat(width, "px"),
          width: "".concat(width + 20, "px"),
          height: "100%",
          transition: "transform ".concat(period, "ms cubic-bezier(.38, 0, .24, 1), background ").concat(period * 2, "ms linear"),
          transform: "skewX(-8deg)",
          pointerEvents: "none",
          position: "absolute",
          zIndex: "0",
          backgroundColor: bg,
          opacity: "0.9"
        });
        var elMap = /* @__PURE__ */new WeakMap();

        for (var n = el.children.length, i = 0; i < n; ++i) {
          var child = el.children[i];

          if (child.style.zIndex === "" && child !== rippleContainer) {
            child.style.zIndex = "1";
            elMap.set(child, true);
          }
        }

        var initPosition = el.style.position ? el.style.position : getComputedStyle(el).position;

        if (initPosition === "" || initPosition === "static") {
          el.style.position = "relative";
        }

        rippleContainer.insertBefore(ripple, rippleContainer.firstChild);
        count += 1;
        clearTimeout(Ripple.startTimeId);
        Ripple.startTimeId = setTimeout(function () {
          ripple.style.transform = "translateX(".concat(width, "px)");
        }, 0);

        var handleClearRipple = function handleClearRipple() {
          ripple.style.backgroundColor = "rgba(0, 0, 0, 0)";
          el.removeEventListener("pointerup", handleClearRipple, false);
          el.removeEventListener("pointerleave", handleClearRipple, false);
          setTimeout(function () {
            rippleContainer.removeChild(ripple);
            count -= 1;
            if (count > 0) return;
            el.style.position = initPosition !== "static" ? initPosition : "";

            for (var _n = el.children.length, _i = 0; _i < _n; ++_i) {
              var _child = el.children[_i];

              if (elMap.has(_child)) {
                _child.style.zIndex = "";
                elMap["delete"](_child);
              }
            }

            el.removeChild(rippleContainer);
            hasCreateContainer = false;
          }, period * 2 + 100);
        };

        el.addEventListener("pointerup", handleClearRipple, false);
        el.addEventListener("pointerleave", handleClearRipple, false);
      });
    }
  };

  function ownKeys$30(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2$(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$30(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$30(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var keepAnimationMixins$8 = getKeepAnimationMixins();
  var classPrefixMixins$S = getClassPrefixMixins("button");
  var TButton = mixins(keepAnimationMixins$8, classPrefixMixins$S).extend({
    name: "TButton",
    props: props$1a,
    directives: {
      ripple: Ripple
    },
    render: function render(h) {
      var _ref,
          _this = this;

      var buttonContent = renderContent(this, "default", "content");
      var icon = this.loading ? h(Loading, {
        "attrs": {
          "inheritColor": true
        }
      }) : renderTNodeJSX(this, "icon");
      var disabled = this.disabled || this.loading;
      var theme = this.theme;

      if (!this.theme) {
        if (this.variant === "base") {
          theme = "primary";
        } else {
          theme = "default";
        }
      }

      var buttonClass = ["".concat(this.componentName), this.commonSizeClassName[this.size], "".concat(this.componentName, "--variant-").concat(this.variant), "".concat(this.componentName, "--theme-").concat(theme), (_ref = {}, _defineProperty$3(_ref, this.commonStatusClassName.disabled, disabled), _defineProperty$3(_ref, this.commonStatusClassName.loading, this.loading), _defineProperty$3(_ref, "".concat(this.componentName, "--shape-").concat(this.shape), this.shape !== "rectangle"), _defineProperty$3(_ref, "".concat(this.componentName, "--ghost"), this.ghost), _defineProperty$3(_ref, this.commonSizeClassName.block, this.block), _ref)];
      buttonContent = buttonContent ? h("span", {
        "class": "".concat(this.componentName, "__text")
      }, [buttonContent]) : "";

      if (icon) {
        buttonContent = [icon, buttonContent];
      }

      var on = _objectSpread$2$({}, this.$listeners);

      if (typeof this.onClick === "function") {
        on.click = this.onClick;
      }

      var buttonAttrs = {
        type: this.type,
        disabled: disabled,
        href: this.href
      };

      var renderTag = function renderTag() {
        if (!_this.tag && _this.href) return "a";
        return _this.tag || "button";
      };

      return h(renderTag(), {
        "class": buttonClass,
        attrs: buttonAttrs,
        on: on,
        directives: [{
          name: "ripple",
          value: this.keepAnimation.ripple
        }]
      }, [buttonContent]);
    }
  });

  var Button = withInstall(TButton);

  function _defineProperty$1(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectWithoutPropertiesLoose$1(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties$1(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose$1(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  var _excluded$G = ["attrs"];

  function ownKeys$2$(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2_(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2$(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2$(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  function renderFn(createElement, node, rootData) {
    var iconAttrs = _objectSpread$2_(_objectSpread$2_({}, node.attrs), rootData.attrs);

    rootData.attrs;
        var restProps = _objectWithoutProperties$1(rootData, _excluded$G);

    return createElement(node.tag, _objectSpread$2_({
      attrs: iconAttrs
    }, restProps), (node.children || []).map(function (child) {
      return renderFn(createElement, child, {});
    }));
  }

  var classnames = createCommonjsModule(function (module) {
    /* global define */
    (function () {

      var hasOwn = {}.hasOwnProperty;

      function classNames() {
        var classes = [];

        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (!arg) continue;

          var argType = _typeof$1(arg);

          if (argType === 'string' || argType === 'number') {
            classes.push(arg);
          } else if (Array.isArray(arg)) {
            if (arg.length) {
              var inner = classNames.apply(null, arg);

              if (inner) {
                classes.push(inner);
              }
            }
          } else if (argType === 'object') {
            if (arg.toString === Object.prototype.toString) {
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            } else {
              classes.push(arg.toString());
            }
          }
        }

        return classes.join(' ');
      }

      if (module.exports) {
        classNames["default"] = classNames;
        module.exports = classNames;
      } else {
        window.classNames = classNames;
      }
    })();
  });

  var _excluded$F = ["icon", "id"],
      _excluded2 = ["staticClass", "style", "icon", "id", "onClick"],
      _excluded3 = ["class", "staticClass", "style", "staticStyle", "attrs"];

  function ownKeys$2_(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2Z(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2_(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2_(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  function hump2Underline(s) {
    return s.replace(/([A-Z])/g, "-$1").toLowerCase().replace("view-box", "viewBox");
  }

  function jsonToUnderline(obj) {
    if (obj instanceof Array) {
      obj.forEach(function (v) {
        jsonToUnderline(v);
      });
    } else if (obj instanceof Object) {
      Object.keys(obj).forEach(function (key) {
        var newKey = hump2Underline(key);

        if (newKey !== key) {
          obj[newKey] = obj[key];
          delete obj[key];
        }

        jsonToUnderline(obj[newKey]);
      });
    }
  }

  var IconBase = Vue__default["default"].extend({
    functional: true,
    props: {
      icon: {
        type: Object
      },
      id: {
        type: String,
        "default": ""
      }
    },
    render: function render(createElement, context) {
      var _context$props = context.props,
          icon = _context$props.icon,
          id = _context$props.id,
          userProps = _objectWithoutProperties$1(_context$props, _excluded$F);

      var _context$data$props = context.data.props,
          staticClass = _context$data$props.staticClass,
          style = _context$data$props.style;
          _context$data$props.icon;
          _context$data$props.id;
          var onClick = _context$data$props.onClick,
          otherProps = _objectWithoutProperties$1(_context$data$props, _excluded2);

      var _context$data = context.data,
          customClassName = _context$data["class"],
          customStaticClassName = _context$data.staticClass,
          customStyle = _context$data.style,
          customStaticStyle = _context$data.staticStyle,
          attrs = _context$data.attrs,
          otherBinds = _objectWithoutProperties$1(_context$data, _excluded3);

      var domProps = otherBinds.domProps,
          on = otherBinds.on,
          nativeOn = otherBinds.nativeOn,
          directives = otherBinds.directives,
          scopedSlots = otherBinds.scopedSlots,
          slot = otherBinds.slot,
          key = otherBinds.key,
          ref = otherBinds.ref,
          refInFor = otherBinds.refInFor;
      var finalCls = classnames("t-icon", "t-icon-".concat(id), staticClass, customClassName, customStaticClassName);

      var finalStyle = _objectSpread$2Z(_objectSpread$2Z(_objectSpread$2Z({}, style), customStyle), customStaticStyle);

      jsonToUnderline(icon);

      var _click = onClick || (on === null || on === void 0 ? void 0 : on.click);

      return renderFn(createElement, icon, {
        "class": void 0,
        staticClass: finalCls,
        props: _objectSpread$2Z(_objectSpread$2Z({}, userProps), otherProps),
        attrs: attrs,
        style: finalStyle,
        on: _objectSpread$2Z(_objectSpread$2Z({}, on), {}, {
          click: function click(e) {
            return _click === null || _click === void 0 ? void 0 : _click({
              e: e
            });
          }
        }, nativeOn),
        directives: directives,
        scopedSlots: scopedSlots,
        slot: slot,
        key: key,
        ref: ref,
        refInFor: refInFor,
        domProps: domProps
      });
    }
  });

  var DEFAULT_CLASS_PREFIX = "t";
  var DEFAULT_LOCALE = "zh-CN";
  var ConfigContext = {
    classPrefix: DEFAULT_CLASS_PREFIX,
    locale: DEFAULT_LOCALE
  };

  function useCommonClassName$2() {
    var classPrefix = ConfigContext.classPrefix;
    return {
      SIZE: {
        "default": "",
        xs: "".concat(classPrefix, "-size-xs"),
        small: "".concat(classPrefix, "-size-s"),
        medium: "".concat(classPrefix, "-size-m"),
        large: "".concat(classPrefix, "-size-l"),
        xl: "".concat(classPrefix, "-size-xl"),
        block: "".concat(classPrefix, "-size-full-width")
      },
      STATUS: {
        loading: "".concat(classPrefix, "-is-loading"),
        disabled: "".concat(classPrefix, "-is-disabled"),
        focused: "".concat(classPrefix, "-is-focused"),
        success: "".concat(classPrefix, "-is-success"),
        error: "".concat(classPrefix, "-is-error"),
        warning: "".concat(classPrefix, "-is-warning"),
        selected: "".concat(classPrefix, "-is-selected"),
        active: "".concat(classPrefix, "-is-active"),
        checked: "".concat(classPrefix, "-is-checked"),
        current: "".concat(classPrefix, "-is-current"),
        hidden: "".concat(classPrefix, "-is-hidden"),
        visible: "".concat(classPrefix, "-is-visible"),
        expanded: "".concat(classPrefix, "-is-expanded"),
        indeterminate: "".concat(classPrefix, "-is-indeterminate")
      }
    };
  }

  function useSizeProps(size) {
    if (size === void 0) {
      return {
        className: "",
        style: {}
      };
    }

    var COMMON_SIZE_CLASS_NAMES = useCommonClassName$2().SIZE;

    if (!(size in COMMON_SIZE_CLASS_NAMES)) {
      return {
        className: "",
        style: {
          fontSize: size
        }
      };
    }

    return {
      className: COMMON_SIZE_CLASS_NAMES[size],
      style: {}
    };
  }

  var _excluded$E = ["size"];

  function ownKeys$2Z(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2Y(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2Z(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2Z(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$z = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 11V8.5H5v-1h2.5V5h1v2.5H11v1H8.5V11h-1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var AddRectangle = Vue__default["default"].extend({
    name: "AddRectangleIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$E);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2Y(_objectSpread$2Y({}, otherProps || {}), {}, {
        id: "add-rectangle",
        icon: element$z,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$D = ["size"];

  function ownKeys$2Y(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2X(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2Y(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2Y(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$y = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.35 8.65v3.85h1.3V8.65h3.85v-1.3H8.65V3.5h-1.3v3.85H3.5v1.3h3.85z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Add = Vue__default["default"].extend({
    name: "AddIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$D);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2X(_objectSpread$2X({}, otherProps || {}), {}, {
        id: "add",
        icon: element$y,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$C = ["size"];

  function ownKeys$2X(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2W(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2X(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2X(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$x = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.77 11.98l1.38 1.37.7-.7-9.7-9.7-.7.7 1.2 1.21a7.9 7.9 0 00-2.53 2.91L1 8l.12.23a7.72 7.72 0 009.65 3.75zM10 11.2A6.67 6.67 0 012.11 8c.56-1 1.34-1.83 2.26-2.43l1.08 1.09a2.88 2.88 0 003.9 3.9l.64.64zM6.21 7.42l2.37 2.37a1.88 1.88 0 01-2.37-2.37zM14.88 8.23L15 8l-.12-.23a7.73 7.73 0 00-9.35-3.86l.8.8A6.7 6.7 0 0113.9 8a6.87 6.87 0 01-2.02 2.26l.7.7a7.9 7.9 0 002.3-2.73z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.88 8c0 .37-.07.73-.2 1.06l-.82-.82.02-.24a1.88 1.88 0 00-2.12-1.86l-.82-.82A2.87 2.87 0 0110.88 8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var BrowseOff = Vue__default["default"].extend({
    name: "BrowseOffIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$C);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2W(_objectSpread$2W({}, otherProps || {}), {}, {
        id: "browse-off",
        icon: element$x,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$B = ["size"];

  function ownKeys$2W(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2V(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2W(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2W(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$w = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.88 8a2.88 2.88 0 11-5.76 0 2.88 2.88 0 015.76 0zm-1 0a1.88 1.88 0 10-3.76 0 1.88 1.88 0 003.76 0z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M1.12 8.23A7.72 7.72 0 008 12.5c2.9 0 5.54-1.63 6.88-4.27L15 8l-.12-.23A7.73 7.73 0 008 3.5a7.74 7.74 0 00-6.88 4.27L1 8l.12.23zM8 11.5A6.73 6.73 0 012.11 8 6.73 6.73 0 0113.9 8 6.74 6.74 0 018 11.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Browse = Vue__default["default"].extend({
    name: "BrowseIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$B);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2V(_objectSpread$2V({}, otherProps || {}), {}, {
        id: "browse",
        icon: element$w,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$A = ["size"];

  function ownKeys$2V(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2U(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2V(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2V(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$v = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10 3H6V1.5H5V3H3a1 1 0 00-1 1v9a1 1 0 001 1h10a1 1 0 001-1V4a1 1 0 00-1-1h-2V1.5h-1V3zM5 5h1V4h4v1h1V4h2v2H3V4h2v1zM3 7h10v6H3V7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Calendar$1 = Vue__default["default"].extend({
    name: "CalendarIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$A);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2U(_objectSpread$2U({}, otherProps || {}), {}, {
        id: "calendar",
        icon: element$v,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$z = ["size"];

  function ownKeys$2U(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2T(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2U(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2U(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$u = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 5v6l4.5-3L6 5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CaretRightSmall = Vue__default["default"].extend({
    name: "CaretRightSmallIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$z);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2T(_objectSpread$2T({}, otherProps || {}), {}, {
        id: "caret-right-small",
        icon: element$u,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$y = ["size"];

  function ownKeys$2T(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2S(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2T(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2T(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$t = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM4.5 8.2l.7-.7L7 9.3l3.8-3.8.7.7L7 10.7 4.5 8.2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CheckCircleFilled = Vue__default["default"].extend({
    name: "CheckCircleFilledIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$y);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2S(_objectSpread$2S({}, otherProps || {}), {}, {
        id: "check-circle-filled",
        icon: element$t,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$x = ["size"];

  function ownKeys$2S(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2R(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2S(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2S(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$s = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.43 9.92l6.23-6.22.92.92-7.15 7.14L1.97 7.3l.92-.92 3.54 3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Check = Vue__default["default"].extend({
    name: "CheckIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$x);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2R(_objectSpread$2R({}, otherProps || {}), {}, {
        id: "check",
        icon: element$s,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$w = ["size"];

  function ownKeys$2R(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2Q(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2R(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2R(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$r = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.54 6.46l.92-.92L8 9.08l3.54-3.54.92.92L8 10.92 3.54 6.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronDown = Vue__default["default"].extend({
    name: "ChevronDownIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$w);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2Q(_objectSpread$2Q({}, otherProps || {}), {}, {
        id: "chevron-down",
        icon: element$r,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$v = ["size"];

  function ownKeys$2Q(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2P(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2Q(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2Q(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$q = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M13.04 4.46l-.92-.92L7.66 8l4.46 4.46.92-.92L9.5 8l3.54-3.54z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.04 4.46l-.92-.92L2.66 8l4.46 4.46.92-.92L4.5 8l3.54-3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronLeftDouble = Vue__default["default"].extend({
    name: "ChevronLeftDoubleIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$v);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2P(_objectSpread$2P({}, otherProps || {}), {}, {
        id: "chevron-left-double",
        icon: element$q,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$u = ["size"];

  function ownKeys$2P(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2O(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2P(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2P(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$p = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.54 3.54l.92.92L6.92 8l3.54 3.54-.92.92L5.08 8l4.46-4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronLeft = Vue__default["default"].extend({
    name: "ChevronLeftIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$u);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2O(_objectSpread$2O({}, otherProps || {}), {}, {
        id: "chevron-left",
        icon: element$p,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$t = ["size"];

  function ownKeys$2O(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2N(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2O(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2O(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$o = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.2 5.2L9 8l-2.8 2.8.71.7 3.5-3.5-3.5-3.5-.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 118 1a7 7 0 010 14zm0-1A6 6 0 108 2a6 6 0 000 12z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronRightCircle = Vue__default["default"].extend({
    name: "ChevronRightCircleIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$t);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2N(_objectSpread$2N({}, otherProps || {}), {}, {
        id: "chevron-right-circle",
        icon: element$o,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$s = ["size"];

  function ownKeys$2N(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2M(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2N(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2N(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$n = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2.96 11.54l.92.92L8.34 8 3.88 3.54l-.92.92L6.5 8l-3.54 3.54zm5 0l.92.92L13.34 8 8.88 3.54l-.92.92L11.5 8l-3.54 3.54z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronRightDouble = Vue__default["default"].extend({
    name: "ChevronRightDoubleIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$s);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2M(_objectSpread$2M({}, otherProps || {}), {}, {
        id: "chevron-right-double",
        icon: element$n,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$r = ["size"];

  function ownKeys$2M(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2L(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2M(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2M(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$m = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6.46 12.46l-.92-.92L9.08 8 5.54 4.46l.92-.92L10.92 8l-4.46 4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronRight = Vue__default["default"].extend({
    name: "ChevronRightIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$r);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2L(_objectSpread$2L({}, otherProps || {}), {}, {
        id: "chevron-right",
        icon: element$m,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$q = ["size"];

  function ownKeys$2L(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2K(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2L(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2L(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$l = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.46 9.54l-.92.92L8 6.92l-3.54 3.54-.92-.92L8 5.08l4.46 4.46z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ChevronUp = Vue__default["default"].extend({
    name: "ChevronUpIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$q);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2K(_objectSpread$2K({}, otherProps || {}), {}, {
        id: "chevron-up",
        icon: element$l,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$p = ["size"];

  function ownKeys$2K(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2J(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2K(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2K(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$k = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM5.67 4.95L8 7.29l2.33-2.34.7.7L8.7 8l2.34 2.35-.71.7L8 8.71l-2.33 2.34-.7-.7L7.3 8 4.96 5.65l.71-.7z",
        "fillOpacity": 0.9
      }
    }]
  };
  var CloseCircleFilled = Vue__default["default"].extend({
    name: "CloseCircleFilledIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$p);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2J(_objectSpread$2J({}, otherProps || {}), {}, {
        id: "close-circle-filled",
        icon: element$k,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$o = ["size"];

  function ownKeys$2J(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2I(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2J(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2J(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$j = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 8.92L11.08 12l.92-.92L8.92 8 12 4.92 11.08 4 8 7.08 4.92 4 4 4.92 7.08 8 4 11.08l.92.92L8 8.92z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Close = Vue__default["default"].extend({
    name: "CloseIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$o);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2I(_objectSpread$2I({}, otherProps || {}), {}, {
        id: "close",
        icon: element$j,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$n = ["size"];

  function ownKeys$2I(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2H(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2I(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2I(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$i = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M6 12V6h1v6H6zM9 6v6h1V6H9z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M10.5 3H14v1h-1v10a1 1 0 01-1 1H4a1 1 0 01-1-1V4H2V3h3.5V1.8c0-.44.36-.8.8-.8h3.4c.44 0 .8.36.8.8V3zm-4 0h3V2h-3v1zM4 4v10h8V4H4z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Delete = Vue__default["default"].extend({
    name: "DeleteIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$n);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2H(_objectSpread$2H({}, otherProps || {}), {}, {
        id: "delete",
        icon: element$i,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$m = ["size"];

  function ownKeys$2H(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2G(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2H(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2H(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$h = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "g",
      "attrs": {
        "fill": "currentColor",
        "opacity": 0.9,
        "fillOpacity": 0.9
      },
      "children": [{
        "tag": "path",
        "attrs": {
          "d": "M14.13 4.95L10.9 1.71l.7-.71 3.25 3.24-.7.71zM5.97 13.11l-3.61.72a.3.3 0 01-.35-.35l.72-3.61 7.3-7.3 3.24 3.24-7.3 7.3zm5.89-7.3l-1.83-1.83-6.38 6.38-.46 2.29 2.29-.46 6.38-6.38zM15 11h-4v1h4v-1zM15 13H8.5v1H15v-1z"
        }
      }]
    }]
  };
  var Edit1 = Vue__default["default"].extend({
    name: "Edit1Icon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$m);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2G(_objectSpread$2G({}, otherProps || {}), {}, {
        id: "edit-1",
        icon: element$h,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$l = ["size"];

  function ownKeys$2G(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2F(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2G(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2G(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$g = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 9a1 1 0 110-2 1 1 0 010 2zM7 8a1 1 0 102 0 1 1 0 00-2 0zM12 8a1 1 0 102 0 1 1 0 00-2 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Ellipsis = Vue__default["default"].extend({
    name: "EllipsisIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$l);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2F(_objectSpread$2F({}, otherProps || {}), {}, {
        id: "ellipsis",
        icon: element$g,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$k = ["size"];

  function ownKeys$2F(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2E(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2F(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2F(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$f = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM8.5 4v5.5h-1V4h1zm-1.1 7h1.2v1.2H7.4V11z",
        "fillOpacity": 0.9
      }
    }]
  };
  var ErrorCircleFilled = Vue__default["default"].extend({
    name: "ErrorCircleFilledIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$k);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2E(_objectSpread$2E({}, otherProps || {}), {}, {
        id: "error-circle-filled",
        icon: element$f,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$j = ["size"];

  function ownKeys$2E(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2D(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2E(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2E(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$e = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8.5 2h-1v9h1V2zm.1 10.8H7.4V14h1.2v-1.2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Error$1 = Vue__default["default"].extend({
    name: "ErrorIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$j);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2D(_objectSpread$2D({}, otherProps || {}), {}, {
        id: "error",
        icon: element$e,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$i = ["size"];

  function ownKeys$2D(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2C(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2D(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2D(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$d = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M4 1.92C4 1.34 4.52 1 5 1h4.37a1 1 0 01.71.3L13.71 5a1 1 0 01.29.7v6.38c0 .58-.52.92-1 .92H5c-.48 0-1-.34-1-.92V1.92zM5 2v10h8V6.01H9V2H5zm5 .65V5h2.32L10 2.65z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 5v9.01a1 1 0 001 1h8v-1H3V5H2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var FileCopy = Vue__default["default"].extend({
    name: "FileCopyIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$i);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2C(_objectSpread$2C({}, otherProps || {}), {}, {
        id: "file-copy",
        icon: element$d,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$h = ["size"];

  function ownKeys$2C(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2B(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2C(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2C(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$c = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 3a1 1 0 011-1h10a1 1 0 011 1v1.79l-4.25 2.5V14h-3.5V7.29L2 4.79V3zm11 0H3v1.21l4.25 2.5V13h1.5V6.71L13 4.21V3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Filter = Vue__default["default"].extend({
    name: "FilterIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$h);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2B(_objectSpread$2B({}, otherProps || {}), {}, {
        id: "filter",
        icon: element$c,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$g = ["size"];

  function ownKeys$2B(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2A(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2B(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2B(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$b = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 101 8a7 7 0 0014 0zM5.8 6.63a2.2 2.2 0 014.39 0c0 .97-.75 1.72-1.49 2.02a.34.34 0 00-.2.32v.8h-1v-.8c0-.56.33-1.04.82-1.24.5-.2.87-.66.87-1.1a1.2 1.2 0 00-2.39 0h-1zm1.67 4.54a.53.53 0 111.05 0 .53.53 0 01-1.05 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var HelpCircleFilled = Vue__default["default"].extend({
    name: "HelpCircleFilledIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$g);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2A(_objectSpread$2A({}, otherProps || {}), {}, {
        id: "help-circle-filled",
        icon: element$b,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$f = ["size"];

  function ownKeys$2A(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2z(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2A(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2A(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$a = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM7.4 4h1.2v1.2H7.4V4zm.1 2.5h1V12h-1V6.5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var InfoCircleFilled = Vue__default["default"].extend({
    name: "InfoCircleFilledIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$f);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2z(_objectSpread$2z({}, otherProps || {}), {}, {
        id: "info-circle-filled",
        icon: element$a,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$e = ["size"];

  function ownKeys$2z(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2y(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2z(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2z(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$9 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M5 8.5h6v-1H5v1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3 14a1 1 0 01-1-1V3a1 1 0 011-1h10a1 1 0 011 1v10a1 1 0 01-1 1H3zm0-1h10V3H3v10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var MinusRectangle = Vue__default["default"].extend({
    name: "MinusRectangleIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$e);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2y(_objectSpread$2y({}, otherProps || {}), {}, {
        id: "minus-rectangle",
        icon: element$9,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$d = ["size"];

  function ownKeys$2y(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2x(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2y(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2y(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$8 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M12.4 4.46l-.91-.92L7.03 8l4.46 4.46.92-.92L8.86 8l3.55-3.54zM4.8 4v8h1.3V4H4.8z",
        "fillOpacity": 0.9
      }
    }]
  };
  var PageFirst = Vue__default["default"].extend({
    name: "PageFirstIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$d);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2x(_objectSpread$2x({}, otherProps || {}), {}, {
        id: "page-first",
        icon: element$8,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$c = ["size"];

  function ownKeys$2x(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2w(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2x(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2x(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$7 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.6 11.54l.91.92L8.97 8 4.51 3.54l-.92.92L7.14 8l-3.55 3.54zm7.6.46V4H9.9v8h1.3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var PageLast = Vue__default["default"].extend({
    name: "PageLastIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$c);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2w(_objectSpread$2w({}, otherProps || {}), {}, {
        id: "page-last",
        icon: element$7,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$b = ["size"];

  function ownKeys$2w(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2v(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2w(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2w(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$6 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.5 7.35h9v1.3h-9v-1.3z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Remove$1 = Vue__default["default"].extend({
    name: "RemoveIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$b);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2v(_objectSpread$2v({}, otherProps || {}), {}, {
        id: "remove",
        icon: element$6,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$a = ["size"];

  function ownKeys$2v(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2u(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2v(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2v(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$5 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 11.5a3.5 3.5 0 110-7 3.5 3.5 0 010 7zM8 13A5 5 0 108 3a5 5 0 000 10z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Round = Vue__default["default"].extend({
    name: "RoundIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$a);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2u(_objectSpread$2u({}, otherProps || {}), {}, {
        id: "round",
        icon: element$5,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$9 = ["size"];

  function ownKeys$2u(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2t(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2u(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2u(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$4 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M9.51 10.22a4.76 4.76 0 11.7-.7l3.54 3.52-.7.71-3.54-3.53zm.77-3.7a3.76 3.76 0 10-7.53 0 3.76 3.76 0 007.53 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Search$1 = Vue__default["default"].extend({
    name: "SearchIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$9);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2t(_objectSpread$2t({}, otherProps || {}), {}, {
        id: "search",
        icon: element$4,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$8 = ["size"];

  function ownKeys$2t(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2s(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2t(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2t(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$3 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M11 8a3 3 0 11-6 0 3 3 0 016 0zm-1 0a2 2 0 10-4 0 2 2 0 004 0z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 1.25l6.06 3.38v6.75L8 14.75l-6.06-3.38V4.63L8 1.25zM2.94 5.21v5.58L8 13.6l5.06-2.82V5.2L8 2.4 2.94 5.21z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Setting = Vue__default["default"].extend({
    name: "SettingIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$8);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2s(_objectSpread$2s({}, otherProps || {}), {}, {
        id: "setting",
        icon: element$3,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$7 = ["size"];

  function ownKeys$2s(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2r(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2s(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2s(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$2 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M8 15A7 7 0 108 1a7 7 0 000 14zM7.5 5h1v2.97l2.85 2.86-.7.7L7.5 8.4V5z",
        "fillOpacity": 0.9
      }
    }]
  };
  var TimeFilled = Vue__default["default"].extend({
    name: "TimeFilledIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$7);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2r(_objectSpread$2r({}, otherProps || {}), {}, {
        id: "time-filled",
        icon: element$2,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$6 = ["size"];

  function ownKeys$2r(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2q(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2r(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2r(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element$1 = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M7.5 4v4.39L10 11l.7-.7-2.2-2.33V4h-1z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M15 8A7 7 0 111 8a7 7 0 0114 0zm-1 0A6 6 0 102 8a6 6 0 0012 0z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Time = Vue__default["default"].extend({
    name: "TimeIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$6);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2q(_objectSpread$2q({}, otherProps || {}), {}, {
        id: "time",
        icon: element$1,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  var _excluded$5 = ["size"];

  function ownKeys$2q(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2p(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2q(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2q(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var element = {
    "tag": "svg",
    "attrs": {
      "fill": "none",
      "viewBox": "0 0 16 16",
      "width": "1em",
      "height": "1em"
    },
    "children": [{
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M3.74 6.68L7.5 2.9v8.59h1V2.91l3.76 3.77.71-.7-4.62-4.63a.5.5 0 00-.7 0L3.03 5.97l.7.7z",
        "fillOpacity": 0.9
      }
    }, {
      "tag": "path",
      "attrs": {
        "fill": "currentColor",
        "d": "M2 11v2a1 1 0 001 1h10a1 1 0 001-1v-2h-1v2H3v-2H2z",
        "fillOpacity": 0.9
      }
    }]
  };
  var Upload$1 = Vue__default["default"].extend({
    name: "UploadIcon",
    functional: true,
    props: {
      size: {
        type: String
      },
      onClick: {
        type: Function
      }
    },
    render: function render(createElement, context) {
      var props = context.props,
          data = context.data;

      var size = props.size,
          otherProps = _objectWithoutProperties$1(props, _excluded$5);

      var _useSizeProps = useSizeProps(size),
          className = _useSizeProps.className,
          style = _useSizeProps.style;

      var fullProps = _objectSpread$2p(_objectSpread$2p({}, otherProps || {}), {}, {
        id: "upload",
        icon: element,
        staticClass: className,
        style: style
      });

      data.props = fullProps;
      return createElement(IconBase, data);
    }
  });

  function checkScriptAndLoad(url, className) {
    if (window) {
      if (!document || !url || typeof url !== "string") return;

      if (document.querySelectorAll(".".concat(className, "[src=\"").concat(url, "\"]")).length > 0) {
        return;
      }

      var svg = document.createElement("script");
      svg.setAttribute("class", className);
      svg.setAttribute("src", url);
      document.body.appendChild(svg);
    }
  }

  var props$19 = {
    name: {
      type: String,
      "default": ""
    },
    size: {
      type: String,
      "default": void 0
    },
    url: {
      type: [String, Array],
      "default": void 0
    },
    loadDefaultIcons: {
      type: Boolean,
      "default": true
    },
    onClick: Function
  };

  function ownKeys$2p(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread$2o(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys$2p(Object(source), !0).forEach(function (key) {
        _defineProperty$1(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2p(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  var classPrefix = ConfigContext.classPrefix;
  var tName = "".concat(classPrefix, "-icon");
  var CDN_ICONFONT_URL = "https://tdesign.gtimg.com/icon/0.1.2/fonts/index.js";

  var _Icon = Vue__default["default"].extend({
    name: "Icon",
    props: props$19,
    computed: {
      iconName: function iconName() {
        return this.url ? this.name : "".concat(tName, "-").concat(this.name);
      },
      classes: function classes() {
        var _useSizeProps = useSizeProps(this.size),
            sizeClassName = _useSizeProps.className;

        var iconName = this.url ? this.name : "".concat(tName, "-").concat(this.name);
        var arr = [tName, iconName, sizeClassName];
        return arr;
      },
      iconStyle: function iconStyle() {
        if (["small", "medium", "large"].includes(this.size)) return {};
        return {
          "font-size": this.size
        };
      }
    },
    methods: {
      handleClick: function handleClick(e) {
        var _this$onClick;

        this.$emit("click", {
          e: e
        });
        (_this$onClick = this.onClick) === null || _this$onClick === void 0 ? void 0 : _this$onClick.call(this, {
          e: e
        });
      }
    },
    mounted: function mounted() {
      var finalUrl = [];

      if (this.url) {
        finalUrl = this.url instanceof Array ? this.url.concat() : [this.url];
      }

      if (this.loadDefaultIcons) {
        finalUrl.push(CDN_ICONFONT_URL);
      }

      Array.from(new Set(finalUrl)).forEach(function (url) {
        checkScriptAndLoad(url, "".concat(classPrefix, "-svg-js-stylesheet--unique-class"));
      });
    },
    render: function render() {
      var h = arguments[0];
      var attrs = {
        href: "#".concat(this.iconName)
      };
      return h("svg", {
        "class": this.classes,
        "style": this.iconStyle,
        "on": {
          "click": this.handleClick
        }
      }, [h("use", {
        "attrs": _objectSpread$2o({}, attrs)
      })]);
    }
  });

  var Icon$1 = _Icon;

  var Icon = withInstall(Icon$1);

  var props$18 = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    hover: {
      type: String,
      "default": "underline",
      validator: function validator(val) {
        if (!val) return true;
        return ["color", "underline"].includes(val);
      }
    },
    href: {
      type: String,
      "default": ""
    },
    prefixIcon: {
      type: Function
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    suffixIcon: {
      type: Function
    },
    target: {
      type: String,
      "default": ""
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "primary", "danger", "warning", "success"].includes(val);
      }
    },
    underline: Boolean,
    onClick: Function
  };

  var classPrefixMixins$R = getClassPrefixMixins("link");
  var _Link = mixins(classPrefixMixins$R).extend({
    name: "TLink",
    props: props$18,
    methods: {
      handleClick: function handleClick(e) {
        var _this$onClick;

        if (this.disabled) return;
        this.$emit("click", e);
        (_this$onClick = this.onClick) === null || _this$onClick === void 0 ? void 0 : _this$onClick.call(this, e);
      }
    },
    render: function render() {
      var _ref;

      var h = arguments[0];
      var linkContent = renderContent(this, "default", "content");
      var prefixContent = renderTNodeJSX(this, "prefixIcon");
      var suffixContent = renderTNodeJSX(this, "suffixIcon");
      var linkClass = [this.componentName, this.commonSizeClassName[this.size], "".concat(this.componentName, "--theme-").concat(this.theme), (_ref = {}, _defineProperty$3(_ref, this.commonStatusClassName.disabled, this.disabled), _defineProperty$3(_ref, "".concat(this.classPrefix, "-is-underline"), this.underline), _defineProperty$3(_ref, "".concat(this.componentName, "--hover-").concat(this.hover), !this.disabled), _ref)];
      return h("a", {
        "class": linkClass,
        "attrs": {
          "href": this.disabled || !this.href ? void 0 : this.href,
          "target": this.target
        },
        "on": {
          "click": this.handleClick
        }
      }, [prefixContent && h("span", {
        "class": "".concat(this.componentName, "__prefix-icon")
      }, [prefixContent]), linkContent, suffixContent && h("span", {
        "class": "".concat(this.componentName, "__suffix-icon")
      }, [suffixContent])]);
    }
  });

  var Link = withInstall(_Link);

  var calcSize = function calcSize(width) {
    var size = "xs";

    if (width < 768) {
      size = "xs";
    } else if (width >= 768 && width < 992) {
      size = "sm";
    } else if (width >= 992 && width < 1200) {
      size = "md";
    } else if (width >= 1200 && width < 1400) {
      size = "lg";
    } else if (width >= 1400 && width < 1880) {
      size = "xl";
    } else {
      size = "xxl";
    }

    return size;
  };

  var props$17 = {
    flex: {
      type: [String, Number]
    },
    lg: {
      type: [Number, Object]
    },
    md: {
      type: [Number, Object]
    },
    offset: {
      type: Number,
      "default": 0
    },
    order: {
      type: Number,
      "default": 0
    },
    pull: {
      type: Number,
      "default": 0
    },
    push: {
      type: Number,
      "default": 0
    },
    sm: {
      type: [Number, Object]
    },
    span: {
      type: Number,
      "default": 12
    },
    tag: {
      type: String,
      "default": "div"
    },
    xl: {
      type: [Number, Object]
    },
    xs: {
      type: [Number, Object]
    },
    xxl: {
      type: [Number, Object]
    }
  };

  function ownKeys$2o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2n(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2o(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$Q = getClassPrefixMixins("col");
  var _Col = mixins(classPrefixMixins$Q).extend({
    name: "TCol",
    props: _objectSpread$2n({}, props$17),
    inject: ["rowContext"],
    data: function data() {
      return {
        size: "md"
      };
    },
    computed: {
      classes: function classes() {
        var _this = this,
            _objectSpread3;

        var span = this.span,
            order = this.order,
            offset = this.offset,
            push = this.push,
            pull = this.pull;
        var allSizes = ["xs", "sm", "md", "lg", "xl", "xxl"];
        var sizeClasses = allSizes.reduce(function (acc, currSize) {
          var _objectSpread2;

          var sizeProp = _this[currSize];
          var sizeObject = {};

          if (typeof sizeProp === "number") {
            sizeObject.span = sizeProp;
          } else if (isObject_1(sizeProp)) {
            sizeObject = sizeProp || {};
          }

          return _objectSpread$2n(_objectSpread$2n({}, acc), {}, (_objectSpread2 = {}, _defineProperty$3(_objectSpread2, "".concat(_this.componentName, "-").concat(currSize, "-").concat(sizeObject.span), sizeObject.span !== void 0), _defineProperty$3(_objectSpread2, "".concat(_this.componentName, "-").concat(currSize, "-order-").concat(sizeObject.order), parseInt(sizeObject.order, 10) >= 0), _defineProperty$3(_objectSpread2, "".concat(_this.componentName, "-").concat(currSize, "-offset-").concat(sizeObject.offset), parseInt(sizeObject.offset, 10) >= 0), _defineProperty$3(_objectSpread2, "".concat(_this.componentName, "-").concat(currSize, "-push-").concat(sizeObject.push), parseInt(sizeObject.push, 10) >= 0), _defineProperty$3(_objectSpread2, "".concat(_this.componentName, "-").concat(currSize, "-pull-").concat(sizeObject.pull), parseInt(sizeObject.pull, 10) >= 0), _objectSpread2));
        }, {});
        return _objectSpread$2n((_objectSpread3 = {}, _defineProperty$3(_objectSpread3, "".concat(this.componentName), true), _defineProperty$3(_objectSpread3, "".concat(this.componentName, "-").concat(span), span !== void 0), _defineProperty$3(_objectSpread3, "".concat(this.componentName, "-order-").concat(order), order), _defineProperty$3(_objectSpread3, "".concat(this.componentName, "-offset-").concat(offset), offset), _defineProperty$3(_objectSpread3, "".concat(this.componentName, "-push-").concat(push), push), _defineProperty$3(_objectSpread3, "".concat(this.componentName, "-pull-").concat(pull), pull), _objectSpread3), sizeClasses);
      }
    },
    mounted: function mounted() {
      this.updateSize();
      window.addEventListener("resize", this.updateSize);
    },
    beforeDestroy: function beforeDestroy() {
      window.removeEventListener("resize", this.updateSize);
    },
    methods: {
      updateSize: function updateSize() {
        this.size = calcSize(window.innerWidth);
      },
      parseFlex: function parseFlex(flex) {
        if (typeof flex === "number") {
          return "".concat(flex, " ").concat(flex, " 0");
        }

        if (/^\d+(\.\d+)?(px|r?em|%)$/.test(flex)) {
          return "0 0 ".concat(flex);
        }

        return flex;
      },
      calcColPadding: function calcColPadding(gutter, currentSize) {
        var paddingObj = {};

        if (typeof gutter === "number") {
          Object.assign(paddingObj, {
            paddingLeft: "".concat(gutter / 2, "px"),
            paddingRight: "".concat(gutter / 2, "px")
          });
        } else if (Array.isArray(gutter) && gutter.length) {
          if (typeof gutter[0] === "number") {
            Object.assign(paddingObj, {
              paddingLeft: "".concat(gutter[0] / 2, "px"),
              paddingRight: "".concat(gutter[0] / 2, "px")
            });
          }

          if (isObject_1(gutter[0]) && gutter[0][currentSize]) {
            Object.assign(paddingObj, {
              paddingLeft: "".concat(gutter[0][currentSize] / 2, "px"),
              paddingRight: "".concat(gutter[0][currentSize] / 2, "px")
            });
          }
        } else if (isObject_1(gutter) && gutter[currentSize]) {
          Object.assign(paddingObj, {
            paddingLeft: "".concat(gutter[currentSize] / 2, "px"),
            paddingRight: "".concat(gutter[currentSize] / 2, "px")
          });
        }

        return paddingObj;
      }
    },
    render: function render() {
      var h = arguments[0];
      var flex = this.flex,
          tag = this.tag,
          classes = this.classes;
      var colStyle = {};
      flex && (colStyle.flex = this.parseFlex(flex));
      var rowContext = this.rowContext;

      if (rowContext) {
        var rowGutter = rowContext.gutter;
        Object.assign(colStyle, this.calcColPadding(rowGutter, this.size));
      }

      return h(tag, {
        "class": classes,
        "style": colStyle
      }, [renderTNodeJSX(this, "default")]);
    }
  });

  function _extends$2() {
    return _extends$2 = Object.assign || function (a) {
      for (var b, c = 1; c < arguments.length; c++) {
        for (var d in b = arguments[c], b) {
          Object.prototype.hasOwnProperty.call(b, d) && (a[d] = b[d]);
        }
      }

      return a;
    }, _extends$2.apply(this, arguments);
  }

  var normalMerge = ["attrs", "props", "domProps"],
      toArrayMerge = ["class", "style", "directives"],
      functionalMerge = ["on", "nativeOn"],
      mergeJsxProps = function mergeJsxProps(a) {
    return a.reduce(function (c, a) {
      for (var b in a) {
        if (!c[b]) c[b] = a[b];else if (-1 !== normalMerge.indexOf(b)) c[b] = _extends$2({}, c[b], a[b]);else if (-1 !== toArrayMerge.indexOf(b)) {
          var d = c[b] instanceof Array ? c[b] : [c[b]],
              e = a[b] instanceof Array ? a[b] : [a[b]];
          c[b] = d.concat(e);
        } else if (-1 !== functionalMerge.indexOf(b)) {
          for (var f in a[b]) {
            if (c[b][f]) {
              var g = c[b][f] instanceof Array ? c[b][f] : [c[b][f]],
                  h = a[b][f] instanceof Array ? a[b][f] : [a[b][f]];
              c[b][f] = g.concat(h);
            } else c[b][f] = a[b][f];
          }
        } else if ("hook" == b) for (var i in a[b]) {
          c[b][i] = c[b][i] ? mergeFn(c[b][i], a[b][i]) : a[b][i];
        } else c[b] = a[b];
      }

      return c;
    }, {});
  },
      mergeFn = function mergeFn(a, b) {
    return function () {
      a && a.apply(this, arguments), b && b.apply(this, arguments);
    };
  };

  var helper = mergeJsxProps;

  var props$16 = {
    align: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        return ["top", "middle", "bottom"].includes(val);
      }
    },
    gutter: {
      type: [Number, Object, Array],
      "default": 0
    },
    justify: {
      type: String,
      "default": "start",
      validator: function validator(val) {
        return ["start", "end", "center", "space-around", "space-between"].includes(val);
      }
    },
    tag: {
      type: String,
      "default": "div"
    }
  };

  function ownKeys$2n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2n(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$P = getClassPrefixMixins("row");
  var _Row = mixins(classPrefixMixins$P).extend({
    name: "TRow",
    props: _objectSpread$2m({}, props$16),
    data: function data() {
      return {
        size: "md"
      };
    },
    provide: function provide() {
      return {
        rowContext: {
          gutter: this.gutter
        }
      };
    },
    computed: {
      classes: function classes() {
        var _ref;

        var justify = this.justify,
            align = this.align;
        return [this.componentName, (_ref = {}, _defineProperty$3(_ref, "".concat(this.componentName, "--").concat(justify), justify), _defineProperty$3(_ref, "".concat(this.componentName, "--").concat(align), align), _ref)];
      }
    },
    mounted: function mounted() {
      this.updateSize();
      this.handleIE();
      window.addEventListener("resize", this.updateSize);
    },
    watch: {
      gutter: function gutter() {
        this.handleIE();
      },
      size: function size() {
        this.handleIE();
      }
    },
    beforeDestroy: function beforeDestroy() {
      window.removeEventListener("resize", this.updateSize);
    },
    methods: {
      updateSize: function updateSize() {
        this.size = calcSize(window.innerWidth);
      },
      handleIE: function handleIE() {
        if (getIEVersion$1() <= 11) {
          var rowGap = this.rowGap(this.gutter, this.size);

          if (rowGap) {
            this.$el.setAttribute("row-gap", "".concat(rowGap));
          }
        }
      },
      calcRowStyle: function calcRowStyle(gutter, currentSize) {
        var rowStyle = {};

        if (typeof gutter === "number") {
          Object.assign(rowStyle, {
            marginLeft: "".concat(gutter / -2, "px"),
            marginRight: "".concat(gutter / -2, "px")
          });
        } else if (Array.isArray(gutter) && gutter.length) {
          if (typeof gutter[0] === "number") {
            Object.assign(rowStyle, {
              marginLeft: "".concat(gutter[0] / -2, "px"),
              marginRight: "".concat(gutter[0] / -2, "px")
            });
          }

          if (typeof gutter[1] === "number") {
            Object.assign(rowStyle, {
              rowGap: "".concat(gutter[1], "px")
            });
          }

          if (isObject_1(gutter[0]) && gutter[0][currentSize] !== void 0) {
            Object.assign(rowStyle, {
              marginLeft: "".concat(gutter[0][currentSize] / -2, "px"),
              marginRight: "".concat(gutter[0][currentSize] / -2, "px")
            });
          }

          if (isObject_1(gutter[1]) && gutter[1][currentSize] !== void 0) {
            Object.assign(rowStyle, {
              rowGap: "".concat(gutter[1][currentSize], "px")
            });
          }
        } else if (isObject_1(gutter) && gutter[currentSize]) {
          if (Array.isArray(gutter[currentSize]) && gutter[currentSize].length) {
            Object.assign(rowStyle, {
              marginLeft: "".concat(gutter[currentSize][0] / -2, "px"),
              marginRight: "".concat(gutter[currentSize][0] / -2, "px")
            });
            Object.assign(rowStyle, {
              rowGap: "".concat(gutter[currentSize][1], "px")
            });
          } else {
            Object.assign(rowStyle, {
              marginLeft: "".concat(gutter[currentSize] / -2, "px"),
              marginRight: "".concat(gutter[currentSize] / -2, "px")
            });
          }
        }

        return rowStyle;
      },
      rowGap: function rowGap(gutter, currentSize) {
        var rowGap;

        if (Array.isArray(gutter) && gutter.length) {
          if (typeof gutter[1] === "number") {
            var _gutter = _slicedToArray(gutter, 2);

            rowGap = _gutter[1];
          }

          if (isObject_1(gutter[1]) && gutter[1][currentSize] !== void 0) {
            rowGap = gutter[1][currentSize];
          }
        } else if (isObject_1(gutter) && gutter[currentSize]) {
          if (Array.isArray(gutter[currentSize]) && gutter[currentSize].length) {
            var _gutter$currentSize = _slicedToArray(gutter[currentSize], 2);

            rowGap = _gutter$currentSize[1];
          }
        }

        return rowGap;
      }
    },
    render: function render() {
      var h = arguments[0];
      var tag = this.tag,
          classes = this.classes;
      var rowStyle = this.calcRowStyle(this.gutter, this.size);
      var attributes = {
        "class": classes,
        style: rowStyle,
        attrs: {}
      };
      return h(tag, helper([{}, attributes]), [this.$slots["default"]]);
    }
  });

  var Col = withInstall(_Col);
  var Row = withInstall(_Row);

  var classPrefixMixins$O = getClassPrefixMixins("layout");
  var _Layout = mixins(classPrefixMixins$O).extend({
    name: "TLayout",
    data: function data() {
      return {
        hasSider: false
      };
    },
    provide: function provide() {
      return {
        layout: this
      };
    },
    methods: {
      renderContent: function renderContent() {
        return this.$scopedSlots["default"] ? this.$scopedSlots["default"](null) : "";
      }
    },
    computed: {
      classes: function classes() {
        return [this.componentName, _defineProperty$3({}, "".concat(this.componentName, "--with-sider"), this.hasSider)];
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("section", {
        "class": this.classes
      }, [renderTNodeJSX(this, "default")]);
    }
  });

  var props$15 = {
    height: {
      type: String,
      "default": ""
    }
  };

  function ownKeys$2m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2m(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$N = getClassPrefixMixins("header");
  var _Header = mixins(classPrefixMixins$N).extend({
    name: "THeader",
    props: _objectSpread$2l({}, props$15),
    render: function render() {
      var h = arguments[0];
      var styles = this.height ? {
        height: this.height
      } : {};
      return h("header", {
        "class": "".concat(this.classPrefix, "-layout__header"),
        "style": styles
      }, [renderTNodeJSX(this, "default")]);
    }
  });

  var props$14 = {
    height: {
      type: String,
      "default": ""
    }
  };

  function ownKeys$2l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2l(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$M = getClassPrefixMixins("footer");
  var _Footer = mixins(classPrefixMixins$M).extend({
    name: "TFooter",
    props: _objectSpread$2k({}, props$14),
    methods: {
      renderContent: function renderContent() {
        return this.$scopedSlots["default"] ? this.$scopedSlots["default"](null) : "";
      }
    },
    render: function render() {
      var h = arguments[0];
      var styles = this.height ? {
        height: this.height
      } : {};
      return h("footer", {
        "class": "".concat(this.classPrefix, "-layout__footer"),
        "style": styles
      }, [renderTNodeJSX(this, "default")]);
    }
  });

  var props$13 = {
    width: {
      type: String,
      "default": ""
    }
  };

  function ownKeys$2k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2k(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$L = getClassPrefixMixins("aside");
  var _Aside = mixins(Vue__default["default"], classPrefixMixins$L).extend({
    name: "TAside",
    props: _objectSpread$2j({}, props$13),
    data: function data() {
      return {};
    },
    inject: {
      layout: {
        "default": void 0
      }
    },
    mounted: function mounted() {
      this.layout.hasSider = true;
    },
    destroyed: function destroyed() {
      this.layout.hasSider = false;
    },
    render: function render() {
      var h = arguments[0];
      var styles = this.width ? {
        width: this.width
      } : {};
      return h("aside", {
        "class": "".concat(this.classPrefix, "-layout__sider"),
        "style": styles
      }, [renderTNodeJSX(this, "default")]);
    }
  });

  var classPrefixMixins$K = getClassPrefixMixins("content");
  var _Content = mixins(classPrefixMixins$K).extend({
    name: "TContent",
    render: function render() {
      var h = arguments[0];
      return h("main", {
        "class": "".concat(this.classPrefix, "-layout__content")
      }, [renderTNodeJSX(this, "default")]);
    }
  });

  var Aside = withInstall(_Aside);
  var Layout = withInstall(_Layout);
  var Header = withInstall(_Header);
  var Footer = withInstall(_Footer);
  var Content = withInstall(_Content);

  var props$12 = {
    align: {
      type: String,
      "default": "center",
      validator: function validator(val) {
        return ["left", "right", "center"].includes(val);
      }
    },
    content: {
      type: [String, Function]
    },
    dashed: Boolean,
    "default": {
      type: [String, Function]
    },
    layout: {
      type: String,
      validator: function validator(val) {
        return ["horizontal", "vertical"].includes(val);
      }
    },
    theme: {
      type: String,
      validator: function validator(val) {
        return ["horizontal", "vertical"].includes(val);
      }
    }
  };

  function ownKeys$2j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2j(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$J = getClassPrefixMixins("divider");
  var _Divider = mixins(classPrefixMixins$J).extend({
    name: "TDivider",
    props: _objectSpread$2i({}, props$12),
    render: function render() {
      var _ref;

      var h = arguments[0];
      var children = renderContent(this, "default", "content");

      if (this.theme) {
        console.warn("TDesign Divider Warn: `theme` is going to be deprecated, please use `layout` instead.");
      }

      var dividerClassNames = ["".concat(this.componentName), ["".concat(this.componentName, "--").concat(this.layout || this.theme || "horizontal")], (_ref = {}, _defineProperty$3(_ref, "".concat(this.componentName, "--dashed"), !!this.dashed), _defineProperty$3(_ref, "".concat(this.componentName, "--with-text"), !!children), _defineProperty$3(_ref, "".concat(this.componentName, "--with-text-").concat(this.align), !!children), _ref)];
      return h("div", {
        "class": dividerClassNames
      }, [children && h("span", {
        "class": "".concat(this.componentName, "__inner-text")
      }, [children])]);
    }
  });

  var Divider = withInstall(_Divider);

  var props$11 = {
    align: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["start", "end", "center", "baseline"].includes(val);
      }
    },
    breakLine: Boolean,
    direction: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["vertical", "horizontal"].includes(val);
      }
    },
    separator: {
      type: [String, Function]
    },
    size: {
      type: [String, Number],
      "default": "medium"
    }
  };

  var t = function t(pattern) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var data = args[0];

    if (typeof pattern === "string") {
      if (!data) return pattern;
      var regular = /\{\s*([\w-]+)\s*\}/g;
      var translated = pattern.replace(regular, function (match, key) {
        if (data) {
          return String(data[key]);
        }

        return "";
      });
      return translated;
    }

    if (typeof pattern === "function") {
      if (!args.length) return pattern(VueCompositionAPI.h);
      return pattern.apply(void 0, args);
    }

    return "";
  };

  function useConfig(componentName) {
    var injectGlobalConfig = VueCompositionAPI.inject("globalConfig", null);
    var mergedGlobalConfig = injectGlobalConfig || defaultGlobalConfig;
    var global = VueCompositionAPI.ref(mergedGlobalConfig[componentName]);
    var classPrefix = VueCompositionAPI.ref(mergedGlobalConfig.classPrefix);
    return {
      t: t,
      global: global,
      classPrefix: classPrefix
    };
  }
  function usePrefixClass$1(componentName) {
    var _useConfig = useConfig("classPrefix"),
        classPrefix = _useConfig.classPrefix;

    return VueCompositionAPI.ref(componentName ? "".concat(classPrefix.value, "-").concat(componentName) : classPrefix.value);
  }

  function usePrefixClass(componentName) {
    var _useConfig = useConfig("classPrefix"),
        classPrefix = _useConfig.classPrefix;

    return VueCompositionAPI.computed(function () {
      return componentName ? "".concat(classPrefix.value, "-").concat(componentName) : classPrefix.value;
    });
  }
  function useCommonClassName$1() {
    var _useConfig2 = useConfig("classPrefix"),
        classPrefix = _useConfig2.classPrefix;

    return {
      SIZE: VueCompositionAPI.computed(function () {
        return {
          small: "".concat(classPrefix.value, "-size-s"),
          medium: "".concat(classPrefix.value, "-size-m"),
          large: "".concat(classPrefix.value, "-size-l"),
          "default": "",
          xs: "".concat(classPrefix.value, "-size-xs"),
          xl: "".concat(classPrefix.value, "-size-xl"),
          block: "".concat(classPrefix.value, "-size-full-width")
        };
      }),
      STATUS: VueCompositionAPI.computed(function () {
        return {
          loading: "".concat(classPrefix.value, "-is-loading"),
          loadMore: "".concat(classPrefix.value, "-is-load-more"),
          disabled: "".concat(classPrefix.value, "-is-disabled"),
          focused: "".concat(classPrefix.value, "-is-focused"),
          success: "".concat(classPrefix.value, "-is-success"),
          error: "".concat(classPrefix.value, "-is-error"),
          warning: "".concat(classPrefix.value, "-is-warning"),
          selected: "".concat(classPrefix.value, "-is-selected"),
          active: "".concat(classPrefix.value, "-is-active"),
          checked: "".concat(classPrefix.value, "-is-checked"),
          current: "".concat(classPrefix.value, "-is-current"),
          hidden: "".concat(classPrefix.value, "-is-hidden"),
          visible: "".concat(classPrefix.value, "-is-visible"),
          expanded: "".concat(classPrefix.value, "-is-expanded"),
          indeterminate: "".concat(classPrefix.value, "-is-indeterminate")
        };
      })
    };
  }

  function ownKeys$2i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2i(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Space = VueCompositionAPI.defineComponent({
    name: "TSpace",
    props: _objectSpread$2h({}, props$11),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;
      var COMPONENT_NAME = usePrefixClass("space");
      var renderStyle = VueCompositionAPI.computed(function () {
        var sizeMap = {
          small: "8px",
          medium: "16px",
          large: "24px"
        };
        var renderGap = "";

        if (Array.isArray(props2.size)) {
          renderGap = props2.size.map(function (s) {
            if (typeof s === "number") return "".concat(s, "px");
            if (typeof s === "string") return sizeMap[s] || s;
            return s;
          }).join(" ");
        } else if (typeof props2.size === "string") {
          renderGap = sizeMap[props2.size] || props2.size;
        } else if (typeof props2.size === "number") {
          renderGap = "".concat(props2.size, "px");
        }

        return _objectSpread$2h({
          gap: renderGap
        }, props2.breakLine ? {
          "flex-wrap": "wrap"
        } : {});
      });
      var spaceClassNames = VueCompositionAPI.computed(function () {
        var _ref2;

        return ["".concat(COMPONENT_NAME.value), (_ref2 = {}, _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "-align-").concat(props2.align), props2.align), _defineProperty$3(_ref2, "".concat(COMPONENT_NAME.value, "-").concat(props2.direction), props2.direction), _ref2)];
      });
      return {
        COMPONENT_NAME: COMPONENT_NAME,
        spaceClassNames: spaceClassNames,
        renderStyle: renderStyle,
        slots: slots
      };
    },
    render: function render(h) {
      var COMPONENT_NAME = this.COMPONENT_NAME,
          spaceClassNames = this.spaceClassNames,
          renderStyle = this.renderStyle,
          slots = this.slots,
          separator = this.separator;
      var children = slots["default"]().filter(function (child) {
        return child.tag !== void 0;
      });
      var childCount = children.length;

      var renderChildren = function renderChildren() {
        return children.map(function (child, index) {
          var renderSeparator = separator;
          if (typeof separator === "function") renderSeparator = separator(h);
          var showSeparator = index + 1 !== childCount && renderSeparator;
          return [h("div", {
            "class": "".concat(COMPONENT_NAME, "-item")
          }, [child]), showSeparator ? h("div", {
            "class": "".concat(COMPONENT_NAME, "-item-separator")
          }, [renderSeparator]) : null];
        });
      };

      return h("div", {
        "class": spaceClassNames,
        "style": renderStyle
      }, [renderChildren()]);
    }
  });

  var Space = withInstall(_Space);

  var affixProps = {
    container: {
      type: [String, Function],
      "default": function _default() {
        return function () {
          return window;
        };
      }
    },
    offsetBottom: {
      type: Number,
      "default": 0
    },
    offsetTop: {
      type: Number,
      "default": 0
    },
    zIndex: {
      type: Number
    },
    onFixedChange: Function
  };

  function ownKeys$2h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2h(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classMixins = getClassPrefixMixins("affix");
  var _Affix = mixins(Vue__default["default"], classMixins).extend({
    name: "TAffix",
    props: _objectSpread$2g({}, affixProps),
    watch: {
      offsetTop: function offsetTop() {
        this.handleScroll();
      },
      offsetBottom: function offsetBottom() {
        this.handleScroll();
      },
      zIndex: function zIndex() {
        this.handleScroll();
      }
    },
    methods: {
      handleScroll: function handleScroll() {
        var _this = this;

        var scrollContainer = this.scrollContainer,
            offsetTop = this.offsetTop,
            offsetBottom = this.offsetBottom;
        var _this$$refs = this.$refs,
            affixWrapRef = _this$$refs.affixWrapRef,
            affixRef = _this$$refs.affixRef;

        if (!this.ticking) {
          window.requestAnimationFrame(function () {
            var _affixWrapRef$getBoun;

            var _ref = (_affixWrapRef$getBoun = affixWrapRef.getBoundingClientRect()) !== null && _affixWrapRef$getBoun !== void 0 ? _affixWrapRef$getBoun : {
              top: 0,
              width: 0,
              height: 0
            },
                wrapToTop = _ref.top,
                wrapWidth = _ref.width,
                wrapHeight = _ref.height;

            var containerTop = 0;

            if (scrollContainer instanceof HTMLElement) {
              containerTop = scrollContainer.getBoundingClientRect().top;
            }

            var fixedTop;
            var calcTop = wrapToTop - containerTop;
            var containerHeight = scrollContainer[scrollContainer instanceof Window ? "innerHeight" : "clientHeight"] - wrapHeight;
            var calcBottom = containerTop + containerHeight - offsetBottom;

            if (offsetTop !== void 0 && calcTop <= offsetTop) {
              fixedTop = containerTop + offsetTop;
            } else if (offsetBottom !== void 0 && wrapToTop >= calcBottom) {
              fixedTop = calcBottom;
            } else {
              fixedTop = false;
            }

            if (affixRef) {
              var affixed = fixedTop !== false;
              var placeholderStatus = affixWrapRef.contains(_this.placeholderEL);

              if (affixed) {
                affixRef.className = _this.componentName;
                affixRef.style.top = "".concat(fixedTop, "px");
                affixRef.style.width = "".concat(wrapWidth, "px");
                affixRef.style.height = "".concat(wrapHeight, "px");

                if (_this.zIndex) {
                  affixRef.style.zIndex = "".concat(_this.zIndex);
                }

                if (!placeholderStatus) {
                  _this.placeholderEL.style.width = "".concat(wrapWidth, "px");
                  _this.placeholderEL.style.height = "".concat(wrapHeight, "px");
                  affixWrapRef.appendChild(_this.placeholderEL);
                }
              } else {
                affixRef.removeAttribute("class");
                affixRef.removeAttribute("style");
                placeholderStatus && _this.placeholderEL.remove();
              }

              _this.$emit("fixedChange", affixed, {
                top: fixedTop
              });

              if (isFunction_1(_this.onFixedChange)) _this.onFixedChange(affixed, {
                top: Number(fixedTop)
              });
            }

            _this.ticking = false;
          });
          this.ticking = true;
        }
      }
    },
    mounted: function mounted() {
      var _this2 = this;

      this.placeholderEL = document.createElement("div");
      this.$nextTick(function () {
        _this2.scrollContainer = getScrollContainer(_this2.container);

        _this2.handleScroll();

        on$1(_this2.scrollContainer, "scroll", _this2.handleScroll);
        on$1(window, "resize", _this2.handleScroll);
      });
    },
    destroyed: function destroyed() {
      if (!this.scrollContainer) return;
      off$1(this.scrollContainer, "scroll", this.handleScroll);
      off$1(window, "resize", this.handleScroll);
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "ref": "affixWrapRef"
      }, [h("div", {
        "ref": "affixRef"
      }, [this.$slots["default"]])]);
    }
  });

  var Affix = withInstall(_Affix);

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  var _typeof_1 = createCommonjsModule(function (module) {
    function _typeof(obj) {
      "@babel/helpers - typeof";

      return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
        return typeof obj;
      } : function (obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
    }

    module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  });

  var regeneratorRuntime$1 = createCommonjsModule(function (module) {
    var _typeof = _typeof_1["default"];

    function _regeneratorRuntime() {
      /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

      module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      var exports = {},
          Op = Object.prototype,
          hasOwn = Op.hasOwnProperty,
          $Symbol = "function" == typeof Symbol ? Symbol : {},
          iteratorSymbol = $Symbol.iterator || "@@iterator",
          asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
          toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value: value,
          enumerable: !0,
          configurable: !0,
          writable: !0
        }), obj[key];
      }

      try {
        define({}, "");
      } catch (err) {
        define = function define(obj, key, value) {
          return obj[key] = value;
        };
      }

      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
            generator = Object.create(protoGenerator.prototype),
            context = new Context(tryLocsList || []);
        return generator._invoke = function (innerFn, self, context) {
          var state = "suspendedStart";
          return function (method, arg) {
            if ("executing" === state) throw new Error("Generator is already running");

            if ("completed" === state) {
              if ("throw" === method) throw arg;
              return doneResult();
            }

            for (context.method = method, context.arg = arg;;) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
                if ("suspendedStart" === state) throw state = "completed", context.arg;
                context.dispatchException(context.arg);
              } else "return" === context.method && context.abrupt("return", context.arg);
              state = "executing";
              var record = tryCatch(innerFn, self, context);

              if ("normal" === record.type) {
                if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                return {
                  value: record.arg,
                  done: context.done
                };
              }

              "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
            }
          };
        }(innerFn, self, context), generator;
      }

      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }

      exports.wrap = wrap;
      var ContinueSentinel = {};

      function Generator() {}

      function GeneratorFunction() {}

      function GeneratorFunctionPrototype() {}

      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function () {
        return this;
      });
      var getProto = Object.getPrototypeOf,
          NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function (method) {
          define(prototype, method, function (arg) {
            return this._invoke(method, arg);
          });
        });
      }

      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);

          if ("throw" !== record.type) {
            var result = record.arg,
                value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function (unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function (error) {
              return invoke("throw", error, resolve, reject);
            });
          }

          reject(record.arg);
        }

        var previousPromise;

        this._invoke = function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }

          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
      }

      function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];

        if (undefined === method) {
          if (context.delegate = null, "throw" === context.method) {
            if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
            context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return ContinueSentinel;
        }

        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }

      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }

      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }

      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
      }

      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod) return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next) return iterable;

          if (!isNaN(iterable.length)) {
            var i = -1,
                next = function next() {
              for (; ++i < iterable.length;) {
                if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
              }

              return next.value = undefined, next.done = !0, next;
            };

            return next.next = next;
          }
        }

        return {
          next: doneResult
        };
      }

      function doneResult() {
        return {
          value: undefined,
          done: !0
        };
      }

      return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports.mark = function (genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports.awrap = function (arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
        return this;
      }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
        return this;
      }), define(Gp, "toString", function () {
        return "[object Generator]";
      }), exports.keys = function (object) {
        var keys = [];

        for (var key in object) {
          keys.push(key);
        }

        return keys.reverse(), function next() {
          for (; keys.length;) {
            var key = keys.pop();
            if (key in object) return next.value = key, next.done = !1, next;
          }

          return next.done = !0, next;
        };
      }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
            "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
          }
        },
        stop: function stop() {
          this.done = !0;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type) throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done) throw exception;
          var context = this;

          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
          }

          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i],
                record = entry.completion;
            if ("root" === entry.tryLoc) return handle("end");

            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"),
                  hasFinally = hasOwn.call(entry, "finallyLoc");

              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              } else {
                if (!hasFinally) throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }

          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type) throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];

            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;

              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }

              return thrown;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
          }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
      }, exports;
    }

    module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;
  });

  var runtime = regeneratorRuntime$1();
  var regenerator = runtime; // Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    if ((typeof globalThis === "undefined" ? "undefined" : _typeof$1(globalThis)) === "object") {
      globalThis.regeneratorRuntime = runtime;
    } else {
      Function("r", "regeneratorRuntime = r")(runtime);
    }
  }

  var ANCHOR_SHARP_REGEXP = /#(\S+)$/;
  function getOffsetTop(target, container) {
    var _target$getBoundingCl = target.getBoundingClientRect(),
        top = _target$getBoundingCl.top;

    if (container === window) {
      return top - document.documentElement.clientTop;
    }

    return top - container.getBoundingClientRect().top;
  }

  var props$10 = {
    affixProps: {
      type: Object
    },
    bounds: {
      type: Number,
      "default": 5
    },
    container: {
      type: [String, Function],
      "default": function _default() {
        return function () {
          return window;
        };
      }
    },
    cursor: {
      type: Function
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    targetOffset: {
      type: Number,
      "default": 0
    },
    onChange: Function,
    onClick: Function
  };

  function ownKeys$2g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2g(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$I = getClassPrefixMixins("anchor");
  var _Anchor = mixins(Vue__default["default"], classPrefixMixins$I).extend({
    name: "TAnchor",
    props: _objectSpread$2f({}, props$10),
    provide: function provide() {
      return {
        tAnchor: this
      };
    },
    data: function data() {
      return {
        links: [],
        active: "",
        activeLineStyle: false
      };
    },
    watch: {
      attach: function attach() {
        if (this.scrollContainer) {
          off$1(this.scrollContainer, "scroll", this.handleScroll);
        }

        this.getScrollContainer();
      }
    },
    methods: {
      getScrollContainer: function getScrollContainer$1() {
        var container = this.container;
        this.scrollContainer = getScrollContainer(container);
        on$1(this.scrollContainer, "scroll", this.handleScroll);
        this.handleScroll();
      },
      getAnchorTarget: function getAnchorTarget(link) {
        var matcher = link.match(ANCHOR_SHARP_REGEXP);

        if (!matcher) {
          return;
        }

        var anchor = document.getElementById(matcher[1]);

        if (!anchor) {
          return;
        }

        return anchor;
      },
      registerLink: function registerLink(link) {
        var links = this.links;

        if (!ANCHOR_SHARP_REGEXP.test(link) || links.indexOf(link) !== -1) {
          return;
        }

        links.push(link);
      },
      unregisterLink: function unregisterLink(link) {
        this.links = this.links.filter(function (each) {
          return each !== link;
        });
      },
      setCurrentActiveLink: function setCurrentActiveLink(link) {
        var _this = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var active;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  active = _this.active;

                  if (!(active === link)) {
                    _context.next = 3;
                    break;
                  }

                  return _context.abrupt("return");

                case 3:
                  _this.active = link;

                  _this.emitChange(link, active);

                  _context.next = 7;
                  return Vue__default["default"].nextTick();

                case 7:
                  _this.updateActiveLine();

                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      updateActiveLine: function updateActiveLine() {
        var ele = this.$el.querySelector(".".concat(this.commonStatusClassName.active, ">a"));

        if (!ele) {
          this.activeLineStyle = false;
          return;
        }

        var top = ele.offsetTop,
            height = ele.offsetHeight;
        this.activeLineStyle = {
          top: "".concat(top, "px"),
          height: "".concat(height, "px"),
          opacity: 1
        };
      },
      emitChange: function emitChange(currentLink, prevLink) {
        this.$emit("change", currentLink, prevLink);

        if (this.onChange) {
          this.onChange(currentLink, prevLink);
        }
      },
      handleLinkClick: function handleLinkClick(link) {
        this.$emit("click", link);

        if (this.onClick) {
          this.onClick(link);
        }
      },
      handleScrollTo: function handleScrollTo(link) {
        var _this2 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
          var anchor, scrollContainer, targetOffset, scrollTop, offsetTop, top;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  anchor = _this2.getAnchorTarget(link);

                  _this2.setCurrentActiveLink(link);

                  if (anchor) {
                    _context2.next = 4;
                    break;
                  }

                  return _context2.abrupt("return");

                case 4:
                  _this2.handleScrollLock = true;
                  scrollContainer = _this2.scrollContainer, targetOffset = _this2.targetOffset;
                  scrollTop = getScroll(scrollContainer);
                  offsetTop = getOffsetTop(anchor, scrollContainer);
                  top = scrollTop + offsetTop - targetOffset;
                  _context2.next = 11;
                  return scrollTo(top, {
                    container: scrollContainer
                  });

                case 11:
                  _this2.handleScrollLock = false;

                case 12:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }))();
      },
      handleScroll: function handleScroll() {
        var _this3 = this;

        if (this.handleScrollLock) return;
        var links = this.links,
            bounds = this.bounds,
            targetOffset = this.targetOffset;
        var filters = [];
        var active = "";
        links.forEach(function (link) {
          var anchor = _this3.getAnchorTarget(link);

          if (!anchor) {
            return;
          }

          var top = getOffsetTop(anchor, _this3.scrollContainer);

          if (top < bounds + targetOffset) {
            filters.push({
              link: link,
              top: top
            });
          }
        });

        if (filters.length) {
          var latest = filters.reduce(function (prev, cur) {
            return prev.top > cur.top ? prev : cur;
          });
          active = latest.link;
        }

        this.setCurrentActiveLink(active);
      },
      renderCursor: function renderCursor() {
        var h = this.$createElement;
        var titleContent = renderTNodeJSX(this, "cursor");
        return titleContent || h("div", {
          "class": "".concat(this.componentName, "__line-cursor")
        });
      }
    },
    mounted: function mounted() {
      var _this4 = this;

      return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
        var active;
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                active = _this4.active;

                _this4.getScrollContainer();

                if (!active) {
                  _context3.next = 6;
                  break;
                }

                _context3.next = 5;
                return Vue__default["default"].nextTick();

              case 5:
                _this4.handleScrollTo(active);

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    },
    destroyed: function destroyed() {
      if (!this.scrollContainer) return;
      off$1(this.scrollContainer, "scroll", this.handleScroll);
    },
    render: function render() {
      var h = arguments[0];
      var children = this.$scopedSlots["default"],
          size = this.size,
          affixProps = this.affixProps,
          activeLineStyle = this.activeLineStyle;
      var className = [this.componentName, this.commonSizeClassName[size]];
      var content = h("div", {
        "class": className
      }, [h("div", {
        "class": "".concat(this.componentName, "__line")
      }, [h("div", {
        "class": "".concat(this.componentName, "__line-cursor-wrapper"),
        "style": activeLineStyle
      }, [this.renderCursor()])]), children && children(null)]);

      if (affixProps) {
        return h(Affix, {
          "props": _objectSpread$2f({}, affixProps)
        }, [content]);
      }

      return content;
    }
  });

  var props$$ = {
    href: {
      type: String,
      "default": "",
      required: true
    },
    target: {
      type: String,
      "default": "_self",
      validator: function validator(val) {
        return ["_self", "_blank", "_parent", "_top"].includes(val);
      }
    },
    title: {
      type: [String, Function],
      "default": ""
    }
  };

  function ownKeys$2f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2f(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$H = getClassPrefixMixins("anchor");
  var _AnchorItem = mixins(Vue__default["default"], classPrefixMixins$H).extend({
    name: "TAnchorItem",
    props: _objectSpread$2e(_objectSpread$2e({}, props$$), {}, {
      href: {
        type: String,
        required: true,
        validator: function validator(v) {
          return ANCHOR_SHARP_REGEXP.test(v);
        }
      }
    }),
    inject: {
      tAnchor: {
        "default": void 0
      }
    },
    watch: {
      href: {
        immediate: true,
        handler: function handler() {
          this.unregister();
          this.register();
        }
      }
    },
    destroyed: function destroyed() {
      this.unregister();
    },
    methods: {
      register: function register() {
        this.tAnchor.registerLink(this.href);
      },
      unregister: function unregister() {
        var href = this.href;
        if (!href) return;
        this.tAnchor.unregisterLink(href);
      },
      handleClick: function handleClick(e) {
        var href = this.href,
            tAnchor = this.tAnchor,
            title = this.title;
        tAnchor.handleScrollTo(href);
        tAnchor.handleLinkClick({
          href: href,
          title: typeof title === "string" ? title : void 0,
          e: e
        });
      },
      renderTitle: function renderTitle() {
        var title = this.title,
            $scopedSlots = this.$scopedSlots;
        var titleSlot = $scopedSlots.title;
        var titleVal;

        if (typeof title === "string") {
          titleVal = title;
        } else if (typeof title === "function") {
          titleVal = title(this.$createElement);
        } else if (titleSlot) {
          titleVal = titleSlot(null);
        }

        return titleVal;
      }
    },
    render: function render() {
      var _wrapperClass;

      var h = arguments[0];
      var href = this.href,
          target = this.target,
          $scopedSlots = this.$scopedSlots,
          tAnchor = this.tAnchor;
      var children = $scopedSlots["default"],
          titleSlot = $scopedSlots.title;
      var title = this.renderTitle();
      var titleAttr = typeof title === "string" ? title : null;
      var isActive = tAnchor.active === href;
      var wrapperClass = (_wrapperClass = {}, _defineProperty$3(_wrapperClass, "".concat(this.componentName, "__item"), true), _defineProperty$3(_wrapperClass, this.commonStatusClassName.active, isActive), _wrapperClass);

      var titleClass = _defineProperty$3({}, "".concat(this.componentName, "__item-link"), true);

      return h("div", {
        "class": wrapperClass
      }, [h("a", {
        "attrs": {
          "href": href,
          "title": titleAttr,
          "target": target
        },
        "class": titleClass,
        "on": {
          "click": this.handleClick
        }
      }, [titleSlot ? titleSlot(null) : title]), children && children(null)]);
    }
  });

  /*!
   * clipboard.js v2.0.11
   * https://clipboardjs.com/
   *
   * Licensed MIT © Zeno Rocha
   */
  var clipboard = createCommonjsModule(function (module, exports) {
    (function webpackUniversalModuleDefinition(root, factory) {
      module.exports = factory();
    })(commonjsGlobal, function () {
      return (
        /******/
        function () {
          // webpackBootstrap

          /******/
          var __webpack_modules__ = {
            /***/
            686:
            /***/
            function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

              __webpack_require__.d(__webpack_exports__, {
                "default": function _default() {
                  return (
                    /* binding */
                    clipboard
                  );
                }
              }); // EXTERNAL MODULE: ./node_modules/tiny-emitter/index.js


              var tiny_emitter = __webpack_require__(279);

              var tiny_emitter_default = /*#__PURE__*/__webpack_require__.n(tiny_emitter); // EXTERNAL MODULE: ./node_modules/good-listener/src/listen.js


              var listen = __webpack_require__(370);

              var listen_default = /*#__PURE__*/__webpack_require__.n(listen); // EXTERNAL MODULE: ./node_modules/select/src/select.js


              var src_select = __webpack_require__(817);

              var select_default = /*#__PURE__*/__webpack_require__.n(src_select);

              /**
               * Executes a given operation type.
               * @param {String} type
               * @return {Boolean}
               */

              function command(type) {
                try {
                  return document.execCommand(type);
                } catch (err) {
                  return false;
                }
              }

              /**
               * Cut action wrapper.
               * @param {String|HTMLElement} target
               * @return {String}
               */

              var ClipboardActionCut = function ClipboardActionCut(target) {
                var selectedText = select_default()(target);
                command('cut');
                return selectedText;
              };
              /* harmony default export */


              var actions_cut = ClipboardActionCut;

              /**
               * Creates a fake textarea element with a value.
               * @param {String} value
               * @return {HTMLElement}
               */

              function createFakeElement(value) {
                var isRTL = document.documentElement.getAttribute('dir') === 'rtl';
                var fakeElement = document.createElement('textarea'); // Prevent zooming on iOS

                fakeElement.style.fontSize = '12pt'; // Reset box model

                fakeElement.style.border = '0';
                fakeElement.style.padding = '0';
                fakeElement.style.margin = '0'; // Move element out of screen horizontally

                fakeElement.style.position = 'absolute';
                fakeElement.style[isRTL ? 'right' : 'left'] = '-9999px'; // Move element to the same position vertically

                var yPosition = window.pageYOffset || document.documentElement.scrollTop;
                fakeElement.style.top = "".concat(yPosition, "px");
                fakeElement.setAttribute('readonly', '');
                fakeElement.value = value;
                return fakeElement;
              }

              /**
               * Create fake copy action wrapper using a fake element.
               * @param {String} target
               * @param {Object} options
               * @return {String}
               */

              var fakeCopyAction = function fakeCopyAction(value, options) {
                var fakeElement = createFakeElement(value);
                options.container.appendChild(fakeElement);
                var selectedText = select_default()(fakeElement);
                command('copy');
                fakeElement.remove();
                return selectedText;
              };
              /**
               * Copy action wrapper.
               * @param {String|HTMLElement} target
               * @param {Object} options
               * @return {String}
               */


              var ClipboardActionCopy = function ClipboardActionCopy(target) {
                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                  container: document.body
                };
                var selectedText = '';

                if (typeof target === 'string') {
                  selectedText = fakeCopyAction(target, options);
                } else if (target instanceof HTMLInputElement && !['text', 'search', 'url', 'tel', 'password'].includes(target === null || target === void 0 ? void 0 : target.type)) {
                  // If input type doesn't support `setSelectionRange`. Simulate it. https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange
                  selectedText = fakeCopyAction(target.value, options);
                } else {
                  selectedText = select_default()(target);
                  command('copy');
                }

                return selectedText;
              };
              /* harmony default export */


              var actions_copy = ClipboardActionCopy;

              function _typeof(obj) {
                "@babel/helpers - typeof";

                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  _typeof = function _typeof(obj) {
                    return typeof obj;
                  };
                } else {
                  _typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                  };
                }

                return _typeof(obj);
              }
              /**
               * Inner function which performs selection from either `text` or `target`
               * properties and then executes copy or cut operations.
               * @param {Object} options
               */


              var ClipboardActionDefault = function ClipboardActionDefault() {
                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}; // Defines base properties passed from constructor.

                var _options$action = options.action,
                    action = _options$action === void 0 ? 'copy' : _options$action,
                    container = options.container,
                    target = options.target,
                    text = options.text; // Sets the `action` to be performed which can be either 'copy' or 'cut'.

                if (action !== 'copy' && action !== 'cut') {
                  throw new Error('Invalid "action" value, use either "copy" or "cut"');
                } // Sets the `target` property using an element that will be have its content copied.


                if (target !== undefined) {
                  if (target && _typeof(target) === 'object' && target.nodeType === 1) {
                    if (action === 'copy' && target.hasAttribute('disabled')) {
                      throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                    }

                    if (action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
                      throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
                    }
                  } else {
                    throw new Error('Invalid "target" value, use a valid Element');
                  }
                } // Define selection strategy based on `text` property.


                if (text) {
                  return actions_copy(text, {
                    container: container
                  });
                } // Defines which selection strategy based on `target` property.


                if (target) {
                  return action === 'cut' ? actions_cut(target) : actions_copy(target, {
                    container: container
                  });
                }
              };
              /* harmony default export */


              var actions_default = ClipboardActionDefault;

              function clipboard_typeof(obj) {
                "@babel/helpers - typeof";

                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                  clipboard_typeof = function _typeof(obj) {
                    return typeof obj;
                  };
                } else {
                  clipboard_typeof = function _typeof(obj) {
                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                  };
                }

                return clipboard_typeof(obj);
              }

              function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                  throw new TypeError("Cannot call a class as a function");
                }
              }

              function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }

              function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                if (staticProps) _defineProperties(Constructor, staticProps);
                return Constructor;
              }

              function _inherits(subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                  throw new TypeError("Super expression must either be null or a function");
                }

                subClass.prototype = Object.create(superClass && superClass.prototype, {
                  constructor: {
                    value: subClass,
                    writable: true,
                    configurable: true
                  }
                });
                if (superClass) _setPrototypeOf(subClass, superClass);
              }

              function _setPrototypeOf(o, p) {
                _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                  o.__proto__ = p;
                  return o;
                };

                return _setPrototypeOf(o, p);
              }

              function _createSuper(Derived) {
                var hasNativeReflectConstruct = _isNativeReflectConstruct();

                return function _createSuperInternal() {
                  var Super = _getPrototypeOf(Derived),
                      result;

                  if (hasNativeReflectConstruct) {
                    var NewTarget = _getPrototypeOf(this).constructor;

                    result = Reflect.construct(Super, arguments, NewTarget);
                  } else {
                    result = Super.apply(this, arguments);
                  }

                  return _possibleConstructorReturn(this, result);
                };
              }

              function _possibleConstructorReturn(self, call) {
                if (call && (clipboard_typeof(call) === "object" || typeof call === "function")) {
                  return call;
                }

                return _assertThisInitialized(self);
              }

              function _assertThisInitialized(self) {
                if (self === void 0) {
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }

                return self;
              }

              function _isNativeReflectConstruct() {
                if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                if (Reflect.construct.sham) return false;
                if (typeof Proxy === "function") return true;

                try {
                  Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
                  return true;
                } catch (e) {
                  return false;
                }
              }

              function _getPrototypeOf(o) {
                _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                  return o.__proto__ || Object.getPrototypeOf(o);
                };
                return _getPrototypeOf(o);
              }
              /**
               * Helper function to retrieve attribute value.
               * @param {String} suffix
               * @param {Element} element
               */


              function getAttributeValue(suffix, element) {
                var attribute = "data-clipboard-".concat(suffix);

                if (!element.hasAttribute(attribute)) {
                  return;
                }

                return element.getAttribute(attribute);
              }
              /**
               * Base class which takes one or more elements, adds event listeners to them,
               * and instantiates a new `ClipboardAction` on each click.
               */


              var Clipboard = /*#__PURE__*/function (_Emitter) {
                _inherits(Clipboard, _Emitter);

                var _super = _createSuper(Clipboard);
                /**
                 * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
                 * @param {Object} options
                 */


                function Clipboard(trigger, options) {
                  var _this;

                  _classCallCheck(this, Clipboard);

                  _this = _super.call(this);

                  _this.resolveOptions(options);

                  _this.listenClick(trigger);

                  return _this;
                }
                /**
                 * Defines if attributes would be resolved using internal setter functions
                 * or custom functions that were passed in the constructor.
                 * @param {Object} options
                 */


                _createClass(Clipboard, [{
                  key: "resolveOptions",
                  value: function resolveOptions() {
                    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                    this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
                    this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
                    this.text = typeof options.text === 'function' ? options.text : this.defaultText;
                    this.container = clipboard_typeof(options.container) === 'object' ? options.container : document.body;
                  }
                  /**
                   * Adds a click event listener to the passed trigger.
                   * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
                   */

                }, {
                  key: "listenClick",
                  value: function listenClick(trigger) {
                    var _this2 = this;

                    this.listener = listen_default()(trigger, 'click', function (e) {
                      return _this2.onClick(e);
                    });
                  }
                  /**
                   * Defines a new `ClipboardAction` on each click event.
                   * @param {Event} e
                   */

                }, {
                  key: "onClick",
                  value: function onClick(e) {
                    var trigger = e.delegateTarget || e.currentTarget;
                    var action = this.action(trigger) || 'copy';
                    var text = actions_default({
                      action: action,
                      container: this.container,
                      target: this.target(trigger),
                      text: this.text(trigger)
                    }); // Fires an event based on the copy operation result.

                    this.emit(text ? 'success' : 'error', {
                      action: action,
                      text: text,
                      trigger: trigger,
                      clearSelection: function clearSelection() {
                        if (trigger) {
                          trigger.focus();
                        }

                        window.getSelection().removeAllRanges();
                      }
                    });
                  }
                  /**
                   * Default `action` lookup function.
                   * @param {Element} trigger
                   */

                }, {
                  key: "defaultAction",
                  value: function defaultAction(trigger) {
                    return getAttributeValue('action', trigger);
                  }
                  /**
                   * Default `target` lookup function.
                   * @param {Element} trigger
                   */

                }, {
                  key: "defaultTarget",
                  value: function defaultTarget(trigger) {
                    var selector = getAttributeValue('target', trigger);

                    if (selector) {
                      return document.querySelector(selector);
                    }
                  }
                  /**
                   * Allow fire programmatically a copy action
                   * @param {String|HTMLElement} target
                   * @param {Object} options
                   * @returns Text copied.
                   */

                }, {
                  key: "defaultText",

                  /**
                   * Default `text` lookup function.
                   * @param {Element} trigger
                   */
                  value: function defaultText(trigger) {
                    return getAttributeValue('text', trigger);
                  }
                  /**
                   * Destroy lifecycle.
                   */

                }, {
                  key: "destroy",
                  value: function destroy() {
                    this.listener.destroy();
                  }
                }], [{
                  key: "copy",
                  value: function copy(target) {
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                      container: document.body
                    };
                    return actions_copy(target, options);
                  }
                  /**
                   * Allow fire programmatically a cut action
                   * @param {String|HTMLElement} target
                   * @returns Text cutted.
                   */

                }, {
                  key: "cut",
                  value: function cut(target) {
                    return actions_cut(target);
                  }
                  /**
                   * Returns the support of the given action, or all actions if no action is
                   * given.
                   * @param {String} [action]
                   */

                }, {
                  key: "isSupported",
                  value: function isSupported() {
                    var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];
                    var actions = typeof action === 'string' ? [action] : action;
                    var support = !!document.queryCommandSupported;
                    actions.forEach(function (action) {
                      support = support && !!document.queryCommandSupported(action);
                    });
                    return support;
                  }
                }]);

                return Clipboard;
              }(tiny_emitter_default());
              /* harmony default export */


              var clipboard = Clipboard;
              /***/
            },

            /***/
            828:
            /***/
            function _(module) {
              var DOCUMENT_NODE_TYPE = 9;
              /**
               * A polyfill for Element.matches()
               */

              if (typeof Element !== 'undefined' && !Element.prototype.matches) {
                var proto = Element.prototype;
                proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;
              }
              /**
               * Finds the closest parent that matches a selector.
               *
               * @param {Element} element
               * @param {String} selector
               * @return {Function}
               */


              function closest(element, selector) {
                while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
                  if (typeof element.matches === 'function' && element.matches(selector)) {
                    return element;
                  }

                  element = element.parentNode;
                }
              }

              module.exports = closest;
              /***/
            },

            /***/
            438:
            /***/
            function _(module, __unused_webpack_exports, __webpack_require__) {
              var closest = __webpack_require__(828);
              /**
               * Delegates event to a selector.
               *
               * @param {Element} element
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @param {Boolean} useCapture
               * @return {Object}
               */


              function _delegate(element, selector, type, callback, useCapture) {
                var listenerFn = listener.apply(this, arguments);
                element.addEventListener(type, listenerFn, useCapture);
                return {
                  destroy: function destroy() {
                    element.removeEventListener(type, listenerFn, useCapture);
                  }
                };
              }
              /**
               * Delegates event to a selector.
               *
               * @param {Element|String|Array} [elements]
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @param {Boolean} useCapture
               * @return {Object}
               */


              function delegate(elements, selector, type, callback, useCapture) {
                // Handle the regular Element usage
                if (typeof elements.addEventListener === 'function') {
                  return _delegate.apply(null, arguments);
                } // Handle Element-less usage, it defaults to global delegation


                if (typeof type === 'function') {
                  // Use `document` as the first parameter, then apply arguments
                  // This is a short way to .unshift `arguments` without running into deoptimizations
                  return _delegate.bind(null, document).apply(null, arguments);
                } // Handle Selector-based usage


                if (typeof elements === 'string') {
                  elements = document.querySelectorAll(elements);
                } // Handle Array-like based usage


                return Array.prototype.map.call(elements, function (element) {
                  return _delegate(element, selector, type, callback, useCapture);
                });
              }
              /**
               * Finds closest match and invokes callback.
               *
               * @param {Element} element
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @return {Function}
               */


              function listener(element, selector, type, callback) {
                return function (e) {
                  e.delegateTarget = closest(e.target, selector);

                  if (e.delegateTarget) {
                    callback.call(element, e);
                  }
                };
              }

              module.exports = delegate;
              /***/
            },

            /***/
            879:
            /***/
            function _(__unused_webpack_module, exports) {
              /**
               * Check if argument is a HTML element.
               *
               * @param {Object} value
               * @return {Boolean}
               */
              exports.node = function (value) {
                return value !== undefined && value instanceof HTMLElement && value.nodeType === 1;
              };
              /**
               * Check if argument is a list of HTML elements.
               *
               * @param {Object} value
               * @return {Boolean}
               */


              exports.nodeList = function (value) {
                var type = Object.prototype.toString.call(value);
                return value !== undefined && (type === '[object NodeList]' || type === '[object HTMLCollection]') && 'length' in value && (value.length === 0 || exports.node(value[0]));
              };
              /**
               * Check if argument is a string.
               *
               * @param {Object} value
               * @return {Boolean}
               */


              exports.string = function (value) {
                return typeof value === 'string' || value instanceof String;
              };
              /**
               * Check if argument is a function.
               *
               * @param {Object} value
               * @return {Boolean}
               */


              exports.fn = function (value) {
                var type = Object.prototype.toString.call(value);
                return type === '[object Function]';
              };
              /***/

            },

            /***/
            370:
            /***/
            function _(module, __unused_webpack_exports, __webpack_require__) {
              var is = __webpack_require__(879);

              var delegate = __webpack_require__(438);
              /**
               * Validates all params and calls the right
               * listener function based on its target type.
               *
               * @param {String|HTMLElement|HTMLCollection|NodeList} target
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */


              function listen(target, type, callback) {
                if (!target && !type && !callback) {
                  throw new Error('Missing required arguments');
                }

                if (!is.string(type)) {
                  throw new TypeError('Second argument must be a String');
                }

                if (!is.fn(callback)) {
                  throw new TypeError('Third argument must be a Function');
                }

                if (is.node(target)) {
                  return listenNode(target, type, callback);
                } else if (is.nodeList(target)) {
                  return listenNodeList(target, type, callback);
                } else if (is.string(target)) {
                  return listenSelector(target, type, callback);
                } else {
                  throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
                }
              }
              /**
               * Adds an event listener to a HTML element
               * and returns a remove listener function.
               *
               * @param {HTMLElement} node
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */


              function listenNode(node, type, callback) {
                node.addEventListener(type, callback);
                return {
                  destroy: function destroy() {
                    node.removeEventListener(type, callback);
                  }
                };
              }
              /**
               * Add an event listener to a list of HTML elements
               * and returns a remove listener function.
               *
               * @param {NodeList|HTMLCollection} nodeList
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */


              function listenNodeList(nodeList, type, callback) {
                Array.prototype.forEach.call(nodeList, function (node) {
                  node.addEventListener(type, callback);
                });
                return {
                  destroy: function destroy() {
                    Array.prototype.forEach.call(nodeList, function (node) {
                      node.removeEventListener(type, callback);
                    });
                  }
                };
              }
              /**
               * Add an event listener to a selector
               * and returns a remove listener function.
               *
               * @param {String} selector
               * @param {String} type
               * @param {Function} callback
               * @return {Object}
               */


              function listenSelector(selector, type, callback) {
                return delegate(document.body, selector, type, callback);
              }

              module.exports = listen;
              /***/
            },

            /***/
            817:
            /***/
            function _(module) {
              function select(element) {
                var selectedText;

                if (element.nodeName === 'SELECT') {
                  element.focus();
                  selectedText = element.value;
                } else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
                  var isReadOnly = element.hasAttribute('readonly');

                  if (!isReadOnly) {
                    element.setAttribute('readonly', '');
                  }

                  element.select();
                  element.setSelectionRange(0, element.value.length);

                  if (!isReadOnly) {
                    element.removeAttribute('readonly');
                  }

                  selectedText = element.value;
                } else {
                  if (element.hasAttribute('contenteditable')) {
                    element.focus();
                  }

                  var selection = window.getSelection();
                  var range = document.createRange();
                  range.selectNodeContents(element);
                  selection.removeAllRanges();
                  selection.addRange(range);
                  selectedText = selection.toString();
                }

                return selectedText;
              }

              module.exports = select;
              /***/
            },

            /***/
            279:
            /***/
            function _(module) {
              function E() {// Keep this empty so it's easier to inherit from
                // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
              }

              E.prototype = {
                on: function on(name, callback, ctx) {
                  var e = this.e || (this.e = {});
                  (e[name] || (e[name] = [])).push({
                    fn: callback,
                    ctx: ctx
                  });
                  return this;
                },
                once: function once(name, callback, ctx) {
                  var self = this;

                  function listener() {
                    self.off(name, listener);
                    callback.apply(ctx, arguments);
                  }
                  listener._ = callback;
                  return this.on(name, listener, ctx);
                },
                emit: function emit(name) {
                  var data = [].slice.call(arguments, 1);
                  var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
                  var i = 0;
                  var len = evtArr.length;

                  for (i; i < len; i++) {
                    evtArr[i].fn.apply(evtArr[i].ctx, data);
                  }

                  return this;
                },
                off: function off(name, callback) {
                  var e = this.e || (this.e = {});
                  var evts = e[name];
                  var liveEvents = [];

                  if (evts && callback) {
                    for (var i = 0, len = evts.length; i < len; i++) {
                      if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);
                    }
                  } // Remove event from queue to prevent memory leak
                  // Suggested by https://github.com/lazd
                  // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910


                  liveEvents.length ? e[name] = liveEvents : delete e[name];
                  return this;
                }
              };
              module.exports = E;
              module.exports.TinyEmitter = E;
              /***/
            }
            /******/

          };
          /************************************************************************/

          /******/
          // The module cache

          /******/

          var __webpack_module_cache__ = {};
          /******/

          /******/
          // The require function

          /******/

          function __webpack_require__(moduleId) {
            /******/
            // Check if module is in cache

            /******/
            if (__webpack_module_cache__[moduleId]) {
              /******/
              return __webpack_module_cache__[moduleId].exports;
              /******/
            }
            /******/
            // Create a new module (and put it into the cache)

            /******/


            var module = __webpack_module_cache__[moduleId] = {
              /******/
              // no module.id needed

              /******/
              // no module.loaded needed

              /******/
              exports: {}
              /******/

            };
            /******/

            /******/
            // Execute the module function

            /******/

            __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
            /******/

            /******/
            // Return the exports of the module

            /******/


            return module.exports;
            /******/
          }
          /******/

          /************************************************************************/

          /******/

          /* webpack/runtime/compat get default export */

          /******/


          !function () {
            /******/
            // getDefaultExport function for compatibility with non-harmony modules

            /******/
            __webpack_require__.n = function (module) {
              /******/
              var getter = module && module.__esModule ?
              /******/
              function () {
                return module['default'];
              } :
              /******/
              function () {
                return module;
              };
              /******/

              __webpack_require__.d(getter, {
                a: getter
              });
              /******/


              return getter;
              /******/
            };
            /******/

          }();
          /******/

          /******/

          /* webpack/runtime/define property getters */

          /******/

          !function () {
            /******/
            // define getter functions for harmony exports

            /******/
            __webpack_require__.d = function (exports, definition) {
              /******/
              for (var key in definition) {
                /******/
                if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
                  /******/
                  Object.defineProperty(exports, key, {
                    enumerable: true,
                    get: definition[key]
                  });
                  /******/
                }
                /******/

              }
              /******/

            };
            /******/

          }();
          /******/

          /******/

          /* webpack/runtime/hasOwnProperty shorthand */

          /******/

          !function () {
            /******/
            __webpack_require__.o = function (obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            };
            /******/

          }();
          /******/

          /************************************************************************/

          /******/
          // module exports must be returned from runtime so entry inlining is disabled

          /******/
          // startup

          /******/
          // Load entry module and return exports

          /******/

          return __webpack_require__(686);
          /******/
        }()["default"]
      );
    });
  });
  var clipboard$1 = /*@__PURE__*/getDefaultExportFromCjs(clipboard);

  function copyText(_text) {
    var div = document.createElement("div");
    var clip = new clipboard$1(div, {
      text: function text() {
        return _text;
      }
    });
    div.click();
    clip.destroy();
    div.remove();
  }

  var THEME_LIST = ["info", "success", "warning", "error", "question", "loading"];
  var DISTANCE$1 = "32px";
  var PLACEMENT_OFFSET$1 = {
    top: {
      top: DISTANCE$1,
      left: "50%",
      transform: "translateX(-50%)"
    },
    center: {
      left: "50%",
      top: "50%",
      transform: "translateX(-50%) translateY(-50%)"
    },
    left: {
      left: DISTANCE$1,
      top: "50%",
      transform: "translateY(-50%)"
    },
    bottom: {
      bottom: DISTANCE$1,
      left: "50%",
      transform: "translateX(-50%)"
    },
    right: {
      right: DISTANCE$1,
      top: "50%",
      transform: "translateY(-50%)",
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-end"
    },
    "top-left": {
      left: DISTANCE$1,
      top: DISTANCE$1
    },
    "top-right": {
      right: DISTANCE$1,
      top: DISTANCE$1,
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-end"
    },
    "bottom-right": {
      right: DISTANCE$1,
      bottom: DISTANCE$1,
      display: "flex",
      flexDirection: "column",
      alignItems: "flex-end"
    },
    "bottom-left": {
      left: DISTANCE$1,
      bottom: DISTANCE$1
    }
  };
  var PLACEMENT_LIST = Object.keys(PLACEMENT_OFFSET$1);

  var props$_ = {
    closeBtn: {
      type: [String, Boolean, Function],
      "default": void 0
    },
    content: {
      type: [String, Function]
    },
    duration: {
      type: Number,
      "default": 3e3
    },
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    theme: {
      type: String,
      "default": "info",
      validator: function validator(val) {
        if (!val) return true;
        return ["info", "success", "warning", "error", "question", "loading"].includes(val);
      }
    },
    onCloseBtnClick: Function,
    onDurationEnd: Function
  };

  var ANIMATION_OPTION = {
    duration: 200,
    easing: "linear"
  };

  function fadeIn(dom, placement) {
    if (!dom) return;
    var offsetWidth = (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
    var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
    var fadeInKeyframes = getFadeInKeyframes(placement, offsetWidth, offsetHeight);
    if (!fadeInKeyframes) return;
    var styleAfterFadeIn = fadeInKeyframes[fadeInKeyframes.length - 1];
    setDomStyleAfterAnimation(dom, styleAfterFadeIn);
    dom.animate && dom.animate(fadeInKeyframes, ANIMATION_OPTION);
  }

  function fadeOut(dom, placement, onFinish) {
    if (!dom) return;
    var offsetHeight = (dom === null || dom === void 0 ? void 0 : dom.offsetHeight) || 0;
    var fadeOutKeyframes = getFadeOutKeyframes(placement, offsetHeight);
    if (!fadeOutKeyframes) return onFinish();
    var styleAfterFadeOut = fadeOutKeyframes[fadeOutKeyframes.length - 1];
    setDomStyleAfterAnimation(dom, styleAfterFadeOut);
    var animation = dom.animate && dom.animate(fadeOutKeyframes, ANIMATION_OPTION);

    if (animation) {
      animation.onfinish = function () {
        dom.style.display = "none";
        onFinish();
      };
    } else {
      dom.style.display = "none";
      onFinish();
    }
  }

  function setDomStyleAfterAnimation(dom, styleAfterAnimation) {
    var keys = Object.keys(styleAfterAnimation);

    for (var i = 0; i < keys.length; i += 1) {
      var key = keys[i];
      dom.style[key] = styleAfterAnimation[key];
    }
  }

  function getFadeInKeyframes(placement, offsetWidth, offsetHeight) {
    if (!PLACEMENT_LIST.includes(placement)) return null;

    if (["top-left", "left", "bottom-left"].includes(placement)) {
      return [{
        opacity: 0,
        marginLeft: "-".concat(offsetWidth, "px")
      }, {
        opacity: 1,
        marginLeft: "0"
      }];
    }

    if (["top-right", "right", "bottom-right"].includes(placement)) {
      return [{
        opacity: 0,
        marginRight: "-".concat(offsetWidth, "px")
      }, {
        opacity: 1,
        marginRight: "0"
      }];
    }

    if (["top", "center"].includes(placement)) {
      return [{
        opacity: 0,
        marginTop: "-".concat(offsetHeight, "px")
      }, {
        opacity: 1,
        marginTop: "0"
      }];
    }

    if (["bottom"].includes(placement)) {
      return [{
        opacity: 0,
        transform: "translate3d(0, ".concat(offsetHeight, "px, 0)")
      }, {
        opacity: 1,
        transform: "translate3d(0, 0, 0)"
      }];
    }
  }

  function getFadeOutKeyframes(placement, offsetHeight) {
    if (!PLACEMENT_LIST.includes(placement)) return null;

    if (["bottom-left", "bottom", "bottom-right"].includes(placement)) {
      var marginOffset2 = "".concat(offsetHeight, "px");
      return [{
        opacity: 1,
        marginTop: "0px"
      }, {
        opacity: 0,
        marginTop: marginOffset2
      }];
    }

    var marginOffset = "-".concat(offsetHeight, "px");
    return [{
      opacity: 1,
      marginTop: "0px"
    }, {
      opacity: 0,
      marginTop: marginOffset
    }];
  }

  function ownKeys$2e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2e(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$G = getClassPrefixMixins("message");
  var _Message = mixins(classPrefixMixins$G, getGlobalIconMixins()).extend({
    name: "TMessage",
    props: _objectSpread$2d(_objectSpread$2d({}, props$_), {}, {
      placement: String
    }),
    data: function data() {
      return {
        timer: null
      };
    },
    computed: {
      classes: function classes() {
        var _this = this;

        var status = {};
        THEME_LIST.forEach(function (t) {
          status["".concat(_this.classPrefix, "-is-").concat(t)] = _this.theme === t;
        });
        return [this.componentName, status, _defineProperty$3({}, "".concat(this.classPrefix, "-is-closable"), this.closeBtn || this.$scopedSlots.closeBtn)];
      }
    },
    created: function created() {
      this.duration && this.setTimer();
    },
    mounted: function mounted() {
      var msgDom = this.$refs.msg;
      fadeIn(msgDom, this.$props.placement);
    },
    methods: {
      setTimer: function setTimer() {
        var _this2 = this;

        if (!this.duration) {
          return;
        }

        this.timer = Number(setTimeout(function () {
          _this2.clearTimer();

          var msgDom = _this2.$refs.msg;
          fadeOut(msgDom, _this2.$props.placement, function () {
            _this2.$emit("duration-end");
          });

          if (_this2.onDurationEnd) {
            _this2.onDurationEnd();
          }
        }, this.duration));
      },
      clearTimer: function clearTimer() {
        this.duration && clearTimeout(this.timer);
      },
      close: function close(e) {
        this.$emit("close-btn-click", {
          e: e
        });

        if (this.onCloseBtnClick) {
          this.onCloseBtnClick({
            e: e
          });
        }
      },
      renderClose: function renderClose() {
        var h = this.$createElement;

        var _this$useGlobalIcon = this.useGlobalIcon({
          CloseIcon: Close
        }),
            CloseIcon = _this$useGlobalIcon.CloseIcon;

        var defaultClose = h(CloseIcon);
        return h("span", {
          "class": "".concat(this.componentName, "__close"),
          "on": {
            "click": this.close
          }
        }, [renderTNodeJSX(this, "closeBtn", defaultClose)]);
      },
      renderIcon: function renderIcon() {
        var h = this.$createElement;
        if (this.icon === false) return;
        if (typeof this.icon === "function") return this.icon(this.$createElement);

        if (this.$scopedSlots.icon) {
          return this.$scopedSlots.icon(null);
        }

        var _this$useGlobalIcon2 = this.useGlobalIcon({
          InfoCircleFilledIcon: InfoCircleFilled,
          CheckCircleFilledIcon: CheckCircleFilled,
          ErrorCircleFilledIcon: ErrorCircleFilled,
          HelpCircleFilledIcon: HelpCircleFilled
        }),
            InfoCircleFilledIcon = _this$useGlobalIcon2.InfoCircleFilledIcon,
            CheckCircleFilledIcon = _this$useGlobalIcon2.CheckCircleFilledIcon,
            ErrorCircleFilledIcon = _this$useGlobalIcon2.ErrorCircleFilledIcon,
            HelpCircleFilledIcon = _this$useGlobalIcon2.HelpCircleFilledIcon;

        var component = {
          info: InfoCircleFilledIcon,
          success: CheckCircleFilledIcon,
          warning: ErrorCircleFilledIcon,
          error: ErrorCircleFilledIcon,
          question: HelpCircleFilledIcon,
          loading: Loading
        }[this.theme];
        return h(component);
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "ref": "msg",
        "class": this.classes,
        "on": {
          "mouseenter": this.clearTimer,
          "mouseleave": this.setTimer
        }
      }, [this.renderIcon(), renderContent(this, "default", "content"), this.renderClose()]);
    }
  });

  function ownKeys$2d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2d(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$F = getClassPrefixMixins("message__list");
  var DEFAULT_Z_INDEX$1 = 5e3;

  var getUniqueId = function () {
    var id = 0;
    return function () {
      id += 1;
      return id;
    };
  }();

  var MessageList = mixins(classPrefixMixins$F).extend({
    name: "TMessageList",
    components: {
      TMessage: _Message
    },
    props: {
      zIndex: Number,
      placement: String
    },
    data: function data() {
      return {
        list: []
      };
    },
    computed: {
      styles: function styles() {
        return _objectSpread$2c(_objectSpread$2c({}, PLACEMENT_OFFSET$1[this.placement]), {}, {
          zIndex: this.zIndex !== DEFAULT_Z_INDEX$1 ? this.zIndex : DEFAULT_Z_INDEX$1
        });
      }
    },
    methods: {
      add: function add(msg) {
        var mg = _objectSpread$2c(_objectSpread$2c({}, msg), {}, {
          key: getUniqueId(),
          placement: this.placement
        });

        this.list.push(mg);
        return this.list.length - 1;
      },
      remove: function remove(index) {
        this.list.splice(index, 1);
      },
      removeAll: function removeAll() {
        this.list = [];
      },
      getOffset: function getOffset(val) {
        if (!val) return;
        return isNaN(Number(val)) ? val : "".concat(val, "px");
      },
      msgStyles: function msgStyles(item) {
        return item.offset && {
          position: "relative",
          left: this.getOffset(item.offset[0]),
          top: this.getOffset(item.offset[1])
        };
      },
      getListeners: function getListeners(index) {
        var _this = this;

        return {
          "close-btn-click": function closeBtnClick() {
            return _this.remove(index);
          },
          "duration-end": function durationEnd() {
            return _this.remove(index);
          }
        };
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];
      if (!this.list.length) return;
      return h("div", {
        "class": this.componentName,
        "style": this.styles
      }, [this.list.map(function (item, index) {
        return h("t-message", {
          "key": item.key,
          "style": _this2.msgStyles(item),
          "props": _objectSpread$2c({}, item),
          "on": _objectSpread$2c({}, _this2.getListeners(index))
        });
      })]);
    }
  });

  function ownKeys$2c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2c(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var instanceMap$1 = /* @__PURE__ */new Map();
  var defaultMessageOptions = {
    duration: 3e3,
    attach: "body",
    zIndex: DEFAULT_Z_INDEX$1,
    placement: "top"
  };

  function handleParams(params) {
    var options = _objectSpread$2b(_objectSpread$2b({}, defaultMessageOptions), params);

    options.content = params.content;
    return options;
  }

  var MessageFunction = function MessageFunction(props) {
    var options = handleParams(props);
    var attach = options.attach,
        placement = options.placement;
    var attachDom = getAttach(attach);

    if (!instanceMap$1.get(attachDom)) {
      instanceMap$1.set(attachDom, {});
    }

    var p = instanceMap$1.get(attachDom)[placement];

    if (!p) {
      var instance = new MessageList({
        propsData: {
          zIndex: options.zIndex,
          placement: options.placement
        }
      }).$mount();
      instance.add(options);
      instanceMap$1.get(attachDom)[placement] = instance;
      attachDom.appendChild(instance.$el);
    } else {
      p.add(options);
    }

    return new Promise(function (resolve) {
      var ins = instanceMap$1.get(attachDom)[placement];
      ins.$nextTick(function () {
        var msg = ins.$children;
        resolve(msg[msg.length - 1]);
      });
    });
  };

  var showThemeMessage = function showThemeMessage(theme, params, duration) {
    var options = {
      theme: theme
    };

    if (typeof params === "string") {
      options.content = params;
    } else if (_typeof$1(params) === "object" && !(params instanceof Array)) {
      options = _objectSpread$2b(_objectSpread$2b({}, options), params);
    }

    (duration || duration === 0) && (options.duration = duration);
    return MessageFunction(options);
  };

  var setMessageConfig = function setMessageConfig(placement, attach, offset, zIndex) {
    attach && (defaultMessageOptions.attach = attach);
    offset && (defaultMessageOptions.offset = offset);
    placement && (defaultMessageOptions.placement = placement);
    zIndex && (defaultMessageOptions.zIndex = zIndex);
  };

  var extraApi$2 = {
    info: function info(params, duration) {
      return showThemeMessage("info", params, duration);
    },
    success: function success(params, duration) {
      return showThemeMessage("success", params, duration);
    },
    warning: function warning(params, duration) {
      return showThemeMessage("warning", params, duration);
    },
    error: function error(params, duration) {
      return showThemeMessage("error", params, duration);
    },
    question: function question(params, duration) {
      return showThemeMessage("question", params, duration);
    },
    loading: function loading(params, duration) {
      return showThemeMessage("loading", params, duration);
    },
    close: function close(promise) {
      promise.then(function (instance) {
        return instance.close();
      });
    },
    closeAll: function closeAll() {
      if (instanceMap$1 instanceof Map) {
        instanceMap$1.forEach(function (attach) {
          Object.keys(attach).forEach(function (placement) {
            var instance = attach[placement];
            instance.list = [];
          });
        });
      }
    },
    config: setMessageConfig
  };
  var MessagePlugin = showThemeMessage;
  Object.keys(extraApi$2).forEach(function (funcName) {
    MessagePlugin[funcName] = extraApi$2[funcName];
  });

  MessagePlugin.install = function () {
    Vue__default["default"].prototype.$message = MessagePlugin;
  };

  var props$Z = {
    id: {
      type: String,
      "default": "",
      required: true
    },
    tag: {
      type: String,
      "default": "div"
    }
  };

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getWindow(node) {
    if (node == null) {
      return window;
    }

    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }

    return node;
  }

  function isElement(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }

  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }

  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }

    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]


      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];

        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }

  function effect$2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;

    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }

    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }

        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules


  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$2,
    requires: ['computeStyles']
  };

  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }

  var max = Math.max;
  var min$1 = Math.min;
  var round = Math.round;

  function getUAString() {
    var uaData = navigator.userAgentData;

    if (uaData != null && uaData.brands) {
      return uaData.brands.map(function (item) {
        return item.brand + "/" + item.version;
      }).join(' ');
    }

    return navigator.userAgent;
  }

  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }

    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }

    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;

    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }

    var _ref = isElement(element) ? getWindow(element) : window,
        visualViewport = _ref.visualViewport;

    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width: width,
      height: height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x: x,
      y: y
    };
  }

  // means it doesn't take into account transforms.

  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;

    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }

    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }

    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height
    };
  }

  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


    return false;
  }

  function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }

    return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || ( // DOM Element detected
      isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback

    );
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle$1(element).position === 'fixed') {
      return null;
    }

    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block


  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());

    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle$1(element);

      if (elementCss.position === 'fixed') {
        return null;
      }
    }

    var currentNode = getParentNode(element);

    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }

    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }

    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.


  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);

    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }

    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
      return window;
    }

    return offsetParent || getContainingBlock(element) || window;
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function within(min, value, max$1) {
    return max(min, min$1(value, max$1));
  }
  function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  };

  function arrow(_ref) {
    var _state$modifiersData$;

    var state = _ref.state,
        name = _ref.name,
        options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';

    if (!arrowElement || !popperOffsets) {
      return;
    }

    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }

  function effect$1(_ref2) {
    var state = _ref2.state,
        options = _ref2.options;
    var _options$element = options.element,
        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

    if (arrowElement == null) {
      return;
    } // CSS selector


    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);

      if (!arrowElement) {
        return;
      }
    }

    {
      if (!isHTMLElement(arrowElement)) {
        console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', 'To use an SVG arrow, wrap it in an HTMLElement that will be used as', 'the arrow.'].join(' '));
      }
    }

    if (!contains(state.elements.popper, arrowElement)) {
      {
        console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', 'element.'].join(' '));
      }

      return;
    }

    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules


  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect$1,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref) {
    var x = _ref.x,
        y = _ref.y;
    var win = window;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }

  function mapToStyles(_ref2) {
    var _Object$assign2;

    var popper = _ref2.popper,
        popperRect = _ref2.popperRect,
        placement = _ref2.placement,
        variation = _ref2.variation,
        offsets = _ref2.offsets,
        position = _ref2.position,
        gpuAcceleration = _ref2.gpuAcceleration,
        adaptive = _ref2.adaptive,
        roundOffsets = _ref2.roundOffsets,
        isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x,
        x = _offsets$x === void 0 ? 0 : _offsets$x,
        _offsets$y = offsets.y,
        y = _offsets$y === void 0 ? 0 : _offsets$y;

    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;

    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';

      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);

        if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


      offsetParent = offsetParent;

      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
        offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }

      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
        offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }

    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);

    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref4.x;
    y = _ref4.y;

    if (gpuAcceleration) {
      var _Object$assign;

      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }

    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }

  function computeStyles(_ref5) {
    var state = _ref5.state,
        options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
        _options$adaptive = options.adaptive,
        adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
        _options$roundOffsets = options.roundOffsets,
        roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;

    {
      var transitionProperty = getComputedStyle$1(state.elements.popper).transitionProperty || '';

      if (adaptive && ['transform', 'top', 'right', 'bottom', 'left'].some(function (property) {
        return transitionProperty.indexOf(property) >= 0;
      })) {
        console.warn(['Popper: Detected CSS transitions on at least one of the following', 'CSS properties: "transform", "top", "right", "bottom", "left".', '\n\n', 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', 'for smooth transitions, or remove these properties from the CSS', 'transition declaration on the popper element if only transitioning', 'opacity or background-color for example.', '\n\n', 'We recommend using the popper element as a wrapper around an inner', 'element that can have any CSS property transitioned for animations.'].join(' '));
      }
    }

    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration,
      isFixed: state.options.strategy === 'fixed'
    };

    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }

    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }

    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  };

  var passive = {
    passive: true
  };

  function effect(_ref) {
    var state = _ref.state,
        instance = _ref.instance,
        options = _ref.options;
    var _options$scroll = options.scroll,
        scroll = _options$scroll === void 0 ? true : _options$scroll,
        _options$resize = options.resize,
        resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }

    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules


  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect,
    data: {}
  };

  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }

  var hash = {
    start: 'end',
    end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;

    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();

      if (layoutViewport || !layoutViewport && strategy === 'fixed') {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }

    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;

    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;

    if (getComputedStyle$1(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }

    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle$1(element),
        overflow = _getComputedStyle.overflow,
        overflowX = _getComputedStyle.overflowX,
        overflowY = _getComputedStyle.overflowY;

    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }

    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }

    return getScrollParent(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen;

    if (list === void 0) {
      list = [];
    }

    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === 'fixed');
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }

  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`


  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

    if (!isElement(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


    return clippingParents.filter(function (clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents


  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min$1(rect.right, accRect.right);
      accRect.bottom = min$1(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
        element = _ref.element,
        placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;

    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;

      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;

      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;

      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;

      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }

    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';

      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;

        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }

    return offsets;
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$placement = _options.placement,
        placement = _options$placement === void 0 ? state.placement : _options$placement,
        _options$strategy = _options.strategy,
        strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
        _options$boundary = _options.boundary,
        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
        _options$rootBoundary = _options.rootBoundary,
        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
        _options$elementConte = _options.elementContext,
        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
        _options$altBoundary = _options.altBoundary,
        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
        _options$padding = _options.padding,
        padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }

    return overflowOffsets;
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        placement = _options.placement,
        boundary = _options.boundary,
        rootBoundary = _options.rootBoundary,
        padding = _options.padding,
        flipVariations = _options.flipVariations,
        _options$allowedAutoP = _options.allowedAutoPlacements,
        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });

    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;

      {
        console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(' '));
      }
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }

    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }

  function flip(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;

    if (state.modifiersData[name]._skip) {
      return;
    }

    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
        specifiedFallbackPlacements = options.fallbackPlacements,
        padding = options.padding,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        _options$flipVariatio = options.flipVariations,
        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
        allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];

    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];

      var _basePlacement = getBasePlacement(placement);

      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }

      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];

      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }

      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }

      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }

      checksMap.set(placement, checks);
    }

    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;

      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);

          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });

        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };

      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);

        if (_ret === "break") break;
      }
    }

    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules


  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }

    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }

  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }

  function hide(_ref) {
    var state = _ref.state,
        name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules


  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
      placement: placement
    })) : offset,
        skidding = _ref[0],
        distance = _ref[1];

    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }

  function offset(_ref2) {
    var state = _ref2.state,
        options = _ref2.options,
        name = _ref2.name;
    var _options$offset = options.offset,
        offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
        x = _data$state$placement.x,
        y = _data$state$placement.y;

    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
        name = _ref.name; // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step

    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;
    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        padding = options.padding,
        _options$tether = options.tether,
        tether = _options$tether === void 0 ? true : _options$tether,
        _options$tetherOffset = options.tetherOffset,
        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };

    if (!popperOffsets) {
      return;
    }

    if (checkMainAxis) {
      var _offsetModifierState$;

      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min = offset + overflow[mainSide];
      var max$1 = offset - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min$1(min, tetherMin) : min, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _offsetModifierState$2;

      var _mainSide = mainAxis === 'x' ? top : left;

      var _altSide = mainAxis === 'x' ? bottom : right;

      var _offset = popperOffsets[altAxis];

      var _len = altAxis === 'y' ? 'height' : 'width';

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.


  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }

    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };

    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }

      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }

    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);

          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }

    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }

  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce$1(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }

      return pending;
    };
  }

  function format(str) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return [].concat(args).reduce(function (p, c) {
      return p.replace(/%s/, c);
    }, str);
  }

  var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
  var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
  var VALID_PROPERTIES = ['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options'];
  function validateModifiers(modifiers) {
    modifiers.forEach(function (modifier) {
      [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
      .filter(function (value, index, self) {
        return self.indexOf(value) === index;
      }).forEach(function (key) {
        switch (key) {
          case 'name':
            if (typeof modifier.name !== 'string') {
              console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', "\"" + String(modifier.name) + "\""));
            }

            break;

          case 'enabled':
            if (typeof modifier.enabled !== 'boolean') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', "\"" + String(modifier.enabled) + "\""));
            }

            break;

          case 'phase':
            if (modifierPhases.indexOf(modifier.phase) < 0) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(', '), "\"" + String(modifier.phase) + "\""));
            }

            break;

          case 'fn':
            if (typeof modifier.fn !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'effect':
            if (modifier.effect != null && typeof modifier.effect !== 'function') {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', "\"" + String(modifier.fn) + "\""));
            }

            break;

          case 'requires':
            if (modifier.requires != null && !Array.isArray(modifier.requires)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', "\"" + String(modifier.requires) + "\""));
            }

            break;

          case 'requiresIfExists':
            if (!Array.isArray(modifier.requiresIfExists)) {
              console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', "\"" + String(modifier.requiresIfExists) + "\""));
            }

            break;

          case 'options':
          case 'data':
            break;

          default:
            console.error("PopperJS: an invalid property has been provided to the \"" + modifier.name + "\" modifier, valid properties are " + VALID_PROPERTIES.map(function (s) {
              return "\"" + s + "\"";
            }).join(', ') + "; but \"" + key + "\" was provided.");
        }

        modifier.requires && modifier.requires.forEach(function (requirement) {
          if (modifiers.find(function (mod) {
            return mod.name === requirement;
          }) == null) {
            console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
          }
        });
      });
    });
  }

  function uniqueBy(arr, fn) {
    var identifiers = new Set();
    return arr.filter(function (item) {
      var identifier = fn(item);

      if (!identifiers.has(identifier)) {
        identifiers.add(identifier);
        return true;
      }
    });
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  var INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';
  var INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';
  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };

  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }

  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }

    var _generatorOptions = generatorOptions,
        _generatorOptions$def = _generatorOptions.defaultModifiers,
        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
        _generatorOptions$def2 = _generatorOptions.defaultOptions,
        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }

      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          }); // Validate the provided modifiers so that the consumer will get warned
          // if one of the modifiers is invalid for any reason

          {
            var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function (_ref) {
              var name = _ref.name;
              return name;
            });
            validateModifiers(modifiers);

            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function (_ref2) {
                var name = _ref2.name;
                return name === 'flip';
              });

              if (!flipModifier) {
                console.error(['Popper: "auto" placements require the "flip" modifier be', 'present and enabled to work.'].join(' '));
              }
            }

            var _getComputedStyle = getComputedStyle$1(popper),
                marginTop = _getComputedStyle.marginTop,
                marginRight = _getComputedStyle.marginRight,
                marginBottom = _getComputedStyle.marginBottom,
                marginLeft = _getComputedStyle.marginLeft; // We no longer take into account `margins` on the popper, and it can
            // cause bugs with positioning, so we'll warn the consumer


            if ([marginTop, marginRight, marginBottom, marginLeft].some(function (margin) {
              return parseFloat(margin);
            })) {
              console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', 'between the popper and its reference element or boundary.', 'To replicate margin, use the `offset` modifier, as well as', 'the `padding` option in the `preventOverflow` and `flip`', 'modifiers.'].join(' '));
            }
          }

          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }

          var _state$elements = state.elements,
              reference = _state$elements.reference,
              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            {
              console.error(INVALID_ELEMENT_ERROR);
            }

            return;
          } // Store the reference and popper rects to be read by modifiers


          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          var __debug_loops__ = 0;

          for (var index = 0; index < state.orderedModifiers.length; index++) {
            {
              __debug_loops__ += 1;

              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR);
                break;
              }
            }

            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }

            var _state$orderedModifie = state.orderedModifiers[index],
                fn = _state$orderedModifie.fn,
                _state$orderedModifie2 = _state$orderedModifie.options,
                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                name = _state$orderedModifie.name;

            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce$1(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };

      if (!areValidElements(reference, popper)) {
        {
          console.error(INVALID_ELEMENT_ERROR);
        }

        return instance;
      }

      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref3) {
          var name = _ref3.name,
              _ref3$options = _ref3.options,
              options = _ref3$options === void 0 ? {} : _ref3$options,
              effect = _ref3.effect;

          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });

            var noopFn = function noopFn() {};

            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }

      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }

      return instance;
    };
  }

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  var _excluded$4 = ["from", "to", "direction"];

  function ownKeys$2b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2b(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function omit$1(obj, fields) {
    var shallowCopy = _objectSpread$2a({}, obj);

    for (var i = 0; i < fields.length; i++) {
      var key = fields[i];
      delete shallowCopy[key];
    }

    return shallowCopy;
  }
  function firstUpperCase$1(str) {
    return str.toLowerCase().replace(/( |^)[a-z]/g, function (_char) {
      return _char.toUpperCase();
    });
  }
  function getBackgroundColor(color) {
    if (typeof color === "string") {
      return color;
    }

    if (Array.isArray(color)) {
      if (color[0] && color[0][0] === "#") {
        color.unshift("90deg");
      }

      return "linear-gradient( ".concat(color.join(","), " )");
    }

    var from = color.from,
        to = color.to,
        _color$direction = color.direction,
        direction = _color$direction === void 0 ? "to right" : _color$direction,
        rest = _objectWithoutProperties$2(color, _excluded$4);

    var keys = Object.keys(rest);

    if (keys.length) {
      keys = keys.sort(function (a, b) {
        return parseFloat(a.substr(0, a.length - 1)) - parseFloat(b.substr(0, b.length - 1));
      });
      var tempArr = keys.map(function (key) {
        return "".concat(rest[key], " ").concat(key);
      });
      return "linear-gradient(".concat(direction, ", ").concat(tempArr.join(","), ")");
    }

    return "linear-gradient(".concat(direction, ", ").concat(from, ", ").concat(to, ")");
  }
  function getPropsApiByEvent(eventName) {
    return camelCase_1("on-".concat(eventName));
  }
  function getIEVersion() {
    var _navigator = navigator,
        userAgent = _navigator.userAgent;
    var isIE = userAgent.indexOf("compatible") > -1 && userAgent.indexOf("MSIE") > -1;
    var isIE11 = userAgent.indexOf("Trident") > -1 && userAgent.indexOf("rv:11.0") > -1;

    if (isIE) {
      var reIE = new RegExp("MSIE (\\d+\\.\\d+);");
      var match = userAgent.match(reIE);
      if (!match) return -1;
      var fIEVersion = parseFloat(match[1]);
      return fIEVersion < 7 ? 6 : fIEVersion;
    }

    if (isIE11) {
      return 11;
    }

    return Number.MAX_SAFE_INTEGER;
  }
  function getCharacterLength(str, maxCharacter) {
    var hasMaxCharacter = typeof maxCharacter === "number";

    if (!str || str.length === 0) {
      if (hasMaxCharacter) {
        return {
          length: 0,
          characters: str
        };
      }

      return 0;
    }

    var len = 0;

    for (var i = 0; i < str.length; i++) {
      var currentStringLength = 0;

      if (str.charCodeAt(i) > 127 || str.charCodeAt(i) === 94) {
        currentStringLength = 2;
      } else {
        currentStringLength = 1;
      }

      if (hasMaxCharacter && len + currentStringLength > maxCharacter) {
        return {
          length: len,
          characters: str.slice(0, i)
        };
      }

      len += currentStringLength;
    }

    if (hasMaxCharacter) {
      return {
        length: len,
        characters: str
      };
    }

    return len;
  }
  function pxCompat(param) {
    return typeof param === "number" ? "".concat(param, "px") : param;
  }

  var popupProps = {
    attach: {
      type: [String, Function],
      "default": "body"
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    destroyOnClose: Boolean,
    disabled: Boolean,
    hideEmptyPopup: Boolean,
    overlayClassName: {
      type: [String, Object, Array]
    },
    overlayInnerStyle: {
      type: [Boolean, Object, Function]
    },
    overlayStyle: {
      type: [Boolean, Object, Function]
    },
    placement: {
      type: String,
      "default": "top"
    },
    showArrow: Boolean,
    trigger: {
      type: String,
      "default": "hover",
      validator: function validator(val) {
        if (!val) return true;
        return ["hover", "click", "focus", "context-menu"].includes(val);
      }
    },
    triggerElement: {
      type: [String, Function]
    },
    visible: {
      type: Boolean,
      "default": void 0
    },
    defaultVisible: Boolean,
    zIndex: {
      type: Number
    },
    onScroll: Function,
    onVisibleChange: Function
  };

  function isContentRectChanged(rect1, rect2) {
    if (!rect1 || !rect2) return;

    if (["width", "height", "x", "y"].some(function (k) {
      return rect1[k] !== rect2[k];
    })) {
      return true;
    }

    return false;
  }

  function observeResize(elm, cb) {
    var _window;

    if (!((_window = window) !== null && _window !== void 0 && _window.ResizeObserver) || !elm) return;
    var prevContentRect = null;
    var ro = new ResizeObserver(function () {
      var entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      var _ref = entries[0] || {},
          contentRect = _ref.contentRect;

      if (isContentRectChanged(contentRect, prevContentRect)) {
        prevContentRect = contentRect;
        cb(contentRect);
        return;
      }

      if (!prevContentRect) {
        prevContentRect = contentRect;
      }
    });
    ro.observe(elm);
    return function () {
      ro.unobserve(elm);
    };
  }

  var Trigger = Vue__default["default"].extend({
    data: function data() {
      return {
        contentRect: null
      };
    },
    mounted: function mounted() {
      var _this = this;

      this.$on("hook:destroyed", observeResize(this.$el, function (ev) {
        _this.$emit("resize", ev);
      }));
    },
    render: function render() {
      var _children$;

      var h = arguments[0];
      var children = this.$slots["default"] || [];

      if (children.length > 1 || !((_children$ = children[0]) !== null && _children$ !== void 0 && _children$.tag)) {
        return h("span", [children]);
      }

      return children[0];
    }
  });
  var Container = Vue__default["default"].extend({
    props: {
      parent: Object,
      visible: Boolean,
      attach: popupProps.attach
    },
    data: function data() {
      return {
        content: null
      };
    },
    mounted: function mounted() {
      var _this2 = this;

      if (this.visible) {
        raf_1(this.mountContent);
      }

      this.$watch("visible", function (visible) {
        if (visible) {
          _this2.mountContent();
        }
      });
    },
    destroyed: function destroyed() {
      this.unmountContent();
    },
    methods: {
      mountContent: function mountContent() {
        var _this$$refs, _this$$refs$triggerRe;

        this.$createElement;
        if (this.content) return;
        var parent = this;
        var elm = document.createElement("div");
        elm.style.cssText = "position: absolute; top: 0px; left: 0px; width: 100%";
        elm.appendChild(document.createElement("div"));
        this.content = new this.$root.constructor({
          parent: parent,
          render: function render() {
            var h = arguments[0];
            return h("div", [parent.$slots.content]);
          },
          mounted: function mounted() {
            parent.$emit("contentMounted");
            var content = this.$el.children[0];

            if (content) {
              this.$on("hook:destroyed", observeResize(content, function () {
                parent.$emit("resize");
              }));
            }
          },
          destroyed: function destroyed() {
            parent.content = null;
            removeDom(elm);
          }
        });
        getAttach(this.attach, (_this$$refs = this.$refs) === null || _this$$refs === void 0 ? void 0 : (_this$$refs$triggerRe = _this$$refs.triggerRef) === null || _this$$refs$triggerRe === void 0 ? void 0 : _this$$refs$triggerRe.$el).appendChild(elm);
        this.content.$mount(elm.children[0]);
      },
      unmountContent: function unmountContent() {
        var _this$content;

        (_this$content = this.content) === null || _this$content === void 0 ? void 0 : _this$content.$destroy();
      },
      updateContent: function updateContent() {
        var _this$content2;

        (_this$content2 = this.content) === null || _this$content2 === void 0 ? void 0 : _this$content2.$forceUpdate();
      }
    },
    render: function render() {
      var _this3 = this;

      var h = arguments[0];
      return h(Trigger, {
        "ref": "triggerRef",
        "on": {
          "resize": function resize() {
            return _this3.$emit("resize");
          }
        }
      }, [this.$slots["default"]]);
    }
  });

  function ownKeys$2a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$29(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2a(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$E = getClassPrefixMixins("popup");
  var showTimeout = 250;
  var hideTimeout = 150;
  var triggers = ["click", "hover", "focus", "context-menu"];
  var injectionKey = "__T_POPUP";

  function getPopperPlacement(placement) {
    return placement.replace(/-(left|top)$/, "-start").replace(/-(right|bottom)$/, "-end");
  }

  function attachListeners(elm) {
    var offs = [];
    return {
      add: function add(type, listener) {
        on$1(elm, type, listener);
        offs.push(function () {
          off$1(elm, type, listener);
        });
      },
      clean: function clean() {
        offs.forEach(function (handler) {
          return handler === null || handler === void 0 ? void 0 : handler();
        });
        offs.length = 0;
      }
    };
  }

  var Popup$1 = mixins(classPrefixMixins$E).extend({
    name: "TPopup",
    provide: function provide() {
      return _defineProperty$3({}, injectionKey, this);
    },
    inject: {
      popup: {
        from: injectionKey,
        "default": void 0
      }
    },
    props: _objectSpread$29(_objectSpread$29({}, popupProps), {}, {
      expandAnimation: {
        type: Boolean
      },
      updateScrollTop: {
        type: Function
      }
    }),
    data: function data() {
      return {
        popper: null,
        timeout: null,
        hasDocumentEvent: false,
        visibleState: 0,
        mouseInRange: false,
        contentClicked: false
      };
    },
    computed: {
      overlayClasses: function overlayClasses() {
        var _ref2;

        return ["".concat(this.componentName, "__content"), (_ref2 = {}, _defineProperty$3(_ref2, "".concat(this.componentName, "__content--text"), this.content === "string"), _defineProperty$3(_ref2, "".concat(this.componentName, "__content--arrow"), this.showArrow), _defineProperty$3(_ref2, this.commonStatusClassName.disabled, this.disabled), _ref2)];
      },
      hasTrigger: function hasTrigger() {
        var _this = this;

        return triggers.reduce(function (map, trigger) {
          return _objectSpread$29(_objectSpread$29({}, map), {}, _defineProperty$3({}, trigger, _this.trigger.includes(trigger)));
        }, {});
      }
    },
    watch: {
      visible: function visible(_visible) {
        var _this2 = this;

        var hasTrigger = this.hasTrigger,
            triggerEl = this.$el;

        if (_visible) {
          this.preventClosing(true);

          if (!this.hasDocumentEvent) {
            on$1(document, "click", this.handleDocumentClick, true);
            this.hasDocumentEvent = true;
          }

          if (triggerEl && hasTrigger.focus) {
            once(triggerEl, "keydown", function (ev) {
              if (ev.code === "Escape") {
                _this2.handleClose({
                  trigger: "keydown-esc"
                });
              }
            });
          }

          this.$nextTick(function () {
            _this2.popupMounted();
          });
        } else {
          this.preventClosing(false);
          off$1(document, "click", this.handleDocumentClick, true);
          this.hasDocumentEvent = false;
          this.mouseInRange = false;
        }
      },
      overlayInnerStyle: function overlayInnerStyle() {
        this.updateOverlayInnerStyle();
        this.updatePopper();
      },
      placement: function placement() {
        var _this$popper;

        (_this$popper = this.popper) === null || _this$popper === void 0 ? void 0 : _this$popper.destroy();
        this.popper = null;
        this.updatePopper();
      },
      contentClicked: function contentClicked(clicked) {
        if (this.popup) {
          this.popup.contentClicked = clicked;
        }
      }
    },
    mounted: function mounted() {
      var _this3 = this;

      var trigger = attachListeners(this.$el);

      var updateTrigger = function updateTrigger() {
        trigger.clean();
        var hasTrigger = _this3.hasTrigger;

        if (hasTrigger.hover) {
          trigger.add("mouseenter", function () {
            return _this3.handleOpen({
              trigger: "trigger-element-hover"
            });
          });
          trigger.add("mouseleave", function () {
            return _this3.handleClose({
              trigger: "trigger-element-hover"
            });
          });
        } else if (hasTrigger.focus) {
          trigger.add("focusin", function () {
            return _this3.handleOpen({
              trigger: "trigger-element-focus"
            });
          });
          trigger.add("focusout", function () {
            return _this3.handleClose({
              trigger: "trigger-element-blur"
            });
          });
        } else if (hasTrigger.click) {
          trigger.add("click", function (e) {
            _this3.handleToggle({
              e: e,
              trigger: "trigger-element-click"
            });

            if (getIEVersion() < 11) {
              _this3.handleDocumentClick();
            }
          });
        } else if (hasTrigger["context-menu"]) {
          trigger.add("contextmenu", function (e) {
            e.preventDefault();
            e.button === 2 && _this3.handleToggle({
              trigger: "context-menu"
            });
          });
        }
      };

      updateTrigger();
      this.$watch("trigger", updateTrigger);
    },
    updated: function updated() {
      var _this$$refs$container;

      (_this$$refs$container = this.$refs.container) === null || _this$$refs$container === void 0 ? void 0 : _this$$refs$container.updateContent();
    },
    beforeDestroy: function beforeDestroy() {
      var _this$popup;

      (_this$popup = this.popup) === null || _this$popup === void 0 ? void 0 : _this$popup.preventClosing(false);
      this.destroyPopper();
      off$1(document, "click", this.handleDocumentClick, true);
    },
    methods: {
      updatePopper: function updatePopper() {
        var _this4 = this;

        var triggerEl = this.$el;
        var popperEl = this.$refs.popper;
        if (!popperEl || !this.visible) return;

        if (this.popper) {
          this.popper.update();
          return;
        }

        this.popper = createPopper(triggerEl, popperEl, {
          modifiers: getIEVersion() > 9 ? [] : [{
            name: "computeStyles",
            options: {
              gpuAcceleration: false
            }
          }],
          placement: getPopperPlacement(this.placement),
          onFirstUpdate: function onFirstUpdate() {
            _this4.$nextTick(_this4.updatePopper);
          }
        });
      },
      popupMounted: function popupMounted() {
        var _this$$refs;

        var overlayEl = (_this$$refs = this.$refs) === null || _this$$refs === void 0 ? void 0 : _this$$refs.overlay;

        if (overlayEl) {
          var _this$updateScrollTop;

          (_this$updateScrollTop = this.updateScrollTop) === null || _this$updateScrollTop === void 0 ? void 0 : _this$updateScrollTop.call(this, overlayEl);
        }
      },
      getOverlayStyle: function getOverlayStyle() {
        var _this$$refs2;

        var overlayStyle = this.overlayStyle;
        var triggerEl = this.$el;
        var overlayEl = (_this$$refs2 = this.$refs) === null || _this$$refs2 === void 0 ? void 0 : _this$$refs2.overlay;
        if (!triggerEl || !overlayEl) return;

        if (typeof overlayStyle === "function") {
          return overlayStyle(triggerEl, overlayEl);
        }

        if (_typeof$1(overlayStyle) === "object") {
          return overlayStyle;
        }
      },
      updateOverlayInnerStyle: function updateOverlayInnerStyle() {
        var _this$$refs3;

        var overlayInnerStyle = this.overlayInnerStyle;
        var triggerEl = this.$el;
        var overlayEl = (_this$$refs3 = this.$refs) === null || _this$$refs3 === void 0 ? void 0 : _this$$refs3.overlay;
        if (!triggerEl || !overlayEl) return;

        if (typeof overlayInnerStyle === "function") {
          setStyle(overlayEl, overlayInnerStyle(triggerEl, overlayEl));
        } else if (_typeof$1(overlayInnerStyle) === "object") {
          setStyle(overlayEl, overlayInnerStyle);
        }
      },
      destroyPopper: function destroyPopper() {
        if (this.popper) {
          this.popper.destroy();
          this.popper = null;
        }

        if (this.destroyOnClose) {
          var _this$$refs$container2;

          (_this$$refs$container2 = this.$refs.container) === null || _this$$refs$container2 === void 0 ? void 0 : _this$$refs$container2.unmountContent();
        }
      },
      handleToggle: function handleToggle(context) {
        this.emitPopVisible(!this.visible, context);
      },
      handleOpen: function handleOpen(context) {
        var _this5 = this;

        clearTimeout(this.timeout);
        this.timeout = setTimeout(function () {
          _this5.emitPopVisible(true, context);
        }, this.hasTrigger.click ? 0 : showTimeout);
      },
      handleClose: function handleClose(context) {
        var _this6 = this;

        clearTimeout(this.timeout);
        this.timeout = setTimeout(function () {
          _this6.emitPopVisible(false, context);
        }, this.hasTrigger.click ? 0 : hideTimeout);
      },
      handleDocumentClick: function handleDocumentClick(ev) {
        var _this7 = this;

        if (this.contentClicked) {
          setTimeout(function () {
            _this7.contentClicked = false;
          });
          return;
        }

        var triggerEl = this.$el;
        if (triggerEl.contains(ev.target)) return;
        this.visibleState = 0;
        this.emitPopVisible(false, {
          trigger: "document"
        });
      },
      emitPopVisible: function emitPopVisible(visible, context) {
        if (this.disabled || visible === this.visible) return;
        if (!visible && this.visibleState > 1) return;
        if (visible && this.mouseInRange) return;
        this.$emit("visible-change", visible, context);

        if (typeof this.onVisibleChange === "function") {
          this.onVisibleChange(visible, context);
        }
      },
      onMouseEnter: function onMouseEnter() {
        this.mouseInRange = true;
        this.handleOpen({});
      },
      onMouseLeave: function onMouseLeave(ev) {
        if (this.visibleState > 1) {
          var rect = this.$refs.popper.getBoundingClientRect();
          if (ev.x > rect.x && ev.x < rect.x + rect.width && ev.y > rect.y && ev.y < rect.y + rect.height) return;
        }

        this.mouseInRange = false;
        this.handleClose({});
        var parent = this.popup;

        if (parent !== null && parent !== void 0 && parent.mouseInRange) {
          parent.onMouseLeave(ev);
        }
      },
      onBeforeEnter: function onBeforeEnter() {
        if (this.visible) {
          this.updatePopper();
        }
      },
      onAfterEnter: function onAfterEnter() {
        if (this.visible) {
          this.updatePopper();
        }
      },
      preventClosing: function preventClosing(preventing) {
        var parent = this.popup;
        parent === null || parent === void 0 ? void 0 : parent.preventClosing(preventing);

        if (preventing) {
          this.visibleState += 1;
        } else if (this.visibleState) {
          this.visibleState -= 1;

          if (!this.visibleState) {
            this.emitPopVisible(false, {});

            if (parent !== null && parent !== void 0 && parent.hasTrigger.hover && !(parent !== null && parent !== void 0 && parent.mouseInRange)) {
              parent.emitPopVisible(false, {});
            }
          }
        }
      }
    },
    render: function render(h) {
      var _this8 = this;

      var visible = this.visible,
          destroyOnClose = this.destroyOnClose,
          hasTrigger = this.hasTrigger,
          onScroll = this.onScroll;
      var ref = renderContent(this, "default", "triggerElement");
      var content = renderTNodeJSX(this, "content");
      var hidePopup = this.hideEmptyPopup && ["", void 0, null].includes(content);
      var overlay = visible || !destroyOnClose ? h("div", {
        "class": [this.componentName, this.overlayClassName],
        ref: "popper",
        style: [hidePopup && {
          visibility: "hidden",
          pointerEvents: "none"
        }, {
          zIndex: this.zIndex
        }, this.getOverlayStyle()],
        directives: destroyOnClose ? void 0 : [{
          name: "show",
          rawName: "v-show",
          value: visible && !hidePopup,
          expression: "visible"
        }],
        on: _objectSpread$29({
          mousedown: function mousedown() {
            _this8.contentClicked = true;
          }
        }, hasTrigger.hover && {
          mouseenter: this.onMouseEnter,
          mouseleave: this.onMouseLeave
        })
      }, [h("div", {
        "class": this.overlayClasses,
        ref: "overlay",
        on: onScroll ? {
          scroll: function scroll(e) {
            onScroll({
              e: e
            });
          }
        } : void 0
      }, [content, this.showArrow && h("div", {
        "class": "".concat(this.componentName, "__arrow")
      })])]) : null;
      return h(Container, {
        "ref": "container",
        "on": {
          "contentMounted": function contentMounted() {
            if (visible) {
              _this8.updatePopper();

              _this8.updateOverlayInnerStyle();
            }
          },
          "resize": function resize() {
            if (visible) {
              _this8.updatePopper();
            }
          }
        },
        "attrs": {
          "parent": this,
          "visible": visible,
          "attach": this.attach
        }
      }, [h("transition", {
        "slot": "content",
        "attrs": {
          "name": this.expandAnimation ? "".concat(this.componentName, "--animation-expand") : "".concat(this.componentName, "--animation"),
          "appear": true
        },
        "on": {
          "beforeEnter": this.onBeforeEnter,
          "afterEnter": this.onAfterEnter,
          "afterLeave": this.destroyPopper
        }
      }, [overlay]), ref]);
    }
  });

  var _excluded$3 = ["name"];

  function ownKeys$29(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$28(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$29(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$29(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var defaultModel = {
    prop: "value",
    event: "input"
  };

  function toCamel(str) {
    return str.replace(/-([a-z])/ig, function (m, letter) {
      return letter.toUpperCase();
    });
  }

  function getPropOptionMap(props) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var propOptionMap = {};
    var model = options.model;

    function parseProp(propOption) {
      var propName = propOption.name,
          others = _objectWithoutProperties$2(propOption, _excluded$3);

      var camelName = propName.replace(/^[a-z]/, function (letter) {
        return letter.toUpperCase();
      });
      var defaultName = "default".concat(camelName);
      var dataName = "data".concat(camelName);
      var events = [];

      if (propOption.event) {
        events = events.concat(propOption.event);
      } else if (model.prop === propName) {
        events = events.concat(model.event);
      } else {
        events = events.concat("update:".concat(propName));
      }

      return _objectSpread$28({
        events: events,
        defaultName: defaultName,
        dataName: dataName
      }, others);
    }

    props.forEach(function (prop) {
      var defaultOption = {
        alias: []
      };
      var propOption;

      if (typeof prop === "string") {
        propOption = _objectSpread$28(_objectSpread$28({}, defaultOption), {}, {
          name: prop
        });
      } else {
        propOption = _objectSpread$28(_objectSpread$28({}, defaultOption), prop);
      }

      propOptionMap[propOption.name] = parseProp(propOption);
    });
    return propOptionMap;
  }

  function mapProps (props) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    function mapProps(componentConstructor) {
      var component = componentConstructor.prototype ? componentConstructor.prototype.constructor.options : componentConstructor;
      var model = options.model || defaultModel;
      var propOptionMap = getPropOptionMap(props, {
        model: model
      });

      var defineProps = _objectSpread$28({}, component.props);

      var defineWatches = {};
      var defineEvents = [];
      var defineMethods = {};
      var propsKeys = Object.keys(component.props);
      var camelPropsKeys = propsKeys.map(function (key) {
        return toCamel(key);
      });
      Object.keys(propOptionMap).forEach(function (propName) {
        var _propOptionMap$propNa = propOptionMap[propName],
            events = _propOptionMap$propNa.events,
            alias = _propOptionMap$propNa.alias,
            defaultName = _propOptionMap$propNa.defaultName,
            dataName = _propOptionMap$propNa.dataName;
        defineProps[propName] = component.props[propName];
        defineProps[defaultName] = component.props[defaultName];

        if (alias) {
          alias.forEach(function (prop) {
            defineProps[prop] = defineProps[propName];
          });
        }

        defineEvents = defineEvents.concat(events);
        defineWatches[defaultName] = {
          handler: function handler(v) {
            if (defaultName in this.$vnode.componentOptions.propsData && !(propName in this.$vnode.componentOptions.propsData)) {
              this.$data[dataName] = v;
            }
          },
          immediate: true
        };
        alias.forEach(function (aliasItem) {
          defineWatches[aliasItem] = {
            handler: function handler(v) {
              if (aliasItem in this.$vnode.componentOptions.propsData && !(propName in this.$vnode.componentOptions.propsData)) {
                this.$data[dataName] = v;
              }
            },
            immediate: true
          };
        });
        defineWatches[propName] = {
          handler: function handler(v) {
            if (propName in this.$vnode.componentOptions.propsData) {
              this.$data[dataName] = v;
            }
          },
          immediate: true
        };
      });

      if (component.methods) {
        Object.keys(component.methods).forEach(function (key) {
          defineMethods[key] = function () {
            if (this.$refs.component) {
              var _this$$refs$component;

              return (_this$$refs$component = this.$refs.component)[key].apply(_this$$refs$component, arguments);
            }
          };
        });
      }

      var name = component.name;
      return Vue__default["default"].extend({
        name: "".concat(name, "-mapprops"),
        inheritAttrs: false,
        model: {
          prop: model.prop,
          event: Array.isArray(model.event) ? model.event[0] : model.event
        },
        data: function data() {
          var data = {};
          Object.keys(propOptionMap).forEach(function (propName) {
            var dataName = propOptionMap[propName].dataName;
            data[dataName] = void 0;
          });
          return _objectSpread$28({}, data);
        },
        props: _objectSpread$28({}, defineProps),
        computed: {
          _listeners: function _listeners() {
            var _this = this;

            var others = {};
            Object.keys(this.$listeners).forEach(function (event) {
              if (defineEvents.indexOf(event) === -1) {
                others[event] = function () {
                  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                  }

                  _this.$emit.apply(_this, [event].concat(args));
                };
              }
            });
            return others;
          }
        },
        watch: defineWatches,
        render: function render(h) {
          var _this2 = this;

          var propMap = {};
          var handlerMap = {};
          Object.keys(propOptionMap).forEach(function (propName) {
            var _propOptionMap$propNa2 = propOptionMap[propName],
                dataName = _propOptionMap$propNa2.dataName,
                events = _propOptionMap$propNa2.events;

            if (propName in _this2.$vnode.componentOptions.propsData || typeof _this2[dataName] !== "undefined") {
              propMap[propName] = _this2[dataName];
            }

            handlerMap[events[0]] = function (v) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }

              return _this2.updateData.apply(_this2, [propName, v].concat(args));
            };
          });
          var attrs = {};
          Object.keys(this.$attrs).forEach(function (attrName) {
            var camelAttrKey = toCamel(attrName);

            if (camelPropsKeys.indexOf(camelAttrKey) === -1) {
              attrs[attrName] = _this2.$attrs[attrName];
            }
          });
          return h(component, {
            props: _objectSpread$28(_objectSpread$28({}, this.$props), propMap),
            attrs: _objectSpread$28({}, attrs),
            on: _objectSpread$28(_objectSpread$28({}, this._listeners), handlerMap),
            scopedSlots: _objectSpread$28({}, this.$scopedSlots),
            ref: "component"
          });
        },
        methods: _objectSpread$28({
          updateData: function updateData(propName, v) {
            var _this3 = this;

            for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
              args[_key3 - 2] = arguments[_key3];
            }

            propOptionMap[propName].events.forEach(function (event) {
              _this3.$emit.apply(_this3, [event, v].concat(args));
            });

            if (!(propName in this.$vnode.componentOptions.propsData)) {
              this[propOptionMap[propName].dataName] = v;
              return true;
            }
          }
        }, defineMethods)
      });
    }

    return mapProps;
  }

  var Popup = withInstall(mapProps(["visible"], {
    model: {
      prop: "visible",
      event: "visible-change"
    }
  })(Popup$1));

  function ownKeys$28(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$27(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$28(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$28(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _AnchorTarget = mixins(getConfigReceiverMixins("anchor"), getGlobalIconMixins()).extend({
    name: "TAnchorTarget",
    props: _objectSpread$27({}, props$Z),
    methods: {
      copyText: function copyText$1() {
        var a = document.createElement("a");
        a.href = "#".concat(this.id);

        copyText(a.href);

        MessagePlugin.success(this.global.copySuccessText, 1e3);
      }
    },
    render: function render() {
      var h = arguments[0];
      var Tag = this.tag,
          children = this.$scopedSlots["default"],
          id = this.id;

      var _this$useGlobalIcon = this.useGlobalIcon({
        FileCopyIcon: FileCopy
      }),
          FileCopyIcon = _this$useGlobalIcon.FileCopyIcon;

      var className = ["".concat(this.componentName, "__target")];
      var iconClassName = "".concat(this.componentName, "__copy");
      return h(Tag, {
        "attrs": {
          "id": id
        },
        "class": className
      }, [children && children(null), h(Popup, {
        "attrs": {
          "content": this.global.copyText,
          "placement": "top",
          "showArrow": true
        },
        "class": iconClassName
      }, [h(FileCopyIcon, {
        "nativeOn": {
          "click": this.copyText
        }
      })])]);
    }
  });

  var Anchor = withInstall(_Anchor);
  var AnchorItem = withInstall(_AnchorItem);
  var AnchorTarget = withInstall(_AnchorTarget);

  var props$Y = {
    maxItemWidth: {
      type: String,
      "default": void 0
    },
    options: {
      type: Array
    },
    separator: {
      type: [String, Function]
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        return ["light"].includes(val);
      }
    }
  };

  var props$X = {
    delay: {
      type: Number
    },
    destroyOnClose: {
      type: Boolean,
      "default": true
    },
    duration: {
      type: Number
    },
    placement: {
      type: String,
      "default": "top"
    },
    showArrow: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "primary", "success", "danger", "warning", "light"].includes(val);
      }
    }
  };

  function ownKeys$27(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$26(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$27(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$27(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$D = getClassPrefixMixins("tooltip");
  var _Tooltip = mixins(classPrefixMixins$D).extend({
    name: "TTooltip",
    components: {
      Popup: Popup$1
    },
    props: _objectSpread$26(_objectSpread$26({}, popupProps), props$X),
    data: function data() {
      return {
        timer: null,
        x: 0,
        offsetX: 0,
        tooltipVisible: false
      };
    },
    computed: {
      tooltipOverlayClassName: function tooltipOverlayClassName() {
        return [this.componentName, _defineProperty$3({}, "".concat(this.componentName, "--").concat(this.theme), this.theme), this.overlayClassName];
      },
      tooltipOverlayInnerStyle: function tooltipOverlayInnerStyle() {
        var _this = this;

        if (this.placement !== "mouse" || this.offsetX === 0) {
          return this.overlayInnerStyle;
        }

        var offsetStyle = function offsetStyle(triggerEl) {
          return {
            transform: "translateX(".concat(_this.offsetX - triggerEl.getBoundingClientRect().left, "px)")
          };
        };

        if (this.overlayInnerStyle) {
          return function (triggerEl, popupEl) {
            return _objectSpread$26(_objectSpread$26({}, offsetStyle(triggerEl)), isFunction_1(_this.overlayInnerStyle) ? _this.overlayInnerStyle(triggerEl, popupEl) : _this.overlayInnerStyle);
          };
        }

        return offsetStyle;
      }
    },
    watch: {
      visible: function visible(_visible) {
        if (this.timer && !_visible) {
          clearTimeout(this.timer);
          this.timer = null;
        }
      }
    },
    created: function created() {
      var _this2 = this;

      if (this.duration && this.visible) {
        this.timer = setTimeout(function () {
          _this2.$emit("visible-change", false);

          clearTimeout(_this2.timer);
          _this2.timer = null;
        }, this.duration);
      }
    },
    mounted: function mounted() {
      var _window;

      (_window = window) === null || _window === void 0 ? void 0 : _window.addEventListener("mousemove", this.onMouseMove, {
        passive: true
      });
    },
    destroyed: function destroyed() {
      var _window2;

      (_window2 = window) === null || _window2 === void 0 ? void 0 : _window2.removeEventListener("mousemove", this.onMouseMove);
    },
    methods: {
      onMouseMove: function onMouseMove(e) {
        this.x = e.clientX;
      },
      onTipVisibleChange: function onTipVisibleChange(val, ctx) {
        if (this.timer && (ctx === null || ctx === void 0 ? void 0 : ctx.trigger) !== "document") return;
        if (val) this.offsetX = this.x;
        this.$emit("visible-change", val);
      },
      getPopupProps: function getPopupProps() {
        var _this3 = this;

        var r = _objectSpread$26(_objectSpread$26({}, this.$props), {}, {
          showArrow: this.placement === "mouse" ? false : this.showArrow,
          placement: this.placement === "mouse" ? "bottom-left" : this.placement,
          content: function content() {
            return renderTNodeJSX(_this3, "content");
          },
          "default": function _default() {
            return renderContent(_this3, "default", "triggerElement");
          },
          overlayClassName: this.tooltipOverlayClassName,
          overlayInnerStyle: this.tooltipOverlayInnerStyle
        });

        return r;
      },
      updatedTooltip: function updatedTooltip() {
        this.$refs.popup && this.$refs.popup.updatePopper();
      }
    },
    render: function render() {
      var h = arguments[0];
      return h(Popup$1, helper([{
        "ref": "popup",
        "attrs": {
          "visible": this.visible
        }
      }, {
        "props": this.getPopupProps()
      }, {}, {
        "on": {
          "visible-change": this.onTipVisibleChange
        }
      }]));
    }
  });

  var Tooltip = withInstall(mapProps(["visible"], {
    model: {
      prop: "visible",
      event: "visible-change"
    }
  })(_Tooltip));

  var props$W = {
    content: {
      type: [String, Number, Function]
    },
    "default": {
      type: [String, Number, Function]
    },
    disabled: Boolean,
    href: {
      type: String,
      "default": ""
    },
    maxWidth: {
      type: String,
      "default": void 0
    },
    replace: Boolean,
    router: {
      type: Object
    },
    target: {
      type: String,
      "default": "_self",
      validator: function validator(val) {
        return ["_blank", "_self", "_parent", "_top"].includes(val);
      }
    },
    to: {
      type: [String, Object]
    }
  };

  function ownKeys$26(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$25(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$26(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$26(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$C = getClassPrefixMixins("breadcrumb");
  var localTBreadcrumbOrigin = {
    separator: "",
    theme: "light",
    $slots: {
      separator: ""
    },
    maxItemWidth: void 0
  };
  var _BreadcrumbItem = mixins(classPrefixMixins$C, getGlobalIconMixins()).extend({
    name: "TBreadcrumbItem",
    props: _objectSpread$25({}, props$W),
    inject: ["tBreadcrumb"],
    data: function data() {
      return {
        localTBreadcrumb: localTBreadcrumbOrigin,
        themeClassName: "",
        $router: null,
        isCutOff: false
      };
    },
    components: {
      Tooltip: Tooltip
    },
    computed: {
      maxWithStyle: function maxWithStyle() {
        var localTBreadcrumb = this.localTBreadcrumb;
        var maxItemWidth = localTBreadcrumb.maxItemWidth;
        var maxWith = this.maxWidth || maxItemWidth || "120";
        return {
          "max-width": "".concat(maxWith, "px")
        };
      }
    },
    watch: {
      tBreadcrumb: {
        immediate: true,
        handler: function handler(v) {
          this.localTBreadcrumb = v;
        }
      }
    },
    created: function created() {
      var tBreadcrumb = this.localTBreadcrumb;
      this.themeClassName = tBreadcrumb.theme;
    },
    mounted: function mounted() {
      this.isCutOff = isNodeOverflow(this.$refs.breadcrumbText);
    },
    beforeUpdate: function beforeUpdate() {
      this.isCutOff = isNodeOverflow(this.$refs.breadcrumbText);
    },
    methods: {
      bindEvent: function bindEvent() {
        var to = this.to;
        var router = this.router || this.$router;

        if (to && router) {
          this.replace ? router.replace(to) : router.push(to);
        }
      }
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var localTBreadcrumb = this.localTBreadcrumb,
          href = this.href,
          target = this.target,
          to = this.to,
          disabled = this.disabled;

      var _this$useGlobalIcon = this.useGlobalIcon({
        ChevronRightIcon: ChevronRight
      }),
          ChevronRightIcon = _this$useGlobalIcon.ChevronRightIcon;

      var separator = localTBreadcrumb.separator;
      var separatorSlot = localTBreadcrumb.$slots.separator;
      var separatorPropContent = typeof separator === "function" ? separator() : separator;
      var separatorContent = separatorPropContent || separatorSlot || h(ChevronRightIcon);
      var itemClass = ["".concat(this.componentName, "__item"), this.themeClassName];
      var textClass = ["".concat(this.componentName, "--text-overflow")];

      if (disabled) {
        textClass.push("".concat(this.classPrefix, "-is-disabled"));
      }

      if (this.$listeners.click) {
        textClass.push("".concat(this.classPrefix, "-gestureClass"));
      }

      var clickEvent = to && !disabled ? {
        on: {
          click: this.bindEvent
        }
      } : {};
      var textContent = h("span", {
        "ref": "breadcrumbText",
        "class": "".concat(this.componentName, "__inner"),
        "style": this.maxWithStyle
      }, [this.$slots["default"]]);
      var itemContent = h("span", helper([{
        "class": textClass,
        "on": _objectSpread$25({}, this.$listeners)
      }, clickEvent]), [textContent]);

      if (href && !disabled) {
        textClass.push("".concat(this.classPrefix, "-link"));
        itemContent = h("a", {
          "class": textClass,
          "attrs": {
            "href": href,
            "target": target
          },
          "on": _objectSpread$25({}, this.$listeners)
        }, [textContent]);
      }

      return h("div", {
        "class": itemClass
      }, [this.isCutOff ? h(Tooltip, {
        "attrs": {
          "content": function content() {
            return _this.$slots["default"];
          }
        }
      }, [itemContent]) : itemContent, h("span", {
        "class": "".concat(this.componentName, "__separator")
      }, [separatorContent])]);
    }
  });

  function ownKeys$25(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$24(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$25(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$25(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$B = getClassPrefixMixins("breadcrumb");
  var _Breadcrumb = mixins(classPrefixMixins$B).extend({
    name: "TBreadcrumb",
    props: _objectSpread$24({}, props$Y),
    components: {
      BreadcrumbItem: _BreadcrumbItem
    },
    provide: function provide() {
      return {
        tBreadcrumb: this
      };
    },
    render: function render() {
      var h = arguments[0];
      var content = this.$slots["default"];

      if (this.options && this.options.length) {
        content = this.options.map(function (option, index) {
          return h(_BreadcrumbItem, {
            "key": index,
            "attrs": {
              "maxWidth": option.maxWidth,
              "disabled": option.disabled,
              "href": option.href,
              "target": option.target,
              "to": option.to,
              "router": option.router,
              "replace": option.replace
            }
          }, [option["default"] || option.content]);
        });
      }

      return h("div", {
        "class": this.componentName
      }, [content]);
    }
  });

  var BreadcrumbItem = withInstall(_BreadcrumbItem);
  var Breadcrumb = withInstall(_Breadcrumb);

  var itemProps = {
    active: Boolean,
    content: {
      type: [String, Function],
      "default": ""
    },
    disabled: Boolean,
    divider: Boolean,
    value: {
      type: [String, Number, Object]
    },
    onClick: Function
  };

  function emitEvent(vm, eventName) {
    var emitEventName;
    var emitEventMethodName;

    if (typeof eventName === "string") {
      emitEventName = eventName;
      emitEventMethodName = getPropsApiByEvent(eventName);
    } else {
      emitEventName = eventName.event;
      emitEventMethodName = eventName.method;
    }

    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (vm.$listeners["".concat(emitEventName)]) {
      vm.$emit.apply(vm, [emitEventName].concat(args));
    }

    if (typeof vm.$props[emitEventMethodName] === "function") {
      var _vm$$props;

      (_vm$$props = vm.$props)[emitEventMethodName].apply(_vm$$props, args);
    }
  }

  function ownKeys$24(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$23(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$24(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$24(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$A = getClassPrefixMixins("dropdown");
  var keepAnimationMixins$7 = getKeepAnimationMixins();
  var _DropdownItem = mixins(keepAnimationMixins$7, classPrefixMixins$A, getGlobalIconMixins()).extend({
    name: "TDropdownItem",
    components: {
      TDivider: Divider
    },
    directives: {
      ripple: Ripple
    },
    inject: {
      dropdown: {
        "default": void 0
      }
    },
    props: _objectSpread$23(_objectSpread$23({}, itemProps), {}, {
      path: {
        type: String,
        "default": ""
      },
      hasChildren: {
        type: Boolean,
        "default": false
      }
    }),
    data: function data() {
      return {
        focused: false
      };
    },
    methods: {
      renderSuffix: function renderSuffix() {
        var h = this.$createElement;

        var _this$useGlobalIcon = this.useGlobalIcon({
          ChevronRightIcon: ChevronRight
        }),
            ChevronRightIcon = _this$useGlobalIcon.ChevronRightIcon;

        return this.hasChildren ? h(ChevronRightIcon, {
          "class": "".concat(this.componentName, "__item-icon")
        }) : null;
      },
      handleItemClick: function handleItemClick(e) {
        if (!this.hasChildren && !this.disabled) {
          var data = {
            value: this.value,
            path: this.path,
            content: this.content
          };
          emitEvent(this, "item-hover", this.path);
          emitEvent(this, "click", data, {
            e: e
          });
          this.dropdown.handleMenuClick(data, {
            e: e
          });
        }
      },
      handleMouseover: function handleMouseover() {
        emitEvent(this, "hover", this.path);
      }
    },
    render: function render() {
      var _ref;

      var h = arguments[0];
      var classes = ["".concat(this.componentName, "__item"), (_ref = {}, _defineProperty$3(_ref, "".concat(this.componentName, "--suffix"), this.hasChildren), _defineProperty$3(_ref, this.commonStatusClassName.disabled, this.disabled), _defineProperty$3(_ref, this.commonStatusClassName.active, this.active), _ref)];
      return h("div", [h("div", {
        "directives": [{
          name: "ripple",
          value: this.keepAnimation.ripple
        }],
        "class": classes,
        "on": {
          "click": this.handleItemClick,
          "mouseover": this.handleMouseover
        }
      }, [h("div", {
        "class": "".concat(this.componentName, "__item-content")
      }, [h("span", {
        "class": "".concat(this.componentName, "__item-text")
      }, [renderContent(this, "content", "default")])]), this.renderSuffix()]), this.divider ? h(Divider) : null]);
    }
  });

  var classPrefixMixins$z = getClassPrefixMixins("dropdown");
  var _DropdownMenu = mixins(Vue__default["default"], classPrefixMixins$z).extend({
    name: "TDropdownMenu",
    inject: {
      dropdown: {
        "default": void 0
      }
    },
    data: function data() {
      return {
        path: ""
      };
    },
    methods: {
      isActive: function isActive(item, pathPrefix) {
        var excludeSelf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var itemPath = "".concat(pathPrefix, "/").concat(item.value);

        if (excludeSelf && this.path === itemPath) {
          return false;
        }

        return this.path.indexOf(itemPath) === 0;
      },
      handleHoverItem: function handleHoverItem(path) {
        this.path = path;
      },
      handleItemClick: function handleItemClick(data, context, idx) {
        var _this$dropdown$option, _this$dropdown$option2;

        (_this$dropdown$option = (_this$dropdown$option2 = this.dropdown.options[idx]).onClick) === null || _this$dropdown$option === void 0 ? void 0 : _this$dropdown$option.call(_this$dropdown$option2, data, context);
      },
      renderMenuColumn: function renderMenuColumn(children, showSubmenu, pathPrefix) {
        var _this = this;

        var h = this.$createElement;
        var menuClass = ["".concat(this.componentName, "__menu-column"), "narrow-scrollbar", {
          submenu__visible: showSubmenu
        }];
        var _this$dropdown = this.dropdown,
            maxHeight = _this$dropdown.maxHeight,
            maxColumnWidth = _this$dropdown.maxColumnWidth,
            minColumnWidth = _this$dropdown.minColumnWidth;
        return h("div", {
          "class": menuClass,
          "style": {
            maxHeight: "".concat(maxHeight, "px"),
            maxWidth: pxCompat(maxColumnWidth),
            minWidth: pxCompat(minColumnWidth)
          }
        }, [children.map(function (item, idx) {
          return h(_DropdownItem, {
            "key": idx,
            "attrs": {
              "disabled": item.disabled,
              "active": _this.isActive(item, pathPrefix) || item.active,
              "value": item.value,
              "content": item.content,
              "divider": item.divider,
              "hasChildren": item.children && item.children.length > 0,
              "path": "".concat(pathPrefix, "/").concat(item.value)
            },
            "on": {
              "click": function click(data, context) {
                return _this.handleItemClick(data, context, idx);
              },
              "hover": _this.handleHoverItem
            }
          });
        })]);
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];
      var columns = [];
      var menuItems = this.dropdown.options;
      var pathPrefix = "";

      if (this.$scopedSlots["default"]) {
        return h("div", {
          "class": "".concat(this.componentName, "__menu")
        }, [h("div", {
          "class": ["".concat(this.componentName, "__menu-column"), "narrow-scrollbar"],
          "style": {
            maxHeight: "".concat(this.dropdown.maxHeight, "px"),
            maxWidth: "".concat(this.dropdown.maxColumnWidth, "px"),
            minWidth: "".concat(this.dropdown.minColumnWidth, "px")
          }
        }, [renderTNodeJSX(this, "default")])]);
      }

      while (menuItems && menuItems.length) {
        var activeItem = menuItems.find(function (item) {
          return _this2.isActive(item, pathPrefix, false);
        });
        columns.push(this.renderMenuColumn(menuItems, !!activeItem, pathPrefix));

        if (activeItem) {
          pathPrefix = "".concat(pathPrefix, "/").concat(activeItem.value);
          menuItems = activeItem.children || [];
        } else {
          menuItems = [];
        }
      }

      return h("div", {
        "class": "".concat(this.componentName, "__menu")
      }, [columns]);
    }
  });

  var props$V = {
    direction: {
      type: String,
      "default": "right",
      validator: function validator(val) {
        return ["left", "right"].includes(val);
      }
    },
    disabled: Boolean,
    hideAfterItemClick: {
      type: Boolean,
      "default": true
    },
    maxColumnWidth: {
      type: [String, Number],
      "default": 100
    },
    maxHeight: {
      type: Number,
      "default": 300
    },
    minColumnWidth: {
      type: [String, Number],
      "default": 10
    },
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    placement: {
      type: String,
      "default": "bottom-left",
      validator: function validator(val) {
        return ["top", "left", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right", "left-top", "left-bottom", "right-top", "right-bottom"].includes(val);
      }
    },
    popupProps: {
      type: Object
    },
    trigger: {
      type: String,
      "default": "hover",
      validator: function validator(val) {
        return ["hover", "click", "focus", "context-menu"].includes(val);
      }
    },
    onClick: Function
  };

  function ownKeys$23(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$22(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$23(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$23(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$y = getClassPrefixMixins("dropdown");
  var _Dropdown = mixins(classPrefixMixins$y).extend({
    name: "TDropdown",
    props: _objectSpread$22({}, props$V),
    provide: function provide() {
      return {
        dropdown: this
      };
    },
    methods: {
      handleMenuClick: function handleMenuClick(data, context) {
        if (this.hideAfterItemClick) {
          var popupElem = this.$refs.popupElem;
          popupElem.handleClose();
        }

        emitEvent(this, "click", data, context);
      }
    },
    render: function render() {
      var h = arguments[0];
      var trigger = this.$scopedSlots["default"] ? this.$scopedSlots["default"](null) : "";
      var contentSlot = this.$scopedSlots.dropdown ? this.$scopedSlots.dropdown(null) : "";

      var popupProps = _objectSpread$22(_objectSpread$22({
        props: _objectSpread$22(_objectSpread$22(_objectSpread$22({}, this.$attrs), this.popupProps), {}, {
          disabled: this.disabled,
          placement: this.placement,
          trigger: this.trigger,
          overlayClassName: this.popupProps && this.popupProps.overlayClassName ? [this.componentName, this.popupProps.overlayClassName] : this.componentName
        })
      }, this.popupProps), {}, {
        ref: "popup"
      });

      return h(Popup, helper([{}, popupProps, {
        "ref": "popupElem",
        "attrs": {
          "expandAnimation": true
        }
      }]), [h("template", {
        "slot": "content",
        "attrs": {
          "role": "dropdown"
        }
      }, [contentSlot || h(_DropdownMenu)]), trigger]);
    }
  });

  var Dropdown = withInstall(_Dropdown);
  var DropdownItem = withInstall(_DropdownItem);
  var DropdownMenu = withInstall(_DropdownMenu);

  var props$U = {
    disabled: {
      type: [Boolean, Object]
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["horizontal", "vertical"].includes(val);
      }
    },
    showCurrent: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    tips: {
      type: Object
    },
    variant: {
      type: String,
      "default": "text",
      validator: function validator(val) {
        if (!val) return true;
        return ["text", "outline"].includes(val);
      }
    },
    onChange: Function
  };

  function useGlobalIcon(tdIcon) {
    var _useConfig = useConfig("icon"),
        global = _useConfig.global;

    var resultIcon = {};
    Object.keys(tdIcon).forEach(function (key) {
      var _global$value;

      resultIcon[key] = ((_global$value = global.value) === null || _global$value === void 0 ? void 0 : _global$value[key]) || tdIcon[key];
    });
    return resultIcon;
  }

  function ownKeys$22(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$21(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$22(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$22(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TJumper = VueCompositionAPI.defineComponent({
    name: "TJumper",
    props: _objectSpread$21({}, props$U),
    setup: function setup(props2, _ref) {
      var emit = _ref.emit;
      var COMPONENT_NAME = usePrefixClass("jumper");

      var _useGlobalIcon = useGlobalIcon({
        ChevronLeftIcon: ChevronLeft,
        RoundIcon: Round,
        ChevronRightIcon: ChevronRight,
        ChevronUpIcon: ChevronUp,
        ChevronDownIcon: ChevronDown
      }),
          ChevronLeftIcon = _useGlobalIcon.ChevronLeftIcon,
          RoundIcon = _useGlobalIcon.RoundIcon,
          ChevronRightIcon = _useGlobalIcon.ChevronRightIcon,
          ChevronUpIcon = _useGlobalIcon.ChevronUpIcon,
          ChevronDownIcon = _useGlobalIcon.ChevronDownIcon;

      var titleConfig = VueCompositionAPI.computed(function () {
        if (isObject_1(props2.tips)) return props2.tips;
        if (props2.tips === true) return {
          prev: "\u4E0A\u4E00\u9875",
          current: "\u5F53\u524D",
          next: "\u4E0B\u4E00\u9875"
        };
        return {};
      });
      var disabledConfig = VueCompositionAPI.computed(function () {
        if (isObject_1(props2.disabled)) return props2.disabled;
        if (props2.disabled === true) return {
          prev: true,
          current: true,
          next: true
        };
        return {
          prev: false,
          current: false,
          next: false
        };
      });

      function handleChange(context) {
        var _props2$onChange;

        emit("change", context);
        (_props2$onChange = props2.onChange) === null || _props2$onChange === void 0 ? void 0 : _props2$onChange.call(props2, context);
      }

      return {
        COMPONENT_NAME: COMPONENT_NAME,
        ChevronLeftIcon: ChevronLeftIcon,
        RoundIcon: RoundIcon,
        ChevronRightIcon: ChevronRightIcon,
        ChevronUpIcon: ChevronUpIcon,
        ChevronDownIcon: ChevronDownIcon,
        titleConfig: titleConfig,
        disabledConfig: disabledConfig,
        handleChange: handleChange
      };
    },
    render: function render() {
      var h = arguments[0];
      var COMPONENT_NAME = this.COMPONENT_NAME,
          ChevronLeftIcon = this.ChevronLeftIcon,
          RoundIcon = this.RoundIcon,
          ChevronRightIcon = this.ChevronRightIcon,
          ChevronUpIcon = this.ChevronUpIcon,
          ChevronDownIcon = this.ChevronDownIcon,
          titleConfig = this.titleConfig,
          disabledConfig = this.disabledConfig,
          handleChange = this.handleChange;
      var jumperClass = [COMPONENT_NAME, _defineProperty$3({}, "".concat(COMPONENT_NAME, "--outline"), this.variant === "outline")];
      return h("div", {
        "class": jumperClass
      }, [h(Button, {
        "attrs": {
          "title": titleConfig.prev,
          "variant": this.variant,
          "size": this.size,
          "shape": "square",
          "icon": this.layout === "horizontal" ? function () {
            return h(ChevronLeftIcon);
          } : function () {
            return h(ChevronUpIcon);
          },
          "disabled": disabledConfig.prev
        },
        "on": {
          "click": function click(e) {
            return handleChange({
              e: e,
              trigger: "prev"
            });
          }
        },
        "class": "".concat(COMPONENT_NAME, "__prev")
      }), this.showCurrent && h(Button, {
        "attrs": {
          "title": titleConfig.current,
          "variant": this.variant,
          "size": this.size,
          "shape": "square",
          "icon": function icon() {
            return h(RoundIcon);
          },
          "disabled": disabledConfig.current
        },
        "on": {
          "click": function click(e) {
            return handleChange({
              e: e,
              trigger: "current"
            });
          }
        },
        "class": "".concat(COMPONENT_NAME, "__current")
      }), h(Button, {
        "attrs": {
          "title": titleConfig.next,
          "variant": this.variant,
          "size": this.size,
          "shape": "square",
          "icon": this.layout === "horizontal" ? function () {
            return h(ChevronRightIcon);
          } : function () {
            return h(ChevronDownIcon);
          },
          "disabled": disabledConfig.next
        },
        "on": {
          "click": function click(e) {
            return handleChange({
              e: e,
              trigger: "next"
            });
          }
        },
        "class": "".concat(COMPONENT_NAME, "__next")
      })]);
    }
  });

  var Jumper = withInstall(TJumper, VueCompositionAPI__default["default"]);

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread();
  }

  var props$T = {
    collapsed: Boolean,
    expanded: {
      type: Array
    },
    defaultExpanded: {
      type: Array
    },
    expandMutex: Boolean,
    expandType: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        return ["normal", "popup"].includes(val);
      }
    },
    logo: {
      type: Function
    },
    operations: {
      type: Function
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        return ["light", "dark"].includes(val);
      }
    },
    value: {
      type: [String, Number]
    },
    defaultValue: {
      type: [String, Number]
    },
    width: {
      type: [String, Number, Array],
      "default": "232px"
    },
    onChange: Function,
    onExpand: Function
  };

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  var getTreePaths = function getTreePaths(node, val, ans) {
    if (!node) return;

    for (var i = 0; i < node.children.length; ++i) {
      var child = node.children[i];
      if (child.value === val) return [].concat(_toConsumableArray(ans), [node.value]);
      var target = getTreePaths(child, val, [].concat(_toConsumableArray(ans), [node.value]));
      if (target) return target;
    }
  };

  var getTreeSameParentNodes = function getTreeSameParentNodes(node, val) {
    if (!node) return;

    for (var i = 0; i < node.children.length; ++i) {
      var child = node.children[i];
      if (child.value === val) return node.children;
      var target = getTreeSameParentNodes(child, val);
      if (target) return target;
    }
  };

  var DFS = function DFS(root, val) {
    if (root.value === val) return root;

    if (root.children.length > 0) {
      for (var i = 0, len = root.children.length; i < len; i++) {
        var res = DFS(root.children[i], val);
        if (res) return res;
      }
    }
  };

  var VMenu = /*#__PURE__*/function () {
    function VMenu(options) {
      _classCallCheck(this, VMenu);

      _defineProperty$3(this, "data", null);

      _defineProperty$3(this, "cache", /* @__PURE__ */new Set());

      _defineProperty$3(this, "isMutex", false);

      _defineProperty$3(this, "expandValues", null);

      var root = {
        value: null,
        parent: null,
        children: []
      };
      this.data = root;
      this.isMutex = options === null || options === void 0 ? void 0 : options.isMutex;
      this.expandValues = new Set(options === null || options === void 0 ? void 0 : options.expandValues);
    }

    _createClass(VMenu, [{
      key: "add",
      value: function add(item) {
        var value = item.value,
            parent = item.parent,
            vnode = item.vnode;
        var node = {
          value: value,
          parent: parent,
          vnode: vnode,
          children: []
        };
        this.cache.forEach(function (data, v2, set) {
          if (item.value === data.parent) {
            node.children.push(data);
            set["delete"](data);
          }
        });

        if (item.parent == null) {
          this.data.children.push(node);
          node.parent = this.data;
        } else if (this.data.children.length > 0) {
          var pNode = DFS(this.data, parent);

          if (pNode) {
            pNode.children.push(node);
          } else {
            this.cache.add(node);
          }
        } else {
          this.cache.add(node);
        }
      }
    }, {
      key: "select",
      value: function select(val) {
        var activeValues = getTreePaths(this.data, val, []) || [];
        activeValues.push(val);
        return activeValues.filter(function (val2) {
          return val2 != null;
        });
      }
    }, {
      key: "expand",
      value: function expand(val) {
        var _this = this;

        if (this.expandValues.has(val)) {
          this.expandValues["delete"](val);
          return _toConsumableArray(this.expandValues);
        }

        this.expandValues.add(val);

        if (!this.isMutex) {
          return _toConsumableArray(this.expandValues);
        }

        var sameParentNodes = getTreeSameParentNodes(this.data, val);
        var sameLevelSubmenuValues = new Set(sameParentNodes.filter(function (node) {
          var _node$children;

          return ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.length) > 0 && node.value !== val;
        }).map(function (child) {
          return child.value;
        }));
        this.expandValues.forEach(function (val2) {
          var isHit = sameLevelSubmenuValues.has(val2);

          if (isHit) {
            _this.expandValues["delete"](val2);
          }
        });
        return _toConsumableArray(this.expandValues);
      }
    }, {
      key: "getChild",
      value: function getChild(value) {
        var target = DFS(this.data, value);
        return target ? target.children : [];
      }
    }]);

    return VMenu;
  }();

  function ownKeys$21(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$20(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$21(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$21(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Menu = VueCompositionAPI.defineComponent({
    name: "TMenu",
    props: _objectSpread$20({}, props$T),
    model: {
      prop: "value",
      event: "change"
    },
    setup: function setup(props2, ctx) {
      var mode = VueCompositionAPI.ref(props2.expandType);
      var theme = VueCompositionAPI.computed(function () {
        return props2.theme;
      });
      var isMutex = VueCompositionAPI.computed(function () {
        return props2.expandMutex;
      });
      var classPrefix = usePrefixClass();
      var menuClass = VueCompositionAPI.computed(function () {
        return ["".concat(classPrefix.value, "-default-menu"), "".concat(classPrefix.value, "-menu--").concat(props2.theme), _defineProperty$3({}, "".concat(classPrefix.value, "-is-collapsed"), props2.collapsed)];
      });
      var innerClasses = VueCompositionAPI.computed(function () {
        return ["".concat(classPrefix.value, "-menu"), _defineProperty$3({}, "".concat(classPrefix.value, "-menu--scroll"), mode.value !== "popup"), "narrow-scrollbar"];
      });
      var expandWidth = VueCompositionAPI.computed(function () {
        var width = props2.width;

        var format = function format(val) {
          return typeof val === "number" ? "".concat(val, "px") : val;
        };

        if (Array.isArray(width)) return width.map(function (item) {
          return format(item);
        });
        return [format(width), "64px"];
      });
      var styles = VueCompositionAPI.computed(function () {
        return {
          height: "100%",
          width: props2.collapsed ? expandWidth.value[1] : expandWidth.value[0]
        };
      });
      var activeValue = VueCompositionAPI.ref(props2.defaultValue || props2.value);
      var activeValues = VueCompositionAPI.ref([]);
      var expandValues = VueCompositionAPI.ref(props2.expanded || []);

      var deliver = function deliver(evt) {
        var func = "on".concat(evt[0].toUpperCase() + evt.slice(1));
        return function (val) {
          if (typeof props2[func] === "function") {
            props2[func](val);
          }

          ctx.emit(evt, val);
        };
      };

      var emitChange = deliver("change");
      var emitExpand = deliver("expand");
      VueCompositionAPI.watchEffect(function () {
        mode.value = props2.collapsed ? "popup" : props2.expandType;
      });
      var vMenu = new VMenu({
        isMutex: isMutex.value,
        expandValues: expandValues.value
      });
      VueCompositionAPI.provide("TdMenu", {
        activeValue: activeValue,
        activeValues: activeValues,
        expandValues: expandValues,
        mode: mode,
        theme: theme,
        isHead: false,
        vMenu: vMenu,
        select: function select(value) {
          emitChange(value);
        },
        open: function open(value, type) {
          var expanded = _toConsumableArray(expandValues.value);

          if (mode.value === "normal") {
            expanded = vMenu.expand(value);
          } else {
            var index = expanded.indexOf(value);

            if (type === "add") {
              if (index === -1) {
                expanded.push(value);
              }
            } else if (type === "remove") {
              expanded.splice(index, 1);
            }
          }

          emitExpand(expanded);
        }
      });
      VueCompositionAPI.watch(function () {
        return props2.expanded;
      }, function (value) {
        expandValues.value = value;
        vMenu.expandValues = new Set(value);
      });

      var updateActiveValues = function updateActiveValues(value) {
        activeValue.value = value;
        activeValues.value = vMenu.select(value);
      };

      VueCompositionAPI.watch(function () {
        return props2.value;
      }, updateActiveValues);
      VueCompositionAPI.watch(function () {
        return props2.defaultValue;
      }, updateActiveValues);
      VueCompositionAPI.onMounted(function () {
        activeValues.value = vMenu.select(activeValue.value);
      });
      return {
        styles: styles,
        menuClass: menuClass,
        innerClasses: innerClasses,
        activeValue: activeValue,
        activeValues: activeValues,
        expandValues: expandValues,
        classPrefix: classPrefix
      };
    },
    render: function render() {
      var h = arguments[0];

      if (this.$slots.options) {
        console.warn("TDesign Warn: `options` slot is going to be deprecated, please use `operations` for slot instead.");
      }

      var operations = renderContent(this, "operations", "options");
      var logo = renderTNodeJSX(this, "logo");
      return h("div", {
        "class": this.menuClass,
        "style": this.styles
      }, [h("div", {
        "class": "".concat(this.classPrefix, "-default-menu__inner")
      }, [logo && h("div", {
        "class": "".concat(this.classPrefix, "-menu__logo")
      }, [logo]), h("ul", {
        "class": this.innerClasses
      }, [renderContent(this, "default", "content")]), operations && h("div", {
        "class": "".concat(this.classPrefix, "-menu__operations")
      }, [operations])])]);
    }
  });

  var props$S = {
    expanded: {
      type: Array
    },
    defaultExpanded: {
      type: Array
    },
    expandType: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        return ["normal", "popup"].includes(val);
      }
    },
    logo: {
      type: Function
    },
    operations: {
      type: Function
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        return ["light", "dark"].includes(val);
      }
    },
    value: {
      type: [String, Number]
    },
    defaultValue: {
      type: [String, Number]
    },
    onChange: Function,
    onExpand: Function
  };

  var props$R = {
    addable: Boolean,
    disabled: Boolean,
    list: {
      type: Array
    },
    placement: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        return ["left", "top", "bottom", "right"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["medium", "large"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        return ["normal", "card"].includes(val);
      }
    },
    value: {
      type: [String, Number]
    },
    defaultValue: {
      type: [String, Number]
    },
    onAdd: Function,
    onChange: Function,
    onRemove: Function
  };

  var tabPanelProps = {
    "default": {
      type: Function
    },
    destroyOnHide: {
      type: Boolean,
      "default": true
    },
    disabled: Boolean,
    label: {
      type: [String, Function]
    },
    panel: {
      type: [String, Function]
    },
    removable: Boolean,
    value: {
      type: [String, Number]
    },
    onRemove: Function
  };

  function updateTable(parentRef) {
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    if (!parentRef || !parentRef.$children || level >= 6) return;
    var children = parentRef.$children;

    for (var i = 0, len = children.length; i < len; i++) {
      var _node$$options, _node$$children;

      var node = children[i];
      var name = node === null || node === void 0 ? void 0 : (_node$$options = node.$options) === null || _node$$options === void 0 ? void 0 : _node$$options.name;

      if (name && /(TTable|TBaseTable|TPrimaryTable|TEnhancedTable)/i.test(name) && node.refreshTable) {
        node.refreshTable();
        return;
      }

      if (node !== null && node !== void 0 && (_node$$children = node.$children) !== null && _node$$children !== void 0 && _node$$children.length) {
        updateTable(node, level + 1);
      }
    }
  }
  function updateElement(parentRef) {
    updateTable(parentRef);
  }

  function ownKeys$20(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1$(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$20(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$20(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$x = getClassPrefixMixins("tab-panel");
  var _TabPanel = mixins(Vue__default["default"], classPrefixMixins$x).extend({
    name: "TTabPanel",
    props: _objectSpread$1$({}, tabPanelProps),
    inject: {
      parent: {
        "default": null
      }
    },
    computed: {
      active: function active() {
        var _ref = this.parent || {},
            value = _ref.value;

        return this.value === value;
      }
    },
    updated: function updated() {
      var _this$parent,
          _this$parent$updatePa,
          _this = this;

      (_this$parent = this.parent) === null || _this$parent === void 0 ? void 0 : (_this$parent$updatePa = _this$parent.updatePanels) === null || _this$parent$updatePa === void 0 ? void 0 : _this$parent$updatePa.call(_this$parent, {
        force: true
      });

      if (!this.destroyOnHide) {
        var timer = setTimeout(function () {
          updateElement(_this);
          clearTimeout(timer);
        }, 0);
      }
    },
    render: function render() {
      var h = arguments[0];
      var destroyOnHide = this.destroyOnHide,
          active = this.active;
      if (destroyOnHide && !active) return null;
      return h("div", {
        "class": this.componentName,
        "directives": [{
          name: "show",
          value: active
        }]
      }, [renderContent(this, "default", "panel")]);
    }
  });

  /**
   * Gets the timestamp of the number of milliseconds that have elapsed since
   * the Unix epoch (1 January 1970 00:00:00 UTC).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Date
   * @returns {number} Returns the timestamp.
   * @example
   *
   * _.defer(function(stamp) {
   *   console.log(_.now() - stamp);
   * }, _.now());
   * // => Logs the number of milliseconds it took for the deferred invocation.
   */

  var now = function now() {
    return _root.Date.now();
  };

  var now_1 = now;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;
  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */

  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}

    return index;
  }

  var _trimmedEndIndex = trimmedEndIndex;

  /** Used to match leading whitespace. */

  var reTrimStart = /^\s+/;
  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */

  function baseTrim(string) {
    return string ? string.slice(0, _trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
  }

  var _baseTrim = baseTrim;

  /** Used as references for various `Number` constants. */

  var NAN = 0 / 0;
  /** Used to detect bad signed hexadecimal string values. */

  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
  /** Used to detect binary string values. */

  var reIsBinary = /^0b[01]+$/i;
  /** Used to detect octal string values. */

  var reIsOctal = /^0o[0-7]+$/i;
  /** Built-in method references without a dependency on `root`. */

  var freeParseInt = parseInt;
  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */

  function toNumber$1(value) {
    if (typeof value == 'number') {
      return value;
    }

    if (isSymbol_1(value)) {
      return NAN;
    }

    if (isObject_1(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject_1(other) ? other + '' : other;
    }

    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }

    value = _baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }

  var toNumber_1 = toNumber$1;

  /** Error message constants. */

  var FUNC_ERROR_TEXT$2 = 'Expected a function';
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeMax$3 = Math.max,
      nativeMin$1 = Math.min;
  /**
   * Creates a debounced function that delays invoking `func` until after `wait`
   * milliseconds have elapsed since the last time the debounced function was
   * invoked. The debounced function comes with a `cancel` method to cancel
   * delayed `func` invocations and a `flush` method to immediately invoke them.
   * Provide `options` to indicate whether `func` should be invoked on the
   * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
   * with the last arguments provided to the debounced function. Subsequent
   * calls to the debounced function return the result of the last `func`
   * invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the debounced function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.debounce` and `_.throttle`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to debounce.
   * @param {number} [wait=0] The number of milliseconds to delay.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=false]
   *  Specify invoking on the leading edge of the timeout.
   * @param {number} [options.maxWait]
   *  The maximum time `func` is allowed to be delayed before it's invoked.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new debounced function.
   * @example
   *
   * // Avoid costly calculations while the window size is in flux.
   * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
   *
   * // Invoke `sendMail` when clicked, debouncing subsequent calls.
   * jQuery(element).on('click', _.debounce(sendMail, 300, {
   *   'leading': true,
   *   'trailing': false
   * }));
   *
   * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
   * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
   * var source = new EventSource('/stream');
   * jQuery(source).on('message', debounced);
   *
   * // Cancel the trailing debounced invocation.
   * jQuery(window).on('popstate', debounced.cancel);
   */

  function debounce(func, wait, options) {
    var lastArgs,
        lastThis,
        maxWait,
        result,
        timerId,
        lastCallTime,
        lastInvokeTime = 0,
        leading = false,
        maxing = false,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$2);
    }

    wait = toNumber_1(wait) || 0;

    if (isObject_1(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax$3(toNumber_1(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    function invokeFunc(time) {
      var args = lastArgs,
          thisArg = lastThis;
      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }

    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time; // Start the timer for the trailing edge.

      timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.

      return leading ? invokeFunc(time) : result;
    }

    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime,
          timeWaiting = wait - timeSinceLastCall;
      return maxing ? nativeMin$1(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }

    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
          timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.

      return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }

    function timerExpired() {
      var time = now_1();

      if (shouldInvoke(time)) {
        return trailingEdge(time);
      } // Restart the timer.


      timerId = setTimeout(timerExpired, remainingWait(time));
    }

    function trailingEdge(time) {
      timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.

      if (trailing && lastArgs) {
        return invokeFunc(time);
      }

      lastArgs = lastThis = undefined;
      return result;
    }

    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }

      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }

    function flush() {
      return timerId === undefined ? result : trailingEdge(now_1());
    }

    function debounced() {
      var time = now_1(),
          isInvoking = shouldInvoke(time);
      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;

      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }

        if (maxing) {
          // Handle invocations in a tight loop.
          clearTimeout(timerId);
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }

      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }

      return result;
    }

    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }

  var debounce_1 = debounce;

  var classPrefixMixins$w = getClassPrefixMixins("tab-nav__item");
  var keepAnimationMixins$6 = getKeepAnimationMixins();
  var TTabNavItem = mixins(keepAnimationMixins$6, classPrefixMixins$w, getGlobalIconMixins()).extend({
    name: "TTabNavItem",
    directives: {
      ripple: Ripple
    },
    props: {
      index: Number,
      active: {
        type: Boolean
      },
      theme: props$R.theme,
      size: props$R.size,
      placement: props$R.placement,
      label: {
        type: null
      },
      disabled: tabPanelProps.disabled,
      removable: tabPanelProps.removable,
      value: tabPanelProps.value
    },
    computed: {
      navItemClass: function navItemClass() {
        var _ref;

        return _ref = {}, _defineProperty$3(_ref, "".concat(this.classPrefix, "-tabs__nav-item"), true), _defineProperty$3(_ref, "".concat(this.classPrefix, "-tabs__nav--card"), this.theme === "card"), _defineProperty$3(_ref, "".concat(this.classPrefix, "-is-disabled"), this.disabled), _defineProperty$3(_ref, "".concat(this.classPrefix, "-is-active"), this.active), _defineProperty$3(_ref, "".concat(this.classPrefix, "-is-left"), this.placement === "left"), _defineProperty$3(_ref, "".concat(this.classPrefix, "-is-right"), this.placement === "right"), _defineProperty$3(_ref, "".concat(this.classPrefix, "-size-m"), this.size === "medium"), _defineProperty$3(_ref, "".concat(this.classPrefix, "-size-l"), this.size === "large"), _ref;
      }
    },
    methods: {
      removeBtnClick: function removeBtnClick(e) {
        e.stopPropagation();
        emitEvent(this, "remove", {
          e: e,
          value: this.value,
          index: this.index
        });
      },
      onClickNav: function onClickNav(_ref2) {
        var e = _ref2.e;
        if (this.disabled) return;
        emitEvent(this, "click", e);
      },
      renderCardItem: function renderCardItem() {
        var h = this.$createElement;

        var _this$useGlobalIcon = this.useGlobalIcon({
          CloseIcon: Close
        }),
            CloseIcon = _this$useGlobalIcon.CloseIcon;

        return h("div", {
          "class": this.navItemClass,
          "on": {
            "click": this.onClickNav
          },
          "directives": [{
            name: "ripple",
            value: this.keepAnimation.ripple
          }]
        }, [h("span", {
          "class": "".concat(this.classPrefix, "-tabs__nav-item-text-wrapper")
        }, [this.label]), this.removable && !this.disabled ? h(CloseIcon, {
          "class": "remove-btn",
          "nativeOn": {
            "click": this.removeBtnClick
          }
        }) : null]);
      },
      renderNormalItem: function renderNormalItem() {
        var _ref3;

        var h = this.$createElement;

        var _this$useGlobalIcon2 = this.useGlobalIcon({
          CloseIcon: Close
        }),
            CloseIcon = _this$useGlobalIcon2.CloseIcon;

        return h("div", {
          "class": this.navItemClass,
          "on": {
            "click": this.onClickNav
          }
        }, [h("div", {
          "class": ["".concat(this.classPrefix, "-tabs__nav-item-wrapper"), (_ref3 = {}, _defineProperty$3(_ref3, "".concat(this.classPrefix, "-is-disabled"), this.disabled), _defineProperty$3(_ref3, "".concat(this.classPrefix, "-is-active"), this.active), _ref3)],
          "directives": [{
            name: "ripple",
            value: this.keepAnimation.ripple
          }]
        }, [h("span", {
          "class": "".concat(this.classPrefix, "-tabs__nav-item-text-wrapper")
        }, [this.label])]), this.removable && !this.disabled ? h(CloseIcon, {
          "class": "remove-btn",
          "nativeOn": {
            "click": this.removeBtnClick
          }
        }) : null]);
      }
    },
    render: function render() {
      return this.theme === "card" ? this.renderCardItem() : this.renderNormalItem();
    }
  });

  function ownKeys$1$(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1_(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1$(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1$(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$v = getClassPrefixMixins("tab__nav");

  var getDomWidth = function getDomWidth(dom) {
    return (dom === null || dom === void 0 ? void 0 : dom.offsetWidth) || 0;
  };

  var getActiveTabEl = function getActiveTabEl(navs, value) {
    for (var i = 0; i < navs.length; i++) {
      if (navs[i].componentOptions.propsData.value === value) {
        var _navs$i$componentInst;

        return (_navs$i$componentInst = navs[i].componentInstance) === null || _navs$i$componentInst === void 0 ? void 0 : _navs$i$componentInst.$el;
      }
    }

    return null;
  };

  var getLeftCoverWidth = function getLeftCoverWidth(o) {
    var leftOperationsZoneWidth = getDomWidth(o.leftZone);
    var leftIconWidth = getDomWidth(o.leftIcon);

    if (o.totalWidthBeforeActiveTab === 0) {
      return leftOperationsZoneWidth - leftIconWidth;
    }

    return leftOperationsZoneWidth;
  };

  var getRightCoverWidth = function getRightCoverWidth(o) {
    var rightOperationsZoneWidth = getDomWidth(o.rightZone);
    var rightIconWidth = getDomWidth(o.rightIcon);
    var wrapWidth = getDomWidth(o.wrap);

    if (Math.abs(o.totalWidthBeforeActiveTab + o.activeTabWidth - wrapWidth) < 1) {
      return rightOperationsZoneWidth - rightIconWidth;
    }

    return rightOperationsZoneWidth;
  };

  var TTabNav = mixins(classPrefixMixins$v, getGlobalIconMixins()).extend({
    name: "TTabNav",
    components: {
      TTabNavItem: TTabNavItem
    },
    props: {
      theme: props$R.theme,
      panels: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      value: props$R.value,
      placement: props$R.placement,
      size: props$R.size,
      disabled: props$R.disabled,
      addable: props$R.addable
    },
    data: function data() {
      return {
        scrollLeft: 0,
        canToLeft: false,
        canToRight: false,
        navBarStyle: {}
      };
    },
    computed: {
      navs: function navs() {
        var _this = this;

        var h = this.$createElement;
        return this.panels.map(function (panel, index) {
          return h(TTabNavItem, {
            "ref": "tabItem".concat(index),
            "key": panel.value,
            "attrs": {
              "index": index,
              "theme": _this.theme,
              "size": _this.size,
              "placement": _this.placement,
              "label": renderTNodeJSX(panel, "label", "\u9009\u9879\u5361".concat(index + 1)),
              "active": panel.value === _this.value,
              "disabled": _this.disabled || panel.disabled,
              "removable": panel.removable,
              "value": panel.value
            },
            "on": {
              "click": function click(e) {
                return _this.tabClick(e, panel);
              },
              "remove": _this.removeBtnClick
            }
          });
        });
      },
      wrapTransformStyle: function wrapTransformStyle() {
        if (["left", "right"].includes(this.placement.toLowerCase())) return {};
        return {
          transform: "translate(".concat(-this.scrollLeft, "px, 0)")
        };
      },
      dataCanUpdateNavBarStyle: function dataCanUpdateNavBarStyle() {
        return [this.scrollLeft, this.placement, this.theme, this.navs, this.value];
      },
      dataCanUpdateArrow: function dataCanUpdateArrow() {
        return [this.scrollLeft, this.placement, this.navs];
      },
      iconBaseClass: function iconBaseClass() {
        var _ref;

        return _ref = {}, _defineProperty$3(_ref, "".concat(this.classPrefix, "-tabs__btn"), true), _defineProperty$3(_ref, "".concat(this.classPrefix, "-size-m"), this.size === "medium"), _defineProperty$3(_ref, "".concat(this.classPrefix, "-size-l"), this.size === "large"), _ref;
      },
      leftIconClass: function leftIconClass() {
        return _objectSpread$1_(_defineProperty$3({}, "".concat(this.classPrefix, "-tabs__btn--left"), true), this.iconBaseClass);
      },
      rightIconClass: function rightIconClass() {
        return _objectSpread$1_(_defineProperty$3({}, "".concat(this.classPrefix, "-tabs__btn--right"), true), this.iconBaseClass);
      },
      addIconClass: function addIconClass() {
        return _objectSpread$1_(_defineProperty$3({}, "".concat(this.classPrefix, "-tabs__add-btn"), true), this.iconBaseClass);
      },
      navContainerClass: function navContainerClass() {
        var _ref2;

        return _ref2 = {}, _defineProperty$3(_ref2, "".concat(this.classPrefix, "-tabs__nav-container"), true), _defineProperty$3(_ref2, "".concat(this.classPrefix, "-tabs__nav--card"), this.theme === "card"), _defineProperty$3(_ref2, "".concat(this.classPrefix, "-is-").concat(this.placement), true), _defineProperty$3(_ref2, "".concat(this.classPrefix, "-is-addable"), this.theme === "card" && this.addable), _ref2;
      },
      navScrollContainerClass: function navScrollContainerClass() {
        var _ref3;

        return _ref3 = {}, _defineProperty$3(_ref3, "".concat(this.classPrefix, "-tabs__nav-scroll"), true), _defineProperty$3(_ref3, "".concat(this.classPrefix, "-is-scrollable"), this.canToLeft || this.canToRight), _ref3;
      },
      navsWrapClass: function navsWrapClass() {
        return ["".concat(this.classPrefix, "-tabs__nav-wrap"), "".concat(this.classPrefix, "-is-smooth"), _defineProperty$3({}, "".concat(this.classPrefix, "-is-vertical"), this.placement === "left" || this.placement === "right")];
      },
      navBarClass: function navBarClass() {
        return ["".concat(this.classPrefix, "-tabs__bar"), "".concat(this.classPrefix, "-is-").concat(this.placement)];
      },
      navsContainerStyle: function navsContainerStyle() {
        return this.addable ? {
          "min-height": "48px"
        } : null;
      }
    },
    watch: {
      dataCanUpdateArrow: function dataCanUpdateArrow() {
        var _this2 = this;

        this.$nextTick(function () {
          _this2.calculateCanShowArrow();
        });
      },
      dataCanUpdateNavBarStyle: function dataCanUpdateNavBarStyle() {
        var _this3 = this;

        this.$nextTick(function () {
          _this3.calculateNavBarStyle();
        });
      },
      value: function value() {
        var _this4 = this;

        this.$nextTick(function () {
          _this4.moveActiveTabIntoView();
        });
      },
      navs: function navs() {
        var _this5 = this;

        this.$nextTick(function () {
          _this5.fixScrollLeft();
        });
      }
    },
    methods: {
      calculateCanShowArrow: function calculateCanShowArrow() {
        this.calculateCanToLeft();
        this.calculateCanToRight();
      },
      calculateCanToLeft: function calculateCanToLeft() {
        if (["left", "right"].includes(this.placement.toLowerCase())) {
          this.canToLeft = false;
        }

        var container = this.$refs.navsContainer;
        var wrap = this.$refs.navsWrap;

        if (!wrap || !container) {
          this.canToLeft = false;
        }

        var leftOperationsZoneWidth = getDomWidth(this.$refs.leftOperationsZone);
        var leftIconWidth = getDomWidth(this.$refs.leftIcon);
        this.canToLeft = this.scrollLeft + Math.round(leftOperationsZoneWidth - leftIconWidth) > 0;
      },
      calculateCanToRight: function calculateCanToRight() {
        if (["left", "right"].includes(this.placement.toLowerCase())) {
          this.canToRight = false;
        }

        var container = this.$refs.navsContainer;
        var wrap = this.$refs.navsWrap;

        if (!wrap || !container) {
          this.canToRight = false;
        }

        var rightOperationsZoneWidth = getDomWidth(this.$refs.rightOperationsZone);
        var rightIconWidth = getDomWidth(this.$refs.rightIcon);
        this.canToRight = this.scrollLeft + getDomWidth(container) - (rightOperationsZoneWidth - rightIconWidth) - getDomWidth(wrap) < -1;
      },
      calculateNavBarStyle: function calculateNavBarStyle() {
        var _this6 = this;

        var getNavBarStyle = function getNavBarStyle() {
          var _this6$navs$i$compone4, _this6$navs$i$compone5, _ref5;

          if (_this6.theme === "card") return {};

          var getPropName = function getPropName() {
            if (["left", "right"].includes(_this6.placement.toLowerCase())) {
              return ["height", "top"];
            }

            return ["width", "left"];
          };

          var offset = 0;

          var _getPropName = getPropName(),
              _getPropName2 = _slicedToArray(_getPropName, 2),
              sizePropName = _getPropName2[0],
              offsetPropName = _getPropName2[1];

          var i = 0;

          for (; i < _this6.navs.length; i++) {
            var _this6$navs$i$compone, _this6$navs$i$compone2, _this6$navs$i$compone3;

            if (((_this6$navs$i$compone = _this6.navs[i].componentInstance) === null || _this6$navs$i$compone === void 0 ? void 0 : _this6$navs$i$compone.value) === _this6.value) {
              break;
            }

            offset += ((_this6$navs$i$compone2 = _this6.navs[i].componentInstance) === null || _this6$navs$i$compone2 === void 0 ? void 0 : (_this6$navs$i$compone3 = _this6$navs$i$compone2.$el) === null || _this6$navs$i$compone3 === void 0 ? void 0 : _this6$navs$i$compone3["client".concat(firstUpperCase$1(sizePropName))]) || 0;
          }

          if (!_this6.navs[i]) return {};
          return _ref5 = {}, _defineProperty$3(_ref5, offsetPropName, "".concat(offset, "px")), _defineProperty$3(_ref5, sizePropName, "".concat(((_this6$navs$i$compone4 = _this6.navs[i].componentInstance) === null || _this6$navs$i$compone4 === void 0 ? void 0 : (_this6$navs$i$compone5 = _this6$navs$i$compone4.$el) === null || _this6$navs$i$compone5 === void 0 ? void 0 : _this6$navs$i$compone5["client".concat(firstUpperCase$1(sizePropName))]) || 0, "px")), _ref5;
        };

        this.navBarStyle = getNavBarStyle();
      },
      watchDomChange: function watchDomChange() {
        var _this7 = this;

        var onResize = debounce_1(function () {
          _this7.resetScrollPosition();
        }, 300);
        window.addEventListener("resize", onResize);
        this.$once("beforeDestroy", function () {
          window.removeEventListener("resize", onResize);
        });
        if (!this.$refs.navsContainer) return;
        if (!window.ResizeObserver) return;
        var resizeObserver = new window.ResizeObserver(onResize);
        resizeObserver.observe(this.$refs.navsContainer);
        this.$once("beforeDestroy", function () {
          resizeObserver.disconnect();
        });
      },
      resetScrollPosition: function resetScrollPosition() {
        this.fixScrollLeft();
        this.calculateCanShowArrow();
      },
      handleScrollToLeft: function handleScrollToLeft() {
        var container = this.$refs.navsContainer;
        if (!container) return;
        var leftOperationsZoneWidth = getDomWidth(this.$refs.leftOperationsZone);
        var leftIconWidth = getDomWidth(this.$refs.leftIcon);
        var containerWidth = getDomWidth(container);
        this.scrollLeft = Math.max(-(leftOperationsZoneWidth - leftIconWidth), this.scrollLeft - containerWidth);
      },
      handleScrollToRight: function handleScrollToRight() {
        var container = this.$refs.navsContainer;
        var wrap = this.$refs.navsWrap;
        var rightOperationsZoneWidth = getDomWidth(this.$refs.rightOperationsZone);
        var rightIconWidth = getDomWidth(this.$refs.rightIcon);
        var containerWidth = getDomWidth(container);
        var wrapWidth = getDomWidth(wrap);
        this.scrollLeft = Math.min(this.scrollLeft + containerWidth, wrapWidth - containerWidth + rightOperationsZoneWidth - rightIconWidth);
      },
      shouldMoveToLeftSide: function shouldMoveToLeftSide(activeTabEl) {
        var _this8 = this;

        var totalWidthBeforeActiveTab = activeTabEl.offsetLeft;
        var container = this.$refs.navsContainer;
        if (!container) return;
        var leftCoverWidth = getLeftCoverWidth({
          leftZone: this.$refs.leftOperationsZone,
          leftIcon: this.$refs.leftIcon,
          totalWidthBeforeActiveTab: totalWidthBeforeActiveTab
        });

        var isCurrentTabHiddenInLeftZone = function isCurrentTabHiddenInLeftZone() {
          return _this8.scrollLeft + leftCoverWidth > totalWidthBeforeActiveTab;
        };

        if (isCurrentTabHiddenInLeftZone()) {
          this.scrollLeft = totalWidthBeforeActiveTab - leftCoverWidth;
          return true;
        }

        return false;
      },
      shouldMoveToRightSide: function shouldMoveToRightSide(activeTabEl) {
        var _this9 = this;

        var totalWidthBeforeActiveTab = activeTabEl.offsetLeft;
        var activeTabWidth = activeTabEl.offsetWidth;
        var container = this.$refs.navsContainer;
        var wrap = this.$refs.navsWrap;
        if (!container || !wrap) return;
        var containerWidth = getDomWidth(container);
        var rightCoverWidth = getRightCoverWidth({
          rightZone: this.$refs.rightOperationsZone,
          rightIcon: this.$refs.rightIcon,
          wrap: wrap,
          totalWidthBeforeActiveTab: totalWidthBeforeActiveTab,
          activeTabWidth: activeTabWidth
        });

        var isCurrentTabHiddenInRightZone = function isCurrentTabHiddenInRightZone() {
          return _this9.scrollLeft + containerWidth - rightCoverWidth < totalWidthBeforeActiveTab + activeTabWidth;
        };

        if (isCurrentTabHiddenInRightZone()) {
          this.scrollLeft = totalWidthBeforeActiveTab + activeTabWidth - containerWidth + rightCoverWidth;
          return true;
        }

        return false;
      },
      moveActiveTabIntoView: function moveActiveTabIntoView() {
        var _this10 = this;

        var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          needCheckUpdate: true
        },
            needCheckUpdate = _ref6.needCheckUpdate;

        if (["left", "right"].includes(this.placement)) {
          return false;
        }

        var activeTabEl = getActiveTabEl(this.navs, this.value);

        if (!activeTabEl) {
          if (needCheckUpdate) {
            this.$once("hook:updated", function () {
              _this10.moveActiveTabIntoView({
                needCheckUpdate: false
              });
            });
          }

          return false;
        }

        return this.shouldMoveToLeftSide(activeTabEl) || this.shouldMoveToRightSide(activeTabEl);
      },
      fixIfLastItemNotTouchRightSide: function fixIfLastItemNotTouchRightSide(containerWidth, wrapWidth) {
        var rightOperationsZoneWidth = getDomWidth(this.$refs.rightOperationsZone);

        if (this.scrollLeft + containerWidth - rightOperationsZoneWidth > wrapWidth) {
          this.scrollLeft = wrapWidth + rightOperationsZoneWidth - containerWidth;
          return true;
        }

        return false;
      },
      fixIfItemTotalWidthIsLessThenContainerWidth: function fixIfItemTotalWidthIsLessThenContainerWidth(containerWidth, wrapWidth) {
        if (wrapWidth <= containerWidth) {
          this.scrollLeft = 0;
          return true;
        }

        return false;
      },
      fixScrollLeft: function fixScrollLeft() {
        if (["left", "right"].includes(this.placement.toLowerCase())) return;
        var container = this.$refs.navsContainer;
        var wrap = this.$refs.navsWrap;
        if (!wrap || !container) return false;
        var containerWidth = getDomWidth(container);
        var wrapWidth = getDomWidth(wrap);
        return this.fixIfItemTotalWidthIsLessThenContainerWidth(containerWidth, wrapWidth) || this.fixIfLastItemNotTouchRightSide(containerWidth, wrapWidth);
      },
      handleAddTab: function handleAddTab(e) {
        emitEvent(this, "add", {
          e: e
        });
      },
      tabClick: function tabClick(event, nav) {
        var value = nav.value,
            disabled = nav.disabled;

        if (disabled || this.value === value) {
          return false;
        }

        emitEvent(this, "change", value);
      },
      removeBtnClick: function removeBtnClick(_ref7) {
        var e = _ref7.e,
            value = _ref7.value,
            index = _ref7.index;
        emitEvent(this, "remove", {
          e: e,
          value: value,
          index: index
        });
      },
      renderArrows: function renderArrows() {
        var h = this.$createElement;

        var _this$useGlobalIcon = this.useGlobalIcon({
          ChevronLeftIcon: ChevronLeft,
          ChevronRightIcon: ChevronRight,
          AddIcon: Add
        }),
            ChevronLeftIcon = _this$useGlobalIcon.ChevronLeftIcon,
            ChevronRightIcon = _this$useGlobalIcon.ChevronRightIcon,
            AddIcon = _this$useGlobalIcon.AddIcon;

        return [h("div", {
          "ref": "leftOperationsZone",
          "class": ["".concat(this.classPrefix, "-tabs__operations"), "".concat(this.classPrefix, "-tabs__operations--left")]
        }, [h("transition", {
          "attrs": {
            "name": "fade",
            "mode": "out-in",
            "appear": true
          }
        }, [this.canToLeft ? h("div", {
          "ref": "leftIcon",
          "class": this.leftIconClass,
          "on": {
            "click": this.handleScrollToLeft
          }
        }, [h(ChevronLeftIcon)]) : null])]), h("div", {
          "ref": "rightOperationsZone",
          "class": ["".concat(this.classPrefix, "-tabs__operations"), "".concat(this.classPrefix, "-tabs__operations--right")]
        }, [h("transition", {
          "attrs": {
            "name": "fade",
            "mode": "out-in",
            "appear": true
          }
        }, [this.canToRight ? h("div", {
          "ref": "rightIcon",
          "class": this.rightIconClass,
          "on": {
            "click": this.handleScrollToRight
          }
        }, [h(ChevronRightIcon)]) : null]), this.addable ? h("div", {
          "class": this.addIconClass,
          "on": {
            "click": this.handleAddTab
          }
        }, [h(AddIcon)]) : null])];
      },
      renderNavs: function renderNavs() {
        var h = this.$createElement;
        return h("div", {
          "class": this.navContainerClass
        }, [h("div", {
          "class": this.navScrollContainerClass
        }, [h("div", {
          "ref": "navsWrap",
          "class": this.navsWrapClass,
          "style": this.wrapTransformStyle
        }, [this.renderNavBar(), this.navs])])]);
      },
      renderNavBar: function renderNavBar() {
        var h = this.$createElement;
        if (this.theme === "card") return null;
        return h("div", {
          "class": this.navBarClass,
          "style": this.navBarStyle
        });
      }
    },
    mounted: function mounted() {
      var _this11 = this;

      this.$nextTick(function () {
        _this11.watchDomChange();

        _this11.calculateNavBarStyle();

        _this11.calculateCanShowArrow();
      });
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "ref": "navsContainer",
        "class": ["".concat(this.classPrefix, "-tabs__nav")],
        "style": this.navsContainerStyle
      }, [this.renderArrows(), this.renderNavs()]);
    }
  });

  function ownKeys$1_(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1Z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1_(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1_(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$u = getClassPrefixMixins("tabs");
  var _Tabs = mixins(Vue__default["default"], classPrefixMixins$u).extend(_objectSpread$1Z(_objectSpread$1Z({
    name: "TTabs",
    model: {
      prop: "value",
      event: "change"
    },
    components: {
      TTabPanel: _TabPanel,
      TTabNav: TTabNav
    }
  }, {
    listPanels: null
  }), {}, {
    props: _objectSpread$1Z({}, props$R),
    provide: function provide() {
      return {
        parent: this
      };
    },
    data: function data() {
      return {
        panels: []
      };
    },
    watch: {
      list: {
        handler: function handler() {
          this.listPanels = this.createListPanels();
        },
        deep: true
      }
    },
    mounted: function mounted() {
      this.updatePanels();
    },
    updated: function updated() {
      var _this = this;

      this.$nextTick(function () {
        _this.updatePanels();
      });
    },
    methods: {
      updatePanels: function updatePanels() {
        var _this2 = this;

        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$force = _ref.force,
            force = _ref$force === void 0 ? false : _ref$force;

        if (!this.listPanels) {
          this.panels = this.panels || [];
          return;
        }

        var newPanels = this.listPanels.map(function (panel) {
          return panel.componentInstance;
        }).filter(Boolean).filter(function (child) {
          var _child$$vnode;

          return kebabCase_1(child === null || child === void 0 ? void 0 : (_child$$vnode = child.$vnode) === null || _child$$vnode === void 0 ? void 0 : _child$$vnode.tag).endsWith("".concat(_this2.classPrefix, "-tab-panel"));
        });

        var isUnchanged = function isUnchanged() {
          return newPanels.length === _this2.panels.length && _this2.panels.every(function (panel, index) {
            return panel === newPanels[index];
          });
        };

        if (isUnchanged() && !force) return;
        this.panels = newPanels;
      },
      onAddTab: function onAddTab(e) {
        emitEvent(this, "add", {
          e: e
        });
      },
      onChangeTab: function onChangeTab(value) {
        emitEvent(this, "change", value);
      },
      onRemoveTab: function onRemoveTab(_ref2) {
        var e = _ref2.e,
            value = _ref2.value,
            index = _ref2.index;
        var panel = this.panels[index];
        var eventData = {
          value: value,
          index: index,
          e: e
        };
        emitEvent(this, "remove", eventData);
        if (!panel) return;
        emitEvent(panel, "remove", eventData);
      },
      renderHeader: function renderHeader() {
        var _ref3;

        var h = this.$createElement;
        var tabNavProps = {
          theme: this.theme,
          value: this.value,
          size: this.size,
          disabled: this.disabled,
          placement: this.placement,
          addable: this.addable,
          panels: this.panels
        };
        return h("div", {
          "class": (_ref3 = {}, _defineProperty$3(_ref3, "".concat(this.componentName, "__header"), true), _defineProperty$3(_ref3, "".concat(this.classPrefix, "-is-").concat(this.placement), true), _ref3)
        }, [h(TTabNav, helper([{}, {
          "props": tabNavProps
        }, {
          "on": {
            "change": this.onChangeTab,
            "add": this.onAddTab,
            "remove": this.onRemoveTab
          }
        }]))]);
      },
      createListPanels: function createListPanels() {
        var _this3 = this;

        var h = this.$createElement;
        return this.list.map(function (item) {
          return h(_TabPanel, helper([{}, {
            "props": _objectSpread$1Z({}, item)
          }, {
            "on": {
              "remove": _this3.onRemoveTab
            }
          }]));
        });
      },
      renderList: function renderList() {
        if (!this.listPanels) {
          return this.createListPanels();
        }

        return this.listPanels;
      },
      renderContent: function renderContent() {
        var _this$$scopedSlots$de, _this$$scopedSlots;

        var h = this.$createElement;
        this.listPanels = this.list ? this.renderList() : ((_this$$scopedSlots$de = (_this$$scopedSlots = this.$scopedSlots)["default"]) === null || _this$$scopedSlots$de === void 0 ? void 0 : _this$$scopedSlots$de.call(_this$$scopedSlots, {})) || [];
        return h("div", {
          "class": ["".concat(this.componentName, "__content")]
        }, [this.listPanels]);
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "class": this.componentName
      }, [this.placement !== "bottom" ? [this.renderHeader(), this.renderContent()] : [this.renderContent(), this.renderHeader()]]);
    }
  }));

  var Tabs = withInstall(mapProps(["value"], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_Tabs));
  var TabPanel = withInstall(_TabPanel);

  var _HeadMenu = VueCompositionAPI.defineComponent({
    name: "THeadMenu",
    props: props$S,
    model: {
      prop: "value",
      event: "change"
    },
    components: {
      Tabs: Tabs,
      TabPanel: TabPanel
    },
    setup: function setup(props2, ctx) {
      var activeValue = VueCompositionAPI.ref(props2.defaultValue || props2.value);
      var activeValues = VueCompositionAPI.ref([]);
      var expandValues = VueCompositionAPI.ref(props2.defaultExpanded || props2.expanded || []);
      var classPrefix = usePrefixClass();
      var theme = VueCompositionAPI.computed(function () {
        return props2.theme;
      });
      var menuClass = VueCompositionAPI.computed(function () {
        return ["".concat(classPrefix.value, "-menu"), "".concat(classPrefix.value, "-head-menu"), "".concat(classPrefix.value, "-menu--").concat(props2.theme)];
      });
      var mode = VueCompositionAPI.ref(props2.expandType);
      var submenu = VueCompositionAPI.reactive([]);

      var deliver = function deliver(evt) {
        var func = "on".concat(evt[0].toUpperCase() + evt.slice(1));
        return function (val) {
          if (typeof props2[func] === "function") {
            props2[func](val);
          }

          ctx.emit(evt, val);
        };
      };

      var emitChange = deliver("change");
      var emitExpand = deliver("expand");
      var vMenu = new VMenu({
        isMutex: true,
        expandValues: expandValues.value
      });
      VueCompositionAPI.provide("TdMenu", {
        mode: mode,
        theme: theme,
        vMenu: vMenu,
        isHead: true,
        expandValues: expandValues,
        activeValue: activeValue,
        activeValues: activeValues,
        select: function select(value) {
          emitChange(value);
        },
        open: function open(value, type) {
          var expanded = _toConsumableArray(expandValues.value);

          var index = expanded.indexOf(value);

          if (mode.value === "popup") {
            if (type === "add") {
              if (index === -1) {
                expanded.push(value);
              }
            } else if (type === "remove") {
              expanded.splice(index, 1);
            }
          } else {
            expanded.splice(0, 1);

            if (index === -1) {
              expanded.push(value);
            }
          }

          emitExpand(expanded);
        }
      });

      var handleTabChange = function handleTabChange(value) {
        emitChange(value);
      };

      var handleSubmenuExpand = function handleSubmenuExpand(value) {
        var ans = vMenu.getChild(value);
        submenu.length = 0;
        submenu.push.apply(submenu, _toConsumableArray(ans));
      };

      VueCompositionAPI.watch(function () {
        return props2.expanded;
      }, function (value) {
        expandValues.value = value;

        if (mode.value === "normal") {
          handleSubmenuExpand(value[0]);
        }
      });

      var updateActiveValues = function updateActiveValues(value) {
        activeValue.value = value;
        activeValues.value = vMenu.select(value);
      };

      VueCompositionAPI.watch(function () {
        return props2.value;
      }, updateActiveValues);
      VueCompositionAPI.watch(function () {
        return props2.defaultValue;
      }, updateActiveValues);
      VueCompositionAPI.watch(function () {
        return props2.expandType;
      }, function (value) {
        mode.value = value;
      });
      VueCompositionAPI.onMounted(function () {
        var _expandValues$value;

        activeValues.value = vMenu.select(activeValue.value);

        if (((_expandValues$value = expandValues.value) === null || _expandValues$value === void 0 ? void 0 : _expandValues$value.length) > 0) {
          handleSubmenuExpand(expandValues.value[0]);
        }
      });
      return {
        mode: mode,
        menuClass: menuClass,
        expandValues: expandValues,
        activeValue: activeValue,
        activeValues: activeValues,
        submenu: submenu,
        handleTabChange: handleTabChange,
        classPrefix: classPrefix
      };
    },
    methods: {
      renderNormalSubmenu: function renderNormalSubmenu() {
        var h = this.$createElement;
        if (this.submenu.length === 0) return null;
        return h("ul", {
          "class": ["".concat(this.classPrefix, "-head-menu__submenu"), "".concat(this.classPrefix, "-submenu")]
        }, [h("t-tabs", {
          "attrs": {
            "value": this.activeValue
          },
          "on": {
            "change": this.handleTabChange
          }
        }, [this.submenu.map(function (item) {
          return h("t-tab-panel", {
            "attrs": {
              "value": item.value,
              "label": item.vnode[0].text
            }
          });
        })])]);
      }
    },
    render: function render() {
      var h = arguments[0];

      if (this.$slots.options) {
        console.warn("TDesign Warn: `options` slot is going to be deprecated, please use `operations` for slot instead.");
      }

      var operations = renderContent(this, "operations", "options");
      var logo = renderTNodeJSX(this, "logo");
      return h("div", {
        "class": this.menuClass
      }, [h("div", {
        "class": "".concat(this.classPrefix, "-head-menu__inner")
      }, [logo && h("div", {
        "class": "".concat(this.classPrefix, "-menu__logo")
      }, [logo]), h("ul", {
        "class": "".concat(this.classPrefix, "-menu")
      }, [renderContent(this, "default", "content")]), operations && h("div", {
        "class": "".concat(this.classPrefix, "-menu__operations")
      }, [operations])]), this.mode === "normal" && this.renderNormalSubmenu()]);
    }
  });

  var props$Q = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    icon: {
      type: Function
    },
    title: {
      type: [String, Function]
    },
    value: {
      type: [String, Number]
    }
  };

  var classPrefixMixins$t = getClassPrefixMixins("fake-arrow");
  var FakeArrow = mixins(classPrefixMixins$t).extend({
    name: "TFakeArrow",
    props: {
      isActive: {
        type: Boolean
      },
      overlayClassName: {
        type: [String, Object, Array]
      },
      overlayStyle: {
        type: Object
      }
    },
    computed: {
      classes: function classes() {
        return [this.componentName, _defineProperty$3({}, "".concat(this.componentName, "--active"), this.isActive), this.overlayClassName];
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("svg", {
        "class": this.classes,
        "attrs": {
          "width": "16",
          "height": "16",
          "viewBox": "0 0 16 16",
          "fill": "none",
          "xmlns": "http://www.w3.org/2000/svg"
        },
        "style": this.overlayStyle
      }, [h("path", {
        "attrs": {
          "d": "M3.75 5.7998L7.99274 10.0425L12.2361 5.79921",
          "stroke": "black",
          "stroke-opacity": "0.9",
          "stroke-width": "1.3"
        }
      })]);
    }
  });

  function ownKeys$1Z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1Y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1Z(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var keepAnimationMixins$5 = getKeepAnimationMixins();
  var _Submenu = VueCompositionAPI.defineComponent({
    name: "TSubmenu",
    components: {
      FakeArrow: FakeArrow
    },
    mixins: [keepAnimationMixins$5],
    directives: {
      ripple: Ripple
    },
    props: props$Q,
    setup: function setup(props2, ctx) {
      var menu = VueCompositionAPI.inject("TdMenu");
      var theme = menu.theme,
          activeValues = menu.activeValues,
          expandValues = menu.expandValues,
          mode = menu.mode,
          isHead = menu.isHead,
          open = menu.open;
      var submenu = VueCompositionAPI.inject("TdSubmenu", null);
      var classPrefix = usePrefixClass();
      var isActive = VueCompositionAPI.computed(function () {
        return activeValues.value.indexOf(props2.value) > -1;
      });
      var popupVisible = VueCompositionAPI.ref(false);
      var rippleColor = VueCompositionAPI.computed(function () {
        return theme.value === "light" ? "#E7E7E7" : "#383838";
      });
      var isOpen = VueCompositionAPI.computed(function () {
        if (mode.value === "popup") {
          return popupVisible.value;
        }

        return expandValues ? expandValues.value.includes(props2.value) : false;
      });
      var isNested = VueCompositionAPI.ref(false);
      var classes = VueCompositionAPI.computed(function () {
        var _ref;

        return ["".concat(classPrefix.value, "-submenu"), (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-disabled"), props2.disabled), _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-opened"), isOpen.value), _ref)];
      });
      var popupClass = VueCompositionAPI.computed(function () {
        var _ref2;

        return ["".concat(classPrefix.value, "-menu__popup"), (_ref2 = {}, _defineProperty$3(_ref2, "".concat(classPrefix.value, "-is-opened"), popupVisible.value), _defineProperty$3(_ref2, "".concat(classPrefix.value, "-is-vertical"), !isHead), _ref2)];
      });
      var submenuClass = VueCompositionAPI.computed(function () {
        var _ref3;

        return ["".concat(classPrefix.value, "-menu__item"), (_ref3 = {}, _defineProperty$3(_ref3, "".concat(classPrefix.value, "-is-disabled"), props2.disabled), _defineProperty$3(_ref3, "".concat(classPrefix.value, "-is-opened"), isOpen.value), _defineProperty$3(_ref3, "".concat(classPrefix.value, "-is-active"), isActive.value), _ref3)];
      });
      var subClass = VueCompositionAPI.computed(function () {
        return ["".concat(classPrefix.value, "-menu__sub"), _defineProperty$3({}, "".concat(classPrefix.value, "-is-opened"), isOpen.value)];
      });
      var arrowClass = VueCompositionAPI.computed(function () {
        return [_defineProperty$3({}, "".concat(classPrefix.value, "-fake-arrow--active"), isOpen.value)];
      });

      var handleMouseEnter = function handleMouseEnter() {
        if (props2.disabled) return;
        popupVisible.value = true;
      };

      var handleMouseLeave = function handleMouseLeave() {
        popupVisible.value = false;
      };

      var handleSubmenuItemClick = function handleSubmenuItemClick() {
        if (props2.disabled) return;
        open(props2.value);
      };

      VueCompositionAPI.watch(popupVisible, function (visible) {
        menu.open(props2.value, visible ? "add" : "remove");
      });
      VueCompositionAPI.provide("TdSubmenu", {
        value: props2.value
      });
      VueCompositionAPI.onMounted(function () {
        var _menu$vMenu, _instance$parent$vnod;

        menu === null || menu === void 0 ? void 0 : (_menu$vMenu = menu.vMenu) === null || _menu$vMenu === void 0 ? void 0 : _menu$vMenu.add({
          value: props2.value,
          parent: submenu === null || submenu === void 0 ? void 0 : submenu.value
        });
        var instance = VueCompositionAPI.getCurrentInstance();
        isNested.value = /submenu/i.test((_instance$parent$vnod = instance.parent.vnode) === null || _instance$parent$vnod === void 0 ? void 0 : _instance$parent$vnod.tag);

        if (ctx.refs.popup) {
          var rect = ctx.refs.popupInner.getBoundingClientRect();
          var $popup = ctx.refs.popup;
          $popup.style.setProperty("--popup-max-height", "".concat(rect.height, "px"));
          $popup.style.setProperty("--popup-width", "".concat(rect.width, "px"));
        }
      });
      return {
        mode: mode,
        isHead: isHead,
        isNested: isNested,
        classes: classes,
        subClass: subClass,
        arrowClass: arrowClass,
        popupClass: popupClass,
        submenuClass: submenuClass,
        rippleColor: rippleColor,
        handleMouseEnter: handleMouseEnter,
        handleMouseLeave: handleMouseLeave,
        handleSubmenuItemClick: handleSubmenuItemClick,
        classPrefix: classPrefix
      };
    },
    methods: {
      renderHeadSubmenu: function renderHeadSubmenu() {
        var h = this.$createElement;
        var rippleVal = this.keepAnimation.ripple ? this.rippleColor : false;
        var normalSubmenu = [h("div", {
          "directives": [{
            name: "ripple",
            value: rippleVal
          }],
          "class": this.submenuClass,
          "on": {
            "click": this.handleSubmenuItemClick
          }
        }, [renderTNodeJSX(this, "title")]), h("ul", {
          "style": "opacity: 0; width: 0; height: 0; overflow: hidden"
        }, [renderContent(this, "default", "content")])];
        var popupSubmenu = [h("div", {
          "class": this.submenuClass
        }, [renderTNodeJSX(this, "title"), h("fake-arrow", {
          "attrs": {
            "overlayClassName": this.arrowClass,
            "overlayStyle": {
              transform: "rotate(".concat(this.isNested ? -90 : 0, "deg)")
            }
          }
        })]), h("div", {
          "ref": "popup",
          "class": this.popupClass
        }, [h("ul", {
          "ref": "popupInner",
          "class": "".concat(this.classPrefix, "-menu__popup-wrapper")
        }, [renderContent(this, "default", "content")])])];
        return this.mode === "normal" ? normalSubmenu : popupSubmenu;
      },
      renderSubmenu: function renderSubmenu() {
        var _this$$parent$$vnode;

        var h = this.$createElement;
        var hasContent = this.$slots.content || this.$slots["default"];
        var icon = renderTNodeJSX(this, "icon");
        var child = renderContent(this, "default", "content");
        var paddingLeft = 44;

        if (/submenu/i.test((_this$$parent$$vnode = this.$parent.$vnode) === null || _this$$parent$$vnode === void 0 ? void 0 : _this$$parent$$vnode.tag)) {
          paddingLeft += 16;
        }

        var needRotate = this.mode === "popup";
        var rippleVal = this.keepAnimation.ripple ? this.rippleColor : false;
        var normalSubmenu = [h("div", {
          "directives": [{
            name: "ripple",
            value: rippleVal
          }],
          "class": this.submenuClass,
          "on": {
            "click": this.handleSubmenuItemClick
          }
        }, [icon, h("span", {
          "class": ["".concat(this.classPrefix, "-menu__content")]
        }, [renderTNodeJSX(this, "title")]), hasContent && h("fake-arrow", {
          "attrs": {
            "overlayClassName": this.arrowClass,
            "overlayStyle": {
              transform: "rotate(".concat(needRotate ? -90 : 0, "deg)")
            }
          }
        })]), h("ul", {
          "attrs": {
            "level": this.level
          },
          "class": this.subClass,
          "style": {
            "--padding-left": "".concat(paddingLeft, "px")
          }
        }, [child])];
        var popupSubmenu = [h("div", {
          "class": this.submenuClass
        }, [icon, h("span", {
          "class": ["".concat(this.classPrefix, "-menu__content")]
        }, [renderTNodeJSX(this, "title")]), h("fake-arrow", {
          "attrs": {
            "overlayClassName": this.arrowClass,
            "overlayStyle": {
              transform: "rotate(".concat(needRotate ? -90 : 0, "deg)")
            }
          }
        })]), h("div", {
          "ref": "popup",
          "class": this.popupClass
        }, [h("ul", {
          "ref": "popupInner",
          "class": "".concat(this.classPrefix, "-menu__popup-wrapper")
        }, [child])])];
        return this.mode === "normal" ? normalSubmenu : popupSubmenu;
      }
    },
    render: function render() {
      var h = arguments[0];
      var child = null;
      var events = {};

      if (this.mode === "popup") {
        events = {
          mouseenter: this.handleMouseEnter,
          mouseleave: this.handleMouseLeave
        };
      }

      if (Object.keys(this.$slots).length > 0) {
        child = this.isHead ? this.renderHeadSubmenu() : this.renderSubmenu();
      }

      return h("li", {
        "class": this.classes,
        "on": _objectSpread$1Y({}, events)
      }, [child]);
    }
  });

  var props$P = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    href: {
      type: String,
      "default": ""
    },
    icon: {
      type: Function
    },
    replace: Boolean,
    router: {
      type: Object
    },
    target: {
      type: String,
      validator: function validator(val) {
        return ["_blank", "_self", "_parent", "_top"].includes(val);
      }
    },
    to: {
      type: [String, Object]
    },
    value: {
      type: [String, Number]
    },
    onClick: Function
  };

  function ownKeys$1Y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1X(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1Y(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var keepAnimationMixins$4 = getKeepAnimationMixins();
  var _MenuItem = VueCompositionAPI.defineComponent({
    name: "TMenuItem",
    mixins: [keepAnimationMixins$4],
    props: _objectSpread$1X({}, props$P),
    directives: {
      ripple: Ripple
    },
    setup: function setup(props2, ctx) {
      var menu = VueCompositionAPI.inject("TdMenu");
      var submenu = VueCompositionAPI.inject("TdSubmenu", null);
      var active = VueCompositionAPI.computed(function () {
        return menu.activeValue.value === props2.value;
      });
      var classPrefix = usePrefixClass();
      var classes = VueCompositionAPI.computed(function () {
        var _ref;

        return ["".concat(classPrefix.value, "-menu__item"), (_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-active"), active.value), _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-disabled"), props2.disabled), _defineProperty$3(_ref, "".concat(classPrefix.value, "-menu__item--plain"), !ctx.slots.icon && !props2.icon), _defineProperty$3(_ref, "".concat(classPrefix.value, "-submenu__item"), !!submenu && !menu.isHead), _ref)];
      });

      var handleClick = function handleClick() {
        if (props2.disabled) return;
        menu.select(props2.value);
        ctx.emit("click");

        if (props2.href) {
          window.open(props2.href, props2.target);
        } else if (props2.to) {
          var router = props2.router || ctx.root.$router;
          var methods = props2.replace ? "replace" : "push";
          router[methods](props2.to)["catch"](function (err) {
            if (err.name !== "NavigationDuplicated" && !err.message.includes("Avoided redundant navigation to current location")) {
              throw err;
            }
          });
        }
      };

      VueCompositionAPI.onMounted(function () {
        var _menu$vMenu;

        menu === null || menu === void 0 ? void 0 : (_menu$vMenu = menu.vMenu) === null || _menu$vMenu === void 0 ? void 0 : _menu$vMenu.add({
          value: props2.value,
          parent: submenu === null || submenu === void 0 ? void 0 : submenu.value,
          vnode: ctx.slots["default"] && ctx.slots["default"]()
        });
      });
      return {
        menu: menu,
        active: active,
        classes: classes,
        handleClick: handleClick,
        classPrefix: classPrefix
      };
    },
    render: function render() {
      var h = arguments[0];
      return h("li", {
        "directives": [{
          name: "ripple",
          value: this.keepAnimation.ripple
        }],
        "class": this.classes,
        "on": {
          "click": this.handleClick
        }
      }, [renderTNodeJSX(this, "icon"), h("span", {
        "class": ["".concat(this.classPrefix, "-menu__content")]
      }, [renderContent(this, "default", "content")])]);
    }
  });

  var props$O = {
    title: {
      type: [String, Function]
    }
  };

  var _MenuGroup = VueCompositionAPI.defineComponent({
    name: "TMenuGroup",
    props: props$O,
    setup: function setup() {
      var classPrefix = usePrefixClass();
      return {
        classPrefix: classPrefix
      };
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "class": "".concat(this.classPrefix, "-menu-group")
      }, [h("div", {
        "class": "".concat(this.classPrefix, "-menu-group__title")
      }, [this.title]), this.$slots["default"]]);
    }
  });

  var Menu = withInstall(mapProps([{
    name: "value",
    event: ["change", "update:value"]
  }, {
    name: "expanded",
    event: ["expand", "update:expanded"]
  }], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_Menu), VueCompositionAPI__default["default"]);
  var HeadMenu = withInstall(mapProps([{
    name: "value",
    event: ["change", "update:value"]
  }, {
    name: "expanded",
    event: ["expand", "update:expanded"]
  }], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_HeadMenu), VueCompositionAPI__default["default"]);
  var Submenu = withInstall(_Submenu, VueCompositionAPI__default["default"]);
  var MenuItem = withInstall(_MenuItem, VueCompositionAPI__default["default"]);
  var MenuGroup = withInstall(_MenuGroup, VueCompositionAPI__default["default"]);

  var props$N = {
    align: {
      type: String,
      "default": "left",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "center", "right"].includes(val);
      }
    },
    allowInputOverMax: Boolean,
    autocomplete: {
      type: String,
      "default": void 0
    },
    autofocus: Boolean,
    autoWidth: Boolean,
    clearable: Boolean,
    disabled: Boolean,
    format: {
      type: Function
    },
    inputClass: {
      type: [String, Object, Array]
    },
    label: {
      type: [String, Function]
    },
    maxcharacter: {
      type: Number
    },
    maxlength: {
      type: Number
    },
    name: {
      type: String,
      "default": ""
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    prefixIcon: {
      type: Function
    },
    readonly: Boolean,
    showClearIconOnEmpty: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tips: {
      type: [String, Function]
    },
    type: {
      type: String,
      "default": "text",
      validator: function validator(val) {
        if (!val) return true;
        return ["text", "number", "url", "tel", "password", "search", "submit", "hidden"].includes(val);
      }
    },
    value: {
      type: [String, Number]
    },
    defaultValue: {
      type: [String, Number]
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onCompositionend: Function,
    onCompositionstart: Function,
    onEnter: Function,
    onFocus: Function,
    onKeydown: Function,
    onKeypress: Function,
    onKeyup: Function,
    onMouseenter: Function,
    onMouseleave: Function,
    onPaste: Function,
    onWheel: Function
  };

  function ownKeys$1X(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1W(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1X(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1X(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function getValidAttrs$1(obj) {
    var newObj = {};
    Object.keys(obj).forEach(function (key) {
      if (typeof obj[key] !== "undefined") {
        newObj[key] = obj[key];
      }
    });
    return newObj;
  }

  var _Input = mixins(getConfigReceiverMixins("input"), getGlobalIconMixins()).extend({
    name: "TInput",
    inheritAttrs: false,
    props: _objectSpread$1W(_objectSpread$1W({}, props$N), {}, {
      showInput: {
        type: Boolean,
        "default": true
      },
      keepWrapperWidth: {
        type: Boolean,
        "default": false
      }
    }),
    data: function data() {
      return {
        formDisabled: void 0,
        isHover: false,
        focused: false,
        renderType: this.type,
        inputValue: this.value,
        composingRef: false,
        composingRefValue: this.value
      };
    },
    computed: {
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      tPlaceholder: function tPlaceholder() {
        var _this$placeholder;

        return (_this$placeholder = this.placeholder) !== null && _this$placeholder !== void 0 ? _this$placeholder : this.t(this.global.placeholder);
      },
      showClear: function showClear() {
        return (this.value && !this.disabled && this.clearable && !this.readonly || this.showClearIconOnEmpty) && this.isHover;
      },
      inputAttrs: function inputAttrs() {
        var _this$autocomplete;

        return getValidAttrs$1({
          autofocus: this.autofocus,
          disabled: this.tDisabled,
          readonly: this.readonly,
          autocomplete: (_this$autocomplete = this.autocomplete) !== null && _this$autocomplete !== void 0 ? _this$autocomplete : this.global.autocomplete,
          placeholder: this.tPlaceholder,
          maxlength: this.maxlength,
          name: this.name || void 0,
          type: this.renderType,
          unselectable: this.readonly ? "on" : "off"
        });
      },
      inputClasses: function inputClasses() {
        var _ref;

        return [this.componentName, this.commonSizeClassName[this.size] || "", (_ref = {}, _defineProperty$3(_ref, this.commonStatusClassName.disabled, this.tDisabled), _defineProperty$3(_ref, this.commonStatusClassName.focused, this.focused), _defineProperty$3(_ref, "".concat(this.classPrefix, "-is-").concat(this.status), this.status), _defineProperty$3(_ref, "".concat(this.classPrefix, "-align-").concat(this.align), this.align !== "left"), _defineProperty$3(_ref, "".concat(this.classPrefix, "-is-disabled"), this.tDisabled), _defineProperty$3(_ref, "".concat(this.classPrefix, "-is-readonly"), this.readonly), _defineProperty$3(_ref, "".concat(this.componentName, "--focused"), this.focused), _defineProperty$3(_ref, "".concat(this.componentName, "--auto-width"), this.autoWidth && !this.keepWrapperWidth), _ref)];
      }
    },
    watch: {
      autofocus: {
        handler: function handler(val) {
          var _this = this;

          if (val === true) {
            this.$nextTick(function () {
              var input = _this.$refs.inputRef;
              input === null || input === void 0 ? void 0 : input.focus();
            });
          }
        },
        immediate: true
      },
      value: {
        handler: function handler(val) {
          this.inputValue = val;
        },
        immediate: true
      },
      type: {
        handler: function handler(val) {
          this.renderType = val;
        },
        immediate: true
      }
    },
    created: function created() {
      this.composing = false;

      if (this.autoWidth) {
        this.addListeners();
      }
    },
    methods: {
      addListeners: function addListeners() {
        var _this2 = this;

        this.$watch(function () {
          return _this2.value + _this2.placeholder;
        }, function () {
          if (!_this2.autoWidth) return;

          _this2.$nextTick(function () {
            _this2.updateInputWidth();
          });
        }, {
          immediate: true
        });
      },
      mouseEvent: function mouseEvent(v) {
        this.isHover = v;
      },
      renderIcon: function renderIcon(h, icon, iconType) {
        if (typeof icon === "function") {
          return icon(h);
        }

        if (this.$scopedSlots[kebabCase_1(iconType)]) {
          return this.$scopedSlots[kebabCase_1(iconType)](null);
        }

        if (this.$scopedSlots[camelCase_1(iconType)]) {
          return this.$scopedSlots[camelCase_1(iconType)](null);
        }

        return null;
      },
      setInputValue: function setInputValue() {
        var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var input = this.$refs.inputRef;
        if (!input) return;
        var sV = String(v);

        if (input.value !== sV) {
          input.value = sV;
        }
      },
      focus: function focus() {
        this.$refs.inputRef.focus();
      },
      blur: function blur() {
        this.$refs.inputRef.blur();
      },
      handleKeydown: function handleKeydown(e) {
        if (this.tDisabled) return;
        var code = e.code || e.key;
        var value = e.currentTarget.value;

        if (code === "Enter" || code === "NumpadEnter") {
          emitEvent(this, "enter", value, {
            e: e
          });
        } else {
          emitEvent(this, "keydown", value, {
            e: e
          });
        }
      },
      handleKeyUp: function handleKeyUp(e) {
        if (this.tDisabled) return;
        var value = e.currentTarget.value;

        if (e.key === "Process") {
          return;
        }

        emitEvent(this, "keyup", value, {
          e: e
        });
      },
      handleKeypress: function handleKeypress(e) {
        if (this.tDisabled) return;
        var value = e.currentTarget.value;
        emitEvent(this, "keypress", value, {
          e: e
        });
      },
      onHandlePaste: function onHandlePaste(e) {
        if (this.tDisabled) return;
        var clipData = e.clipboardData || window.clipboardData;
        emitEvent(this, "paste", {
          e: e,
          pasteValue: clipData === null || clipData === void 0 ? void 0 : clipData.getData("text/plain")
        });
      },
      onHandleMousewheel: function onHandleMousewheel(e) {
        emitEvent(this, "wheel", {
          e: e
        });
      },
      emitPassword: function emitPassword() {
        var renderType = this.renderType;
        var toggleType = renderType === "password" ? "text" : "password";
        this.renderType = toggleType;
      },
      emitClear: function emitClear(e) {
        emitEvent(this, "clear", {
          e: e
        });
        emitEvent(this, "change", "", {
          e: e
        });
      },
      emitFocus: function emitFocus(e) {
        this.inputValue = this.value;
        if (this.tDisabled) return;
        this.focused = true;
        emitEvent(this, "focus", this.value, {
          e: e
        });
      },
      formatAndEmitBlur: function formatAndEmitBlur(e) {
        var _this$tFormItem;

        if (this.format) {
          this.inputValue = this.format(this.value);
        }

        this.focused = false;
        (_this$tFormItem = this.tFormItem) === null || _this$tFormItem === void 0 ? void 0 : _this$tFormItem.validate("blur");
        emitEvent(this, "blur", this.value, {
          e: e
        });
      },
      compositionstartHandler: function compositionstartHandler(e) {
        var _this$onCompositionst;

        this.composingRef = true;
        var value = e.currentTarget.value;
        this.composingRefValue = value;
        this === null || this === void 0 ? void 0 : (_this$onCompositionst = this.onCompositionstart) === null || _this$onCompositionst === void 0 ? void 0 : _this$onCompositionst.call(this, value, {
          e: e
        });
      },
      compositionendHandler: function compositionendHandler(e) {
        var _this$onCompositionen;

        var value = e.currentTarget.value;

        if (this.composingRef) {
          this.composingRef = false;
          this.handleInput(e);
        }

        this.composingRefValue = "";
        this === null || this === void 0 ? void 0 : (_this$onCompositionen = this.onCompositionend) === null || _this$onCompositionen === void 0 ? void 0 : _this$onCompositionen.call(this, value, {
          e: e
        });
      },
      onRootClick: function onRootClick(e) {
        var _this$$refs$inputRef;

        (_this$$refs$inputRef = this.$refs.inputRef) === null || _this$$refs$inputRef === void 0 ? void 0 : _this$$refs$inputRef.focus();
        this.$emit("click", e);
      },
      handleInput: function handleInput(e) {
        var _this3 = this;

        var val = e.currentTarget.value;

        if (this.composingRef) {
          this.composingRefValue = val;
        } else {
          if (this.maxcharacter && this.maxcharacter >= 0) {
            var stringInfo = getCharacterLength(val, this.maxcharacter);
            val = _typeof$1(stringInfo) === "object" && stringInfo.characters;
          }

          emitEvent(this, "change", val, {
            e: e
          });
          this.$nextTick(function () {
            _this3.setInputValue(_this3.value);
          });
        }
      },
      onInputMouseenter: function onInputMouseenter(e) {
        var _this$onMouseenter;

        this.mouseEvent(true);
        (_this$onMouseenter = this.onMouseenter) === null || _this$onMouseenter === void 0 ? void 0 : _this$onMouseenter.call(this, {
          e: e
        });
      },
      onInputMouseleave: function onInputMouseleave(e) {
        var _this$onMouseleave;

        this.mouseEvent(false);
        (_this$onMouseleave = this.onMouseleave) === null || _this$onMouseleave === void 0 ? void 0 : _this$onMouseleave.call(this, {
          e: e
        });
      },
      updateInputWidth: function updateInputWidth() {
        var pre = this.$refs.inputPreRef;
        if (!pre) return;
        var width = pre.offsetWidth;

        if (this.$refs.inputRef) {
          this.$refs.inputRef.style.width = "".concat(width, "px");
        }
      }
    },
    render: function render(h) {
      var _ref2;

      var inputEvents = getValidAttrs$1({
        focus: this.emitFocus,
        blur: this.formatAndEmitBlur,
        keydown: this.handleKeydown,
        keyup: this.handleKeyUp,
        keypress: this.handleKeypress,
        paste: this.onHandlePaste,
        change: function change() {}
      });
      var wrapperAttrs = omit$1(this.$attrs, Object.keys(this.inputAttrs));
      var wrapperEvents = omit$1(this.$listeners, [].concat(_toConsumableArray(Object.keys(inputEvents)), ["input", "paste"]));
      var prefixIcon = this.renderIcon(h, this.prefixIcon, "prefix-icon");
      var suffixIcon = this.renderIcon(h, this.suffixIcon, "suffix-icon");
      var label = renderTNodeJSX(this, "label");
      var suffix = renderTNodeJSX(this, "suffix");
      var labelContent = label ? h("div", {
        "class": "".concat(this.componentName, "__prefix")
      }, [label]) : null;
      var suffixContent = suffix ? h("div", {
        "class": "".concat(this.componentName, "__suffix")
      }, [suffix]) : null;

      var _this$useGlobalIcon = this.useGlobalIcon({
        BrowseIcon: Browse,
        BrowseOffIcon: BrowseOff,
        CloseCircleFilledIcon: CloseCircleFilled
      }),
          BrowseIcon = _this$useGlobalIcon.BrowseIcon,
          BrowseOffIcon = _this$useGlobalIcon.BrowseOffIcon,
          CloseCircleFilledIcon = _this$useGlobalIcon.CloseCircleFilledIcon;

      if (this.type === "password") {
        if (this.renderType === "password") {
          suffixIcon = h(BrowseOffIcon, {
            "class": "".concat(this.componentName, "__suffix-clear"),
            "nativeOn": {
              "click": this.emitPassword
            }
          });
        } else if (this.renderType === "text") {
          suffixIcon = h(BrowseIcon, {
            "class": "".concat(this.componentName, "__suffix-clear"),
            "nativeOn": {
              "click": this.emitPassword
            }
          });
        }
      }

      if (this.showClear) {
        suffixIcon = h(CloseCircleFilledIcon, {
          "class": "".concat(this.componentName, "__suffix-clear"),
          "nativeOn": {
            "click": this.emitClear
          }
        });
      }

      var classes = [this.inputClasses, this.inputClass, (_ref2 = {}, _defineProperty$3(_ref2, "".concat(this.componentName, "--prefix"), prefixIcon || labelContent), _defineProperty$3(_ref2, "".concat(this.componentName, "--suffix"), suffixIcon || suffixContent), _ref2)];
      var inputNode = h("div", {
        "class": classes,
        "on": _objectSpread$1W(_objectSpread$1W({
          "click": this.onRootClick
        }, wrapperEvents), {}, {
          "mouseenter": this.onInputMouseenter,
          "mouseleave": this.onInputMouseleave,
          "wheel": this.onHandleMousewheel
        }),
        "attrs": _objectSpread$1W({}, wrapperAttrs)
      }, [prefixIcon ? h("span", {
        "class": ["".concat(this.componentName, "__prefix"), "".concat(this.componentName, "__prefix-icon")]
      }, [prefixIcon]) : null, labelContent, this.showInput && h("input", {
        "attrs": _objectSpread$1W({}, this.inputAttrs),
        "on": _objectSpread$1W(_objectSpread$1W({}, inputEvents), {}, {
          "input": this.handleInput,
          "compositionstart": this.compositionstartHandler,
          "compositionend": this.compositionendHandler
        }),
        "ref": "inputRef",
        "class": "".concat(this.componentName, "__inner"),
        "domProps": {
          "value": this.composingRef ? this.composingRefValue : this.inputValue
        }
      }), this.autoWidth && h("span", {
        "ref": "inputPreRef",
        "class": "".concat(this.classPrefix, "-input__input-pre")
      }, [this.value || this.tPlaceholder]), suffixContent, suffixIcon ? h("span", {
        "class": ["".concat(this.componentName, "__suffix"), "".concat(this.componentName, "__suffix-icon"), _defineProperty$3({}, "".concat(this.componentName, "__clear"), this.showClear)]
      }, [suffixIcon]) : null]);
      var tips = renderTNodeJSX(this, "tips");
      return h("div", {
        "class": "".concat(this.componentName, "__wrap")
      }, [inputNode, tips && h("div", {
        "class": "".concat(this.componentName, "__tips ").concat(this.componentName, "__tips--").concat(this.status || "normal")
      }, [tips])]);
    }
  });

  var classPrefixMixins$s = getClassPrefixMixins("input-group");
  var _InputGroup = mixins(classPrefixMixins$s).extend({
    name: "TInputGroup",
    props: {
      separate: {
        type: Boolean,
        "default": false
      }
    },
    computed: {
      classes: function classes() {
        return [this.componentName, _defineProperty$3({}, "".concat(this.componentName, "--separate"), this.separate)];
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "class": this.classes
      }, [renderTNodeJSX(this, "default")]);
    }
  });

  var Input = withInstall(mapProps(["value"], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_Input));
  var InputGroup = withInstall(_InputGroup);

  var props$M = {
    align: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "center", "right"].includes(val);
      }
    },
    autoWidth: Boolean,
    decimalPlaces: {
      type: Number,
      "default": void 0
    },
    disabled: Boolean,
    format: {
      type: Function
    },
    inputProps: {
      type: Object
    },
    label: {
      type: [String, Function]
    },
    largeNumber: Boolean,
    max: {
      type: [String, Number],
      "default": Infinity
    },
    min: {
      type: [String, Number],
      "default": -Infinity
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    readonly: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    step: {
      type: [String, Number],
      "default": 1
    },
    suffix: {
      type: [String, Function]
    },
    theme: {
      type: String,
      "default": "row",
      validator: function validator(val) {
        if (!val) return true;
        return ["column", "row", "normal"].includes(val);
      }
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number]
    },
    onBlur: Function,
    onChange: Function,
    onEnter: Function,
    onFocus: Function,
    onKeydown: Function,
    onKeypress: Function,
    onKeyup: Function,
    onValidate: Function
  };

  function useCommonClassName() {
    var _useConfig = useConfig(),
        classPrefix = _useConfig.classPrefix;

    var sizeClassNames = {
      small: "".concat(classPrefix.value, "-size-s"),
      medium: "".concat(classPrefix.value, "-size-m"),
      large: "".concat(classPrefix.value, "-size-l"),
      "default": "",
      xs: "".concat(classPrefix.value, "-size-xs"),
      xl: "".concat(classPrefix.value, "-size-xl"),
      block: "".concat(classPrefix.value, "-size-full-width")
    };
    var statusClassNames = {
      loading: "".concat(classPrefix.value, "-is-loading"),
      loadMore: "".concat(classPrefix.value, "-is-load-more"),
      disabled: "".concat(classPrefix.value, "-is-disabled"),
      focused: "".concat(classPrefix.value, "-is-focused"),
      success: "".concat(classPrefix.value, "-is-success"),
      error: "".concat(classPrefix.value, "-is-error"),
      warning: "".concat(classPrefix.value, "-is-warning"),
      selected: "".concat(classPrefix.value, "-is-selected"),
      active: "".concat(classPrefix.value, "-is-active"),
      checked: "".concat(classPrefix.value, "-is-checked"),
      current: "".concat(classPrefix.value, "-is-current"),
      hidden: "".concat(classPrefix.value, "-is-hidden"),
      visible: "".concat(classPrefix.value, "-is-visible"),
      expanded: "".concat(classPrefix.value, "-is-expanded"),
      indeterminate: "".concat(classPrefix.value, "-is-indeterminate")
    };
    return {
      classPrefix: classPrefix,
      sizeClassNames: sizeClassNames,
      statusClassNames: statusClassNames,
      classNames: {
        size: sizeClassNames,
        status: statusClassNames
      }
    };
  }

  function useVModel(value, defaultValue, onChange, eventName) {
    var _getCurrentInstance = VueCompositionAPI.getCurrentInstance(),
        emit = _getCurrentInstance.emit;

    var internalValue = VueCompositionAPI.ref();
    internalValue.value = defaultValue;

    if (typeof value.value !== "undefined") {
      return [value, function (newValue) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        emit === null || emit === void 0 ? void 0 : emit.apply(void 0, ["input", newValue].concat(args));
        onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));

        if (eventName && eventName !== "input") {
          emit === null || emit === void 0 ? void 0 : emit.apply(void 0, [eventName, newValue].concat(args));
        }
      }];
    }

    return [internalValue, function (newValue) {
      internalValue.value = newValue;

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));

      if (eventName && eventName !== "input") {
        emit === null || emit === void 0 ? void 0 : emit.apply(void 0, [eventName, newValue].concat(args));
      }
    }];
  }

  /** `Object#toString` result references. */

  var numberTag$3 = '[object Number]';
  /**
   * Checks if `value` is classified as a `Number` primitive or object.
   *
   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
   * classified as numbers, use the `_.isFinite` method.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a number, else `false`.
   * @example
   *
   * _.isNumber(3);
   * // => true
   *
   * _.isNumber(Number.MIN_VALUE);
   * // => true
   *
   * _.isNumber(Infinity);
   * // => true
   *
   * _.isNumber('3');
   * // => false
   */

  function isNumber(value) {
    return typeof value == 'number' || isObjectLike_1(value) && _baseGetTag(value) == numberTag$3;
  }

  var isNumber_1 = isNumber;

  var logSet = /* @__PURE__ */new Set();
  var log = {
    warn: function warn(componentName, message) {
      console.warn("TDesign ".concat(componentName, " Warn: ").concat(message));
    },
    warnOnce: function warnOnce(componentName, message) {
      var msgContent = "TDesign ".concat(componentName, " Warn: ").concat(message);
      if (logSet.has(msgContent)) return;
      logSet.add(msgContent);
      console.warn(msgContent);
    },
    error: function error(componentName, message) {
      console.error("TDesign ".concat(componentName, " Error: ").concat(message));
    },
    errorOnce: function errorOnce(componentName, message) {
      var msgContent = "TDesign ".concat(componentName, " Error: ").concat(message);
      if (logSet.has(msgContent)) return;
      logSet.add(msgContent);
      console.error(msgContent);
    },
    info: function info(componentName, message) {
      console.info("TDesign ".concat(componentName, " Info: ").concat(message));
    }
  };

  function fillZero(length) {
    return new Array(length).fill(0).join("");
  }
  function isInputNumber(num) {
    if (!num) return true;
    if (typeof num === "number") return Number.isNaN(num);
    var r = /^[0-9|e|E|-]+\.*[0-9|e|E|-]*$/.test(num);
    if (!r) return false;
    var eCount = 0;
    var negativeCount = 0;
    var dotCount = 0;

    for (var i = 0, len = num.length; i < len; i++) {
      if (num[i] === ".") {
        dotCount += 1;
        if (dotCount > 1) return false;
      }

      if (/(e|E)+/.test(num[i])) {
        eCount += 1;
        if (eCount > 1) return false;
      }

      if (num[i] === "-") {
        negativeCount += 1;
        if (negativeCount > 2) return false;
      }
    }

    return true;
  }
  function removeInvalidZero(num) {
    var decimal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (num.indexOf(".") !== -1) {
      log.error("InputNumber", "num is not a integer number.");
      return num;
    }

    if (!num || num === "0" && decimal) return "";
    if (num === "0") return num;
    return (decimal ? num.replace(/0+$/, "") : num.replace(/^0+/, "")) || "0";
  }
  function largeIntNumberAdd(num1, num2) {
    var decimal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var number1 = removeInvalidZero(num1, decimal);
    var number2 = removeInvalidZero(num2, decimal);
    var isFirstLarger = number1.length > number2.length;
    var maxNumber = isFirstLarger ? number1 : number2;
    var minNumber = isFirstLarger ? number2 : number1;
    var newNumber = [];
    var step = [];
    var diff = decimal ? 0 : maxNumber.length - minNumber.length;
    var len = decimal ? minNumber.length : maxNumber.length;

    for (var i = len - 1; i >= 0; i--) {
      var minIndex = i - diff;
      var count = Number(maxNumber[i]) + (Number(minNumber[minIndex]) || 0) + (step[i] || 0);

      if (count >= 10) {
        step[i - 1] = 1;
      }

      newNumber.unshift(String(count % 10));
    }

    if (step[-1]) {
      newNumber.unshift("1");
    }

    if (decimal) {
      return newNumber.concat(maxNumber.slice(len, maxNumber.length)).join("");
    }

    return newNumber.join("");
  }
  function largePositiveNumberAdd(num1, num2) {
    var _num1$split = num1.split("."),
        _num1$split2 = _slicedToArray(_num1$split, 2),
        _num1$split2$ = _num1$split2[0],
        intNumber1 = _num1$split2$ === void 0 ? "0" : _num1$split2$,
        _num1$split2$2 = _num1$split2[1],
        decimalNumber1 = _num1$split2$2 === void 0 ? "0" : _num1$split2$2;

    var _num2$split = num2.split("."),
        _num2$split2 = _slicedToArray(_num2$split, 2),
        _num2$split2$ = _num2$split2[0],
        intNumber2 = _num2$split2$ === void 0 ? "0" : _num2$split2$,
        _num2$split2$2 = _num2$split2[1],
        decimalNumber2 = _num2$split2$2 === void 0 ? "0" : _num2$split2$2;

    var integerSum = largeIntNumberAdd(intNumber1, intNumber2);
    if (decimalNumber1 === "0" && decimalNumber2 === "0") return integerSum;
    var newDecimalNumber1 = removeInvalidZero(decimalNumber1, true);
    var newDecimalNumber2 = removeInvalidZero(decimalNumber2, true);
    var decimalNumberSum = largeIntNumberAdd(newDecimalNumber1, newDecimalNumber2, true);
    var decimalLength = decimalNumberSum.length;

    if (decimalLength > newDecimalNumber1.length && decimalLength > newDecimalNumber2.length) {
      return [removeInvalidZero(largeIntNumberAdd(integerSum, "1")), removeInvalidZero(decimalNumberSum.slice(1), true)].filter(function (v) {
        return v;
      }).join(".");
    }

    return [removeInvalidZero(integerSum), removeInvalidZero(decimalNumberSum, true)].filter(function (v) {
      return v;
    }).join(".");
  }

  function compareLargeIntegerNumber(num1, num2) {
    var number1 = removeInvalidZero(num1);
    var number2 = removeInvalidZero(num2);

    if (number1.length === number2.length) {
      for (var i = 0, len = number1.length; i < len; i++) {
        if (number1[i] > number2[i]) return 1;
        if (number1[i] < number2[i]) return -1;
      }

      return 0;
    }

    return number1.length > number2.length ? 1 : -1;
  }

  function compareLargeDecimalNumber(num1, num2) {
    var number1 = num1 && num1 !== "0" ? num1.replace(/0+$/, "") : "0";
    var number2 = num2 && num2 !== "0" ? num2.replace(/0+$/, "") : "0";
    var maxLength = Math.max(number1.length, number2.length);

    for (var i = 0, len = maxLength; i < len; i++) {
      if ((number1[i] || 0) > (number2[i] || 0)) return 1;
      if ((number1[i] || 0) < (number2[i] || 0)) return -1;
    }

    return 0;
  }

  function compareLargeNumber(num1, num2) {
    if (typeof num1 === "number" || typeof num2 === "number") {
      if (num1 === num2) return 0;
      return num1 > num2 ? 1 : -1;
    }

    var _num1$split3 = num1.split("."),
        _num1$split4 = _slicedToArray(_num1$split3, 2),
        integer1 = _num1$split4[0],
        decimal1 = _num1$split4[1];

    var _num2$split3 = num2.split("."),
        _num2$split4 = _slicedToArray(_num2$split3, 2),
        integer2 = _num2$split4[0],
        decimal2 = _num2$split4[1];

    var result = compareLargeIntegerNumber(integer1.replace("-", ""), integer2.replace("-", ""));
    var integer1IsNegative = integer1.includes("-");
    var integer2IsNegative = integer2.includes("-");
    if (integer1IsNegative && !integer2IsNegative) return -1;
    if (!integer1IsNegative && integer2IsNegative) return 1;

    if (integer1IsNegative && integer2IsNegative) {
      if (result === 0) return 0;
      return result > 0 ? -1 : 1;
    }

    if (result === 0) {
      return compareLargeDecimalNumber(decimal1, decimal2);
    }

    return result;
  }
  function largeIntegerNumberSubtract(num1, num2, p) {
    if (num1 === num2) return "0";

    var _ref = p || {},
        decimal = _ref.decimal,
        stayZero = _ref.stayZero;

    var number1 = removeInvalidZero(num1);
    var number2 = removeInvalidZero(num2);
    var isFirstLarger = compareLargeIntegerNumber(number1, number2) > 0;
    var maxNumber = isFirstLarger ? number1 : number2;
    var minNumber = isFirstLarger ? number2 : number1;
    var newNumber = [];
    var step = [];
    var diff = decimal ? 0 : maxNumber.length - minNumber.length;
    var len = decimal ? minNumber.length : maxNumber.length;

    for (var i = len - 1; i >= 0; i--) {
      var minIndex = i - diff;
      var count = Number(maxNumber[i]) - (Number(minNumber[minIndex]) || 0) - (step[i] || 0);

      if (count < 0) {
        step[i - 1] = 1;
        count += 10;
      }

      newNumber.unshift(String(count));
    }

    if (decimal) {
      return newNumber.concat(maxNumber.slice(len, maxNumber.length)).join("");
    }

    var finalNumber = newNumber.join("");

    if (!stayZero) {
      finalNumber = finalNumber.replace(/^0+/, "");
    }

    return removeInvalidZero(isFirstLarger ? finalNumber : "-".concat(finalNumber));
  }
  function largePositiveNumberSubtract(num1, num2) {
    if (num1 === num2) return "0";
    var isFirstLarger = compareLargeNumber(num1, num2) > 0;
    var maxNumber = isFirstLarger ? num1 : num2;
    var minNumber = isFirstLarger ? num2 : num1;

    var _maxNumber$split = maxNumber.split("."),
        _maxNumber$split2 = _slicedToArray(_maxNumber$split, 2),
        intNumber1 = _maxNumber$split2[0],
        _maxNumber$split2$ = _maxNumber$split2[1],
        decimalNumber1 = _maxNumber$split2$ === void 0 ? "0" : _maxNumber$split2$;

    var _minNumber$split = minNumber.split("."),
        _minNumber$split2 = _slicedToArray(_minNumber$split, 2),
        intNumber2 = _minNumber$split2[0],
        _minNumber$split2$ = _minNumber$split2[1],
        decimalNumber2 = _minNumber$split2$ === void 0 ? "0" : _minNumber$split2$;

    var integerNumber = largeIntegerNumberSubtract(intNumber1, intNumber2);

    if (decimalNumber1 === "0" && decimalNumber2 === "0") {
      return isFirstLarger ? integerNumber : "-".concat(integerNumber);
    }

    var decimalNumber = "";
    var addOneNumber = decimalNumber1;

    if (decimalNumber1.length < decimalNumber2.length) {
      addOneNumber = "".concat(decimalNumber1).concat(fillZero(decimalNumber2.length - decimalNumber1.length));
    }

    if (compareLargeDecimalNumber(addOneNumber, decimalNumber2) >= 0) {
      decimalNumber = largeIntegerNumberSubtract(addOneNumber, decimalNumber2, {
        decimal: true
      });
    } else {
      if (decimalNumber1.length < decimalNumber2.length || decimalNumber1 === "0") {
        decimalNumber = largeIntegerNumberSubtract("1".concat(addOneNumber), decimalNumber2, {
          stayZero: true
        });
        decimalNumber = fillZero(decimalNumber2.length - decimalNumber.length) + decimalNumber;
      } else {
        decimalNumber = largeIntegerNumberSubtract(decimalNumber1, decimalNumber2, {
          decimal: true
        });
      }

      integerNumber = largeIntegerNumberSubtract(integerNumber, "1");
    }

    var finalNumber = decimalNumber ? [integerNumber, decimalNumber].join(".") : integerNumber;
    return isFirstLarger ? finalNumber : "-".concat(finalNumber);
  }
  function largeNumberSubtract(num1, num2) {
    var isFirstNegative = num1[0] === "-";
    var isSecondNegative = num2[0] === "-";

    if (isFirstNegative && !isSecondNegative) {
      var r = largePositiveNumberAdd(num1.slice(1), num2);
      return "-".concat(r);
    }

    if (isFirstNegative && isSecondNegative) {
      return largePositiveNumberSubtract(num2.slice(1), num1.slice(1));
    }

    if (!isFirstNegative && isSecondNegative) {
      return largePositiveNumberAdd(num1, num2.slice(1));
    }

    return largePositiveNumberSubtract(num1, num2);
  }
  function largeNumberAdd(num1, num2) {
    var isFirstNegative = num1[0] === "-";
    var isSecondNegative = num2[0] === "-";

    if (isFirstNegative && !isSecondNegative) {
      return largePositiveNumberSubtract(num2, num1.slice(1));
    }

    if (isFirstNegative && isSecondNegative) {
      var r = largePositiveNumberAdd(num2.slice(1), num1.slice(1));
      return "-".concat(r);
    }

    if (!isFirstNegative && isSecondNegative) {
      return largePositiveNumberSubtract(num1, num2.slice(1));
    }

    return largePositiveNumberAdd(num1, num2);
  }
  function largeNumberToFixed(number) {
    var decimalPlaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var largeNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    if (!largeNumber) return Number(number).toFixed(decimalPlaces);
    if (typeof number !== "string") return String(number);

    var _number$split = number.split("."),
        _number$split2 = _slicedToArray(_number$split, 2),
        num1 = _number$split2[0],
        num2 = _number$split2[1];

    if (!num2) {
      return decimalPlaces ? [number, fillZero(decimalPlaces)].join(".") : number;
    }

    if (decimalPlaces === 0) {
      return Number(num2[0]) >= 5 ? largePositiveNumberAdd(num1, "1") : num1;
    }

    var decimalNumber = num2.slice(0, decimalPlaces);

    if (num2.length < decimalPlaces) {
      decimalNumber += fillZero(decimalPlaces - num2.length);
    } else {
      decimalNumber = Number(num2[decimalPlaces]) >= 5 ? largePositiveNumberAdd(decimalNumber, "1") : decimalNumber;
    }

    return [num1, decimalNumber].join(".");
  }
  function formatENumber(num) {
    var _num$split = num.split("e"),
        _num$split2 = _slicedToArray(_num$split, 2),
        num1 = _num$split2[0],
        num2 = _num$split2[1];

    var _num$split3 = num.split("."),
        _num$split4 = _slicedToArray(_num$split3, 2),
        integer = _num$split4[0],
        _num$split4$ = _num$split4[1],
        initDecimal = _num$split4$ === void 0 ? "" : _num$split4$;

    var zeroCount = Number(num2);

    var _initDecimal$split = initDecimal.split("e"),
        _initDecimal$split2 = _slicedToArray(_initDecimal$split, 1),
        decimal = _initDecimal$split2[0];

    if (zeroCount > decimal.length) {
      var multipleZero = fillZero(zeroCount - decimal.length);
      return num1.replace(/(^0+|\.)/g, "") + multipleZero;
    }

    var n1 = integer.replace(/^0+/, "") + decimal.slice(0, zeroCount);
    var d2 = decimal.slice(zeroCount);
    return d2 ? [n1, d2].join(".") : n1;
  }

  function canAddNumber(num, max) {
    var largeNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (!num) return true;

    if (largeNumber && isString_1(num)) {
      return compareLargeNumber(num, max) < 0;
    }

    return num < max;
  }
  function canReduceNumber(num, min) {
    var largeNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (!num) return true;

    if (largeNumber && isString_1(num)) {
      return compareLargeNumber(num, min) > 0;
    }

    return num > min;
  }
  function formatToNumber(num, extra) {
    if (num === void 0 || num === null || num === "") return num;
    if (num === "-") return 0;
    if (num[num.length - 1] === ".") return num.slice(0, -1);
    var isLargeNumber = (extra === null || extra === void 0 ? void 0 : extra.largeNumber) && isString_1(num);
    var newNumber = num;

    if (isString_1(num) && num.includes("e") || isNumber_1(num)) {
      newNumber = isLargeNumber ? formatENumber(num) : Number(num);
    }

    if ((extra === null || extra === void 0 ? void 0 : extra.decimalPlaces) !== void 0) {
      newNumber = largeNumberToFixed(newNumber, extra.decimalPlaces, extra.largeNumber);
    }

    return isLargeNumber || (extra === null || extra === void 0 ? void 0 : extra.decimalPlaces) !== void 0 ? newNumber : Number(newNumber);
  }
  function putInRangeNumber(val, params) {
    if (val === "") return void 0;
    var max = params.max,
        min = params.min,
        lastValue = params.lastValue,
        largeNumber = params.largeNumber;
    if (!isInputNumber(val)) return lastValue;

    if (largeNumber && (isString_1(max) || max === Infinity) && (isString_1(min) || min === -Infinity)) {
      if (compareLargeNumber(max, val) < 0) return max;
      if (compareLargeNumber(min, val) > 0) return min;
      return val;
    }

    return Math.max(Number(min), Math.min(Number(max), Number(val)));
  }
  function positiveAdd(num1, num2) {
    var _num1$toString$split$, _num2$toString$split$;

    if (!num1 || !num2) return (num1 || 0) + (num2 || 0);
    var r1 = ((_num1$toString$split$ = num1.toString().split(".")[1]) === null || _num1$toString$split$ === void 0 ? void 0 : _num1$toString$split$.length) || 0;
    var r2 = ((_num2$toString$split$ = num2.toString().split(".")[1]) === null || _num2$toString$split$ === void 0 ? void 0 : _num2$toString$split$.length) || 0;
    if (!r1 || !r2) return num1 + num2;
    var newNumber1 = num1;
    var newNumber2 = num2;
    var diff = Math.abs(r1 - r2);
    var digit = Math.pow(10, Math.max(r1, r2));

    if (diff > 0) {
      var cm = Math.pow(10, diff);

      if (r1 > r2) {
        newNumber1 = Number(num1.toString().replace(".", ""));
        newNumber2 = Number(num2.toString().replace(".", "")) * cm;
      } else {
        newNumber1 = Number(num1.toString().replace(".", "")) * cm;
        newNumber2 = Number(num2.toString().replace(".", ""));
      }
    } else {
      newNumber1 = Number(num1.toString().replace(".", ""));
      newNumber2 = Number(num2.toString().replace(".", ""));
    }

    return (newNumber1 + newNumber2) / digit;
  }
  function positiveSubtract(num1, num2) {
    var _num1$toString$split$2, _num2$toString$split$2;

    if (!num1 || !num2) return (num1 || 0) - (num2 || 0);
    var r1 = ((_num1$toString$split$2 = num1.toString().split(".")[1]) === null || _num1$toString$split$2 === void 0 ? void 0 : _num1$toString$split$2.length) || 0;
    var r2 = ((_num2$toString$split$2 = num2.toString().split(".")[1]) === null || _num2$toString$split$2 === void 0 ? void 0 : _num2$toString$split$2.length) || 0;
    var digit = Math.pow(10, Math.max(r1, r2));
    var n = r1 >= r2 ? r1 : r2;
    return Number(((num1 * digit - num2 * digit) / digit).toFixed(n));
  }
  function add(num1, num2) {
    if (num1 < 0 && num2 > 0) return positiveSubtract(num2, Math.abs(num1));
    if (num1 < 0 && num2 < 0) return positiveAdd(Math.abs(num1), Math.abs(num2)) * -1;
    if (num1 > 0 && num2 < 0) return positiveSubtract(num1, Math.abs(num2));
    return positiveAdd(num1, num2);
  }
  function subtract(num1, num2) {
    if (num1 < 0 && num2 > 0) return positiveAdd(Math.abs(num1), num2) * -1;
    if (num1 < 0 && num2 < 0) return positiveSubtract(Math.abs(num2), Math.abs(num1));
    if (num1 > 0 && num2 < 0) return positiveAdd(num1, Math.abs(num2));
    return positiveSubtract(num1, num2);
  }
  function getStepValue(p) {
    var op = p.op,
        step = p.step,
        _p$lastValue = p.lastValue,
        lastValue = _p$lastValue === void 0 ? 0 : _p$lastValue,
        max = p.max,
        min = p.min,
        largeNumber = p.largeNumber;

    if (step <= 0) {
      log.error("InputNumber", "step must be larger than 0.");
      return lastValue;
    }

    var tStep = isNumber_1(step) ? String(step) : step;
    var newVal;

    if (op === "add") {
      if (largeNumber && isString_1(lastValue)) {
        newVal = largeNumberAdd(String(lastValue), String(tStep));
      } else {
        newVal = add(Number(lastValue || 0), Number(step));
      }
    } else if (op === "reduce") {
      if (largeNumber && isString_1(lastValue)) {
        newVal = largeNumberSubtract(String(lastValue), String(tStep));
      } else {
        newVal = subtract(Number(lastValue || 0), Number(step));
      }
    }

    if (lastValue === void 0) {
      newVal = putInRangeNumber(newVal, {
        max: max,
        min: min,
        lastValue: lastValue,
        largeNumber: largeNumber
      });
    }

    return largeNumber ? newVal : Number(newVal);
  }
  function getMaxOrMinValidateResult(p) {
    var largeNumber = p.largeNumber,
        value = p.value,
        max = p.max,
        min = p.min;
    if (largeNumber === void 0) return void 0;

    if (largeNumber && isNumber_1(value)) {
      log.warn("InputNumber", "largeNumber value must be a string.");
    }

    var error;

    if (compareLargeNumber(value, max) > 0) {
      error = "exceed-maximum";
    } else if (compareLargeNumber(value, min) < 0) {
      error = "below-minimum";
    } else {
      error = void 0;
    }

    return error;
  }
  function canInputNumber(number, largeNumber) {
    if (!number && typeof number === "string") return true;
    var isNumber2 = largeNumber && isInputNumber(number) || !Number.isNaN(Number(number));
    if (!isNumber2 && !["-", ".", "e", "E"].includes(number.slice(-1))) return false;
    return true;
  }

  function useFormDisabled() {
    var formDisabled = VueCompositionAPI.computed(function () {
      var currentInstance = VueCompositionAPI.getCurrentInstance();
      var parent = currentInstance.parent;

      while (parent) {
        if (parent.proxy.$options.name === "TForm") {
          return parent.props.disabled;
        }

        parent = parent.parent;
      }

      return false;
    });
    return {
      formDisabled: formDisabled
    };
  }

  function useInputNumber(props, context) {
    var _useCommonClassName = useCommonClassName(),
        classPrefix = _useCommonClassName.classPrefix,
        sizeClassNames = _useCommonClassName.sizeClassNames,
        statusClassNames = _useCommonClassName.statusClassNames;

    var _toRefs = VueCompositionAPI.toRefs(props),
        value = _toRefs.value,
        max = _toRefs.max,
        min = _toRefs.min;

    var _useVModel = useVModel(value, props.defaultValue, props.onChange, "change"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        tValue = _useVModel2[0],
        setTValue = _useVModel2[1];

    var inputRef = VueCompositionAPI.ref();
    var userInput = VueCompositionAPI.ref("");
    var displayValue = VueCompositionAPI.ref();

    var _useFormDisabled = useFormDisabled(),
        formDisabled = _useFormDisabled.formDisabled;

    var tDisabled = VueCompositionAPI.computed(function () {
      return props.disabled || formDisabled.value;
    });
    var isError = VueCompositionAPI.ref();
    var disabledReduce = VueCompositionAPI.computed(function () {
      return tDisabled.value || !canReduceNumber(tValue.value, props.min, props.largeNumber);
    });
    var disabledAdd = VueCompositionAPI.computed(function () {
      return tDisabled.value || !canAddNumber(tValue.value, props.max, props.largeNumber);
    });
    var wrapClasses = VueCompositionAPI.computed(function () {
      var _ref;

      return ["".concat(classPrefix.value, "-input-number"), sizeClassNames[props.size], (_ref = {}, _defineProperty$3(_ref, statusClassNames.disabled, tDisabled.value), _defineProperty$3(_ref, "".concat(classPrefix.value, "-is-controls-right"), props.theme === "column"), _defineProperty$3(_ref, "".concat(classPrefix.value, "-input-number--").concat(props.theme), props.theme), _defineProperty$3(_ref, "".concat(classPrefix.value, "-input-number--auto-width"), props.autoWidth), _ref)];
    });
    var reduceClasses = VueCompositionAPI.computed(function () {
      return ["".concat(classPrefix.value, "-input-number__decrease"), _defineProperty$3({}, statusClassNames.disabled, disabledReduce.value)];
    });
    var addClasses = VueCompositionAPI.computed(function () {
      return ["".concat(classPrefix.value, "-input-number__increase"), _defineProperty$3({}, statusClassNames.disabled, disabledAdd.value)];
    });

    var getUserInput = function getUserInput(value2) {
      var _inputRef$value, _inputRef$value$$el;

      if (!value2 && value2 !== 0) return "";
      var inputStr = String(value2);

      if (!((_inputRef$value = inputRef.value) !== null && _inputRef$value !== void 0 && (_inputRef$value$$el = _inputRef$value.$el) !== null && _inputRef$value$$el !== void 0 && _inputRef$value$$el.contains(document.activeElement))) {
        inputStr = String(formatToNumber(inputStr, {
          decimalPlaces: props.decimalPlaces,
          largeNumber: props.largeNumber
        }));

        if (props.format) {
          inputStr = String(props.format(value2, {
            fixedNumber: inputStr
          }));
        }
      }

      return inputStr;
    };

    VueCompositionAPI.watch(tValue, function (val) {
      var inputValue = [void 0, null].includes(val) ? "" : String(val);
      userInput.value = getUserInput(inputValue);
    }, {
      immediate: true
    });
    VueCompositionAPI.onMounted(function () {
      userInput.value = getUserInput(tValue.value);
    });
    VueCompositionAPI.watch([tValue, max, min], function () {
      var _props$onValidate;

      if ([void 0, "", null].includes(tValue.value)) return;
      var error = getMaxOrMinValidateResult({
        value: tValue.value,
        largeNumber: props.largeNumber,
        max: props.max,
        min: props.min
      });
      isError.value = error;
      (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 ? void 0 : _props$onValidate.call(props, {
        error: error
      });
      context.emit("validate", {
        error: error
      });
    }, {
      immediate: true
    });

    var handleStepValue = function handleStepValue(op) {
      return getStepValue({
        op: op,
        step: props.step,
        max: props.max,
        min: props.min,
        lastValue: tValue.value,
        largeNumber: props.largeNumber
      });
    };

    var handleReduce = function handleReduce(e) {
      if (disabledReduce.value || props.readonly) return;
      var newValue = handleStepValue("reduce");
      setTValue(newValue, {
        type: "reduce",
        e: e
      });
    };

    var handleAdd = function handleAdd(e) {
      if (disabledAdd.value || props.readonly) return;
      var newValue = handleStepValue("add");
      setTValue(newValue, {
        type: "add",
        e: e
      });
    };

    var onInnerInputChange = function onInnerInputChange(val, ctx) {
      if (!canInputNumber(val, props.largeNumber)) return;
      userInput.value = val;
      var isDelete = ctx.e.inputType === "deleteContentBackward";
      var newVal = isDelete || props.largeNumber || !val ? val : Number(val);

      if (newVal !== tValue.value && !["-", ".", "e", "E"].includes(val.slice(-1))) {
        setTValue(newVal, {
          type: "input",
          e: ctx.e
        });
      }
    };

    var handleBlur = function handleBlur(value2, ctx) {
      var _props$onBlur;

      userInput.value = getUserInput(tValue.value);
      var newValue = formatToNumber(value2, {
        decimalPlaces: props.decimalPlaces,
        largeNumber: props.largeNumber
      });

      if (newValue !== value2 && String(newValue) !== value2) {
        setTValue(newValue, {
          type: "blur",
          e: ctx.e
        });
      }

      (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, newValue, ctx);
      context.emit("blur", newValue, ctx);
    };

    var handleFocus = function handleFocus(value2, ctx) {
      var _props$onFocus;

      userInput.value = tValue.value || tValue.value === 0 ? String(tValue.value) : "";
      (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, value2, ctx);
      context.emit("focus", value2, ctx);
    };

    var handleKeydown = function handleKeydown(value2, ctx) {
      var _props$onKeydown;

      var e = ctx.e;
      var keyEvent = {
        ArrowUp: handleAdd,
        ArrowDown: handleReduce
      };
      var code = e.code || e.key;

      if (keyEvent[code] !== void 0) {
        keyEvent[code](e);
      }

      (_props$onKeydown = props.onKeydown) === null || _props$onKeydown === void 0 ? void 0 : _props$onKeydown.call(props, value2, ctx);
      context.emit("keydown", value2, ctx);
    };

    var handleKeyup = function handleKeyup(value2, ctx) {
      var _props$onKeyup;

      (_props$onKeyup = props.onKeyup) === null || _props$onKeyup === void 0 ? void 0 : _props$onKeyup.call(props, value2, ctx);
      context.emit("keyup", value2, ctx);
    };

    var handleKeypress = function handleKeypress(value2, ctx) {
      var _props$onKeypress;

      (_props$onKeypress = props.onKeypress) === null || _props$onKeypress === void 0 ? void 0 : _props$onKeypress.call(props, value2, ctx);
      context.emit("keypress", value2, ctx);
    };

    var handleEnter = function handleEnter(value2, ctx) {
      var _props$onEnter;

      userInput.value = getUserInput(value2);
      var newValue = formatToNumber(value2, {
        decimalPlaces: props.decimalPlaces,
        largeNumber: props.largeNumber
      });

      if (newValue !== value2 && String(newValue) !== value2) {
        setTValue(newValue, {
          type: "enter",
          e: ctx.e
        });
      }

      (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, newValue, ctx);
      context.emit("enter", newValue, ctx);
    };

    var focus = function focus() {
      inputRef.value.focus();
    };

    var blur = function blur() {
      inputRef.value.blur();
    };

    var listeners = {
      blur: handleBlur,
      focus: handleFocus,
      keydown: handleKeydown,
      keyup: handleKeyup,
      keypress: handleKeypress,
      enter: handleEnter,
      click: focus
    };
    return {
      classPrefix: classPrefix,
      wrapClasses: wrapClasses,
      reduceClasses: reduceClasses,
      addClasses: addClasses,
      displayValue: displayValue,
      tDisabled: tDisabled,
      isError: isError,
      listeners: listeners,
      userInput: userInput,
      tValue: tValue,
      inputRef: inputRef,
      formDisabled: formDisabled,
      focus: focus,
      blur: blur,
      handleReduce: handleReduce,
      handleAdd: handleAdd,
      onInnerInputChange: onInnerInputChange
    };
  }

  function ownKeys$1W(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1V(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1W(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1W(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _InputNumber = VueCompositionAPI.defineComponent({
    name: "TInputNumber",
    props: props$M,
    setup: function setup(props2, context) {
      var p = useInputNumber(props2, context);

      var _useGlobalIcon = useGlobalIcon({
        AddIcon: Add,
        RemoveIcon: Remove$1,
        ChevronDownIcon: ChevronDown,
        ChevronUpIcon: ChevronUp
      }),
          AddIcon = _useGlobalIcon.AddIcon,
          RemoveIcon = _useGlobalIcon.RemoveIcon,
          ChevronDownIcon = _useGlobalIcon.ChevronDownIcon,
          ChevronUpIcon = _useGlobalIcon.ChevronUpIcon;

      return _objectSpread$1V(_objectSpread$1V({}, p), {}, {
        AddIcon: AddIcon,
        RemoveIcon: RemoveIcon,
        ChevronDownIcon: ChevronDownIcon,
        ChevronUpIcon: ChevronUpIcon
      });
    },
    render: function render() {
      var h = arguments[0];
      var AddIcon = this.AddIcon,
          RemoveIcon = this.RemoveIcon,
          ChevronDownIcon = this.ChevronDownIcon,
          ChevronUpIcon = this.ChevronUpIcon;
      var reduceIcon = this.theme === "column" ? h(ChevronDownIcon, {
        "attrs": {
          "size": this.size
        }
      }) : h(RemoveIcon, {
        "attrs": {
          "size": this.size
        }
      });
      var addIcon = this.theme === "column" ? h(ChevronUpIcon, {
        "attrs": {
          "size": this.size
        }
      }) : h(AddIcon, {
        "attrs": {
          "size": this.size
        }
      });
      var status = this.isError ? "error" : this.status;
      return h("div", {
        "class": this.wrapClasses
      }, [this.theme !== "normal" && h(Button, {
        "class": this.reduceClasses,
        "attrs": {
          "disabled": this.tDisabled,
          "variant": "outline",
          "shape": "square",
          "icon": function icon() {
            return reduceIcon;
          }
        },
        "on": {
          "click": this.handleReduce
        }
      }), h(Input, helper([{
        "ref": "inputRef",
        "attrs": {
          "disabled": this.tDisabled,
          "readonly": this.readonly,
          "autocomplete": "off",
          "placeholder": this.placeholder,
          "unselectable": this.readonly ? "on" : "off",
          "autoWidth": this.autoWidth,
          "align": this.align || (this.theme === "row" ? "center" : void 0),
          "status": status,
          "label": this.label,
          "suffix": this.suffix
        }
      }, {
        "on": this.listeners
      }, {
        "scopedSlots": this.$scopedSlots
      }, {
        "props": this.inputProps
      }, {
        "attrs": {
          "value": this.userInput
        },
        "on": {
          "change": this.onInnerInputChange
        }
      }])), this.theme !== "normal" && h(Button, {
        "class": this.addClasses,
        "attrs": {
          "disabled": this.tDisabled,
          "variant": "outline",
          "shape": "square",
          "icon": function icon() {
            return addIcon;
          }
        },
        "on": {
          "click": this.handleAdd
        }
      }), this.tips && h("div", {
        "class": "".concat(this.classPrefix, "-input__tips ").concat(this.classPrefix, "-input__tips--").concat(status)
      }, [this.tips])]);
    }
  });

  var InputNumber = withInstall(_InputNumber);

  /** Used to match property names within property paths. */

  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;
  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */

  function isKey(value, object) {
    if (isArray_1(value)) {
      return false;
    }

    var type = _typeof$1(value);

    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol_1(value)) {
      return true;
    }

    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  var _isKey = isKey;

  /** Error message constants. */

  var FUNC_ERROR_TEXT$1 = 'Expected a function';
  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */

  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT$1);
    }

    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }

      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };

    memoized.cache = new (memoize.Cache || _MapCache)();
    return memoized;
  } // Expose `MapCache`.


  memoize.Cache = _MapCache;
  var memoize_1 = memoize;

  /** Used as the maximum memoize cache size. */

  var MAX_MEMOIZE_SIZE = 500;
  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */

  function memoizeCapped(func) {
    var result = memoize_1(func, function (key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }

      return key;
    });
    var cache = result.cache;
    return result;
  }

  var _memoizeCapped = memoizeCapped;

  /** Used to match property names within property paths. */

  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  /** Used to match backslashes in property paths. */

  var reEscapeChar = /\\(\\)?/g;
  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */

  var stringToPath = _memoizeCapped(function (string) {
    var result = [];

    if (string.charCodeAt(0) === 46
    /* . */
    ) {
      result.push('');
    }

    string.replace(rePropName, function (match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });
  var _stringToPath = stringToPath;

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */

  function castPath(value, object) {
    if (isArray_1(value)) {
      return value;
    }

    return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
  }

  var _castPath = castPath;

  /** Used as references for various `Number` constants. */

  var INFINITY$1 = 1 / 0;
  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */

  function toKey(value) {
    if (typeof value == 'string' || isSymbol_1(value)) {
      return value;
    }

    var result = value + '';
    return result == '0' && 1 / value == -INFINITY$1 ? '-0' : result;
  }

  var _toKey = toKey;

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */

  function baseGet(object, path) {
    path = _castPath(path, object);
    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[_toKey(path[index++])];
    }

    return index && index == length ? object : undefined;
  }

  var _baseGet = baseGet;

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */

  function get(object, path, defaultValue) {
    var result = object == null ? undefined : _baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  var get_1 = get;

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }

    return array;
  }

  var _arrayEach = arrayEach;

  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeKeys = _overArg(Object.keys, Object);
  var _nativeKeys = nativeKeys;

  /** Used for built-in method references. */

  var objectProto$7 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$7 = objectProto$7.hasOwnProperty;
  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */

  function baseKeys(object) {
    if (!_isPrototype(object)) {
      return _nativeKeys(object);
    }

    var result = [];

    for (var key in Object(object)) {
      if (hasOwnProperty$7.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }

    return result;
  }

  var _baseKeys = baseKeys;

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */

  function keys(object) {
    return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
  }

  var keys_1 = keys;

  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */

  function baseAssign(object, source) {
    return object && _copyObject(source, keys_1(source), object);
  }

  var _baseAssign = baseAssign;

  /**
   * The base implementation of `_.assignIn` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */

  function baseAssignIn(object, source) {
    return object && _copyObject(source, keysIn_1(source), object);
  }

  var _baseAssignIn = baseAssignIn;

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];

      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }

    return result;
  }

  var _arrayFilter = arrayFilter;

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  var stubArray_1 = stubArray;

  /** Used for built-in method references. */

  var objectProto$6 = Object.prototype;
  /** Built-in value references. */

  var propertyIsEnumerable = objectProto$6.propertyIsEnumerable;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;
  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */

  var getSymbols = !nativeGetSymbols$1 ? stubArray_1 : function (object) {
    if (object == null) {
      return [];
    }

    object = Object(object);
    return _arrayFilter(nativeGetSymbols$1(object), function (symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };
  var _getSymbols = getSymbols;

  /**
   * Copies own symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */

  function copySymbols(source, object) {
    return _copyObject(source, _getSymbols(source), object);
  }

  var _copySymbols = copySymbols;

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }

    return array;
  }

  var _arrayPush = arrayPush;

  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeGetSymbols = Object.getOwnPropertySymbols;
  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */

  var getSymbolsIn = !nativeGetSymbols ? stubArray_1 : function (object) {
    var result = [];

    while (object) {
      _arrayPush(result, _getSymbols(object));
      object = _getPrototype(object);
    }

    return result;
  };
  var _getSymbolsIn = getSymbolsIn;

  /**
   * Copies own and inherited symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */

  function copySymbolsIn(source, object) {
    return _copyObject(source, _getSymbolsIn(source), object);
  }

  var _copySymbolsIn = copySymbolsIn;

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */

  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));
  }

  var _baseGetAllKeys = baseGetAllKeys;

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */

  function getAllKeys(object) {
    return _baseGetAllKeys(object, keys_1, _getSymbols);
  }

  var _getAllKeys = getAllKeys;

  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */

  function getAllKeysIn(object) {
    return _baseGetAllKeys(object, keysIn_1, _getSymbolsIn);
  }

  var _getAllKeysIn = getAllKeysIn;

  /* Built-in method references that are verified to be native. */

  var DataView = _getNative(_root, 'DataView');
  var _DataView = DataView;

  /* Built-in method references that are verified to be native. */

  var Promise$1 = _getNative(_root, 'Promise');
  var _Promise = Promise$1;

  /* Built-in method references that are verified to be native. */

  var Set$1 = _getNative(_root, 'Set');
  var _Set = Set$1;

  /* Built-in method references that are verified to be native. */

  var WeakMap$1 = _getNative(_root, 'WeakMap');
  var _WeakMap = WeakMap$1;

  /** `Object#toString` result references. */

  var mapTag$5 = '[object Map]',
      objectTag$2 = '[object Object]',
      promiseTag = '[object Promise]',
      setTag$5 = '[object Set]',
      weakMapTag$1 = '[object WeakMap]';
  var dataViewTag$3 = '[object DataView]';
  /** Used to detect maps, sets, and weakmaps. */

  var dataViewCtorString = _toSource(_DataView),
      mapCtorString = _toSource(_Map),
      promiseCtorString = _toSource(_Promise),
      setCtorString = _toSource(_Set),
      weakMapCtorString = _toSource(_WeakMap);
  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */

  var getTag = _baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

  if (_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$3 || _Map && getTag(new _Map()) != mapTag$5 || _Promise && getTag(_Promise.resolve()) != promiseTag || _Set && getTag(new _Set()) != setTag$5 || _WeakMap && getTag(new _WeakMap()) != weakMapTag$1) {
    getTag = function getTag(value) {
      var result = _baseGetTag(value),
          Ctor = result == objectTag$2 ? value.constructor : undefined,
          ctorString = Ctor ? _toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag$3;

          case mapCtorString:
            return mapTag$5;

          case promiseCtorString:
            return promiseTag;

          case setCtorString:
            return setTag$5;

          case weakMapCtorString:
            return weakMapTag$1;
        }
      }

      return result;
    };
  }

  var _getTag = getTag;

  /** Used for built-in method references. */
  var objectProto$5 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$6 = objectProto$5.hasOwnProperty;
  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */

  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length); // Add properties assigned by `RegExp#exec`.

    if (length && typeof array[0] == 'string' && hasOwnProperty$6.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }

    return result;
  }

  var _initCloneArray = initCloneArray;

  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */

  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  var _cloneDataView = cloneDataView;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;
  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */

  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  var _cloneRegExp = cloneRegExp;

  /** Used to convert symbols to primitives and strings. */

  var symbolProto$1 = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;
  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */

  function cloneSymbol(symbol) {
    return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
  }

  var _cloneSymbol = cloneSymbol;

  /** `Object#toString` result references. */

  var boolTag$3 = '[object Boolean]',
      dateTag$2 = '[object Date]',
      mapTag$4 = '[object Map]',
      numberTag$2 = '[object Number]',
      regexpTag$2 = '[object RegExp]',
      setTag$4 = '[object Set]',
      stringTag$2 = '[object String]',
      symbolTag$2 = '[object Symbol]';
  var arrayBufferTag$2 = '[object ArrayBuffer]',
      dataViewTag$2 = '[object DataView]',
      float32Tag$1 = '[object Float32Array]',
      float64Tag$1 = '[object Float64Array]',
      int8Tag$1 = '[object Int8Array]',
      int16Tag$1 = '[object Int16Array]',
      int32Tag$1 = '[object Int32Array]',
      uint8Tag$1 = '[object Uint8Array]',
      uint8ClampedTag$1 = '[object Uint8ClampedArray]',
      uint16Tag$1 = '[object Uint16Array]',
      uint32Tag$1 = '[object Uint32Array]';
  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */

  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;

    switch (tag) {
      case arrayBufferTag$2:
        return _cloneArrayBuffer(object);

      case boolTag$3:
      case dateTag$2:
        return new Ctor(+object);

      case dataViewTag$2:
        return _cloneDataView(object, isDeep);

      case float32Tag$1:
      case float64Tag$1:
      case int8Tag$1:
      case int16Tag$1:
      case int32Tag$1:
      case uint8Tag$1:
      case uint8ClampedTag$1:
      case uint16Tag$1:
      case uint32Tag$1:
        return _cloneTypedArray(object, isDeep);

      case mapTag$4:
        return new Ctor();

      case numberTag$2:
      case stringTag$2:
        return new Ctor(object);

      case regexpTag$2:
        return _cloneRegExp(object);

      case setTag$4:
        return new Ctor();

      case symbolTag$2:
        return _cloneSymbol(object);
    }
  }

  var _initCloneByTag = initCloneByTag;

  /** `Object#toString` result references. */

  var mapTag$3 = '[object Map]';
  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */

  function baseIsMap(value) {
    return isObjectLike_1(value) && _getTag(value) == mapTag$3;
  }

  var _baseIsMap = baseIsMap;

  /* Node.js helper references. */

  var nodeIsMap = _nodeUtil && _nodeUtil.isMap;
  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */

  var isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;
  var isMap_1 = isMap;

  /** `Object#toString` result references. */

  var setTag$3 = '[object Set]';
  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */

  function baseIsSet(value) {
    return isObjectLike_1(value) && _getTag(value) == setTag$3;
  }

  var _baseIsSet = baseIsSet;

  /* Node.js helper references. */

  var nodeIsSet = _nodeUtil && _nodeUtil.isSet;
  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */

  var isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;
  var isSet_1 = isSet;

  /** Used to compose bitmasks for cloning. */

  var CLONE_DEEP_FLAG$2 = 1,
      CLONE_FLAT_FLAG$1 = 2,
      CLONE_SYMBOLS_FLAG$2 = 4;
  /** `Object#toString` result references. */

  var argsTag$1 = '[object Arguments]',
      arrayTag$1 = '[object Array]',
      boolTag$2 = '[object Boolean]',
      dateTag$1 = '[object Date]',
      errorTag$2 = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag$2 = '[object Map]',
      numberTag$1 = '[object Number]',
      objectTag$1 = '[object Object]',
      regexpTag$1 = '[object RegExp]',
      setTag$2 = '[object Set]',
      stringTag$1 = '[object String]',
      symbolTag$1 = '[object Symbol]',
      weakMapTag = '[object WeakMap]';
  var arrayBufferTag$1 = '[object ArrayBuffer]',
      dataViewTag$1 = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';
  /** Used to identify `toStringTag` values supported by `_.clone`. */

  var cloneableTags = {};
  cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] = cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] = cloneableTags[boolTag$2] = cloneableTags[dateTag$1] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$2] = cloneableTags[numberTag$1] = cloneableTags[objectTag$1] = cloneableTags[regexpTag$1] = cloneableTags[setTag$2] = cloneableTags[stringTag$1] = cloneableTags[symbolTag$1] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag$2] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */

  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG$2,
        isFlat = bitmask & CLONE_FLAT_FLAG$1,
        isFull = bitmask & CLONE_SYMBOLS_FLAG$2;

    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }

    if (result !== undefined) {
      return result;
    }

    if (!isObject_1(value)) {
      return value;
    }

    var isArr = isArray_1(value);

    if (isArr) {
      result = _initCloneArray(value);

      if (!isDeep) {
        return _copyArray(value, result);
      }
    } else {
      var tag = _getTag(value),
          isFunc = tag == funcTag || tag == genTag;

      if (isBuffer_1(value)) {
        return _cloneBuffer(value, isDeep);
      }

      if (tag == objectTag$1 || tag == argsTag$1 || isFunc && !object) {
        result = isFlat || isFunc ? {} : _initCloneObject(value);

        if (!isDeep) {
          return isFlat ? _copySymbolsIn(value, _baseAssignIn(result, value)) : _copySymbols(value, _baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }

        result = _initCloneByTag(value, tag, isDeep);
      }
    } // Check for circular references and return its corresponding clone.


    stack || (stack = new _Stack());
    var stacked = stack.get(value);

    if (stacked) {
      return stacked;
    }

    stack.set(value, result);

    if (isSet_1(value)) {
      value.forEach(function (subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
    } else if (isMap_1(value)) {
      value.forEach(function (subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
    }

    var keysFunc = isFull ? isFlat ? _getAllKeysIn : _getAllKeys : isFlat ? keysIn_1 : keys_1;
    var props = isArr ? undefined : keysFunc(value);
    _arrayEach(props || value, function (subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      } // Recursively populate clone (susceptible to call stack limits).


      _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  var _baseClone = baseClone;

  /** Used to compose bitmasks for cloning. */

  var CLONE_DEEP_FLAG$1 = 1,
      CLONE_SYMBOLS_FLAG$1 = 4;
  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */

  function cloneDeep(value) {
    return _baseClone(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
  }

  var cloneDeep_1 = cloneDeep;

  function useDefaultValue(value, defaultValue, onChange, propsName, eventName) {
    var _getCurrentInstance = VueCompositionAPI.getCurrentInstance(),
        emit = _getCurrentInstance.emit;

    var internalValue = VueCompositionAPI.ref();
    internalValue.value = defaultValue;

    if (typeof value.value !== "undefined") {
      return [value, function (newValue) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        emit.apply(void 0, ["update:".concat(propsName), newValue].concat(args));
        onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
        emit.apply(void 0, [eventName, newValue].concat(args));
      }];
    }

    return [internalValue, function (newValue) {
      internalValue.value = newValue;

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      emit.apply(void 0, [eventName, newValue].concat(args));
      onChange === null || onChange === void 0 ? void 0 : onChange.apply(void 0, [newValue].concat(args));
    }];
  }

  /** `Object#toString` result references. */

  var mapTag$1 = '[object Map]',
      setTag$1 = '[object Set]';
  /** Used for built-in method references. */

  var objectProto$4 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$5 = objectProto$4.hasOwnProperty;
  /**
   * Checks if `value` is an empty object, collection, map, or set.
   *
   * Objects are considered empty if they have no own enumerable string keyed
   * properties.
   *
   * Array-like values such as `arguments` objects, arrays, buffers, strings, or
   * jQuery-like collections are considered empty if they have a `length` of `0`.
   * Similarly, maps and sets are considered empty if they have a `size` of `0`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty(null);
   * // => true
   *
   * _.isEmpty(true);
   * // => true
   *
   * _.isEmpty(1);
   * // => true
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({ 'a': 1 });
   * // => false
   */

  function isEmpty(value) {
    if (value == null) {
      return true;
    }

    if (isArrayLike_1(value) && (isArray_1(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer_1(value) || isTypedArray_1(value) || isArguments_1(value))) {
      return !value.length;
    }

    var tag = _getTag(value);

    if (tag == mapTag$1 || tag == setTag$1) {
      return !value.size;
    }

    if (_isPrototype(value)) {
      return !_baseKeys(value).length;
    }

    for (var key in value) {
      if (hasOwnProperty$5.call(value, key)) {
        return false;
      }
    }

    return true;
  }

  var isEmpty_1 = isEmpty;

  var isVNode = function isVNode(obj) {
    var vNode = VueCompositionAPI.h("span", "");
    var VNode2 = vNode.constructor;
    return obj instanceof VNode2;
  };
  function getDefaultNode(options) {
    var defaultNode;

    if (isObject_1(options) && "defaultNode" in options) {
      defaultNode = options.defaultNode;
    } else if (isVNode(options) || isString_1(options)) {
      defaultNode = options;
    }

    return defaultNode;
  }
  function getParams(options) {
    return isObject_1(options) && "params" in options ? options.params : null;
  }

  function handleSlots(slots, name, params) {
    var _slots$camelCase, _slots$kebabCase;

    var node = (_slots$camelCase = slots[camelCase_1(name)]) === null || _slots$camelCase === void 0 ? void 0 : _slots$camelCase.call(slots, params);
    if (node) return node;
    node = (_slots$kebabCase = slots[kebabCase_1(name)]) === null || _slots$kebabCase === void 0 ? void 0 : _slots$kebabCase.call(slots, params);
    if (node) return node;
    return null;
  }

  var useTNodeJSX = function useTNodeJSX() {
    var instance = VueCompositionAPI.getCurrentInstance();
    return function (name, options) {
      var params = getParams(options);
      var defaultNode = getDefaultNode(options);
      var slots = instance.setupContext.slots;
      var propsNode;

      if (Object.keys(instance.props).includes(name)) {
        propsNode = instance.props[name];
      }

      if (propsNode === false) return;

      if (propsNode === true) {
        return handleSlots(slots, name, params) || defaultNode;
      }

      if (isFunction_1(propsNode)) return propsNode(VueCompositionAPI.h, params);
      var isPropsEmpty = [void 0, params, ""].includes(propsNode);

      if (isPropsEmpty && (slots[camelCase_1(name)] || slots[kebabCase_1(name)])) {
        return handleSlots(slots, name, params);
      }

      return propsNode;
    };
  };
  var useTNodeDefault = function useTNodeDefault() {
    var renderTNodeJSX = useTNodeJSX();
    return function (name, options) {
      var defaultNode = getDefaultNode(options);
      return renderTNodeJSX(name, options) || defaultNode;
    };
  };

  var props$L = {
    autoWidth: Boolean,
    bordered: {
      type: Boolean,
      "default": true
    },
    borderless: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    creatable: Boolean,
    disabled: Boolean,
    empty: {
      type: [String, Function],
      "default": ""
    },
    filter: {
      type: Function
    },
    filterable: Boolean,
    inputProps: {
      type: Object
    },
    inputValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultInputValue: {
      type: [String, Number]
    },
    keys: {
      type: Object
    },
    loading: Boolean,
    loadingText: {
      type: [String, Function],
      "default": ""
    },
    max: {
      type: Number,
      "default": 0
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    panelBottomContent: {
      type: [String, Function]
    },
    panelTopContent: {
      type: [String, Function]
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    popupVisible: {
      type: Boolean,
      "default": void 0
    },
    prefixIcon: {
      type: Function
    },
    readonly: Boolean,
    reserveKeyword: Boolean,
    scroll: {
      type: Object
    },
    selectInputProps: {
      type: Object
    },
    showArrow: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    tagInputProps: {
      type: Object
    },
    tagProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number, Object, Array],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Object, Array]
    },
    valueDisplay: {
      type: [String, Function]
    },
    valueType: {
      type: String,
      "default": "value",
      validator: function validator(val) {
        if (!val) return true;
        return ["value", "object"].includes(val);
      }
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onCreate: Function,
    onEnter: Function,
    onFocus: Function,
    onInputChange: Function,
    onPopupVisibleChange: Function,
    onRemove: Function,
    onSearch: Function,
    onVisibleChange: Function
  };

  var props$K = {
    closable: Boolean,
    content: {
      type: [String, Number, Function]
    },
    "default": {
      type: [String, Number, Function]
    },
    disabled: Boolean,
    icon: {
      type: Function,
      "default": void 0
    },
    maxWidth: {
      type: [String, Number]
    },
    shape: {
      type: String,
      "default": "square",
      validator: function validator(val) {
        return ["square", "round", "mark"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        return ["default", "primary", "warning", "danger", "success"].includes(val);
      }
    },
    variant: {
      type: String,
      "default": "dark",
      validator: function validator(val) {
        return ["dark", "light", "outline", "light-outline"].includes(val);
      }
    },
    onClick: Function,
    onClose: Function
  };

  function ownKeys$1V(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1U(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1V(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1V(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Tag = mixins(getConfigReceiverMixins("tag"), getGlobalIconMixins()).extend({
    name: "TTag",
    props: _objectSpread$1U({}, props$K),
    computed: {
      tagClass: function tagClass() {
        var _ref;

        return ["".concat(this.componentName), "".concat(this.componentName, "--").concat(this.theme), this.commonSizeClassName[this.size], "".concat(this.componentName, "--").concat(this.variant), this.shape !== "square" && "".concat(this.componentName, "--").concat(this.shape), (_ref = {}, _defineProperty$3(_ref, "".concat(this.componentName, "--ellipsis"), this.maxWidth), _defineProperty$3(_ref, "".concat(this.componentName, "--close"), this.closable), _defineProperty$3(_ref, "".concat(this.classPrefix, "-is-disabled"), this.disabled), _defineProperty$3(_ref, "".concat(this.componentName, "--disabled"), this.disabled), _ref)];
      },
      tagStyle: function tagStyle() {
        if (this.maxWidth) return {
          maxWidth: "".concat(this.maxWidth, "px")
        };
        return {};
      }
    },
    methods: {
      handleClose: function handleClose(e) {
        if (this.disabled) return;
        emitEvent(this, "close", {
          e: e
        });
      },
      handleClick: function handleClick(e) {
        if (this.disabled) return;
        emitEvent(this, "click", {
          e: e
        });
      },
      getCloseIcon: function getCloseIcon() {
        var _this = this;

        var h = this.$createElement;
        if (!this.closable) return null;
        var iconClassName = "".concat(this.classPrefix, "-tag__icon-close");

        if (this.global.closeIcon) {
          return this.global.closeIcon(function (component, b) {
            var tProps = _typeof$1(b) === "object" && "attrs" in b ? b.attrs : {};
            return _this.$createElement(component, {
              props: _objectSpread$1U({}, tProps),
              "class": iconClassName,
              nativeOn: {
                click: _this.handleClose
              }
            });
          });
        }

        var _this$useGlobalIcon = this.useGlobalIcon({
          CloseIcon: Close
        }),
            CloseIcon = _this$useGlobalIcon.CloseIcon;

        return h(CloseIcon, {
          "nativeOn": {
            "click": this.handleClose
          },
          "class": iconClassName
        });
      }
    },
    render: function render() {
      var h = arguments[0];
      var closeIcon = this.getCloseIcon();
      var tagContent = renderContent(this, "default", "content");
      var tagContentWithMaxWidth = h("span", {
        "style": this.tagStyle,
        "class": "".concat(this.componentName, "--text")
      }, [tagContent]);
      var icon = renderTNodeJSX(this, "icon");
      return h("span", {
        "class": this.tagClass,
        "on": {
          "click": this.handleClick
        }
      }, [icon, this.maxWidth ? tagContentWithMaxWidth : tagContent, closeIcon]);
    }
  });

  var props$J = {
    checked: Boolean,
    defaultChecked: Boolean,
    content: {
      type: [String, Number, Function]
    },
    "default": {
      type: [String, Number, Function]
    },
    disabled: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    onChange: Function,
    onClick: Function
  };

  function ownKeys$1U(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1T(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1U(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1U(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$r = getClassPrefixMixins("tag");
  var _CheckTag = mixins(classPrefixMixins$r).extend({
    name: "TCheckTag",
    props: _objectSpread$1T({}, props$J),
    computed: {
      tagClass: function tagClass() {
        var _ref;

        return ["".concat(this.componentName), "".concat(this.componentName, "--check"), "".concat(this.componentName, "--default"), this.commonSizeClassName[this.size], (_ref = {}, _defineProperty$3(_ref, "".concat(this.componentName, "--checked"), !this.disabled && this.checked), _defineProperty$3(_ref, "".concat(this.classPrefix, "-is-disabled"), this.disabled), _defineProperty$3(_ref, "".concat(this.componentName, "--disabled"), this.disabled), _ref)];
      }
    },
    methods: {
      handleClick: function handleClick(e) {
        if (!this.disabled) {
          emitEvent(this, "click", {
            e: e
          });
          emitEvent(this, "change", !this.checked);
        }
      }
    },
    render: function render() {
      var h = arguments[0];
      var tagContent = renderContent(this, "default", "content");
      return h("span", {
        "class": this.tagClass,
        "on": {
          "click": this.handleClick
        }
      }, [tagContent]);
    }
  });

  var Tag = withInstall(_Tag);
  var CheckTag = withInstall(mapProps(["checked"], {
    model: {
      prop: "checked",
      event: "change"
    }
  })(_CheckTag));

  var props$I = {
    allowInput: Boolean,
    autoWidth: Boolean,
    borderless: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    disabled: Boolean,
    inputProps: {
      type: Object
    },
    inputValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultInputValue: {
      type: [String, Number]
    },
    keys: {
      type: Object
    },
    label: {
      type: [String, Function]
    },
    loading: Boolean,
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    panel: {
      type: [String, Function]
    },
    placeholder: {
      type: String,
      "default": ""
    },
    popupProps: {
      type: Object
    },
    popupVisible: {
      type: Boolean,
      "default": void 0
    },
    readonly: Boolean,
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tag: {
      type: [String, Function]
    },
    tagInputProps: {
      type: Object
    },
    tagProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number, Boolean, Object, Array, Date]
    },
    valueDisplay: {
      type: [String, Function]
    },
    onBlur: Function,
    onClear: Function,
    onEnter: Function,
    onFocus: Function,
    onInputChange: Function,
    onMouseenter: Function,
    onMouseleave: Function,
    onPaste: Function,
    onPopupVisibleChange: Function,
    onTagChange: Function
  };

  /**
   * The base implementation of `_.set`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @param {Function} [customizer] The function to customize path creation.
   * @returns {Object} Returns `object`.
   */

  function baseSet(object, path, value, customizer) {
    if (!isObject_1(object)) {
      return object;
    }

    path = _castPath(path, object);
    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        nested = object;

    while (nested != null && ++index < length) {
      var key = _toKey(path[index]),
          newValue = value;

      if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
        return object;
      }

      if (index != lastIndex) {
        var objValue = nested[key];
        newValue = customizer ? customizer(objValue, key, nested) : undefined;

        if (newValue === undefined) {
          newValue = isObject_1(objValue) ? objValue : _isIndex(path[index + 1]) ? [] : {};
        }
      }

      _assignValue(nested, key, newValue);
      nested = nested[key];
    }

    return object;
  }

  var _baseSet = baseSet;

  /**
   * The base implementation of  `_.pickBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @param {Function} predicate The function invoked per property.
   * @returns {Object} Returns the new object.
   */

  function basePickBy(object, paths, predicate) {
    var index = -1,
        length = paths.length,
        result = {};

    while (++index < length) {
      var path = paths[index],
          value = _baseGet(object, path);

      if (predicate(value, path)) {
        _baseSet(result, _castPath(path, object), value);
      }
    }

    return result;
  }

  var _basePickBy = basePickBy;

  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  var _baseHasIn = baseHasIn;

  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */

  function hasPath(object, path, hasFunc) {
    path = _castPath(path, object);
    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = _toKey(path[index]);

      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }

      object = object[key];
    }

    if (result || ++index != length) {
      return result;
    }

    length = object == null ? 0 : object.length;
    return !!length && isLength_1(length) && _isIndex(key, length) && (isArray_1(object) || isArguments_1(object));
  }

  var _hasPath = hasPath;

  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */

  function hasIn(object, path) {
    return object != null && _hasPath(object, path, _baseHasIn);
  }

  var hasIn_1 = hasIn;

  /**
   * The base implementation of `_.pick` without support for individual
   * property identifiers.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @returns {Object} Returns the new object.
   */

  function basePick(object, paths) {
    return _basePickBy(object, paths, function (value, path) {
      return hasIn_1(object, path);
    });
  }

  var _basePick = basePick;

  /** Built-in value references. */

  var spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined;
  /**
   * Checks if `value` is a flattenable `arguments` object or array.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
   */

  function isFlattenable(value) {
    return isArray_1(value) || isArguments_1(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }

  var _isFlattenable = isFlattenable;

  /**
   * The base implementation of `_.flatten` with support for restricting flattening.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {number} depth The maximum recursion depth.
   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */

  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;
    predicate || (predicate = _isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];

      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          _arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }

    return result;
  }

  var _baseFlatten = baseFlatten;

  /**
   * Flattens `array` a single level deep.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, [3, [4]], 5]]);
   * // => [1, 2, [3, [4]], 5]
   */

  function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? _baseFlatten(array, 1) : [];
  }

  var flatten_1 = flatten;

  /**
   * A specialized version of `baseRest` which flattens the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @returns {Function} Returns the new function.
   */

  function flatRest(func) {
    return _setToString(_overRest(func, undefined, flatten_1), func + '');
  }

  var _flatRest = flatRest;

  /**
   * Creates an object composed of the picked `object` properties.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to pick.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pick(object, ['a', 'c']);
   * // => { 'a': 1, 'c': 3 }
   */

  var pick = _flatRest(function (object, paths) {
    return object == null ? {} : _basePick(object, paths);
  });
  var pick_1 = pick;

  function ownKeys$1T(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1S(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1T(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1T(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var COMMON_PROPERTIES = ["status", "clearable", "disabled", "label", "placeholder", "readonly", "suffix", "suffixIcon"];
  var DEFAULT_KEYS$1 = {
    label: "label",
    value: "value"
  };

  function getInputValue(value, keys) {
    var iKeys = keys || DEFAULT_KEYS$1;
    return isObject_1(value) ? value[iKeys.label] : value;
  }

  function useSingle$1(props, context) {
    var _props$defaultInputVa;

    var instance = VueCompositionAPI.getCurrentInstance();

    var _toRefs = VueCompositionAPI.toRefs(props),
        value = _toRefs.value,
        keys = _toRefs.keys,
        propsInputValue = _toRefs.inputValue;

    var classPrefix = usePrefixClass();

    var _useDefaultValue = useDefaultValue(propsInputValue, (_props$defaultInputVa = props.defaultInputValue) !== null && _props$defaultInputVa !== void 0 ? _props$defaultInputVa : "", props.onInputChange, "inputValue", "input-change"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        inputValue = _useDefaultValue2[0],
        setInputValue = _useDefaultValue2[1];

    var inputRef = VueCompositionAPI.ref();
    var renderTNode = useTNodeJSX();
    var commonInputProps = VueCompositionAPI.computed(function () {
      return pick_1(props, COMMON_PROPERTIES);
    });

    var onInnerClear = function onInnerClear(context2) {
      var _context2$e, _props$onClear;

      context2 === null || context2 === void 0 ? void 0 : (_context2$e = context2.e) === null || _context2$e === void 0 ? void 0 : _context2$e.stopPropagation();
      (_props$onClear = props.onClear) === null || _props$onClear === void 0 ? void 0 : _props$onClear.call(props, context2);
      instance.emit("clear", context2);
      setInputValue("", {
        trigger: "clear"
      });
    };

    var onInnerInputChange = function onInnerInputChange(value2, context2) {
      if (props.allowInput) {
        setInputValue(value2, _objectSpread$1S(_objectSpread$1S({}, context2), {}, {
          trigger: "input"
        }));
      }
    };

    var renderSelectSingle = function renderSelectSingle(h, popupVisible) {
      var _inputClass;

      var singleValueDisplay = renderTNode("valueDisplay");
      var displayedValue = popupVisible && props.allowInput ? inputValue.value : getInputValue(value.value, keys.value);
      var prefixContent = [singleValueDisplay, renderTNode("label")];

      var inputProps = _objectSpread$1S(_objectSpread$1S({}, commonInputProps.value), {}, {
        value: singleValueDisplay ? void 0 : displayedValue,
        label: prefixContent.length ? function () {
          return prefixContent;
        } : void 0,
        autoWidth: props.autoWidth,
        readonly: !props.allowInput,
        placeholder: singleValueDisplay ? "" : props.placeholder,
        suffixIcon: !props.disabled && props.loading ? function () {
          return h(Loading, {
            "attrs": {
              "loading": true,
              "size": "small"
            }
          });
        } : props.suffixIcon,
        showClearIconOnEmpty: Boolean(!props.disabled && props.clearable && (inputValue.value || displayedValue)),
        inputClass: (_inputClass = {}, _defineProperty$3(_inputClass, "".concat(classPrefix.value, "-input--focused"), popupVisible), _defineProperty$3(_inputClass, "".concat(classPrefix.value, "-is-focused"), popupVisible), _inputClass)
      }, props.inputProps);

      return h(Input, helper([{
        "ref": "inputRef"
      }, {
        "props": inputProps
      }, {
        "scopedSlots": context.slots,
        "on": {
          "change": onInnerInputChange,
          "clear": onInnerClear,
          "blur": function blur(val, context2) {
            var _props$onBlur;

            (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, value.value, _objectSpread$1S(_objectSpread$1S({}, context2), {}, {
              inputValue: val
            }));
            instance.emit("blur", value.value, _objectSpread$1S(_objectSpread$1S({}, context2), {}, {
              inputValue: val
            }));
          },
          "enter": function enter(val, context2) {
            var _props$onEnter;

            (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, value.value, _objectSpread$1S(_objectSpread$1S({}, context2), {}, {
              inputValue: val
            }));
            instance.emit("enter", value.value, _objectSpread$1S(_objectSpread$1S({}, context2), {}, {
              inputValue: val
            }));
          },
          "focus": function focus(val, context2) {
            var _props$onFocus;

            (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, value.value, _objectSpread$1S(_objectSpread$1S({}, context2), {}, {
              inputValue: val
            }));
            instance.emit("focus", value.value, _objectSpread$1S(_objectSpread$1S({}, context2), {}, {
              tagInputValue: val
            }));
            !popupVisible && setInputValue(getInputValue(value.value, keys.value), _objectSpread$1S(_objectSpread$1S({}, context2), {}, {
              trigger: "input"
            }));
          },
          "paste": function paste(context2) {
            var _props$onPaste;

            (_props$onPaste = props.onPaste) === null || _props$onPaste === void 0 ? void 0 : _props$onPaste.call(props, context2);
            instance.emit("paste", context2);
          },
          "mouseenter": function mouseenter(context2) {
            var _props$onMouseenter;

            (_props$onMouseenter = props.onMouseenter) === null || _props$onMouseenter === void 0 ? void 0 : _props$onMouseenter.call(props, context2);
            instance.emit("mouseenter", context2);
          },
          "mouseleave": function mouseleave(context2) {
            var _props$onMouseleave;

            (_props$onMouseleave = props.onMouseleave) === null || _props$onMouseleave === void 0 ? void 0 : _props$onMouseleave.call(props, context2);
            instance.emit("mouseenter", context2);
          }
        }
      }]));
    };

    return {
      inputRef: inputRef,
      commonInputProps: commonInputProps,
      onInnerClear: onInnerClear,
      renderSelectSingle: renderSelectSingle
    };
  }

  var props$H = {
    autoWidth: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    disabled: Boolean,
    dragSort: Boolean,
    excessTagsDisplayType: {
      type: String,
      "default": "break-line",
      validator: function validator(val) {
        if (!val) return true;
        return ["scroll", "break-line"].includes(val);
      }
    },
    inputProps: {
      type: Object
    },
    inputValue: {
      type: [String, Number],
      "default": void 0
    },
    defaultInputValue: {
      type: [String, Number],
      "default": ""
    },
    label: {
      type: [String, Function]
    },
    max: {
      type: Number
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    readonly: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["success", "warning", "error", "default"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tag: {
      type: [String, Function]
    },
    tagProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array
    },
    valueDisplay: {
      type: [String, Function]
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onDragSort: Function,
    onEnter: Function,
    onFocus: Function,
    onInputChange: Function,
    onMouseenter: Function,
    onMouseleave: Function,
    onPaste: Function,
    onRemove: Function
  };

  function useTagScroll(props) {
    var tagInputRef = VueCompositionAPI.ref();

    var _toRefs = VueCompositionAPI.toRefs(props),
        excessTagsDisplayType = _toRefs.excessTagsDisplayType,
        readonly = _toRefs.readonly,
        disabled = _toRefs.disabled;

    var scrollDistance = VueCompositionAPI.ref(0);
    var scrollElement = VueCompositionAPI.ref();
    var mouseEnterTimer = VueCompositionAPI.ref();

    var updateScrollElement = function updateScrollElement(element) {
      var inputElement = element.children[0];
      scrollElement.value = inputElement;
    };

    var updateScrollDistance = function updateScrollDistance() {
      scrollDistance.value = scrollElement.value.scrollWidth - scrollElement.value.clientWidth;
    };

    var scrollTo = function scrollTo(distance) {
      var _scrollElement$value;

      (_scrollElement$value = scrollElement.value) === null || _scrollElement$value === void 0 ? void 0 : _scrollElement$value.scroll({
        left: distance,
        behavior: "smooth"
      });
    };

    var scrollToRight = function scrollToRight() {
      updateScrollDistance();
      scrollTo(scrollDistance.value);
    };

    var scrollToLeft = function scrollToLeft() {
      scrollTo(0);
    };

    var onWheel = function onWheel(_ref) {
      var e = _ref.e;
      if (readonly.value || disabled.value) return;
      if (!scrollElement.value) return;

      if (e.deltaX > 0) {
        var distance = Math.min(scrollElement.value.scrollLeft + 120, scrollDistance.value);
        scrollTo(distance);
      } else {
        var _distance = Math.max(scrollElement.value.scrollLeft - 120, 0);

        scrollTo(_distance);
      }
    };

    var scrollToRightOnEnter = function scrollToRightOnEnter() {
      if (excessTagsDisplayType.value !== "scroll") return;
      mouseEnterTimer.value = setTimeout(function () {
        scrollToRight();
        clearTimeout(mouseEnterTimer.value);
      }, 100);
    };

    var scrollToLeftOnLeave = function scrollToLeftOnLeave() {
      if (excessTagsDisplayType.value !== "scroll") return;
      scrollTo(0);
      clearTimeout(mouseEnterTimer.value);
    };

    var init = function init() {
      var _tagInputRef$value;

      var element = (_tagInputRef$value = tagInputRef.value) === null || _tagInputRef$value === void 0 ? void 0 : _tagInputRef$value.$el;
      if (!element) return;
      updateScrollElement(element);
    };

    var clear = function clear() {
      clearTimeout(mouseEnterTimer.value);
    };

    VueCompositionAPI.onMounted(init);
    VueCompositionAPI.onUnmounted(clear);
    return {
      tagInputRef: tagInputRef,
      scrollElement: scrollElement,
      scrollDistance: scrollDistance,
      scrollTo: scrollTo,
      scrollToRight: scrollToRight,
      scrollToLeft: scrollToLeft,
      updateScrollElement: updateScrollElement,
      updateScrollDistance: updateScrollDistance,
      onWheel: onWheel,
      scrollToRightOnEnter: scrollToRightOnEnter,
      scrollToLeftOnLeave: scrollToLeftOnLeave
    };
  }

  function ownKeys$1S(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1R(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1S(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1S(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useTagList(props, getDragProps) {
    var renderTNode = useTNodeJSX();

    var _useConfig = useConfig("classPrefix"),
        classPrefix = _useConfig.classPrefix;

    var _toRefs = VueCompositionAPI.toRefs(props),
        value = _toRefs.value,
        onRemove = _toRefs.onRemove,
        max = _toRefs.max,
        minCollapsedNum = _toRefs.minCollapsedNum,
        size = _toRefs.size,
        disabled = _toRefs.disabled,
        readonly = _toRefs.readonly,
        tagProps = _toRefs.tagProps;

    var _useVModel = useVModel(value, props.defaultValue || [], props.onChange, "change"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        tagValue = _useVModel2[0],
        setTagValue = _useVModel2[1];

    var oldInputValue = VueCompositionAPI.ref();

    var onClose = function onClose(p) {
      var _onRemove$value;

      var arr = _toConsumableArray(tagValue.value);

      arr.splice(p.index, 1);
      setTagValue(arr, _objectSpread$1R({
        trigger: "tag-remove"
      }, p));
      (_onRemove$value = onRemove.value) === null || _onRemove$value === void 0 ? void 0 : _onRemove$value.call(onRemove, _objectSpread$1R(_objectSpread$1R({}, p), {}, {
        trigger: "tag-remove",
        value: arr
      }));
    };

    var clearAll = function clearAll(context) {
      setTagValue([], {
        trigger: "clear",
        e: context.e
      });
    };

    var onInnerEnter = function onInnerEnter(value2, context) {
      var _tagValue$value, _props$onEnter;

      var valueStr = String(value2).trim();
      if (!valueStr) return;
      var isLimitExceeded = max && ((_tagValue$value = tagValue.value) === null || _tagValue$value === void 0 ? void 0 : _tagValue$value.length) >= max.value;
      var newValue = tagValue.value;

      if (!isLimitExceeded) {
        newValue = tagValue.value instanceof Array ? tagValue.value.concat(String(valueStr)) : [valueStr];
        setTagValue(newValue, {
          trigger: "enter",
          index: newValue.length - 1,
          item: valueStr,
          e: context.e
        });
      }

      props === null || props === void 0 ? void 0 : (_props$onEnter = props.onEnter) === null || _props$onEnter === void 0 ? void 0 : _props$onEnter.call(props, newValue, _objectSpread$1R(_objectSpread$1R({}, context), {}, {
        inputValue: value2
      }));
    };

    var onInputBackspaceKeyUp = function onInputBackspaceKeyUp(value2, context) {
      var e = context.e;
      if (!tagValue.value || !tagValue.value.length) return;

      if (!oldInputValue.value && ["Backspace", "NumpadDelete"].includes(e.code)) {
        var _onRemove$value2;

        var index = tagValue.value.length - 1;
        var item = tagValue.value[index];
        var trigger = "backspace";
        setTagValue(tagValue.value.slice(0, -1), {
          e: e,
          index: index,
          item: item,
          trigger: trigger
        });
        (_onRemove$value2 = onRemove.value) === null || _onRemove$value2 === void 0 ? void 0 : _onRemove$value2.call(onRemove, {
          e: e,
          index: index,
          item: item,
          trigger: trigger,
          value: tagValue.value
        });
      }

      oldInputValue.value = value2;
    };

    var renderLabel = function renderLabel(_ref, h) {
      var displayNode = _ref.displayNode,
          label = _ref.label;
      var newList = minCollapsedNum.value ? tagValue.value.slice(0, minCollapsedNum.value) : tagValue.value;
      var list = displayNode ? [displayNode] : newList === null || newList === void 0 ? void 0 : newList.map(function (item, index) {
        var tagContent = renderTNode("tag", {
          params: {
            value: item
          }
        });
        var TagNode = h(Tag, helper([{
          "key": index,
          "attrs": {
            "size": size.value,
            "disabled": disabled.value,
            "closable": !readonly.value && !disabled.value
          },
          "on": {
            "close": function close(context) {
              return onClose({
                e: context.e,
                item: item,
                index: index
              });
            }
          }
        }, {
          "props": tagProps.value
        }]), [tagContent !== null && tagContent !== void 0 ? tagContent : item]);
        var itemDrag = getDragProps === null || getDragProps === void 0 ? void 0 : getDragProps(index, item);
        return itemDrag && itemDrag.draggable ? h("span", {
          "class": "".concat(classPrefix.value, "-tag-input__drag_wrapper"),
          "attrs": {
            "draggable": true
          },
          "on": {
            "dragstart": itemDrag.onDragstart,
            "dragover": itemDrag.onDragover,
            "dragend": itemDrag.onDragend,
            "drop": itemDrag.onDrop
          }
        }, [TagNode]) : TagNode;
      });

      if (![null, void 0, ""].includes(label)) {
        list.unshift(h("div", {
          "class": "".concat(classPrefix.value, "-tag-input__prefix"),
          "key": "label"
        }, [label]));
      }

      if (newList.length !== tagValue.value.length) {
        var len = tagValue.value.length - newList.length;
        var more = renderTNode("collapsedItems", {
          params: {
            value: tagValue.value,
            count: tagValue.value.length,
            collapsedTags: tagValue.value.slice(minCollapsedNum.value, tagValue.value.length),
            collapsedSelectedItems: tagValue.value.slice(minCollapsedNum.value, tagValue.value.length)
          }
        });
        list.push(more !== null && more !== void 0 ? more : h(Tag, {
          "key": "more"
        }, ["+", len]));
      }

      return list;
    };

    return {
      tagValue: tagValue,
      clearAll: clearAll,
      onClose: onClose,
      onInnerEnter: onInnerEnter,
      onInputBackspaceKeyUp: onInputBackspaceKeyUp,
      renderLabel: renderLabel
    };
  }

  function useHover(props) {
    var disabled = props.disabled,
        readonly = props.readonly,
        onMouseenter = props.onMouseenter,
        onMouseleave = props.onMouseleave;
    var isHover = VueCompositionAPI.ref(false);

    var addHover = function addHover(context) {
      if (readonly || disabled) return;
      isHover.value = true;
      onMouseenter === null || onMouseenter === void 0 ? void 0 : onMouseenter(context);
    };

    var cancelHover = function cancelHover(context) {
      if (readonly || disabled) return;
      isHover.value = false;
      onMouseleave === null || onMouseleave === void 0 ? void 0 : onMouseleave(context);
    };

    return {
      isHover: isHover,
      addHover: addHover,
      cancelHover: cancelHover
    };
  }

  function useDragSorter(props, context) {
    var sortOnDraggable = props.sortOnDraggable,
        onDragSort = props.onDragSort,
        onDragOverCheck = props.onDragOverCheck;
    var draggingIndex = VueCompositionAPI.ref(-1);
    var dragStartData = VueCompositionAPI.ref(null);
    var isDropped = VueCompositionAPI.ref(null);
    var startInfo = VueCompositionAPI.reactive({
      nodeX: 0,
      nodeWidth: 0,
      mouseX: 0
    });

    var onDragOver = function onDragOver(e, index, record) {
      e.preventDefault();
      if (draggingIndex.value === index || draggingIndex.value === -1) return;
      var target = e.target;

      if (onDragOverCheck !== null && onDragOverCheck !== void 0 && onDragOverCheck.targetClassNameRegExp && !(onDragOverCheck !== null && onDragOverCheck !== void 0 && onDragOverCheck.targetClassNameRegExp.test(target.className))) {
        return;
      }

      if (onDragOverCheck !== null && onDragOverCheck !== void 0 && onDragOverCheck.x && target) {
        if (!startInfo.nodeWidth) return;

        var _target$getBoundingCl = target.getBoundingClientRect(),
            x = _target$getBoundingCl.x,
            width = _target$getBoundingCl.width;

        var targetNodeMiddleX = x + width / 2;
        var draggingNodeLeft = e.clientX - (startInfo.mouseX - startInfo.nodeX);
        var draggingNodeRight = draggingNodeLeft + startInfo.nodeWidth;
        var overlap = false;

        if (draggingNodeLeft > x && draggingNodeLeft < x + width) {
          overlap = draggingNodeLeft < targetNodeMiddleX;
        } else {
          overlap = draggingNodeRight > targetNodeMiddleX;
        }

        if (!overlap) return;
      }

      var data = {
        currentIndex: draggingIndex.value,
        current: dragStartData,
        target: record,
        targetIndex: index
      };
      onDragSort === null || onDragSort === void 0 ? void 0 : onDragSort(data);
      context.emit("drag-sort", data);
      draggingIndex.value = index;
    };

    if (!sortOnDraggable) {
      return {};
    }

    function onDragStart(e, index, record) {
      draggingIndex.value = index;
      dragStartData.value = record;
      var target = e.target;

      if (onDragOverCheck && target) {
        var _target$getBoundingCl2 = target.getBoundingClientRect(),
            x = _target$getBoundingCl2.x,
            width = _target$getBoundingCl2.width;

        startInfo.nodeX = x;
        startInfo.nodeWidth = width;
        startInfo.mouseX = e.clientX;
      }
    }

    function _onDrop() {
      isDropped.value = true;
    }

    function onDragEnd() {
      if (!isDropped.value) ;

      isDropped.value = false;
      draggingIndex.value = -1;
      dragStartData.value = null;
    }

    function getDragProps(index, record) {
      if (sortOnDraggable) {
        return {
          draggable: true,
          onDragstart: function onDragstart(e) {
            onDragStart(e, index, record);
          },
          onDragover: function onDragover(e) {
            onDragOver(e, index, record);
          },
          onDrop: function onDrop() {
            _onDrop();
          },
          onDragend: function onDragend() {
            onDragEnd();
          }
        };
      }
    }

    return {
      onDragStart: onDragStart,
      onDragOver: onDragOver,
      onDrop: _onDrop,
      onDragEnd: onDragEnd,
      getDragProps: getDragProps,
      dragging: draggingIndex.value !== -1
    };
  }

  function ownKeys$1R(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1Q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1R(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1R(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _TagInput = VueCompositionAPI.defineComponent({
    name: "TTagInput",
    props: _objectSpread$1Q({}, props$H),
    setup: function setup(props2, context) {
      var _toRefs = VueCompositionAPI.toRefs(props2),
          inputValue = _toRefs.inputValue;

      var inputProps = props2.inputProps;
      var isCompositionRef = VueCompositionAPI.ref(false);
      var COMPONENT_NAME = usePrefixClass$1("tag-input");

      var _useDefaultValue = useDefaultValue(inputValue, props2.defaultInputValue, props2.onInputChange, "inputValue", "input-change"),
          _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
          tInputValue = _useDefaultValue2[0],
          setTInputValue = _useDefaultValue2[1];

      var _toRefs2 = VueCompositionAPI.toRefs(props2),
          excessTagsDisplayType = _toRefs2.excessTagsDisplayType,
          readonly = _toRefs2.readonly,
          disabled = _toRefs2.disabled,
          clearable = _toRefs2.clearable,
          placeholder = _toRefs2.placeholder;

      var _useHover = useHover({
        readonly: props2.readonly,
        disabled: props2.disabled,
        onMouseenter: props2.onMouseenter,
        onMouseleave: props2.onMouseleave
      }),
          isHover = _useHover.isHover,
          addHover = _useHover.addHover,
          cancelHover = _useHover.cancelHover;

      var _useDragSorter = useDragSorter(_objectSpread$1Q(_objectSpread$1Q({}, props2), {}, {
        sortOnDraggable: props2.dragSort,
        onDragOverCheck: {
          x: true,
          targetClassNameRegExp: new RegExp("^".concat(prefix, "-tag"))
        }
      }), context),
          getDragProps = _useDragSorter.getDragProps;

      var _useTagScroll = useTagScroll(props2),
          scrollToRight = _useTagScroll.scrollToRight,
          onWheel = _useTagScroll.onWheel,
          scrollToRightOnEnter = _useTagScroll.scrollToRightOnEnter,
          scrollToLeftOnLeave = _useTagScroll.scrollToLeftOnLeave,
          tagInputRef = _useTagScroll.tagInputRef;

      var _useTagList = useTagList(props2, getDragProps),
          tagValue = _useTagList.tagValue,
          onInnerEnter = _useTagList.onInnerEnter,
          onInputBackspaceKeyUp = _useTagList.onInputBackspaceKeyUp,
          clearAll = _useTagList.clearAll,
          renderLabel = _useTagList.renderLabel,
          onClose = _useTagList.onClose;

      var _useGlobalIcon = useGlobalIcon({
        CloseCircleFilledIcon: CloseCircleFilled
      }),
          CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon;

      var classes = VueCompositionAPI.computed(function () {
        return [COMPONENT_NAME.value, _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--break-line"), excessTagsDisplayType.value === "break-line")];
      });
      var tagInputPlaceholder = VueCompositionAPI.computed(function () {
        var _tagValue$value;

        return !((_tagValue$value = tagValue.value) !== null && _tagValue$value !== void 0 && _tagValue$value.length) ? placeholder.value : "";
      });
      var showClearIcon = VueCompositionAPI.computed(function () {
        var _tagValue$value2;

        return Boolean(!readonly.value && !disabled.value && clearable.value && isHover.value && (((_tagValue$value2 = tagValue.value) === null || _tagValue$value2 === void 0 ? void 0 : _tagValue$value2.length) || tInputValue.value));
      });

      var onInputCompositionstart = function onInputCompositionstart(value, context2) {
        var _inputProps$onComposi;

        isCompositionRef.value = true;
        inputProps === null || inputProps === void 0 ? void 0 : (_inputProps$onComposi = inputProps.onCompositionstart) === null || _inputProps$onComposi === void 0 ? void 0 : _inputProps$onComposi.call(inputProps, value, context2);
      };

      var onInputCompositionend = function onInputCompositionend(value, context2) {
        var _inputProps$onComposi2;

        isCompositionRef.value = false;
        inputProps === null || inputProps === void 0 ? void 0 : (_inputProps$onComposi2 = inputProps.onCompositionend) === null || _inputProps$onComposi2 === void 0 ? void 0 : _inputProps$onComposi2.call(inputProps, value, context2);
      };

      var onInputEnter = function onInputEnter(value, context2) {
        var _context2$e;

        (_context2$e = context2.e) === null || _context2$e === void 0 ? void 0 : _context2$e.preventDefault();
        setTInputValue("", {
          e: context2.e,
          trigger: "enter"
        });
        !isCompositionRef.value && onInnerEnter(value, context2);
        VueCompositionAPI.nextTick(function () {
          scrollToRight();
          isCompositionRef.value = false;
        });
      };

      var onClick = function onClick() {
        tagInputRef.value.focus();
      };

      var onClearClick = function onClearClick(ctx) {
        var _props2$onClear;

        clearAll(ctx);
        setTInputValue("", {
          e: ctx.e,
          trigger: "clear"
        });
        (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 ? void 0 : _props2$onClear.call(props2, ctx);
        context.emit("clear", ctx);
      };

      return {
        tagValue: tagValue,
        tInputValue: tInputValue,
        isHover: isHover,
        tagInputPlaceholder: tagInputPlaceholder,
        showClearIcon: showClearIcon,
        tagInputRef: tagInputRef,
        setTInputValue: setTInputValue,
        addHover: addHover,
        cancelHover: cancelHover,
        onInputEnter: onInputEnter,
        onInnerEnter: onInnerEnter,
        onInputBackspaceKeyUp: onInputBackspaceKeyUp,
        renderLabel: renderLabel,
        onWheel: onWheel,
        scrollToRightOnEnter: scrollToRightOnEnter,
        scrollToLeftOnLeave: scrollToLeftOnLeave,
        onClick: onClick,
        onClearClick: onClearClick,
        onClose: onClose,
        classes: classes,
        onInputCompositionstart: onInputCompositionstart,
        onInputCompositionend: onInputCompositionend,
        componentName: COMPONENT_NAME,
        CloseCircleFilledIcon: CloseCircleFilledIcon
      };
    },
    render: function render(h) {
      var _this = this,
          _this$inputProps,
          _this$inputProps2,
          _this$inputProps3,
          _this$tagValue;

      var CloseCircleFilledIcon = this.CloseCircleFilledIcon;
      var suffixIconNode = this.showClearIcon ? h(CloseCircleFilledIcon, {
        "class": "".concat(this.componentName, "__suffix-clear"),
        "on": {
          "click": this.onClearClick
        }
      }) : renderTNodeJSX(this, "suffixIcon");
      var displayNode = renderTNodeJSX(this, "valueDisplay", {
        params: {
          value: this.tagValue,
          onClose: function onClose(index, item) {
            return _this.onClose({
              index: index,
              item: item
            });
          }
        }
      });

      var _label = renderTNodeJSX(this, "label", {
        silent: true
      });

      return h(Input, helper([{
        "ref": "tagInputRef"
      }, this.inputProps, {
        "attrs": {
          "readonly": (_this$inputProps = this.inputProps) === null || _this$inputProps === void 0 ? void 0 : _this$inputProps.readonly,
          "inputClass": (_this$inputProps2 = this.inputProps) === null || _this$inputProps2 === void 0 ? void 0 : _this$inputProps2.inputClass,
          "value": this.tInputValue,
          "showInput": !((_this$inputProps3 = this.inputProps) !== null && _this$inputProps3 !== void 0 && _this$inputProps3.readonly) || !this.tagValue || !((_this$tagValue = this.tagValue) !== null && _this$tagValue !== void 0 && _this$tagValue.length),
          "keepWrapperWidth": true,
          "autoWidth": this.autoWidth,
          "size": this.size,
          "disabled": this.disabled,
          "label": function label() {
            return _this.renderLabel({
              displayNode: displayNode,
              label: _label
            }, h);
          },
          "tips": this.tips,
          "status": this.status,
          "placeholder": this.tagInputPlaceholder,
          "suffix": this.suffix,
          "suffixIcon": function suffixIcon() {
            return suffixIconNode;
          }
        },
        "on": {
          "change": function change(val, context) {
            _this.setTInputValue(val, _objectSpread$1Q(_objectSpread$1Q({}, context), {}, {
              trigger: "input"
            }));
          },
          "mousewheel": this.onWheel,
          "compositionstart": this.onInputCompositionstart,
          "compositionend": this.onInputCompositionend
        },
        "class": this.classes,
        "props": _objectSpread$1Q({}, _objectSpread$1Q(_objectSpread$1Q({}, this.inputProps), {}, {
          onEnter: this.onInputEnter,
          onKeyup: this.onInputBackspaceKeyUp,
          onMouseenter: function onMouseenter(context) {
            _this.addHover(context);

            _this.scrollToRightOnEnter();
          },
          onMouseleave: function onMouseleave(context) {
            _this.cancelHover(context);

            _this.scrollToLeftOnLeave();
          },
          onFocus: function onFocus(inputValue, context) {
            var _this$onFocus;

            (_this$onFocus = _this.onFocus) === null || _this$onFocus === void 0 ? void 0 : _this$onFocus.call(_this, _this.tagValue, {
              e: context.e,
              inputValue: inputValue
            });

            _this.$emit("focus", _this.tagValue, {
              e: context.e,
              inputValue: inputValue
            });
          },
          onBlur: function onBlur(inputValue, context) {
            var _this$onBlur;

            (_this$onBlur = _this.onBlur) === null || _this$onBlur === void 0 ? void 0 : _this$onBlur.call(_this, _this.tagValue, {
              e: context.e,
              inputValue: inputValue
            });

            _this.$emit("blur", _this.tagValue, {
              e: context.e,
              inputValue: inputValue
            });
          },
          onPaste: function onPaste(context) {
            var _this$onPaste;

            (_this$onPaste = _this.onPaste) === null || _this$onPaste === void 0 ? void 0 : _this$onPaste.call(_this, context);

            _this.$emit("paste", context);
          }
        }))
      }]));
    }
  });

  var TagInput = withInstall(_TagInput, VueCompositionAPI__default["default"]);

  function ownKeys$1Q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1P(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1Q(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1Q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DEFAULT_KEYS = {
    label: "label",
    key: "key",
    children: "children"
  };
  function useMultiple(props, context) {
    var _toRefs = VueCompositionAPI.toRefs(props),
        inputValue = _toRefs.inputValue;

    var classPrefix = usePrefixClass();
    var instance = VueCompositionAPI.getCurrentInstance();
    var tagInputRef = VueCompositionAPI.ref();

    var _useDefaultValue = useDefaultValue(inputValue, props.defaultInputValue, props.onInputChange, "inputValue", "input-change"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        tInputValue = _useDefaultValue2[0],
        setTInputValue = _useDefaultValue2[1];

    var iKeys = VueCompositionAPI.computed(function () {
      return _objectSpread$1P(_objectSpread$1P({}, DEFAULT_KEYS), props.keys);
    });
    var tags = VueCompositionAPI.computed(function () {
      if (!(props.value instanceof Array)) {
        return isObject_1(props.value) ? [props.value[iKeys.value.label]] : [props.value];
      }

      return props.value.map(function (item) {
        return isObject_1(item) ? item[iKeys.value.label] : item;
      });
    });
    var tPlaceholder = VueCompositionAPI.computed(function () {
      return !tags.value || !tags.value.length ? props.placeholder : "";
    });

    var onTagInputChange = function onTagInputChange(val, context2) {
      var _props$onTagChange;

      if (context2.trigger === "tag-remove") {
        var _context2$e;

        (_context2$e = context2.e) === null || _context2$e === void 0 ? void 0 : _context2$e.stopPropagation();
      }

      (_props$onTagChange = props.onTagChange) === null || _props$onTagChange === void 0 ? void 0 : _props$onTagChange.call(props, val, context2);
      instance.emit("tag-change", val, context2);
    };

    var renderSelectMultiple = function renderSelectMultiple(p, h) {
      var tagInputProps = _objectSpread$1P(_objectSpread$1P(_objectSpread$1P({}, props.tagInputProps), p.commonInputProps), {}, {
        tagProps: props.tagProps,
        label: props.label,
        autoWidth: props.autoWidth,
        readonly: props.readonly,
        placeholder: tPlaceholder.value,
        minCollapsedNum: props.minCollapsedNum,
        collapsedItems: props.collapsedItems,
        tag: props.tag,
        valueDisplay: props.valueDisplay,
        value: tags.value,
        inputValue: tInputValue.value || "",
        inputProps: _objectSpread$1P({
          readonly: !props.allowInput || props.readonly,
          inputClass: _defineProperty$3({}, "".concat(classPrefix.value, "-input--focused"), p.popupVisible)
        }, props.inputProps),
        suffixIcon: !props.disabled && props.loading ? function () {
          return h(Loading, {
            "attrs": {
              "loading": true,
              "size": "small"
            }
          });
        } : props.suffixIcon
      });

      return h(TagInput, helper([{
        "ref": "tagInputRef",
        "scopedSlots": context.slots
      }, {
        "props": tagInputProps
      }, {}, {
        "on": {
          "input-change": function inputChange(val, context2) {
            if ((context2 === null || context2 === void 0 ? void 0 : context2.trigger) === "enter") return;
            setTInputValue(val, {
              trigger: context2.trigger,
              e: context2.e
            });
          }
        }
      }, {
        "on": {
          "change": onTagInputChange,
          "clear": function clear(context2) {
            context2.e.stopPropagation();
            p.onInnerClear;
          },
          "blur": function blur(val, context2) {
            var _props$onBlur;

            (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, props.value, _objectSpread$1P(_objectSpread$1P({}, context2), {}, {
              tagInputValue: val
            }));
            instance.emit("blur", props.value, _objectSpread$1P(_objectSpread$1P({}, context2), {}, {
              tagInputValue: val
            }));
          },
          "focus": function focus(val, context2) {
            var _props$onFocus;

            (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, props.value, _objectSpread$1P(_objectSpread$1P({}, context2), {}, {
              tagInputValue: val
            }));
            instance.emit("focus", props.value, _objectSpread$1P(_objectSpread$1P({}, context2), {}, {
              tagInputValue: val
            }));
          }
        }
      }]));
    };

    return {
      tags: tags,
      tPlaceholder: tPlaceholder,
      tagInputRef: tagInputRef,
      renderSelectMultiple: renderSelectMultiple
    };
  }

  function ownKeys$1P(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1O(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1P(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1P(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var MAX_POPUP_WIDTH = 1e3;
  function useOverlayInnerStyle(props) {
    var instance = VueCompositionAPI.getCurrentInstance();

    var _toRefs = VueCompositionAPI.toRefs(props),
        popupProps = _toRefs.popupProps,
        autoWidth = _toRefs.autoWidth;

    var innerPopupVisible = VueCompositionAPI.ref(false);

    var matchWidthFunc = function matchWidthFunc(triggerElement, popupElement) {
      var SCROLLBAR_WIDTH = popupElement.scrollHeight > popupElement.offsetHeight ? 8 : 0;
      var width = popupElement.offsetWidth + SCROLLBAR_WIDTH >= triggerElement.offsetWidth ? popupElement.offsetWidth : triggerElement.offsetWidth;
      var otherOverlayInnerStyle = {};

      if (popupProps.value && _typeof$1(popupProps.value.overlayInnerStyle) === "object" && !popupProps.value.overlayInnerStyle.width) {
        otherOverlayInnerStyle = popupProps.value.overlayInnerStyle;
      }

      return _objectSpread$1O({
        width: "".concat(Math.min(width, MAX_POPUP_WIDTH), "px")
      }, otherOverlayInnerStyle);
    };

    var onInnerPopupVisibleChange = function onInnerPopupVisibleChange(visible, context) {
      var _props$onPopupVisible;

      if (props.disabled || props.readonly) return;
      innerPopupVisible.value = visible;
      (_props$onPopupVisible = props.onPopupVisibleChange) === null || _props$onPopupVisible === void 0 ? void 0 : _props$onPopupVisible.call(props, visible, context);
      instance.emit("popup-visible-change", visible, context);
    };

    var tOverlayInnerStyle = VueCompositionAPI.computed(function () {
      var _popupProps$value;

      var result = {};
      var overlayInnerStyle = ((_popupProps$value = popupProps.value) === null || _popupProps$value === void 0 ? void 0 : _popupProps$value.overlayInnerStyle) || {};

      if (isFunction_1(overlayInnerStyle) || isObject_1(overlayInnerStyle) && overlayInnerStyle.width) {
        result = overlayInnerStyle;
      } else if (!autoWidth.value) {
        result = matchWidthFunc;
      }

      return result;
    });
    return {
      tOverlayInnerStyle: tOverlayInnerStyle,
      innerPopupVisible: innerPopupVisible,
      onInnerPopupVisibleChange: onInnerPopupVisibleChange
    };
  }

  function ownKeys$1O(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1N(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1O(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1O(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _SelectInput = VueCompositionAPI.defineComponent({
    name: "TSelectInput",
    props: _objectSpread$1N(_objectSpread$1N({}, props$I), {}, {
      updateScrollTop: {
        type: Function
      }
    }),
    setup: function setup(props2, context) {
      var selectInputRef = VueCompositionAPI.ref();
      var selectInputWrapRef = VueCompositionAPI.ref();

      var _useConfig = useConfig("classPrefix"),
          classPrefix = _useConfig.classPrefix;

      var _toRefs = VueCompositionAPI.toRefs(props2),
          multiple = _toRefs.multiple,
          value = _toRefs.value,
          popupVisible = _toRefs.popupVisible,
          borderless = _toRefs.borderless;

      var _useSingle = useSingle$1(props2, context),
          commonInputProps = _useSingle.commonInputProps,
          onInnerClear = _useSingle.onInnerClear,
          renderSelectSingle = _useSingle.renderSelectSingle;

      var _useMultiple = useMultiple(props2, context),
          renderSelectMultiple = _useMultiple.renderSelectMultiple;

      var _useOverlayInnerStyle = useOverlayInnerStyle(props2),
          tOverlayInnerStyle = _useOverlayInnerStyle.tOverlayInnerStyle,
          innerPopupVisible = _useOverlayInnerStyle.innerPopupVisible,
          onInnerPopupVisibleChange = _useOverlayInnerStyle.onInnerPopupVisibleChange;

      var popupClasses = VueCompositionAPI.computed(function () {
        var _popupVisible$value, _ref;

        return [(_ref = {}, _defineProperty$3(_ref, "".concat(classPrefix.value, "-select-input--borderless"), borderless.value), _defineProperty$3(_ref, "".concat(classPrefix.value, "-select-input--multiple"), multiple.value), _defineProperty$3(_ref, "".concat(classPrefix.value, "-select-input--popup-visible"), (_popupVisible$value = popupVisible.value) !== null && _popupVisible$value !== void 0 ? _popupVisible$value : innerPopupVisible.value), _defineProperty$3(_ref, "".concat(classPrefix.value, "-select-input--empty"), value.value instanceof Array ? !value.value.length : !value.value), _ref)];
      });
      return {
        selectInputWrapRef: selectInputWrapRef,
        innerPopupVisible: innerPopupVisible,
        commonInputProps: commonInputProps,
        tOverlayInnerStyle: tOverlayInnerStyle,
        selectInputRef: selectInputRef,
        popupClasses: popupClasses,
        onInnerClear: onInnerClear,
        renderSelectSingle: renderSelectSingle,
        renderSelectMultiple: renderSelectMultiple,
        onInnerPopupVisibleChange: onInnerPopupVisibleChange,
        classPrefix: classPrefix
      };
    },
    render: function render(h) {
      var _this$popupVisible, _this$popupProps, _this$popupVisible2;

      var visibleProps = {
        visible: (_this$popupVisible = this.popupVisible) !== null && _this$popupVisible !== void 0 ? _this$popupVisible : this.innerPopupVisible
      };
      var mainContent = h(Popup, helper([{
        "ref": "selectInputRef",
        "class": this.popupClasses,
        "attrs": {
          "trigger": ((_this$popupProps = this.popupProps) === null || _this$popupProps === void 0 ? void 0 : _this$popupProps.trigger) || "click",
          "placement": "bottom-left",
          "visible": (_this$popupVisible2 = this.popupVisible) !== null && _this$popupVisible2 !== void 0 ? _this$popupVisible2 : this.innerPopupVisible,
          "content": this.panel,
          "hideEmptyPopup": true,
          "disabled": this.disabled
        },
        "scopedSlots": _objectSpread$1N(_objectSpread$1N({}, this.$scopedSlots), {}, {
          content: this.$scopedSlots.panel
        })
      }, {
        "on": {
          "visible-change": this.onInnerPopupVisibleChange
        }
      }, {}, {
        "props": _objectSpread$1N(_objectSpread$1N({}, this.popupProps), {}, {
          overlayInnerStyle: this.tOverlayInnerStyle
        })
      }, {
        "attrs": {
          "updateScrollTop": this.updateScrollTop
        }
      }]), [this.multiple ? this.renderSelectMultiple({
        commonInputProps: this.commonInputProps,
        onInnerClear: this.onInnerClear,
        popupVisible: visibleProps.visible
      }, h) : this.renderSelectSingle(h, visibleProps.visible)]);
      if (!this.tips) return mainContent;
      return h("div", {
        "ref": "selectInputWrapRef",
        "class": "".concat(this.classPrefix, "-select-input__wrap")
      }, [mainContent, h("div", {
        "class": "".concat(this.classPrefix, "-input__tips ").concat(this.classPrefix, "-input__tips--").concat(this.status || "normal")
      }, [this.tips])]);
    }
  });

  var SelectInput = withInstall(_SelectInput, VueCompositionAPI__default["default"]);

  var props$G = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    label: {
      type: String,
      "default": ""
    },
    value: {
      type: [String, Number]
    }
  };

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';
  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */

  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);

    return this;
  }

  var _setCacheAdd = setCacheAdd;

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  var _setCacheHas = setCacheHas;

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */

  function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;
    this.__data__ = new _MapCache();

    while (++index < length) {
      this.add(values[index]);
    }
  } // Add methods to `SetCache`.


  SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
  SetCache.prototype.has = _setCacheHas;
  var _SetCache = SetCache;

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }

    return -1;
  }

  var _baseFindIndex = baseFindIndex;

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  var _baseIsNaN = baseIsNaN;

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }

    return -1;
  }

  var _strictIndexOf = strictIndexOf;

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function baseIndexOf(array, value, fromIndex) {
    return value === value ? _strictIndexOf(array, value, fromIndex) : _baseFindIndex(array, _baseIsNaN, fromIndex);
  }

  var _baseIndexOf = baseIndexOf;

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */

  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && _baseIndexOf(array, value, 0) > -1;
  }

  var _arrayIncludes = arrayIncludes;

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }

    return false;
  }

  var _arrayIncludesWith = arrayIncludesWith;

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  var _cacheHas = cacheHas;

  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeMin = Math.min;
  /**
   * The base implementation of methods like `_.intersection`, without support
   * for iteratee shorthands, that accepts an array of arrays to inspect.
   *
   * @private
   * @param {Array} arrays The arrays to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of shared values.
   */

  function baseIntersection(arrays, iteratee, comparator) {
    var includes = comparator ? _arrayIncludesWith : _arrayIncludes,
        length = arrays[0].length,
        othLength = arrays.length,
        othIndex = othLength,
        caches = Array(othLength),
        maxLength = Infinity,
        result = [];

    while (othIndex--) {
      var array = arrays[othIndex];

      if (othIndex && iteratee) {
        array = _arrayMap(array, _baseUnary(iteratee));
      }

      maxLength = nativeMin(array.length, maxLength);
      caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new _SetCache(othIndex && array) : undefined;
    }

    array = arrays[0];
    var index = -1,
        seen = caches[0];

    outer: while (++index < length && result.length < maxLength) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;
      value = comparator || value !== 0 ? value : 0;

      if (!(seen ? _cacheHas(seen, computed) : includes(result, computed, comparator))) {
        othIndex = othLength;

        while (--othIndex) {
          var cache = caches[othIndex];

          if (!(cache ? _cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
            continue outer;
          }
        }

        if (seen) {
          seen.push(computed);
        }

        result.push(value);
      }
    }

    return result;
  }

  var _baseIntersection = baseIntersection;

  /**
   * Casts `value` to an empty array if it's not an array like object.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Array|Object} Returns the cast array-like object.
   */

  function castArrayLikeObject(value) {
    return isArrayLikeObject_1(value) ? value : [];
  }

  var _castArrayLikeObject = castArrayLikeObject;

  /**
   * Creates an array of unique values that are included in all given arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. The order and references of result values are
   * determined by the first array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {...Array} [arrays] The arrays to inspect.
   * @returns {Array} Returns the new array of intersecting values.
   * @example
   *
   * _.intersection([2, 1], [2, 3]);
   * // => [2]
   */

  var intersection = _baseRest(function (arrays) {
    var mapped = _arrayMap(arrays, _castArrayLikeObject);
    return mapped.length && mapped[0] === arrays[0] ? _baseIntersection(mapped) : [];
  });
  var intersection_1 = intersection;

  var checkboxProps = {
    checkAll: Boolean,
    checked: Boolean,
    defaultChecked: Boolean,
    "default": {
      type: [String, Function]
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    indeterminate: Boolean,
    label: {
      type: [String, Function]
    },
    name: {
      type: String,
      "default": ""
    },
    readonly: Boolean,
    value: {
      type: [String, Number]
    },
    onChange: Function
  };

  function ownKeys$1N(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1M(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1N(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1N(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$q = getClassPrefixMixins("checkbox");
  var _Checkbox = mixins(classPrefixMixins$q, Vue__default["default"]).extend({
    name: "TCheckbox",
    inheritAttrs: false,
    props: _objectSpread$1M(_objectSpread$1M({}, checkboxProps), {}, {
      stopLabelTrigger: Boolean
    }),
    inject: {
      checkboxGroup: {
        "default": void 0
      }
    },
    data: function data() {
      return {
        formDisabled: void 0
      };
    },
    computed: {
      labelClasses: function labelClasses() {
        var _ref;

        return ["".concat(this.componentName), (_ref = {}, _defineProperty$3(_ref, this.commonStatusClassName.checked, this.checked$), _defineProperty$3(_ref, this.commonStatusClassName.disabled, this.disabled$), _defineProperty$3(_ref, this.commonStatusClassName.indeterminate, this.indeterminate$), _ref)];
      },
      disabled$: function disabled$() {
        var _this$checkboxGroup, _this$checkboxGroup2;

        if (this.formDisabled) return this.formDisabled;

        if (!this.checkAll && !this.checked$ && (_this$checkboxGroup = this.checkboxGroup) !== null && _this$checkboxGroup !== void 0 && _this$checkboxGroup.maxExceeded) {
          return true;
        }

        if (this.disabled !== void 0) return this.disabled;
        return !!((_this$checkboxGroup2 = this.checkboxGroup) !== null && _this$checkboxGroup2 !== void 0 && _this$checkboxGroup2.disabled);
      },
      name$: function name$() {
        var _this$checkboxGroup3;

        return this.name || ((_this$checkboxGroup3 = this.checkboxGroup) === null || _this$checkboxGroup3 === void 0 ? void 0 : _this$checkboxGroup3.name);
      },
      checked$: function checked$() {
        var _this$checkboxGroup4;

        if (this.checkAll) return (_this$checkboxGroup4 = this.checkboxGroup) === null || _this$checkboxGroup4 === void 0 ? void 0 : _this$checkboxGroup4.isCheckAll;
        return this.checkboxGroup ? !!this.checkboxGroup.checkedMap[this.value] : this.checked;
      },
      indeterminate$: function indeterminate$() {
        var _this$checkboxGroup5;

        if (this.checkAll) return (_this$checkboxGroup5 = this.checkboxGroup) === null || _this$checkboxGroup5 === void 0 ? void 0 : _this$checkboxGroup5.indeterminate;
        return this.indeterminate;
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("label", {
        "class": this.labelClasses,
        "attrs": {
          "title": this.$attrs.title
        }
      }, [h("input", helper([{
        "attrs": {
          "type": "checkbox"
        }
      }, {
        "on": _objectSpread$1M({}, omit$1(this.$listeners, ["checked", "change"]))
      }, {
        "class": "".concat(this.componentName, "__former"),
        "attrs": {
          "disabled": this.disabled$,
          "readonly": this.readonly,
          "indeterminate": this.indeterminate$,
          "name": this.name$
        },
        "domProps": {
          "value": this.value,
          "checked": this.checked$
        },
        "on": {
          "change": this.handleChange
        }
      }])), h("span", {
        "class": "".concat(this.componentName, "__input")
      }), h("span", {
        "class": "".concat(this.componentName, "__label"),
        "on": {
          "click": this.handleLabelClick
        }
      }, [renderContent(this, "default", "label")])]);
    },
    methods: {
      handleLabelClick: function handleLabelClick(e) {
        if (this.stopLabelTrigger) e.preventDefault();
      },
      handleChange: function handleChange(e) {
        var _this$checkboxGroup6;

        var value = !this.checked$;
        emitEvent(this, "change", value, {
          e: e
        });
        e.stopPropagation();
        this === null || this === void 0 ? void 0 : (_this$checkboxGroup6 = this.checkboxGroup) === null || _this$checkboxGroup6 === void 0 ? void 0 : _this$checkboxGroup6.$emit("checked-change", {
          checked: value,
          checkAll: this.checkAll,
          e: e,
          option: this.$props
        });
      }
    }
  });

  var checkboxGroupProps = {
    disabled: Boolean,
    max: {
      type: Number,
      "default": void 0
    },
    name: {
      type: String,
      "default": ""
    },
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    value: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    onChange: Function
  };

  function ownKeys$1M(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1L(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1M(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1M(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$p = getClassPrefixMixins("checkbox");
  var _CheckboxGroup = mixins(classPrefixMixins$p).extend({
    name: "TCheckboxGroup",
    components: {
      Checkbox: _Checkbox
    },
    props: _objectSpread$1L({}, checkboxGroupProps),
    data: function data() {
      return {
        checkedMap: {},
        optionList: []
      };
    },
    provide: function provide() {
      return {
        checkboxGroup: this
      };
    },
    watch: {
      values: {
        immediate: true,
        handler: function handler() {
          if (this.value instanceof Array) {
            var map = {};
            this.value.forEach(function (item) {
              map[item] = true;
            });
            this.checkedMap = map;
          }
        }
      },
      options: {
        immediate: true,
        handler: function handler() {
          var _this = this;

          if (!this.options) return [];
          this.optionList = this.options.map(function (item) {
            var r = {};

            if (_typeof$1(item) !== "object") {
              r = {
                label: String(item),
                value: item
              };
            } else {
              r = _objectSpread$1L({}, item);
              r.disabled = r.disabled === void 0 ? _this.disabled : r.disabled;
            }

            return r;
          });
        }
      }
    },
    computed: {
      values: function values() {
        if (this.value instanceof Array) {
          return this.value.join();
        }

        return "";
      },
      intersectionLen: function intersectionLen() {
        var values = this.optionList.map(function (item) {
          return item.value;
        });

        if (this.value instanceof Array) {
          var n = intersection_1(this.value, values);
          return n.length;
        }

        return 0;
      },
      isCheckAll: function isCheckAll() {
        if (this.value instanceof Array && this.value.length !== this.optionList.length - 1) {
          return false;
        }

        return this.intersectionLen === this.optionList.length - 1;
      },
      indeterminate: function indeterminate() {
        return !this.isCheckAll && this.intersectionLen < this.optionList.length && this.intersectionLen !== 0;
      },
      maxExceeded: function maxExceeded() {
        return this.max !== void 0 && this.value.length === this.max;
      }
    },
    mounted: function mounted() {
      var _this$options;

      if (this.$scopedSlots["default"] && (_this$options = this.options) !== null && _this$options !== void 0 && _this$options.length) {
        console.warn("TDesign CheckboxGroup Warn: both `options` and slot exist, rendered by `options`");
      }
    },
    created: function created() {
      this.$on("checked-change", this.onCheckedChange);
    },
    render: function render() {
      var _this$options2,
          _this2 = this;

      var h = arguments[0];
      var children = null;

      if ((_this$options2 = this.options) !== null && _this$options2 !== void 0 && _this$options2.length) {
        var _this$optionList;

        children = (_this$optionList = this.optionList) === null || _this$optionList === void 0 ? void 0 : _this$optionList.map(function (option, index) {
          return h(_Checkbox, helper([{
            "key": index
          }, {
            "props": option
          }, {
            "attrs": {
              "checked": _this2.checkedMap[option.value]
            }
          }]), [_this2.renderLabel(option)]);
        });
      } else {
        var nodes = this.$scopedSlots["default"] && this.$scopedSlots["default"](null);
        this.optionList = this.getOptionListBySlots(nodes);
        children = nodes;
      }

      return h("div", {
        "class": "".concat(this.componentName, "-group"),
        "on": {
          "click": function click(e) {
            return _this2.$emit("click", e);
          }
        }
      }, [children]);
    },
    methods: {
      onCheckedChange: function onCheckedChange(p) {
        var checked = p.checked,
            checkAll = p.checkAll,
            e = p.e;

        if (checkAll) {
          this.onCheckAllChange(checked, {
            e: e
          });
        } else {
          this.handleCheckboxChange(p);
        }
      },
      getOptionListBySlots: function getOptionListBySlots(nodes) {
        var arr = [];
        nodes === null || nodes === void 0 ? void 0 : nodes.forEach(function (node) {
          var _node$componentOption;

          var option = node === null || node === void 0 ? void 0 : (_node$componentOption = node.componentOptions) === null || _node$componentOption === void 0 ? void 0 : _node$componentOption.propsData;
          option && arr.push(option);
        });
        return arr;
      },
      renderLabel: function renderLabel(option) {
        if (typeof option.label === "function") {
          return option.label(this.$createElement);
        }

        return option.label;
      },
      emitChange: function emitChange(val, context) {
        emitEvent(this, "change", val, context);
      },
      handleCheckboxChange: function handleCheckboxChange(data) {
        var currentValue = data.option.value;

        if (this.value instanceof Array) {
          var val = _toConsumableArray(this.value);

          if (data.checked) {
            val.push(currentValue);
          } else {
            var i = val.indexOf(currentValue);
            val.splice(i, 1);
          }

          this.emitChange(val, {
            e: data.e,
            current: data.option.value,
            option: data.option,
            type: data.checked ? "check" : "uncheck"
          });
        } else {
          console.warn("TDesign CheckboxGroup Warn: `value` must be an array, instead of ".concat(_typeof$1(this.value)));
        }
      },
      getAllCheckboxValue: function getAllCheckboxValue() {
        var val = /* @__PURE__ */new Set();

        for (var i = 0, len = this.optionList.length; i < len; i++) {
          var item = this.optionList[i];
          if (item.checkAll) continue;
          val.add(item.value);
          if (this.maxExceeded) break;
        }

        return _toConsumableArray(val);
      },
      onCheckAllChange: function onCheckAllChange(checked, context) {
        var value = checked ? this.getAllCheckboxValue() : [];
        this.emitChange(value, {
          e: context.e,
          type: checked ? "check" : "uncheck",
          current: void 0,
          option: void 0
        });
      }
    }
  });

  var Checkbox = withInstall(mapProps(["checked"], {
    model: {
      prop: "checked",
      event: "change"
    }
  })(_Checkbox));
  var CheckboxGroup = withInstall(mapProps(["value"], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_CheckboxGroup));

  function observe(element, root, callback, marginBottom) {
    if (!window || !window.IntersectionObserver) {
      callback();
      return null;
    }

    var io = null;

    try {
      io = new window.IntersectionObserver(function (entries) {
        var entry = entries[0];

        if (entry.isIntersecting) {
          callback();
          io.unobserve(element);
        }
      }, {
        rootMargin: "0px 0px ".concat(marginBottom, "px 0px"),
        root: root
      });
      io.observe(element);
    } catch (e) {
      console.error(e);
      callback();
    }

    return io;
  }

  function useLazyLoad(containerRef, childRef, params) {
    var tRowHeight = VueCompositionAPI.computed(function () {
      return Math.max(params.rowHeight || 48, 48);
    });
    var isInit = VueCompositionAPI.ref(params.rowIndex === 0);
    var hasLazyLoadHolder = VueCompositionAPI.computed(function () {
      return (params === null || params === void 0 ? void 0 : params.type) === "lazy" && !isInit.value;
    });

    var requestAnimationFrame = (typeof window === "undefined" ? false : window.requestAnimationFrame) || function (cb) {
      return setTimeout(cb, 16.6);
    };

    var init = function init() {
      if (!isInit.value) {
        requestAnimationFrame(function () {
          isInit.value = true;
        });
      }
    };

    VueCompositionAPI.onMounted(function () {
      if ((params === null || params === void 0 ? void 0 : params.type) !== "lazy") return;
      VueCompositionAPI.nextTick(function () {
        var bufferSize = Math.max(10, params.bufferSize || 10);
        var height = tRowHeight.value * bufferSize;
        observe(childRef.value, containerRef === null || containerRef === void 0 ? void 0 : containerRef.value, init, height);
      });
    });
    return {
      hasLazyLoadHolder: hasLazyLoadHolder,
      tRowHeight: tRowHeight
    };
  }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
  var getSingleContent$1 = function getSingleContent(value, options) {
    var _iterator = _createForOfIteratorHelper(options),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var option = _step.value;

        if (option.value === value) {
          return (option === null || option === void 0 ? void 0 : option.label) || String(option.value);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return value;
  };
  var getMultipleContent$1 = function getMultipleContent(value, options) {
    var res = [];

    var _iterator2 = _createForOfIteratorHelper(value),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var iterator = _step2.value;
        var resLabel = getSingleContent$1(iterator, options);

        if (resLabel) {
          res.push(resLabel);
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    return res;
  };
  var getNewMultipleValue = function getNewMultipleValue(innerValue, optionValue) {
    var value = cloneDeep_1(innerValue);
    var valueIndex = value.indexOf(optionValue);

    if (valueIndex < 0) {
      value.push(optionValue);
    } else {
      value.splice(valueIndex, 1);
    }

    return {
      value: value,
      isCheck: valueIndex < 0
    };
  };

  function ownKeys$1L(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1K(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1L(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1L(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var keepAnimationMixins$3 = getKeepAnimationMixins();
  var _Option = VueCompositionAPI.defineComponent({
    name: "TOption",
    props: _objectSpread$1K(_objectSpread$1K({}, props$G), {}, {
      isCreatedOption: Boolean,
      multiple: Boolean,
      rowIndex: Number,
      trs: Map,
      scrollType: String,
      isVirtual: Boolean,
      bufferSize: Number,
      index: Number
    }),
    components: {
      TCheckbox: Checkbox
    },
    mixins: [keepAnimationMixins$3],
    directives: {
      Ripple: Ripple
    },
    setup: function setup(props2, context) {
      var selectProvider = VueCompositionAPI.inject("tSelect");
      var optionNode = VueCompositionAPI.ref(null);

      var _useCommonClassName = useCommonClassName(),
          sizeClassNames = _useCommonClassName.sizeClassNames,
          statusClassNames = _useCommonClassName.statusClassNames;

      var _useConfig = useConfig("classPrefix"),
          classPrefix = _useConfig.classPrefix;

      var _toRefs = VueCompositionAPI.toRefs(props2),
          value = _toRefs.value,
          label = _toRefs.label,
          disabled = _toRefs.disabled,
          panelElement = _toRefs.panelElement,
          scrollType = _toRefs.scrollType,
          bufferSize = _toRefs.bufferSize,
          index = _toRefs.index,
          multiple = _toRefs.multiple,
          isCreatedOption = _toRefs.isCreatedOption;

      var _useLazyLoad = useLazyLoad(panelElement, optionNode, VueCompositionAPI.reactive({
        type: scrollType,
        bufferSize: bufferSize,
        rowIndex: props2.rowIndex
      })),
          _useLazyLoad$hasLazyL = _useLazyLoad.hasLazyLoadHolder,
          hasLazyLoadHolder = _useLazyLoad$hasLazyL === void 0 ? null : _useLazyLoad$hasLazyL,
          _useLazyLoad$tRowHeig = _useLazyLoad.tRowHeight,
          tRowHeight = _useLazyLoad$tRowHeig === void 0 ? null : _useLazyLoad$tRowHeig;

      var isHover = VueCompositionAPI.ref(false);
      var formDisabled = VueCompositionAPI.ref(void 0);
      var isDisabled = VueCompositionAPI.computed(function () {
        return formDisabled.value || disabled.value || selectProvider.isReachMaxLimit.value;
      });
      var isSelected = VueCompositionAPI.computed(function () {
        return multiple.value ? selectProvider.selectValue.value.includes(props2.value) : selectProvider.selectValue.value === props2.value;
      });

      var mouseEvent = function mouseEvent(v) {
        isHover.value = v;
      };

      var labelText = VueCompositionAPI.computed(function () {
        return label.value || value.value;
      });
      var classes = VueCompositionAPI.computed(function () {
        var _ref;

        return ["".concat(classPrefix.value, "-select-option"), sizeClassNames[selectProvider && selectProvider.size.value], (_ref = {}, _defineProperty$3(_ref, statusClassNames.disabled, isDisabled.value), _defineProperty$3(_ref, statusClassNames.selected, isSelected.value), _defineProperty$3(_ref, "".concat(classPrefix.value, "-select-option__hover"), (isHover.value || selectProvider.hoverIndex.value === index.value) && !isDisabled.value && !isSelected.value), _ref)];
      });

      var handleClick = function handleClick(e) {
        if (multiple.value || isDisabled.value) return;
        e.stopPropagation();

        if (isCreatedOption.value) {
          var _selectProvider$handl;

          (_selectProvider$handl = selectProvider.handleCreate) === null || _selectProvider$handl === void 0 ? void 0 : _selectProvider$handl.call(selectProvider, value.value);

          if (selectProvider.multiple.value) {
            var newValue = getNewMultipleValue(selectProvider.selectValue.value, value.value);
            selectProvider.handleValueChange(newValue.value, {
              e: e,
              trigger: "check"
            });
            return;
          }
        }

        selectProvider.handleValueChange(value.value, {
          e: e,
          trigger: "check"
        });
        selectProvider.handlePopupVisibleChange(false, {
          e: e
        });
      };

      var handleCheckboxClick = function handleCheckboxClick(val, context2) {
        var newValue = getNewMultipleValue(selectProvider.selectValue.value, value.value);
        selectProvider.handleValueChange(newValue.value, {
          e: context2.e,
          trigger: val ? "check" : "uncheck"
        });

        if (!selectProvider.reserveKeyword.value) {
          selectProvider.handlerInputChange("");
        }
      };

      VueCompositionAPI.onMounted(function () {
        var trs = props2.trs,
            rowIndex = props2.rowIndex,
            scrollType2 = props2.scrollType,
            isVirtual = props2.isVirtual;

        if (scrollType2 === "virtual") {
          if (isVirtual) {
            trs.set(rowIndex, optionNode.value);
            context.emit("onRowMounted");
          }
        }
      });
      VueCompositionAPI.onBeforeUnmount(function () {
        if (props2.isVirtual) {
          var trs = props2.trs,
              rowIndex = props2.rowIndex;
          trs["delete"](rowIndex);
        }
      });
      return {
        isHover: isHover,
        isSelected: isSelected,
        mouseEvent: mouseEvent,
        classes: classes,
        selectProvider: selectProvider,
        labelText: labelText,
        optionNode: optionNode,
        tRowHeight: tRowHeight,
        hasLazyLoadHolder: hasLazyLoadHolder,
        handleClick: handleClick,
        handleCheckboxClick: handleCheckboxClick
      };
    },
    render: function render() {
      var h = arguments[0];
      var classes = this.classes,
          multiple = this.multiple,
          labelText = this.labelText,
          isSelected = this.isSelected,
          disabled = this.disabled,
          selectProvider = this.selectProvider,
          handleCheckboxClick = this.handleCheckboxClick,
          mouseEvent = this.mouseEvent;
      var children = renderContent(this, "default", "content");
      var optionChild = children || h("span", [labelText]);

      if (this.hasLazyLoadHolder) {
        return h("li", {
          "ref": "optionNode",
          "class": classes,
          "on": {
            "mouseenter": function mouseenter() {
              return mouseEvent(true);
            },
            "mouseleave": function mouseleave() {
              return mouseEvent(false);
            },
            "click": this.handleClick
          },
          "directives": [{
            name: "ripple",
            value: this.keepAnimation.ripple
          }]
        }, [h("span", {
          "style": {
            height: "".concat(this.tRowHeight, "px"),
            border: "none"
          }
        })]);
      }

      return h("li", {
        "ref": "optionNode",
        "class": classes,
        "on": {
          "mouseenter": function mouseenter() {
            return mouseEvent(true);
          },
          "mouseleave": function mouseleave() {
            return mouseEvent(false);
          },
          "click": this.handleClick
        },
        "directives": [{
          name: "ripple",
          value: this.keepAnimation.ripple
        }]
      }, [multiple ? h("t-checkbox", {
        "attrs": {
          "checked": isSelected,
          "disabled": disabled || !isSelected && selectProvider.isReachMaxLimit.value
        },
        "on": {
          "change": handleCheckboxClick
        }
      }, [optionChild]) : h("span", [optionChild])]);
    }
  });

  function ownKeys$1K(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1J(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1K(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1K(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var useVirtualScroll = function useVirtualScroll(_ref) {
    var data = _ref.data,
        container = _ref.container,
        _ref$fixedHeight = _ref.fixedHeight,
        fixedHeight = _ref$fixedHeight === void 0 ? false : _ref$fixedHeight,
        _ref$lineHeight = _ref.lineHeight,
        lineHeight = _ref$lineHeight === void 0 ? 30 : _ref$lineHeight,
        _ref$bufferSize = _ref.bufferSize,
        bufferSize = _ref$bufferSize === void 0 ? 20 : _ref$bufferSize,
        _ref$threshold = _ref.threshold,
        threshold = _ref$threshold === void 0 ? 100 : _ref$threshold;
    var state = VueCompositionAPI.reactive({
      visibleData: [],
      cachedHeight: [],
      cachedScrollY: []
    });
    var isVirtual = VueCompositionAPI.computed(function () {
      return data.value.length > threshold;
    });
    var updateId = VueCompositionAPI.ref(0);
    var trs = /* @__PURE__ */new Map();
    var visibleCount = 0;
    var beforeScrollTop = 0;
    var index = 0;
    var offset = 0;
    var start = 0;
    var last = 0;

    var reset = function reset() {
      data.value.forEach(function (item, i) {
        item.$index = i;

        if (fixedHeight) {
          state.cachedScrollY[i] = i * lineHeight;
        }
      });

      if (!fixedHeight) {
        state.cachedScrollY[data.value.length - 1] = void 0;
      }
    };

    reset();
    var scrollHeight = VueCompositionAPI.computed(function () {
      var cachedHeight = state.cachedHeight;
      var length = cachedHeight.length;

      if (length) {
        var maxScrollY = cachedHeight.reduce(function (sum, v) {
          return sum + v || lineHeight;
        }, 0);

        if (cachedHeight.length === data.value.length) {
          return maxScrollY;
        }

        var average = maxScrollY / cachedHeight.length;
        return maxScrollY + (data.value.length - cachedHeight.length) * average;
      }

      return isVirtual.value ? data.value.length * lineHeight : 0;
    });
    var translateY = VueCompositionAPI.computed(function () {
      var visibleData = state.visibleData;
      var firstRow = visibleData[0];

      if (firstRow) {
        return visibleData.length === 1 ? 0 : state.cachedScrollY[firstRow.$index];
      }

      return 0;
    });

    var updateVisibleData = function updateVisibleData() {
      last = Math.min(start + visibleCount + bufferSize * 2, data.value.length);
      state.visibleData = data.value.slice(start, last);
    };

    var calculateScrollY = function calculateScrollY() {
      var _anchorDom$getBoundin;

      var anchorDom = trs.get(index);

      if (!anchorDom) {
        return;
      }

      var anchorDomHeight = anchorDom === null || anchorDom === void 0 ? void 0 : (_anchorDom$getBoundin = anchorDom.getBoundingClientRect()) === null || _anchorDom$getBoundin === void 0 ? void 0 : _anchorDom$getBoundin.height;
      state.cachedScrollY[index] = container.value.scrollTop - offset;
      state.cachedHeight[index] = anchorDomHeight;

      for (var i = index + 1; i <= state.visibleData[state.visibleData.length - 1].$index; i++) {
        var tr = trs.get(i);

        var _ref2 = (tr === null || tr === void 0 ? void 0 : tr.getBoundingClientRect()) || {},
            height = _ref2.height;

        state.cachedHeight[i] = height;
        var scrollY = state.cachedScrollY[i - 1] + state.cachedHeight[i - 1];
        state.cachedScrollY.splice(i, 1, scrollY);
      }

      for (var _i = index - 1; _i >= state.visibleData[0].$index; _i--) {
        var _tr = trs.get(_i);

        var _ref3 = (_tr === null || _tr === void 0 ? void 0 : _tr.getBoundingClientRect()) || {},
            _height = _ref3.height;

        state.cachedHeight[_i] = _height;

        var _scrollY = state.cachedScrollY[_i + 1] - state.cachedHeight[_i];

        state.cachedScrollY.splice(_i, 1, _scrollY);
      }

      if (state.cachedScrollY[0] > 0) {
        var distance = state.cachedScrollY[0];
        var length = Math.min(last, data.value.length);

        for (var _i2 = 0; _i2 < length; _i2++) {
          state.cachedScrollY.splice(_i2, 1, state.cachedScrollY[_i2] - distance);
        }

        var scrollTop = state.cachedScrollY[index - 1] ? state.cachedScrollY[index - 1] + offset : offset;
        container.value.scrollTop = scrollTop;
        beforeScrollTop = scrollTop;
      }

      if (state.cachedScrollY[start] < 0) {
        var s = state.cachedHeight.slice(0, Math.max(0, index)).reduce(function (sum, v) {
          return sum + v;
        }, 0) + offset;
        container.value.scrollTop = s;
        beforeScrollTop = s;

        if (s === 0) {
          index = 0;
          offset = 0;
        }
      }

      VueCompositionAPI.nextTick(function () {
        var _container$value = container.value,
            scrollTop = _container$value.scrollTop,
            scrollHeight2 = _container$value.scrollHeight,
            clientHeight = _container$value.clientHeight;

        if (scrollTop + clientHeight === scrollHeight2) {
          for (var _i3 = last - 1; _i3 >= start; _i3--) {
            if (_i3 === last - 1) {
              state.cachedScrollY.splice(_i3, 1, scrollHeight2.value - state.cachedHeight[_i3]);
            } else {
              state.cachedScrollY.splice(_i3, 1, state.cachedScrollY[_i3 + 1] - state.cachedHeight[_i3]);
            }
          }
        }
      });
    };

    var handleScroll = function handleScroll() {
      if (!isVirtual.value) return;
      if (!container.value) return;
      var scrollTop = container.value.scrollTop;
      var distance = scrollTop - beforeScrollTop;
      beforeScrollTop = scrollTop;
      distance += offset;
      var lastIndex = index;
      if (!distance) return;

      if (distance >= 0) {
        while (lastIndex < data.value.length && distance > (state.cachedHeight[lastIndex] || lineHeight)) {
          if (!state.cachedHeight[lastIndex]) {
            state.cachedHeight[lastIndex] = lineHeight;
          }

          distance -= state.cachedHeight[lastIndex];
          lastIndex++;
        }

        if (lastIndex >= data.value.length) {
          index = data.value.length - 1;
          offset = 0;
        } else {
          index = lastIndex;
          offset = distance;
        }

        var _container$value2 = container.value,
            clientHeight = _container$value2.clientHeight,
            scrollHeight2 = _container$value2.scrollHeight;

        if (scrollTop + clientHeight === scrollHeight2) {
          index = data.value.length - visibleCount + 1;
        }

        if (start <= index - bufferSize) {
          start = Math.min(data.value.length - visibleCount, index - bufferSize);

          if (start < 0) {
            start = 0;
          }
        }
      } else {
        while (distance < 0) {
          lastIndex--;

          if (!state.cachedHeight[lastIndex]) {
            state.cachedHeight[lastIndex] = lineHeight;
          }

          distance += state.cachedHeight[lastIndex];
        }

        if (lastIndex < 0) {
          index = 0;
          offset = 0;
        } else {
          index = lastIndex;
          offset = distance;
        }

        calculateScrollY();

        if (start > index - bufferSize) {
          start = Math.max(0, index - bufferSize);
        }
      }

      updateVisibleData();
    };

    !fixedHeight && VueCompositionAPI.watch(updateId, calculateScrollY, {
      flush: "post"
    });

    var handleRowMounted = function handleRowMounted() {
      if (!isVirtual.value) return;
      updateId.value++;
    };

    VueCompositionAPI.watch(data, function () {
      reset();
      state.visibleData = [];
      state.cachedScrollY = [];
      state.cachedHeight = [];
      beforeScrollTop = 0;
      index = 0;
      offset = 0;
      start = 0;
      trs.clear();

      if (data.value.length <= threshold) {
        state.visibleData = data.value;
      } else {
        updateVisibleData();
      }

      container.value && (container.value.scrollTop = 0);
    });
    var mounted = false;

    var refreshContainer = function refreshContainer() {
      if (mounted) {
        visibleCount = Math.ceil(container.value.offsetHeight / lineHeight);
        updateVisibleData();
      }
    };

    VueCompositionAPI.onMounted(function () {
      if (!window || !window.IntersectionObserver) {
        return;
      }

      var ob = new window.IntersectionObserver(function (entries) {
        var entry = entries[0];

        if (entry.isIntersecting || entry.intersectionRatio) {
          mounted = true;
          isVirtual.value && refreshContainer();
          ob.unobserve(container.value);
        }
      });
      container.value && ob.observe(container.value);
    });
    return _objectSpread$1J(_objectSpread$1J({
      trs: trs,
      scrollHeight: scrollHeight
    }, VueCompositionAPI.toRefs(state)), {}, {
      translateY: translateY,
      handleScroll: handleScroll,
      handleRowMounted: handleRowMounted,
      refreshContainer: refreshContainer,
      fixedHeight: fixedHeight,
      calculateScrollY: calculateScrollY
    });
  };

  function ownKeys$1J(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1I(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1J(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1J(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var sizeClassMap = {
    small: "s",
    medium: "m",
    large: "l"
  };
  var SelectPanel = VueCompositionAPI.defineComponent({
    name: "TSelectPanel",
    components: {
      TOption: _Option
    },
    props: ["inputValue", "panelTopContent", "panelBottomContent", "size", "options", "empty", "filter", "loading", "loadingText", "multiple", "scroll", "creatable", "filterable"],
    setup: function setup(props) {
      var _props$scroll5;

      var _toRefs = VueCompositionAPI.toRefs(props),
          options = _toRefs.options,
          inputValue = _toRefs.inputValue;

      var renderTNode = useTNodeJSX();

      var _useConfig = useConfig("select"),
          t = _useConfig.t,
          global = _useConfig.global;

      var selectProvider = VueCompositionAPI.inject("tSelect");
      var COMPONENT_NAME = usePrefixClass$1("select");
      var panelContentRef = VueCompositionAPI.computed(function () {
        return selectProvider.getOverlayElm();
      });

      var _ref = props.scroll || {},
          type = _ref.type,
          _ref$rowHeight = _ref.rowHeight,
          rowHeight = _ref$rowHeight === void 0 ? 28 : _ref$rowHeight,
          _ref$bufferSize = _ref.bufferSize,
          bufferSize = _ref$bufferSize === void 0 ? 20 : _ref$bufferSize,
          _ref$isFixedRowHeight = _ref.isFixedRowHeight,
          isFixedRowHeight = _ref$isFixedRowHeight === void 0 ? false : _ref$isFixedRowHeight,
          _ref$threshold = _ref.threshold,
          threshold = _ref$threshold === void 0 ? 100 : _ref$threshold;

      var displayOptions = VueCompositionAPI.computed(function () {
        if (!inputValue.value || props.creatable || !(props.filterable || isFunction_1(props.filter))) return options.value;

        var filterMethods = function filterMethods(option) {
          var _option$label;

          if (isFunction_1(props.filter)) {
            return props.filter("".concat(props.inputValue), option);
          }

          return ((_option$label = option.label) === null || _option$label === void 0 ? void 0 : _option$label.indexOf("".concat(props.inputValue))) > -1;
        };

        var res = [];
        props.options.forEach(function (option) {
          if (option.group && option.children) {
            res.push(_objectSpread$1I(_objectSpread$1I({}, option), {}, {
              children: option.children.filter(filterMethods)
            }));
          }

          if (filterMethods(option)) {
            res.push(option);
          }
        });
        return res;
      });
      var isCreateOptionShown = VueCompositionAPI.computed(function () {
        return props.creatable && props.filterable && props.inputValue;
      });
      var isEmpty = VueCompositionAPI.computed(function () {
        return !displayOptions.value.length;
      });
      var isVirtual = VueCompositionAPI.computed(function () {
        var _props$scroll, _props$options, _props$scroll2;

        return ((_props$scroll = props.scroll) === null || _props$scroll === void 0 ? void 0 : _props$scroll.type) === "virtual" && ((_props$options = props.options) === null || _props$options === void 0 ? void 0 : _props$options.length) > (((_props$scroll2 = props.scroll) === null || _props$scroll2 === void 0 ? void 0 : _props$scroll2.threshold) || 100);
      });

      var _ref2 = type === "virtual" ? useVirtualScroll({
        container: panelContentRef,
        data: displayOptions,
        fixedHeight: isFixedRowHeight,
        lineHeight: rowHeight,
        bufferSize: bufferSize,
        threshold: threshold
      }) : {},
          _ref2$trs = _ref2.trs,
          trs = _ref2$trs === void 0 ? null : _ref2$trs,
          _ref2$visibleData = _ref2.visibleData,
          visibleData = _ref2$visibleData === void 0 ? null : _ref2$visibleData,
          _ref2$handleScroll = _ref2.handleScroll,
          handleVirtualScroll = _ref2$handleScroll === void 0 ? null : _ref2$handleScroll,
          _ref2$scrollHeight = _ref2.scrollHeight,
          scrollHeight = _ref2$scrollHeight === void 0 ? null : _ref2$scrollHeight,
          _ref2$translateY = _ref2.translateY,
          translateY = _ref2$translateY === void 0 ? null : _ref2$translateY,
          _ref2$handleRowMounte = _ref2.handleRowMounted,
          handleRowMounted = _ref2$handleRowMounte === void 0 ? null : _ref2$handleRowMounte;

      var lastScrollY = -1;

      var onInnerVirtualScroll = function onInnerVirtualScroll(e) {
        if (!isVirtual.value) {
          return;
        }

        var target = e.target || e.srcElement;
        var top = target.scrollTop;

        if (Math.abs(lastScrollY - top) > 5) {
          handleVirtualScroll();
          lastScrollY = top;
        } else {
          lastScrollY = -1;
        }
      };

      VueCompositionAPI.onMounted(function () {
        var _props$scroll3;

        if (((_props$scroll3 = props.scroll) === null || _props$scroll3 === void 0 ? void 0 : _props$scroll3.type) === "virtual") {
          selectProvider.getOverlayElm().addEventListener("scroll", onInnerVirtualScroll);
        }
      });
      VueCompositionAPI.onBeforeUnmount(function () {
        var _props$scroll4;

        if (((_props$scroll4 = props.scroll) === null || _props$scroll4 === void 0 ? void 0 : _props$scroll4.type) === "virtual") {
          selectProvider.getOverlayElm().removeEventListener("scroll", onInnerVirtualScroll);
        }
      });
      return {
        t: t,
        global: global,
        isEmpty: isEmpty,
        renderTNode: renderTNode,
        selectProvider: selectProvider,
        isCreateOptionShown: isCreateOptionShown,
        trs: trs,
        isVirtual: isVirtual,
        onInnerVirtualScroll: onInnerVirtualScroll,
        visibleData: visibleData,
        scrollHeight: scrollHeight,
        translateY: translateY,
        scrollType: (_props$scroll5 = props.scroll) === null || _props$scroll5 === void 0 ? void 0 : _props$scroll5.type,
        handleRowMounted: handleRowMounted,
        bufferSize: bufferSize,
        threshold: threshold,
        displayOptions: displayOptions,
        componentName: COMPONENT_NAME
      };
    },
    methods: {
      renderEmptyContent: function renderEmptyContent() {
        var h = this.$createElement;
        var empty = this.empty,
            t = this.t,
            global = this.global;

        if (empty && typeof empty === "string") {
          return h("div", {
            "class": "".concat(this.componentName, "__empty")
          }, [empty]);
        }

        return renderTNodeJSXDefault(this, "empty", h("div", {
          "class": "".concat(this.componentName, "__empty")
        }, [t(global.empty)]));
      },
      renderLoadingContent: function renderLoadingContent() {
        var h = this.$createElement;
        var loadingText = this.loadingText,
            t = this.t,
            global = this.global;

        if (loadingText && typeof loadingText === "string") {
          return h("div", {
            "class": "".concat(this.componentName, "__loading-tips")
          }, [loadingText]);
        }

        return renderTNodeJSXDefault(this, "loadingText", h("div", {
          "class": "".concat(this.componentName, "__loading-tips")
        }, [t(global.loadingText)]));
      },
      renderCreateOption: function renderCreateOption() {
        var h = this.$createElement;
        var inputValue = this.inputValue,
            trs = this.trs,
            scrollType = this.scrollType,
            isVirtual = this.isVirtual,
            handleRowMounted = this.handleRowMounted,
            bufferSize = this.bufferSize;
        var on = isVirtual ? {
          onRowMounted: handleRowMounted
        } : {};
        return h("ul", {
          "class": ["".concat(this.componentName, "__create-option"), "".concat(this.componentName, "__list")]
        }, [h("t-option", helper([{
          "attrs": {
            "isCreatedOption": true,
            "value": inputValue,
            "label": inputValue,
            "trs": trs,
            "scrollType": scrollType,
            "isVirtual": isVirtual,
            "bufferSize": bufferSize
          },
          "class": "".concat(this.componentName, "__create-option--special")
        }, {
          "on": on
        }]))]);
      },
      renderOptionsContent: function renderOptionsContent(options) {
        var _this = this;

        var h = this.$createElement;
        var multiple = this.multiple,
            trs = this.trs,
            scrollType = this.scrollType,
            isVirtual = this.isVirtual,
            handleRowMounted = this.handleRowMounted,
            bufferSize = this.bufferSize;
        var on = isVirtual ? {
          onRowMounted: handleRowMounted
        } : {};
        return h("ul", {
          "class": "".concat(this.componentName, "__list")
        }, [options.map(function (item, index) {
          if (item.group) {
            return h("t-option-group", {
              "attrs": {
                "label": item.group,
                "divider": item.divider
              }
            }, [_this.renderOptionsContent(item.children)]);
          }

          var scrollProps = isVirtual ? {
            rowIndex: item.$index,
            trs: trs,
            scrollType: scrollType,
            isVirtual: isVirtual,
            bufferSize: bufferSize
          } : {
            key: index
          };
          return h("t-option", helper([{
            "class": item["class"],
            "style": item.style,
            "props": _objectSpread$1I({}, _objectSpread$1I(_objectSpread$1I({}, item), scrollProps)),
            "attrs": {
              "multiple": multiple
            },
            "scopedSlots": {
              "default": item.slots
            },
            "key": "".concat(item.$index || "", "_").concat(index)
          }, {
            "on": on
          }]));
        })]);
      },
      renderPanelContent: function renderPanelContent() {
        var innerStyle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var h = this.$createElement;
        var renderTNode = this.renderTNode,
            isEmpty = this.isEmpty,
            isCreateOptionShown = this.isCreateOptionShown,
            size = this.size,
            loading = this.loading,
            isVirtual = this.isVirtual,
            visibleData = this.visibleData,
            displayOptions = this.displayOptions;
        return h("div", {
          "class": ["".concat(this.componentName, "__dropdown-inner"), "".concat(this.componentName, "__dropdown-inner--size-").concat(sizeClassMap[size])],
          "style": innerStyle
        }, [renderTNode("panelTopContent"), isEmpty && this.renderEmptyContent(), isCreateOptionShown && this.renderCreateOption(), !isEmpty && loading && this.renderLoadingContent(), !isEmpty && !loading && this.renderOptionsContent(isVirtual && visibleData ? visibleData : displayOptions), renderTNode("panelBottomContent")]);
      }
    },
    render: function render() {
      var h = arguments[0];
      var translateY = this.translateY,
          scrollHeight = this.scrollHeight,
          isVirtual = this.isVirtual;

      if (isVirtual) {
        var cursorTranslate = "translate(0, ".concat(scrollHeight, "px)");
        var cursorTranslateStyle = {
          position: "absolute",
          width: "1px",
          height: "1px",
          transition: "transform 0.2s",
          transform: cursorTranslate,
          "-ms-transform": cursorTranslate,
          "-moz-transform": cursorTranslate,
          "-webkit-transform": cursorTranslate
        };
        var translate = "translate(0, ".concat(translateY, "px)");
        var virtualStyle = {
          transform: translate,
          "-ms-transform": translate,
          "-moz-transform": translate,
          "-webkit-transform": translate
        };
        return h("div", [h("div", {
          "style": _objectSpread$1I({}, cursorTranslateStyle)
        }), this.renderPanelContent(virtualStyle)]);
      }

      return this.renderPanelContent();
    }
  });

  function ownKeys$1I(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1H(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1I(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1I(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useSelectOptions(props, context, keys) {
    var options = VueCompositionAPI.ref([]);

    var getOptions = function getOptions() {
      var dynamicIndex = 0;
      var innerOptions = props.options.map(function (option) {
        var getFormatOption = function getFormatOption(option2) {
          var _keys$value = keys.value,
              value = _keys$value.value,
              label = _keys$value.label;

          var res = _objectSpread$1H(_objectSpread$1H({}, option2), {}, {
            index: dynamicIndex,
            label: get_1(option2, label),
            value: get_1(option2, value)
          });

          dynamicIndex += 1;
          return res;
        };

        if (option.group && option.children) {
          return _objectSpread$1H(_objectSpread$1H({}, option), {}, {
            children: option.children.map(function (child) {
              return getFormatOption(child);
            })
          });
        }

        return getFormatOption(option);
      });
      var currentSlots = context.parent.$slots["default"] || [];
      var optionsSlots = currentSlots.filter(function (item) {
        var _item$tag;

        return (_item$tag = item.tag) === null || _item$tag === void 0 ? void 0 : _item$tag.endsWith("TOption");
      });
      var groupSlots = currentSlots.filter(function (item) {
        var _item$tag2;

        return (_item$tag2 = item.tag) === null || _item$tag2 === void 0 ? void 0 : _item$tag2.endsWith("TOptionGroup");
      });

      if (isArray_1(groupSlots)) {
        groupSlots.forEach(function (group) {
          var _group$componentOptio;

          var groupOption = _objectSpread$1H(_objectSpread$1H({
            group: (_group$componentOptio = group.componentOptions.propsData) === null || _group$componentOptio === void 0 ? void 0 : _group$componentOptio.label
          }, group.componentOptions.propsData), {}, {
            children: []
          });

          var res = group.componentOptions.children;

          if (isArray_1(res)) {
            res.forEach(function (child) {
              groupOption.children.push(_objectSpread$1H(_objectSpread$1H({
                "class": child.data.staticClass,
                style: child.data.staticStyle
              }, child.componentOptions.propsData), {}, {
                slots: function slots() {
                  return child.componentOptions.children;
                },
                index: dynamicIndex
              }));
              dynamicIndex += 1;
            });
          }

          innerOptions.push(groupOption);
        });
      }

      if (isArray_1(optionsSlots)) {
        optionsSlots.forEach(function (child) {
          innerOptions.push(_objectSpread$1H(_objectSpread$1H({
            "class": child.data.staticClass,
            style: child.data.staticStyle
          }, child.componentOptions.propsData), {}, {
            slots: function slots() {
              return child.componentOptions.children;
            },
            index: dynamicIndex
          }));
          dynamicIndex += 1;
        });
      }

      options.value = innerOptions;
    };

    var optionsMap = VueCompositionAPI.computed(function () {
      var res = /* @__PURE__ */new Map();
      optionsList.value.forEach(function (option) {
        res.set(option.value, option);
      });
      return res;
    });
    var optionsList = VueCompositionAPI.computed(function () {
      var res = [];

      var getOptionsList = function getOptionsList(options2) {
        options2.forEach(function (option) {
          if (option.group) {
            getOptionsList(option.children);
          } else {
            res.push(option);
          }
        });
      };

      getOptionsList(options.value);
      return res;
    });
    getOptions();
    VueCompositionAPI.onBeforeUpdate(function () {
      getOptions();
    });
    return {
      options: options,
      optionsMap: optionsMap,
      optionsList: optionsList
    };
  }

  var _excluded$2 = ["overlayClassName"];

  function ownKeys$1H(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1G(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1H(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1H(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TSelect = VueCompositionAPI.defineComponent({
    name: "TSelect",
    props: _objectSpread$1G({}, props$L),
    components: {
      TInput: Input,
      TLoading: Loading,
      Tag: Tag,
      Popup: Popup,
      TOption: _Option,
      FakeArrow: FakeArrow,
      SelectPanel: SelectPanel
    },
    setup: function setup(props2, context) {
      var _useConfig = useConfig("select"),
          t = _useConfig.t,
          global = _useConfig.global;

      var renderTNode = useTNodeJSX();
      var instance = VueCompositionAPI.getCurrentInstance();
      var selectInputRef = VueCompositionAPI.ref(null);
      var popupOpenTime = VueCompositionAPI.ref(250);
      var formDisabled = VueCompositionAPI.ref();
      var COMPONENT_NAME = usePrefixClass$1("select");

      var _useConfig2 = useConfig("classPrefix"),
          classPrefix = _useConfig2.classPrefix;

      var _toRefs = VueCompositionAPI.toRefs(props2),
          valueType = _toRefs.valueType,
          disabled = _toRefs.disabled,
          size = _toRefs.size,
          valueProps = _toRefs.value,
          multiple = _toRefs.multiple,
          placeholder = _toRefs.placeholder,
          loading = _toRefs.loading,
          max = _toRefs.max,
          reserveKeyword = _toRefs.reserveKeyword,
          inputValue = _toRefs.inputValue,
          popupVisible = _toRefs.popupVisible,
          minCollapsedNum = _toRefs.minCollapsedNum;

      var keys = VueCompositionAPI.computed(function () {
        var _props2$keys, _props2$keys2;

        return {
          label: ((_props2$keys = props2.keys) === null || _props2$keys === void 0 ? void 0 : _props2$keys.label) || "label",
          value: ((_props2$keys2 = props2.keys) === null || _props2$keys2 === void 0 ? void 0 : _props2$keys2.value) || "value"
        };
      });

      var _useSelectOptions = useSelectOptions(props2, context, keys),
          innerOptions = _useSelectOptions.options,
          optionsMap = _useSelectOptions.optionsMap,
          optionsList = _useSelectOptions.optionsList;

      var _useDefaultValue = useDefaultValue(valueProps, props2.defaultValue, props2.onChange, "value", "change"),
          _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
          value = _useDefaultValue2[0],
          setValue = _useDefaultValue2[1];

      var innerValue = VueCompositionAPI.computed(function () {
        if (valueType.value === "object") {
          return multiple.value ? value.value.map(function (option) {
            return option[keys.value.value];
          }) : value.value[keys.value.value];
        }

        return value.value;
      });

      var setInnerValue = function setInnerValue(newVal, e) {
        if (valueType.value === "object") {
          var _keys$value = keys.value,
              value2 = _keys$value.value,
              label = _keys$value.label;

          var getOption = function getOption(val) {
            var _ref;

            var option = optionsMap.value.get(val);
            return _ref = {}, _defineProperty$3(_ref, value2, get_1(option, value2)), _defineProperty$3(_ref, label, get_1(option, label)), _ref;
          };

          newVal = multiple.value ? newVal.map(function (val) {
            return getOption(val);
          }) : getOption(newVal);
        }

        if (newVal === value.value) return;
        setValue(newVal, e);
      };

      var _useDefaultValue3 = useDefaultValue(inputValue, props2.defaultInputValue || "", props2.onInputChange, "inputValue", "input-change"),
          _useDefaultValue4 = _slicedToArray(_useDefaultValue3, 2),
          tInputValue = _useDefaultValue4[0],
          setTInputValue = _useDefaultValue4[1];

      var _useDefaultValue5 = useDefaultValue(popupVisible, false, function (visible, context2) {
        var _props2$onPopupVisibl, _props2$onVisibleChan;

        (_props2$onPopupVisibl = props2.onPopupVisibleChange) === null || _props2$onPopupVisibl === void 0 ? void 0 : _props2$onPopupVisibl.call(props2, visible, context2);
        (_props2$onVisibleChan = props2.onVisibleChange) === null || _props2$onVisibleChan === void 0 ? void 0 : _props2$onVisibleChan.call(props2, visible);
        instance.emit("visible-change", visible);
      }, "popupVisible", "popup-visible-change"),
          _useDefaultValue6 = _slicedToArray(_useDefaultValue5, 2),
          innerPopupVisible = _useDefaultValue6[0],
          setInnerPopupVisible = _useDefaultValue6[1];

      var isDisabled = VueCompositionAPI.computed(function () {
        return formDisabled.value || disabled.value;
      });
      var isLoading = VueCompositionAPI.computed(function () {
        return loading.value && !isDisabled.value;
      });
      var isFilterable = VueCompositionAPI.computed(function () {
        return Boolean(props2.filterable || global.value.filterable || isFunction_1(props2.filter));
      });
      var isReachMaxLimit = VueCompositionAPI.computed(function () {
        return multiple.value && max.value !== 0 && max.value <= innerValue.value.length;
      });
      var placeholderText = VueCompositionAPI.computed(function () {
        var _ref2;

        return (_ref2 = !multiple.value && innerPopupVisible.value && getSingleContent$1(innerValue.value, optionsList.value) || placeholder.value) !== null && _ref2 !== void 0 ? _ref2 : t(global.value.placeholder);
      });
      var displayText = VueCompositionAPI.computed(function () {
        return multiple.value ? getMultipleContent$1(innerValue.value, optionsList.value) : getSingleContent$1(innerValue.value, optionsList.value);
      });
      var valueDisplayParams = VueCompositionAPI.computed(function () {
        var val = multiple.value ? innerValue.value.map(function (value2) {
          var _optionsMap$value$get;

          return {
            value: value2,
            label: (_optionsMap$value$get = optionsMap.value.get(value2)) === null || _optionsMap$value$get === void 0 ? void 0 : _optionsMap$value$get.label
          };
        }) : innerValue.value;
        return {
          value: val,
          onClose: multiple.value ? function (index) {
            return removeTag(index);
          } : function () {}
        };
      });
      var collapsedItemsParams = VueCompositionAPI.computed(function () {
        return multiple.value ? {
          value: innerValue.value,
          collapsedSelectedItems: innerValue.value.slice(minCollapsedNum.value),
          count: innerValue.value.length - minCollapsedNum.value
        } : {};
      });

      var removeTag = function removeTag(index, context2) {
        var _props2$onRemove;

        var _ref3 = context2 || {},
            e = _ref3.e;

        e === null || e === void 0 ? void 0 : e.stopPropagation();

        if (isDisabled.value) {
          return;
        }

        var selectValue = cloneDeep_1(innerValue.value);
        var value2 = selectValue[index];
        selectValue.splice(index, 1);
        setInnerValue(selectValue, {
          e: e,
          trigger: "tag-remove"
        });
        var evtObj = {
          value: value2,
          data: optionsMap.value.get(value2),
          e: e
        };
        instance.emit("remove", evtObj);
        (_props2$onRemove = props2.onRemove) === null || _props2$onRemove === void 0 ? void 0 : _props2$onRemove.call(props2, evtObj);
      };

      var handleCreate = function handleCreate() {
        var _props2$onCreate;

        if (!tInputValue.value) return;
        var createVal = tInputValue.value;
        setTInputValue("");
        instance.emit("create", createVal);
        (_props2$onCreate = props2.onCreate) === null || _props2$onCreate === void 0 ? void 0 : _props2$onCreate.call(props2, createVal);
      };

      var handleClear = function handleClear(_ref4) {
        var _props2$onClear;

        var e = _ref4.e;
        e === null || e === void 0 ? void 0 : e.stopPropagation();

        if (multiple.value) {
          setInnerValue([], {
            trigger: "clear",
            e: e
          });
        } else {
          setInnerValue("", {
            trigger: "clear",
            e: e
          });
        }

        instance.emit("clear", {
          e: e
        });
        (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 ? void 0 : _props2$onClear.call(props2, {
          e: e
        });
      };

      var handleTInputValueChange = function handleTInputValueChange(val, context2) {
        if (context2.trigger === "blur" || !innerPopupVisible.value) return;
        setTInputValue(val);
        debounceSearch();
      };

      var handleTagChange = function handleTagChange(currentTags, context2) {
        var trigger = context2.trigger,
            index = context2.index,
            e = context2.e;

        if (trigger === "clear") {
          setInnerValue([], {
            trigger: "tag-remove",
            e: e
          });
        }

        if (["tag-remove", "backspace"].includes(trigger)) {
          removeTag(index);
        }
      };

      var handleFocus = function handleFocus(value2, context2) {
        var _props2$onFocus;

        instance.emit("focus", {
          value: value2,
          e: context2 === null || context2 === void 0 ? void 0 : context2.e
        });
        (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 ? void 0 : _props2$onFocus.call(props2, {
          value: value2,
          e: context2 === null || context2 === void 0 ? void 0 : context2.e
        });
      };

      var handleBlur = function handleBlur(value2, context2) {
        var _props2$onBlur;

        instance.emit("blur", {
          value: value2,
          e: context2 === null || context2 === void 0 ? void 0 : context2.e
        });
        (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 ? void 0 : _props2$onBlur.call(props2, {
          value: value2,
          e: context2 === null || context2 === void 0 ? void 0 : context2.e
        });
      };

      var handleEnter = function handleEnter(value2, context2) {
        var _props2$onEnter;

        instance.emit("enter", {
          value: value2,
          e: context2 === null || context2 === void 0 ? void 0 : context2.e,
          inputValue: tInputValue.value
        });
        (_props2$onEnter = props2.onEnter) === null || _props2$onEnter === void 0 ? void 0 : _props2$onEnter.call(props2, {
          value: value2,
          e: context2 === null || context2 === void 0 ? void 0 : context2.e,
          inputValue: tInputValue.value.toString()
        });
        handleCreate();
      };

      var debounceSearch = debounce_1(function () {
        var _props2$onSearch;

        instance.emit("search", tInputValue.value);
        (_props2$onSearch = props2.onSearch) === null || _props2$onSearch === void 0 ? void 0 : _props2$onSearch.call(props2, tInputValue.value.toString());
      }, 300);

      var getOverlayElm = function getOverlayElm() {
        var r;

        try {
          var popupRefs = context.refs.selectInputRef.$refs.selectInputRef.$refs;
          r = popupRefs.overlay || popupRefs.component.$refs.overlay;
        } catch (e) {
          console.warn("TDesign Warn:", e);
        }

        return r;
      };

      var updateScrollTop = function updateScrollTop(content) {
        var _props2$scroll;

        if (((_props2$scroll = props2.scroll) === null || _props2$scroll === void 0 ? void 0 : _props2$scroll.type) === "virtual") return;
        var overlayEl = getOverlayElm();
        if (!overlayEl) return;
        var firstSelectedNode = overlayEl === null || overlayEl === void 0 ? void 0 : overlayEl.querySelector(".".concat(classPrefix.value, "-is-selected"));
        VueCompositionAPI.nextTick(function () {
          if (firstSelectedNode && content) {
            var _getComputedStyle = getComputedStyle(firstSelectedNode),
                paddingBottom = _getComputedStyle.paddingBottom;

            var _getComputedStyle2 = getComputedStyle(content),
                marginBottom = _getComputedStyle2.marginBottom;

            var elementBottomHeight = parseInt(paddingBottom, 10) + parseInt(marginBottom, 10);
            var updateValue = firstSelectedNode.offsetTop - content.offsetTop - (content.clientHeight - firstSelectedNode.clientHeight) + elementBottomHeight;
            content.scrollTop = updateValue;
          }
        });
      };

      var hoverIndex = VueCompositionAPI.ref(-1);

      var keydownEvent = function keydownEvent(e) {
        var optionsListLength = optionsList.value.length;

        var arrowDownOption = function arrowDownOption() {
          var count = 0;

          while (hoverIndex.value < optionsListLength) {
            var _optionsList$value$ho;

            if (!((_optionsList$value$ho = optionsList.value[hoverIndex.value]) !== null && _optionsList$value$ho !== void 0 && _optionsList$value$ho.disabled)) {
              break;
            }

            if (hoverIndex.value === optionsListLength - 1) {
              hoverIndex.value = 0;
            } else {
              hoverIndex.value += 1;
            }

            count += 1;
            if (count >= optionsListLength) break;
          }
        };

        var arrowUpOption = function arrowUpOption() {
          var count = 0;

          while (hoverIndex.value > -1) {
            var _optionsList$value$ho2;

            if (!((_optionsList$value$ho2 = optionsList.value[hoverIndex.value]) !== null && _optionsList$value$ho2 !== void 0 && _optionsList$value$ho2.disabled)) {
              break;
            }

            if (hoverIndex.value === 0) {
              hoverIndex.value = optionsListLength - 1;
            } else {
              hoverIndex.value -= 1;
            }

            count += 1;
            if (count >= optionsListLength) break;
          }
        };

        if (optionsListLength === 0) return;
        var preventKeys = ["ArrowDown", "ArrowUp", "Enter", "Escape", "Tab"];

        if (preventKeys.includes(e.code)) {
          e.preventDefault();
        }

        switch (e.code) {
          case "ArrowDown":
            if (hoverIndex.value === -1) {
              hoverIndex.value = 0;
              return;
            }

            if (hoverIndex.value < optionsListLength - 1) {
              hoverIndex.value += 1;
              arrowDownOption();
            } else {
              hoverIndex.value = 0;
              arrowDownOption();
            }

            break;

          case "ArrowUp":
            if (hoverIndex.value === -1) {
              hoverIndex.value = 0;
              return;
            }

            if (hoverIndex.value > 0) {
              hoverIndex.value -= 1;
              arrowUpOption();
            } else {
              hoverIndex.value = optionsListLength - 1;
              arrowUpOption();
            }

            break;

          case "Enter":
            if (hoverIndex.value === -1) return;

            if (!multiple.value) {
              setInnerValue(optionsList.value[hoverIndex.value].value, {
                e: e,
                trigger: "check"
              });
              setInnerPopupVisible(false, {
                e: e
              });
            } else {
              var _optionsList$value$ho3;

              if (hoverIndex.value === -1) return;
              var optionValue = (_optionsList$value$ho3 = optionsList.value[hoverIndex.value]) === null || _optionsList$value$ho3 === void 0 ? void 0 : _optionsList$value$ho3.value;
              if (!optionValue) return;
              var newValue = getNewMultipleValue(innerValue.value, optionValue);
              setInnerValue(newValue.value, {
                e: e,
                trigger: newValue.isCheck ? "check" : "uncheck"
              });
            }

            break;

          case "Escape":
          case "Tab":
            setInnerPopupVisible(false, {
              trigger: "keydown-esc",
              e: e
            });
            setTInputValue("");
            break;
        }
      };

      var checkValueInvalid = function checkValueInvalid() {
        if (!multiple.value && isArray_1(value.value)) {
          value.value = "";
        }

        if (multiple.value && !isArray_1(value.value)) {
          value.value = [];
        }
      };

      VueCompositionAPI.watch(value, function () {
        checkValueInvalid();
      }, {
        immediate: true
      });
      VueCompositionAPI.watch(innerPopupVisible, function (val) {
        val && document.addEventListener("keydown", keydownEvent);
        !val && document.removeEventListener("keydown", keydownEvent);
      }, {
        flush: "sync"
      });
      VueCompositionAPI.watch(innerPopupVisible, function (value2) {
        if (value2) {
          hoverIndex.value = -1;
        } else {
          tInputValue.value && setTInputValue("");
        }
      });
      VueCompositionAPI.provide("tSelect", {
        size: size,
        multiple: multiple,
        popupOpenTime: popupOpenTime,
        hoverIndex: hoverIndex,
        selectValue: innerValue,
        reserveKeyword: reserveKeyword,
        isReachMaxLimit: isReachMaxLimit,
        getOverlayElm: getOverlayElm,
        handleCreate: handleCreate,
        handleValueChange: setInnerValue,
        handlerInputChange: setTInputValue,
        handlePopupVisibleChange: setInnerPopupVisible
      });
      return {
        isFilterable: isFilterable,
        isDisabled: isDisabled,
        isLoading: isLoading,
        innerOptions: innerOptions,
        placeholderText: placeholderText,
        selectInputRef: selectInputRef,
        innerPopupVisible: innerPopupVisible,
        displayText: displayText,
        tInputValue: tInputValue,
        collapsedItemsParams: collapsedItemsParams,
        valueDisplayParams: valueDisplayParams,
        handleFocus: handleFocus,
        handleBlur: handleBlur,
        handleEnter: handleEnter,
        handleClear: handleClear,
        handleTagChange: handleTagChange,
        handleTInputValueChange: handleTInputValueChange,
        setInnerPopupVisible: setInnerPopupVisible,
        removeTag: removeTag,
        renderTNode: renderTNode,
        updateScrollTop: updateScrollTop,
        componentName: COMPONENT_NAME
      };
    },
    methods: {
      renderSuffixIcon: function renderSuffixIcon() {
        var h = this.$createElement;
        var isLoading = this.isLoading,
            showArrow = this.showArrow,
            innerPopupVisible = this.innerPopupVisible,
            isDisabled = this.isDisabled;

        if (isLoading) {
          return h("t-loading", {
            "class": ["".concat(this.componentName, "__right-icon"), "".concat(this.componentName, "__active-icon")],
            "attrs": {
              "size": "small"
            }
          });
        }

        return showArrow ? h("fake-arrow", {
          "attrs": {
            "overlayClassName": "".concat(this.componentName, "__right-icon"),
            "isActive": innerPopupVisible && !isDisabled
          }
        }) : null;
      }
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var renderTNode = this.renderTNode;

      var prefixIcon = function prefixIcon() {
        return renderTNode("prefixIcon");
      };

      var valueDisplay = function valueDisplay() {
        return renderTNode("valueDisplay", {
          params: _this.valueDisplayParams
        });
      };

      var collapsedItems = function collapsedItems() {
        return renderTNode("collapsedItems", {
          params: _this.collapsedItemsParams
        });
      };

      var _ref5 = this.popupProps || {},
          overlayClassName = _ref5.overlayClassName,
          restPopupProps = _objectWithoutProperties$2(_ref5, _excluded$2);

      return h("div", {
        "ref": "select",
        "class": "".concat(this.componentName, "__wrap")
      }, [h(SelectInput, helper([{
        "ref": "selectInputRef",
        "class": this.componentName,
        "attrs": {
          "autoWidth": this.autoWidth,
          "borderless": this.borderless || !this.bordered,
          "readonly": this.readonly,
          "allowInput": this.isFilterable,
          "multiple": this.multiple,
          "keys": this.keys,
          "status": this.status,
          "tips": this.tips,
          "value": this.displayText,
          "valueDisplay": valueDisplay,
          "clearable": this.clearable,
          "disabled": this.isDisabled,
          "label": prefixIcon,
          "suffixIcon": this.renderSuffixIcon,
          "placeholder": this.placeholderText,
          "inputValue": this.tInputValue,
          "inputProps": _objectSpread$1G({
            size: this.size
          }, this.inputProps),
          "tagInputProps": _objectSpread$1G({
            autoWidth: true
          }, this.tagInputProps),
          "tagProps": this.tagProps,
          "minCollapsedNum": this.minCollapsedNum,
          "collapsedItems": collapsedItems,
          "popupVisible": this.innerPopupVisible,
          "popupProps": _objectSpread$1G({
            overlayClassName: ["".concat(this.componentName, "__dropdown"), overlayClassName]
          }, restPopupProps)
        }
      }, {
        "on": {
          focus: this.handleFocus,
          blur: this.handleBlur,
          enter: this.handleEnter,
          clear: this.handleClear,
          "input-change": this.handleTInputValueChange,
          "popup-visible-change": this.setInnerPopupVisible,
          "tag-change": this.handleTagChange
        }
      }, {}, this.selectInputProps, {
        "attrs": {
          "updateScrollTop": this.updateScrollTop
        }
      }]), [h("select-panel", {
        "slot": "panel",
        "scopedSlots": this.$scopedSlots,
        "attrs": {
          "size": this.size,
          "options": this.innerOptions,
          "inputValue": this.tInputValue,
          "multiple": this.multiple,
          "empty": this.empty,
          "filter": this.filter,
          "filterable": this.isFilterable,
          "creatable": this.creatable,
          "scroll": this.scroll,
          "loading": this.isLoading,
          "loadingText": this.loadingText,
          "panelTopContent": this.panelTopContent,
          "panelBottomContent": this.panelBottomContent
        }
      })])]);
    }
  });

  var props$F = {
    divider: {
      type: Boolean,
      "default": true
    },
    label: {
      type: String,
      "default": ""
    }
  };

  function ownKeys$1G(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1F(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1G(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1G(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _OptionGroup = VueCompositionAPI.defineComponent({
    name: "TOptionGroup",
    props: _objectSpread$1F({}, props$F),
    setup: function setup(props2) {
      var _toRefs = VueCompositionAPI.toRefs(props2),
          divider = _toRefs.divider;

      var ulRef = VueCompositionAPI.ref(null);
      var tSelect = VueCompositionAPI.inject("tSelect");

      var _useCommonClassName = useCommonClassName(),
          sizeClassNames = _useCommonClassName.sizeClassNames;

      var COMPONENT_NAME = usePrefixClass$1("select");

      var _useConfig = useConfig("classPrefix"),
          classPrefix = _useConfig.classPrefix;

      var classes = VueCompositionAPI.computed(function () {
        var _ref;

        return ["".concat(COMPONENT_NAME.value, "-option-group"), (_ref = {}, _defineProperty$3(_ref, sizeClassNames[tSelect.size], tSelect && tSelect.size), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "-option-group__divider"), divider), _ref)];
      });
      return {
        classes: classes,
        ulRef: ulRef,
        classPrefix: classPrefix,
        componentName: COMPONENT_NAME
      };
    },
    render: function render() {
      var h = arguments[0];
      var renderTNode = useTNodeJSX();
      var children = renderTNode("default");
      return h("li", {
        "class": this.classes
      }, [h("div", {
        "class": "".concat(this.componentName, "-option-group__header")
      }, [this.label]), h("ul", {
        "class": "".concat(this.classPrefix, "-select__list"),
        "ref": "ulRef"
      }, [children])]);
    }
  });

  var Select = withInstall(mapProps(["value"], {
    model: {
      prop: "value",
      event: "change"
    }
  })(TSelect), VueCompositionAPI__default["default"]);
  var Option = withInstall(_Option, VueCompositionAPI__default["default"]);
  var OptionGroup = withInstall(_OptionGroup, VueCompositionAPI__default["default"]);

  var props$E = {
    append: {
      type: [String, Function]
    },
    prepend: {
      type: [String, Function]
    }
  };

  var classPrefixMixins$o = getClassPrefixMixins("input-adornment");
  var _InputAdornment = mixins(classPrefixMixins$o).extend({
    name: "TInputAdornment",
    props: props$E,
    methods: {
      renderAddon: function renderAddon(h, type, addon) {
        var addonNode;

        if (this.$scopedSlots[type]) {
          addonNode = this.$scopedSlots[type](null);
        } else if (typeof addon === "string") {
          addonNode = addon;
        } else if (typeof addon === "function") {
          addonNode = addon(h);
        } else {
          addonNode = null;
        }

        return addonNode ? h("span", {
          "class": "".concat(this.componentName, "__").concat(type)
        }, [addonNode]) : addonNode;
      }
    },
    render: function render(h) {
      var _ref;

      var prepend = this.renderAddon(h, "prepend", this.prepend);
      var append = this.renderAddon(h, "append", this.append);
      var defaultSlot = this.$scopedSlots["default"] ? this.$scopedSlots["default"](null) : [null];
      var className = [this.componentName, (_ref = {}, _defineProperty$3(_ref, "".concat(this.componentName, "--prepend"), prepend), _defineProperty$3(_ref, "".concat(this.componentName, "--append"), append), _ref)];

      if (!prepend && !append) {
        return defaultSlot[0];
      }

      return h("div", {
        "class": className
      }, [prepend, defaultSlot[0], append]);
    }
  });

  var InputAdornment = withInstall(_InputAdornment);

  var props$D = {
    current: {
      type: Number,
      "default": 1
    },
    defaultCurrent: {
      type: Number,
      "default": 1
    },
    disabled: Boolean,
    foldedMaxPageBtn: {
      type: Number,
      "default": 5
    },
    maxPageBtn: {
      type: Number,
      "default": 10
    },
    pageEllipsisMode: {
      type: String,
      "default": "mid",
      validator: function validator(val) {
        if (!val) return true;
        return ["mid", "both-ends"].includes(val);
      }
    },
    pageSize: {
      type: Number,
      "default": 10
    },
    defaultPageSize: {
      type: Number,
      "default": 10
    },
    pageSizeOptions: {
      type: Array,
      "default": function _default() {
        return [5, 10, 20, 50];
      }
    },
    showFirstAndLastPageBtn: Boolean,
    showJumper: Boolean,
    showPageNumber: {
      type: Boolean,
      "default": true
    },
    showPageSize: {
      type: Boolean,
      "default": true
    },
    showPreviousAndNextBtn: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "simple"].includes(val);
      }
    },
    total: {
      type: Number,
      "default": 0
    },
    totalContent: {
      type: [Boolean, Function],
      "default": true
    },
    onChange: Function,
    onCurrentChange: Function,
    onPageSizeChange: Function
  };

  function ownKeys$1F(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1E(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1F(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1F(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var min = 1;
  var PaginationBase = mixins(getConfigReceiverMixins("pagination"), getGlobalIconMixins()).extend({
    name: "TPagination",
    components: {
      TInputNumber: InputNumber,
      TInputAdornment: InputAdornment,
      TSelect: Select,
      TOption: Option
    },
    props: _objectSpread$1E(_objectSpread$1E({}, props$D), {}, {
      current: {
        type: Number,
        "default": 1,
        validator: function validator(v) {
          return v > 0;
        }
      },
      pageSize: {
        type: Number,
        "default": 10,
        validator: function validator(v) {
          return v > 0;
        }
      }
    }),
    data: function data() {
      return {
        prevMore: false,
        nextMore: false,
        jumpIndex: this.current
      };
    },
    watch: {
      current: function current(val) {
        this.jumpIndex = val;
      }
    },
    computed: {
      paginationClass: function paginationClass() {
        return ["".concat(this.componentName), this.commonSizeClassName[this.size], _defineProperty$3({}, this.commonStatusClassName.disabled, this.disabled)];
      },
      totalClass: function totalClass() {
        return ["".concat(this.componentName, "__total")];
      },
      sizerClass: function sizerClass() {
        return ["".concat(this.componentName, "__select")];
      },
      preBtnClass: function preBtnClass() {
        return ["".concat(this.componentName, "__btn"), "".concat(this.componentName, "__btn-prev"), _defineProperty$3({}, this.commonStatusClassName.disabled, this.disabled || this.current === 1)];
      },
      nextBtnClass: function nextBtnClass() {
        return ["".concat(this.componentName, "__btn"), "".concat(this.componentName, "__btn-next"), _defineProperty$3({}, this.commonStatusClassName.disabled, this.disabled || this.current === this.pageCount)];
      },
      btnWrapClass: function btnWrapClass() {
        return ["".concat(this.componentName, "__pager")];
      },
      btnMoreClass: function btnMoreClass() {
        return ["".concat(this.componentName, "__number"), "".concat(this.componentName, "__number--more"), _defineProperty$3({}, this.commonStatusClassName.disabled, this.disabled)];
      },
      jumperClass: function jumperClass() {
        return ["".concat(this.componentName, "__jump")];
      },
      jumperInputClass: function jumperInputClass() {
        return ["".concat(this.componentName, "__input")];
      },
      simpleClass: function simpleClass() {
        return ["".concat(this.componentName, "__select")];
      },
      pageCount: function pageCount() {
        var c = Math.ceil(this.total / this.pageSize);
        return c > 0 ? c : 1;
      },
      pageCountOption: function pageCountOption() {
        var ans = [];

        for (var i = 1; i <= this.pageCount; i++) {
          ans.push({
            value: i,
            label: "".concat(i, "/").concat(this.pageCount)
          });
        }

        return ans;
      },
      sizeOptions: function sizeOptions() {
        var _this = this;

        var options = this.pageSizeOptions.map(function (option) {
          return _typeof$1(option) === "object" ? option : {
            label: _this.t(_this.global.itemsPerPage, {
              size: option
            }),
            value: Number(option)
          };
        });
        return options.sort(function (a, b) {
          return a.value - b.value;
        });
      },
      curPageLeftCount: function curPageLeftCount() {
        return Math.ceil((this.foldedMaxPageBtn - 1) / 2);
      },
      curPageRightCount: function curPageRightCount() {
        return Math.ceil((this.foldedMaxPageBtn - 1) / 2);
      },
      isPrevMoreShow: function isPrevMoreShow() {
        return 2 + this.curPageLeftCount < this.current;
      },
      isNextMoreShow: function isNextMoreShow() {
        return this.pageCount - 1 - this.curPageRightCount > this.current;
      },
      pages: function pages() {
        var array = [];
        var start;
        var end;

        if (this.isFolded) {
          if (this.isPrevMoreShow && this.isNextMoreShow) {
            start = this.current - this.curPageLeftCount;
            end = this.current + this.curPageRightCount;
          } else {
            var foldedStart = this.isMidEllipsis ? 2 : 1;
            var foldedEnd = this.isMidEllipsis ? this.pageCount - 1 : this.pageCount;
            start = this.isPrevMoreShow ? this.pageCount - this.foldedMaxPageBtn + 1 : foldedStart;
            end = this.isPrevMoreShow ? foldedEnd : this.foldedMaxPageBtn;
          }
        } else {
          start = 1;
          end = this.pageCount;
        }

        for (var i = start; i <= end; i++) {
          array.push(i);
        }

        return array;
      },
      isFolded: function isFolded() {
        return this.pageCount > this.maxPageBtn;
      },
      isMidEllipsis: function isMidEllipsis() {
        return this.pageEllipsisMode === "mid";
      }
    },
    methods: {
      toPage: function toPage(pageIndex, isTriggerChange) {
        if (this.disabled) {
          return;
        }

        var current = pageIndex;

        if (pageIndex < min) {
          current = min;
        } else if (pageIndex > this.pageCount) {
          current = this.pageCount;
        }

        if (this.current !== current) {
          var prev = this.current;
          var pageInfo = {
            current: current,
            previous: prev,
            pageSize: this.pageSize
          };
          emitEvent(this, "current-change", current, pageInfo);

          if (isTriggerChange !== false) {
            emitEvent(this, "change", pageInfo);
          }
        }
      },
      prevPage: function prevPage() {
        this.toPage(this.current - 1);
      },
      nextPage: function nextPage() {
        this.toPage(this.current + 1);
      },
      prevMorePage: function prevMorePage() {
        this.toPage(this.current - this.foldedMaxPageBtn);
      },
      nextMorePage: function nextMorePage() {
        this.toPage(this.current + this.foldedMaxPageBtn);
      },
      getButtonClass: function getButtonClass(index) {
        var _ref5;

        return ["".concat(this.componentName, "__number"), (_ref5 = {}, _defineProperty$3(_ref5, this.commonStatusClassName.disabled, this.disabled), _defineProperty$3(_ref5, this.commonStatusClassName.current, this.current === index), _ref5)];
      },
      onSelectorChange: function onSelectorChange(e) {
        if (this.disabled) {
          return;
        }

        var pageSize = parseInt(e, 10);
        var pageCount = 1;

        if (pageSize > 0) {
          pageCount = Math.ceil(this.total / pageSize);
        }

        var isIndexChange = false;

        if (this.current > pageCount) {
          isIndexChange = true;
        }

        var pageInfo = {
          current: isIndexChange ? pageCount : this.current,
          previous: this.current,
          pageSize: pageSize
        };
        this.$emit("update:pageSize", pageSize, pageInfo);
        emitEvent(this, "page-size-change", pageSize, pageInfo);
        emitEvent(this, "change", pageInfo);

        if (isIndexChange) {
          this.toPage(pageCount, false);
        }
      },
      onJumperChange: function onJumperChange(val) {
        var currentIndex = Number(val);
        if (isNaN(currentIndex)) return;
        this.toPage(currentIndex);
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];

      var _this$useGlobalIcon = this.useGlobalIcon({
        PageFirstIcon: PageFirst,
        PageLastIcon: PageLast,
        ChevronLeftIcon: ChevronLeft,
        ChevronRightIcon: ChevronRight,
        ChevronLeftDoubleIcon: ChevronLeftDouble,
        ChevronRightDoubleIcon: ChevronRightDouble,
        EllipsisIcon: Ellipsis
      }),
          PageFirstIcon = _this$useGlobalIcon.PageFirstIcon,
          PageLastIcon = _this$useGlobalIcon.PageLastIcon,
          ChevronLeftIcon = _this$useGlobalIcon.ChevronLeftIcon,
          ChevronRightIcon = _this$useGlobalIcon.ChevronRightIcon,
          ChevronLeftDoubleIcon = _this$useGlobalIcon.ChevronLeftDoubleIcon,
          ChevronRightDoubleIcon = _this$useGlobalIcon.ChevronRightDoubleIcon,
          EllipsisIcon = _this$useGlobalIcon.EllipsisIcon;

      var Jumper = h("div", {
        "class": this.jumperClass
      }, [this.t(this.global.jumpTo), h("t-input-adornment", {
        "attrs": {
          "append": "/ ".concat(this.pageCount, " ").concat(this.t(this.global.page))
        }
      }, [h("t-input-number", {
        "class": this.jumperInputClass,
        "on": {
          "blur": this.onJumperChange,
          "enter": this.onJumperChange
        },
        "attrs": {
          "max": this.pageCount,
          "min": min,
          "size": this.size,
          "theme": "normal",
          "placeholder": ""
        },
        "model": {
          value: _this2.jumpIndex,
          callback: function callback($$v) {
            _this2.jumpIndex = $$v;
          }
        }
      })])]);
      return h("div", {
        "class": this.paginationClass
      }, [renderTNodeJSX(this, "totalContent", h("div", {
        "class": this.totalClass
      }, [this.t(this.global.total, {
        total: this.total
      })])), this.showPageSize && this.pageSizeOptions.length ? h("t-select", {
        "attrs": {
          "size": this.size,
          "value": this.pageSize,
          "disabled": this.disabled,
          "autoWidth": true
        },
        "class": this.sizerClass,
        "on": {
          "change": this.onSelectorChange
        }
      }, [this.sizeOptions.map(function (item, index) {
        return h("t-option", {
          "attrs": {
            "value": item.value,
            "label": item.label
          },
          "key": index
        });
      })]) : null, this.showFirstAndLastPageBtn ? h("div", {
        "class": this.preBtnClass,
        "on": {
          "click": function click() {
            return _this2.toPage(1);
          }
        },
        "attrs": {
          "disabled": this.disabled || this.current === min
        }
      }, [h(PageFirstIcon)]) : null, this.showPreviousAndNextBtn ? h("div", {
        "class": this.preBtnClass,
        "on": {
          "click": this.prevPage
        },
        "attrs": {
          "disabled": this.disabled || this.current === min
        }
      }, [h(ChevronLeftIcon)]) : null, this.showPageNumber && this.theme === "default" ? h("ul", {
        "class": this.btnWrapClass
      }, [this.isFolded && this.isMidEllipsis ? h("li", {
        "class": this.getButtonClass(1),
        "on": {
          "click": function click() {
            return _this2.toPage(min);
          }
        }
      }, [min]) : null, this.isFolded && this.isPrevMoreShow && this.isMidEllipsis ? h("li", {
        "class": this.btnMoreClass,
        "on": {
          "click": this.prevMorePage,
          "mouseover": function mouseover() {
            return _this2.prevMore = true;
          },
          "mouseout": function mouseout() {
            return _this2.prevMore = false;
          }
        }
      }, [this.prevMore ? h(ChevronLeftDoubleIcon) : h(EllipsisIcon)]) : null, this.pages.map(function (i) {
        return h("li", {
          "class": _this2.getButtonClass(i),
          "key": i,
          "on": {
            "click": function click() {
              return _this2.toPage(i);
            }
          }
        }, [i]);
      }), this.isFolded && this.isNextMoreShow && this.isMidEllipsis ? h("li", {
        "class": this.btnMoreClass,
        "on": {
          "click": this.nextMorePage,
          "mouseover": function mouseover() {
            return _this2.nextMore = true;
          },
          "mouseout": function mouseout() {
            return _this2.nextMore = false;
          }
        }
      }, [this.nextMore ? h(ChevronRightDoubleIcon) : h(EllipsisIcon)]) : null, this.isFolded && this.isMidEllipsis ? h("li", {
        "class": this.getButtonClass(this.pageCount),
        "on": {
          "click": function click() {
            return _this2.toPage(_this2.pageCount);
          }
        }
      }, [this.pageCount]) : null]) : null, this.theme === "simple" && Jumper, this.showPreviousAndNextBtn ? h("div", {
        "class": this.nextBtnClass,
        "on": {
          "click": this.nextPage
        },
        "attrs": {
          "disabled": this.disabled || this.current === this.pageCount
        }
      }, [h(ChevronRightIcon)]) : null, this.showFirstAndLastPageBtn ? h("div", {
        "class": this.nextBtnClass,
        "on": {
          "click": function click() {
            return _this2.toPage(_this2.pageCount);
          }
        },
        "attrs": {
          "disabled": this.disabled || this.current === this.pageCount
        }
      }, [h(PageLastIcon)]) : null, this.theme === "default" && this.showJumper && Jumper]);
    }
  });

  var Pagination = withInstall(mapProps(["current", "pageSize"], {
    model: {
      prop: "current",
      event: "current-change"
    }
  })(PaginationBase));

  var props$C = {
    current: {
      type: [String, Number]
    },
    defaultCurrent: {
      type: [String, Number]
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["horizontal", "vertical"].includes(val);
      }
    },
    options: {
      type: Array
    },
    readonly: Boolean,
    separator: {
      type: String,
      "default": "line",
      validator: function validator(val) {
        if (!val) return true;
        return ["line", "dashed", "arrow"].includes(val);
      }
    },
    sequence: {
      type: String,
      "default": "positive",
      validator: function validator(val) {
        if (!val) return true;
        return ["positive", "reverse"].includes(val);
      }
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "dot"].includes(val);
      }
    },
    onChange: Function
  };

  var props$B = {
    content: {
      type: [String, Function],
      "default": ""
    },
    "default": {
      type: [String, Function]
    },
    extra: {
      type: [String, Function]
    },
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    status: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "process", "finish", "error"].includes(val);
      }
    },
    title: {
      type: [String, Function],
      "default": ""
    },
    value: {
      type: [String, Number]
    }
  };

  function ownKeys$1E(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1D(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1E(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1E(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _StepItem = mixins(getConfigReceiverMixins("steps"), getGlobalIconMixins()).extend({
    name: "TStepItem",
    props: _objectSpread$1D(_objectSpread$1D({}, props$B), {}, {
      index: Number
    }),
    inject: {
      steps: {
        "default": void 0
      }
    },
    computed: {
      current: function current() {
        return this.steps && this.steps.current;
      },
      baseClass: function baseClass() {
        return ["".concat(this.componentName, "-item"), _defineProperty$3({}, "".concat(this.componentName, "-item--").concat(this.status), this.status)];
      },
      iconClass: function iconClass() {
        return ["".concat(this.componentName, "-item__icon"), _defineProperty$3({}, "".concat(this.componentName, "-item--").concat(this.status), this.status)];
      },
      canClick: function canClick() {
        var _this$steps;

        return this.status !== "process" && !((_this$steps = this.steps) !== null && _this$steps !== void 0 && _this$steps.readonly);
      }
    },
    methods: {
      renderIcon: function renderIcon() {
        var h = this.$createElement;
        var defaultIcon;

        if (this.steps.theme === "default") {
          var icon = "";

          var _this$useGlobalIcon = this.useGlobalIcon({
            CheckIcon: Check,
            CloseIcon: Close
          }),
              CheckIcon = _this$useGlobalIcon.CheckIcon,
              CloseIcon = _this$useGlobalIcon.CloseIcon;

          switch (this.status) {
            case "finish":
              icon = h(CheckIcon);
              break;

            case "error":
              if (isFunction_1(this.global.errorIcon)) {
                icon = this.global.errorIcon(this.$createElement);
              } else {
                icon = h(CloseIcon);
              }

              break;

            default:
              icon = String(this.index + 1);
              break;
          }

          defaultIcon = h("span", {
            "class": "".concat(this.componentName, "-item__icon--number")
          }, [icon]);
        }

        return renderTNodeJSX(this, "icon", defaultIcon);
      },
      onStepClick: function onStepClick(e) {
        if (!this.canClick) return;
        var val = this.value === void 0 ? this.index : this.value;
        this.steps.handleChange(val, this.current, e);
      }
    },
    render: function render() {
      var h = arguments[0];
      var content = renderContent(this, "default", "content");
      return h("div", {
        "class": this.baseClass
      }, [h("div", {
        "class": "".concat(this.componentName, "-item__inner ").concat(this.canClick ? "".concat(this.componentName, "-item--clickable") : ""),
        "on": {
          "click": this.onStepClick
        }
      }, [h("div", {
        "class": this.iconClass
      }, [this.renderIcon()]), h("div", {
        "class": "".concat(this.componentName, "-item__content")
      }, [h("div", {
        "class": "".concat(this.componentName, "-item__title")
      }, [renderTNodeJSX(this, "title")]), h("div", {
        "class": "".concat(this.componentName, "-item__description")
      }, [content]), h("div", {
        "class": "".concat(this.componentName, "-item__extra")
      }, [renderTNodeJSX(this, "extra")])])])]);
    }
  });

  function ownKeys$1D(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1C(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1D(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1D(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Steps = mixins(getConfigReceiverMixins("steps")).extend({
    name: "TSteps",
    components: {
      TStepItem: _StepItem
    },
    props: _objectSpread$1C({}, props$C),
    data: function data() {
      return {
        indexMap: {}
      };
    },
    provide: function provide() {
      return {
        steps: this
      };
    },
    watch: {
      options: {
        immediate: true,
        handler: function handler() {
          var _this = this;

          if (!this.options) return;
          this.options.forEach(function (item, index) {
            if (item.value !== void 0) {
              _this.indexMap[item.value] = index;
            }
          });
        }
      }
    },
    computed: {
      baseClass: function baseClass() {
        return [this.componentName, "".concat(this.componentName, "--").concat(this.layout), "".concat(this.componentName, "--").concat(this.sequence), "".concat(this.componentName, "--").concat(this.handleTheme(), "-anchor"), "".concat(this.componentName, "--").concat(this.separator, "-separator")];
      }
    },
    render: function render() {
      var _this$$scopedSlots,
          _this2 = this;

      var h = arguments[0];
      var nodes = ((_this$$scopedSlots = this.$scopedSlots) === null || _this$$scopedSlots === void 0 ? void 0 : _this$$scopedSlots["default"]) && this.$scopedSlots["default"](null);
      var options = this.getOptions();
      var content = options.map(function (item, index) {
        var stepIndex = _this2.sequence === "reverse" ? options.length - index - 1 : index;

        var propsData = _objectSpread$1C(_objectSpread$1C({}, item), {}, {
          index: stepIndex,
          status: _this2.handleStatus(item, index)
        });

        var stepItem = h("t-step-item", helper([{}, {
          "props": _objectSpread$1C(_objectSpread$1C({}, item), {}, {
            index: stepIndex,
            status: _this2.handleStatus(item, index)
          })
        }, {
          "key": item.value || index
        }]));

        if (nodes && nodes[index]) {
          var vnode = nodes[index];

          if (vnode.componentOptions) {
            vnode.componentOptions.propsData = propsData;
            return vnode;
          }

          return stepItem;
        }

        return stepItem;
      });
      return h("div", {
        "class": this.baseClass
      }, [content]);
    },
    methods: {
      getOptions: function getOptions() {
        var _this$$scopedSlots2;

        var nodes = ((_this$$scopedSlots2 = this.$scopedSlots) === null || _this$$scopedSlots2 === void 0 ? void 0 : _this$$scopedSlots2["default"]) && this.$scopedSlots["default"](null);
        var options;

        if (this.options && this.options.length) {
          options = this.sequence === "reverse" ? this.options.reverse() : this.options;
        } else {
          options = this.getOptionListBySlots(nodes);
        }

        return options;
      },
      getOptionListBySlots: function getOptionListBySlots(nodes) {
        var _this3 = this;

        var arr = [];
        nodes === null || nodes === void 0 ? void 0 : nodes.forEach(function (node) {
          var _node$componentOption;

          var option = node === null || node === void 0 ? void 0 : (_node$componentOption = node.componentOptions) === null || _node$componentOption === void 0 ? void 0 : _node$componentOption.propsData;
          if (!option) return;
          _this3.sequence === "reverse" ? arr.unshift(option) : arr.push(option);
        });
        return arr;
      },
      handleTheme: function handleTheme() {
        var theme = this.theme;
        var options = this.getOptions();
        options.forEach(function (item) {
          if ((item === null || item === void 0 ? void 0 : item.icon) !== void 0) {
            theme = "default";
          }
        });
        return theme;
      },
      handleStatus: function handleStatus(item, index) {
        if (item.status && item.status !== "default") return item.status;
        if (this.current === "FINISH") return "finish";

        if (item.value === void 0) {
          if (this.sequence === "positive" && index < this.current) return "finish";
          if (this.sequence === "reverse" && index > this.current) return "finish";
        }

        if (item.value !== void 0) {
          var matchIndex = this.indexMap[this.current];

          if (matchIndex === void 0) {
            console.warn("TDesign Steps Warn: The current `value` is not exist.");
            return "default";
          }

          if (this.sequence === "positive" && index < matchIndex) return "finish";
          if (this.sequence === "reverse" && index > matchIndex) return "finish";
        }

        var key = item.value === void 0 ? index : item.value;
        if (key === this.current) return "process";
        return "default";
      },
      handleChange: function handleChange(cur, prev, e) {
        emitEvent(this, "change", cur, prev, {
          e: e
        });
      }
    }
  });

  var StepItem = withInstall(_StepItem);
  var Steps = withInstall(mapProps(["current"], {
    model: {
      prop: "current",
      event: "change"
    }
  })(_Steps));

  function getSingleContent(cascaderContext) {
    var value = cascaderContext.value,
        multiple = cascaderContext.multiple,
        treeStore = cascaderContext.treeStore,
        showAllLevels = cascaderContext.showAllLevels;
    if (multiple || !value) return "";
    if (Array.isArray(value)) return "";
    var node = treeStore && treeStore.getNodes(value);

    if (!(node && node.length)) {
      return value;
    }

    var path = node && node[0].getPath();

    if (path && path.length) {
      return showAllLevels ? path.map(function (node2) {
        return node2.label;
      }).join(" / ") : path[path.length - 1].label;
    }

    return value;
  }
  function getMultipleContent(cascaderContext) {
    var value = cascaderContext.value,
        multiple = cascaderContext.multiple,
        treeStore = cascaderContext.treeStore,
        showAllLevels = cascaderContext.showAllLevels;
    if (!multiple) return [];
    if (multiple && !Array.isArray(value)) return [];
    var node = treeStore && treeStore.getNodes(value);
    if (!node) return [];
    return value.map(function (item) {
      var node2 = treeStore.getNodes(item);
      return showAllLevels ? getFullPathLabel(node2[0]) : node2[0].label;
    });
  }
  function getPanels(treeNodes) {
    var panels = [];
    treeNodes.forEach(function (node) {
      if (panels[node.level]) {
        panels[node.level].push(node);
      } else {
        panels[node.level] = [node];
      }
    });
    return panels;
  }
  function getFullPathLabel(node) {
    var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "/";
    return node.getPath().map(function (node2) {
      return node2.label;
    }).join(separator);
  }
  var getTreeValue = function getTreeValue(value) {
    var treeValue = [];

    if (Array.isArray(value)) {
      if (value.length > 0 && _typeof$1(value[0]) === "object") {
        treeValue = value.map(function (val) {
          return val.value;
        });
      } else if (value.length) {
        treeValue = value;
      }
    } else if (value) {
      if (_typeof$1(value) === "object") {
        treeValue = [value.value];
      } else {
        treeValue = [value];
      }
    }

    return treeValue;
  };
  var getCascaderValue = function getCascaderValue(value, valueType, multiple) {
    if (valueType === "single") {
      return value;
    }

    if (multiple) {
      return value.map(function (item) {
        return item[item.length - 1];
      });
    }

    return value[value.length - 1];
  };
  function isEmptyValues(value) {
    if (typeof value === "number" && !isNaN(value)) return false;
    return isEmpty_1(value);
  }
  function isValueInvalid(value, cascaderContext) {
    var multiple = cascaderContext.multiple,
        showAllLevels = cascaderContext.showAllLevels;
    return multiple && !Array.isArray(value) || !multiple && Array.isArray(value) && !showAllLevels;
  }

  function getFakeArrowIconClass(prefix, STATUS, cascaderContext) {
    var disabled = cascaderContext.disabled;
    return ["".concat(prefix, "-cascader__icon"), _defineProperty$3({}, STATUS.disabled, disabled)];
  }
  function getNodeStatusClass(node, STATUS, cascaderContext) {
    var _ref2;

    var checkStrictly = cascaderContext.checkStrictly,
        multiple = cascaderContext.multiple,
        value = cascaderContext.value,
        max = cascaderContext.max;
    var expandedActive = !checkStrictly && node.expanded && (multiple ? !node.isLeaf() : true) || checkStrictly && node.expanded;
    var isLeaf = node.isLeaf();
    var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
    var isSelected = node.checked || multiple && !checkStrictly && node.expanded && !isLeaf;
    return [(_ref2 = {}, _defineProperty$3(_ref2, STATUS.selected, !isDisabled && isSelected), _defineProperty$3(_ref2, STATUS.expanded, !isDisabled && expandedActive), _defineProperty$3(_ref2, STATUS.disabled, isDisabled), _ref2)];
  }
  function getCascaderItemClass(prefix, node, SIZE, STATUS, cascaderContext) {
    var _ref3;

    var size = cascaderContext.size;
    return ["".concat(prefix, "-cascader__item")].concat(_toConsumableArray(getNodeStatusClass(node, STATUS, cascaderContext)), [SIZE[size], (_ref3 = {}, _defineProperty$3(_ref3, "".concat(prefix, "-cascader__item--with-icon"), !!node.children), _defineProperty$3(_ref3, "".concat(prefix, "-cascader__item--leaf"), node.isLeaf()), _ref3)]);
  }
  function getCascaderItemIconClass(prefix, node, STATUS, cascaderContext) {
    return ["".concat(prefix, "-cascader__item-icon"), "".concat(prefix, "-icon")].concat(_toConsumableArray(getNodeStatusClass(node, STATUS, cascaderContext)));
  }

  function ownKeys$1C(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1B(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1C(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1C(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var keepAnimationMixins$2 = getKeepAnimationMixins();
  var props$A = {
    node: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    cascaderContext: {
      type: Object
    },
    onChange: Function,
    onClick: Function,
    onMouseenter: Function
  };
  var Item = VueCompositionAPI.defineComponent({
    mixins: [keepAnimationMixins$2],
    directives: {
      Ripple: Ripple
    },
    props: _objectSpread$1B({}, props$A),
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("cascader__item");
      var classPrefix = usePrefixClass();

      var _useCommonClassName = useCommonClassName$1(),
          STATUS = _useCommonClassName.STATUS,
          SIZE = _useCommonClassName.SIZE;

      var _useGlobalIcon = useGlobalIcon({
        ChevronRightIcon: ChevronRight
      }),
          ChevronRightIcon = _useGlobalIcon.ChevronRightIcon;

      var itemClass = VueCompositionAPI.computed(function () {
        return getCascaderItemClass(classPrefix.value, props2.node, SIZE.value, STATUS.value, props2.cascaderContext);
      });
      var iconClass = VueCompositionAPI.computed(function () {
        return getCascaderItemIconClass(classPrefix.value, props2.node, STATUS.value, props2.cascaderContext);
      });
      return {
        COMPONENT_NAME: COMPONENT_NAME,
        ChevronRightIcon: ChevronRightIcon,
        iconClass: iconClass,
        itemClass: itemClass
      };
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var iconClass = this.iconClass,
          cascaderContext = this.cascaderContext,
          itemClass = this.itemClass,
          node = this.node,
          COMPONENT_NAME = this.COMPONENT_NAME,
          onChange = this.onChange,
          ChevronRightIcon = this.ChevronRightIcon;

      function RenderLabelInner(node2, cascaderContext2) {
        var inputVal = cascaderContext2.inputVal;
        var labelText = inputVal ? getFullPathLabel(node2) : node2.label;

        if (inputVal) {
          var texts = labelText.split(inputVal);
          var doms = [];

          for (var index = 0; index < texts.length; index++) {
            doms.push(h("span", {
              "key": index
            }, [texts[index]]));
            if (index === texts.length - 1) break;
            doms.push(h("span", {
              "key": "".concat(index, "filter"),
              "class": "".concat(COMPONENT_NAME, "-label--filter")
            }, [inputVal]));
          }

          return doms;
        }

        return labelText;
      }

      function RenderLabelContent(node2, cascaderContext2) {
        var label = RenderLabelInner(node2, cascaderContext2);
        var labelCont = h("span", {
          "attrs": {
            "title": cascaderContext2.inputVal ? getFullPathLabel(node2) : node2.label,
            "role": "label"
          },
          "class": ["".concat(COMPONENT_NAME, "-label"), "".concat(COMPONENT_NAME, "-label--ellipsis")]
        }, [label]);
        return labelCont;
      }

      function RenderCheckBox(node2, cascaderContext2) {
        var checkProps = cascaderContext2.checkProps,
            value = cascaderContext2.value,
            max = cascaderContext2.max,
            inputVal = cascaderContext2.inputVal;
        var label = RenderLabelInner(node2, cascaderContext2);
        return h(Checkbox, helper([{
          "attrs": {
            "checked": node2.checked,
            "indeterminate": node2.indeterminate,
            "disabled": node2.isDisabled() || value.length >= max && max !== 0,
            "name": node2.value,
            "title": inputVal ? getFullPathLabel(node2) : node2.label
          },
          "on": {
            "change": function change(vale, _ref) {
              var e = _ref.e;
              e.stopPropagation();
              onChange();
            }
          }
        }, checkProps]), [label]);
      }

      return h("li", {
        "class": itemClass,
        "on": {
          "click": function click(e) {
            e.stopPropagation();

            _this.onClick();
          },
          "mouseenter": function mouseenter(e) {
            e.stopPropagation();

            _this.onMouseenter();
          }
        }
      }, [cascaderContext.multiple ? RenderCheckBox(node, cascaderContext) : RenderLabelContent(node, cascaderContext), node.children && (node.loading ? h(Loading, {
        "class": iconClass,
        "attrs": {
          "size": "small"
        }
      }) : h(ChevronRightIcon, {
        "class": iconClass
      }))]);
    }
  });

  var props$z = {
    checkProps: {
      type: Object
    },
    checkStrictly: Boolean,
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    disabled: Boolean,
    empty: {
      type: [String, Function]
    },
    filter: {
      type: Function
    },
    filterable: Boolean,
    inputProps: {
      type: Object
    },
    keys: {
      type: Object
    },
    lazy: {
      type: Boolean,
      "default": true
    },
    load: {
      type: Function
    },
    loading: Boolean,
    loadingText: {
      type: [String, Function],
      "default": ""
    },
    max: {
      type: Number,
      "default": 0
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    options: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    popupVisible: {
      type: Boolean,
      "default": void 0
    },
    readonly: Boolean,
    selectInputProps: {
      type: Object
    },
    showAllLevels: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["large", "medium", "small"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    tagInputProps: {
      type: Object
    },
    tagProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    trigger: {
      type: String,
      "default": "click",
      validator: function validator(val) {
        if (!val) return true;
        return ["click", "hover"].includes(val);
      }
    },
    value: {
      type: [String, Number, Array],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Array],
      "default": function _default() {
        return [];
      }
    },
    valueMode: {
      type: String,
      "default": "onlyLeaf",
      validator: function validator(val) {
        if (!val) return true;
        return ["onlyLeaf", "parentFirst", "all"].includes(val);
      }
    },
    valueType: {
      type: String,
      "default": "single",
      validator: function validator(val) {
        if (!val) return true;
        return ["single", "full"].includes(val);
      }
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onPopupVisibleChange: Function,
    onRemove: Function
  };

  function expendClickEffect(propsTrigger, trigger, node, cascaderContext) {
    var checkStrictly = cascaderContext.checkStrictly,
        multiple = cascaderContext.multiple,
        treeStore = cascaderContext.treeStore,
        setVisible = cascaderContext.setVisible,
        setValue = cascaderContext.setValue,
        setTreeNodes = cascaderContext.setTreeNodes,
        setExpend = cascaderContext.setExpend,
        value = cascaderContext.value,
        max = cascaderContext.max,
        valueType = cascaderContext.valueType;
    var isDisabled = node.disabled || multiple && value.length >= max && max !== 0;
    if (isDisabled) return;

    if (propsTrigger === trigger && !node.isLeaf()) {
      var expanded = node.setExpanded(true);
      treeStore.refreshNodes();
      treeStore.replaceExpanded(expanded);
      var nodes = treeStore.getNodes().filter(function (node2) {
        return node2.visible;
      });
      setTreeNodes(nodes);

      if (multiple) {
        setExpend(expanded);
      }
    }

    if (!multiple && (node.isLeaf() || checkStrictly) && trigger === "click") {
      treeStore.resetChecked();
      var checked = node.setChecked(!node.checked);

      var _checked = _slicedToArray(checked, 1),
          value2 = _checked[0];

      setValue(valueType === "single" ? value2 : node.getPath().map(function (item) {
        return item.value;
      }), "check", node.getModel());

      if (!checkStrictly) {
        setVisible(false, {});
      }
    }
  }
  function valueChangeEffect(node, cascaderContext) {
    var disabled = cascaderContext.disabled,
        max = cascaderContext.max,
        inputVal = cascaderContext.inputVal,
        multiple = cascaderContext.multiple,
        setVisible = cascaderContext.setVisible,
        setValue = cascaderContext.setValue,
        treeNodes = cascaderContext.treeNodes,
        treeStore = cascaderContext.treeStore,
        valueType = cascaderContext.valueType;

    if (!node || disabled || node.disabled) {
      return;
    }

    var checked = node.setChecked(!node.isChecked());

    if (isNumber_1(max) && max < 0) {
      console.warn("TDesign Warn:", "max should > 0");
    }

    if (checked.length > max && isNumber_1(max) && max > 0) {
      return;
    }

    if (checked.length === 0) {
      var expanded = treeStore.getExpanded();
      setTimeout(function () {
        treeStore.replaceExpanded(expanded);
        treeStore.refreshNodes();
      }, 0);
    }

    if (!multiple) {
      setVisible(false, {});
    }

    var isSelectAll = treeNodes.every(function (item) {
      return checked.indexOf(item.value) > -1;
    });

    if (inputVal && isSelectAll) {
      setVisible(false, {});
    }

    var resValue = valueType === "single" ? checked : checked.map(function (val) {
      return treeStore.getNode(val).getPath().map(function (item) {
        return item.value;
      });
    });
    setValue(resValue, "check", node.getModel());
  }
  function closeIconClickEffect(cascaderContext) {
    var setVisible = cascaderContext.setVisible,
        multiple = cascaderContext.multiple,
        setExpend = cascaderContext.setExpend,
        setValue = cascaderContext.setValue;
    setVisible(false, {});

    if (multiple) {
      setExpend([]);
    }

    setValue(multiple ? [] : "", "clear");
  }
  function handleRemoveTagEffect(cascaderContext, index, onRemove) {
    var disabled = cascaderContext.disabled,
        setValue = cascaderContext.setValue,
        value = cascaderContext.value,
        valueType = cascaderContext.valueType,
        treeStore = cascaderContext.treeStore;
    if (disabled) return;
    var newValue = cloneDeep_1(value);
    var res = newValue.splice(index, 1);
    var node = treeStore.getNodes(res[0])[0];
    setValue(newValue, "uncheck", node.getModel());
    var checked = node.setChecked(!node.isChecked());
    var resValue = valueType === "single" ? checked : checked.map(function (val) {
      return treeStore.getNode(val).getPath().map(function (item) {
        return item.value;
      });
    });
    setValue(resValue, "uncheck", node.getModel());

    if (isFunction_1(onRemove)) {
      onRemove({
        value: checked,
        node: node
      });
    }
  }
  var treeNodesEffect = function treeNodesEffect(inputVal, treeStore, setTreeNodes, filter) {
    if (!treeStore) return;
    var nodes = [];

    if (inputVal) {
      var filterMethods = function filterMethods(node) {
        if (!node.isLeaf()) return;

        if (isFunction_1(filter)) {
          return filter("".concat(inputVal), node);
        }

        var fullPathLabel = getFullPathLabel(node, "");
        return fullPathLabel.indexOf("".concat(inputVal)) > -1;
      };

      nodes = treeStore.nodes.filter(filterMethods);
    } else {
      nodes = treeStore.getNodes().filter(function (node) {
        return node.visible;
      });
    }

    setTreeNodes(nodes);
  };
  var treeStoreExpendEffect = function treeStoreExpendEffect(treeStore, value, expend) {
    var treeValue = getTreeValue(value);
    if (!treeStore) return;

    if (Array.isArray(treeValue) && expend.length === 0) {
      var expandedMap = /* @__PURE__ */new Map();

      var _treeValue = _slicedToArray(treeValue, 1),
          val = _treeValue[0];

      if (val) {
        expandedMap.set(val, true);
        var node = treeStore.getNode(val);

        if (!node) {
          treeStore.refreshNodes();
          return;
        }

        node.getParents().forEach(function (tn) {
          expandedMap.set(tn.value, true);
        });
        var expandedArr = Array.from(expandedMap.keys());
        treeStore.replaceExpanded(expandedArr);
      } else {
        treeStore.resetExpanded();
      }
    }

    if (treeStore.getExpanded() && expend.length) {
      treeStore.replaceExpanded(expend);
    }

    treeStore.refreshNodes();
  };

  function ownKeys$1B(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1A(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1B(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1B(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Panel = VueCompositionAPI.defineComponent({
    name: "TCascaderSubPanel",
    props: {
      empty: props$z.empty,
      trigger: props$z.trigger,
      onChange: props$z.onChange,
      cascaderContext: {
        type: Object
      }
    },
    setup: function setup(props) {
      var renderTNodeJSXDefault = useTNodeDefault();
      var COMPONENT_NAME = usePrefixClass("cascader");

      var _useConfig = useConfig("cascader"),
          global = _useConfig.global;

      var panels = VueCompositionAPI.computed(function () {
        return getPanels(props.cascaderContext.treeNodes);
      });

      var handleExpand = function handleExpand(node, trigger) {
        var propsTrigger = props.trigger,
            cascaderContext = props.cascaderContext;
        expendClickEffect(propsTrigger, trigger, node, cascaderContext);
      };

      return {
        global: global,
        panels: panels,
        handleExpand: handleExpand,
        renderTNodeJSXDefault: renderTNodeJSXDefault,
        COMPONENT_NAME: COMPONENT_NAME
      };
    },
    render: function render() {
      var h = arguments[0];
      var global = this.global,
          COMPONENT_NAME = this.COMPONENT_NAME,
          handleExpand = this.handleExpand,
          renderTNodeJSXDefault = this.renderTNodeJSXDefault,
          cascaderContext = this.cascaderContext,
          panels = this.panels;

      var renderItem = function renderItem(node) {
        return h(Item, {
          "key": node.value,
          "attrs": {
            "node": node,
            "cascaderContext": cascaderContext
          },
          "props": _objectSpread$1A({}, {
            node: node,
            cascaderContext: cascaderContext,
            onClick: function onClick() {
              handleExpand(node, "click");
            },
            onMouseenter: function onMouseenter() {
              handleExpand(node, "hover");
            },
            onChange: function onChange() {
              valueChangeEffect(node, cascaderContext);
            }
          })
        });
      };

      var renderList = function renderList(treeNodes) {
        var _ref;

        var isFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var segment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "1";
        return h("ul", {
          "class": ["".concat(COMPONENT_NAME, "__menu"), "narrow-scrollbar", (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME, "__menu--segment"), segment), _defineProperty$3(_ref, "".concat(COMPONENT_NAME, "__menu--filter"), isFilter), _ref)],
          "key": key
        }, [treeNodes.map(function (node) {
          return renderItem(node);
        })]);
      };

      var renderPanels = function renderPanels() {
        var inputVal = cascaderContext.inputVal,
            treeNodes = cascaderContext.treeNodes;
        return inputVal ? renderList(treeNodes, true) : panels.map(function (treeNodes2, index) {
          return renderList(treeNodes2, false, index !== panels.length - 1, "".concat(COMPONENT_NAME, "__menu").concat(index));
        });
      };

      return h("div", {
        "class": ["".concat(COMPONENT_NAME, "__panel"), _defineProperty$3({}, "".concat(COMPONENT_NAME, "--normal"), panels.length)]
      }, [panels.length ? renderPanels() : renderTNodeJSXDefault("empty", h("div", {
        "class": "".concat(COMPONENT_NAME, "__panel--empty")
      }, [global.empty]))]);
    }
  });

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }

    return false;
  }

  var _arraySome = arraySome;

  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$5 = 1,
      COMPARE_UNORDERED_FLAG$3 = 2;
  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */

  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    } // Check that cyclic values are equal.


    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);

    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }

    var index = -1,
        result = true,
        seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new _SetCache() : undefined;
    stack.set(array, other);
    stack.set(other, array); // Ignore non-index properties.

    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }

      if (compared !== undefined) {
        if (compared) {
          continue;
        }

        result = false;
        break;
      } // Recursively compare arrays (susceptible to call stack limits).


      if (seen) {
        if (!_arraySome(other, function (othValue, othIndex) {
          if (!_cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }

    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  var _equalArrays = equalArrays;

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);
    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  var _mapToArray = mapToArray;

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);
    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  var _setToArray = setToArray;

  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$4 = 1,
      COMPARE_UNORDERED_FLAG$2 = 2;
  /** `Object#toString` result references. */

  var boolTag$1 = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag$1 = '[object Error]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';
  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]';
  /** Used to convert symbols to primitives and strings. */

  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */

  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }

        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {
          return false;
        }

        return true;

      case boolTag$1:
      case dateTag:
      case numberTag:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq_1(+object, +other);

      case errorTag$1:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == other + '';

      case mapTag:
        var convert = _mapToArray;

      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
        convert || (convert = _setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        } // Assume cyclic values are equal.


        var stacked = stack.get(object);

        if (stacked) {
          return stacked == other;
        }

        bitmask |= COMPARE_UNORDERED_FLAG$2; // Recursively compare objects (susceptible to call stack limits).

        stack.set(object, other);
        var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }

    }

    return false;
  }

  var _equalByTag = equalByTag;

  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$3 = 1;
  /** Used for built-in method references. */

  var objectProto$3 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$4 = objectProto$3.hasOwnProperty;
  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */

  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
        objProps = _getAllKeys(object),
        objLength = objProps.length,
        othProps = _getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }

    var index = objLength;

    while (index--) {
      var key = objProps[index];

      if (!(isPartial ? key in other : hasOwnProperty$4.call(other, key))) {
        return false;
      }
    } // Check that cyclic values are equal.


    var objStacked = stack.get(object);
    var othStacked = stack.get(other);

    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }

    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;

    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      } // Recursively compare objects (susceptible to call stack limits).


      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }

      skipCtor || (skipCtor = key == 'constructor');
    }

    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.

      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }

    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  var _equalObjects = equalObjects;

  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$2 = 1;
  /** `Object#toString` result references. */

  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag = '[object Object]';
  /** Used for built-in method references. */

  var objectProto$2 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$3 = objectProto$2.hasOwnProperty;
  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */

  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray_1(object),
        othIsArr = isArray_1(other),
        objTag = objIsArr ? arrayTag : _getTag(object),
        othTag = othIsArr ? arrayTag : _getTag(other);
    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;
    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer_1(object)) {
      if (!isBuffer_1(other)) {
        return false;
      }

      objIsArr = true;
      objIsObj = false;
    }

    if (isSameTag && !objIsObj) {
      stack || (stack = new _Stack());
      return objIsArr || isTypedArray_1(object) ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack) : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }

    if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
      var objIsWrapped = objIsObj && hasOwnProperty$3.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty$3.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;
        stack || (stack = new _Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }

    if (!isSameTag) {
      return false;
    }

    stack || (stack = new _Stack());
    return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  var _baseIsEqualDeep = baseIsEqualDeep;

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */

  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }

    if (value == null || other == null || !isObjectLike_1(value) && !isObjectLike_1(other)) {
      return value !== value && other !== other;
    }

    return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  var _baseIsEqual = baseIsEqual;

  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent.
   *
   * **Note:** This method supports comparing arrays, array buffers, booleans,
   * date objects, error objects, maps, numbers, `Object` objects, regexes,
   * sets, strings, symbols, and typed arrays. `Object` objects are compared
   * by their own, not inherited, enumerable properties. Functions and DOM
   * nodes are compared by strict equality, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.isEqual(object, other);
   * // => true
   *
   * object === other;
   * // => false
   */

  function isEqual(value, other) {
    return _baseIsEqual(value, other);
  }

  var isEqual_1 = isEqual;

  /** Used as the size to enable large array optimizations. */

  var LARGE_ARRAY_SIZE = 200;
  /**
   * The base implementation of methods like `_.difference` without support
   * for excluding multiple arrays or iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Array} values The values to exclude.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new array of filtered values.
   */

  function baseDifference(array, values, iteratee, comparator) {
    var index = -1,
        includes = _arrayIncludes,
        isCommon = true,
        length = array.length,
        result = [],
        valuesLength = values.length;

    if (!length) {
      return result;
    }

    if (iteratee) {
      values = _arrayMap(values, _baseUnary(iteratee));
    }

    if (comparator) {
      includes = _arrayIncludesWith;
      isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
      includes = _cacheHas;
      isCommon = false;
      values = new _SetCache(values);
    }

    outer: while (++index < length) {
      var value = array[index],
          computed = iteratee == null ? value : iteratee(value);
      value = comparator || value !== 0 ? value : 0;

      if (isCommon && computed === computed) {
        var valuesIndex = valuesLength;

        while (valuesIndex--) {
          if (values[valuesIndex] === computed) {
            continue outer;
          }
        }

        result.push(value);
      } else if (!includes(values, computed, comparator)) {
        result.push(value);
      }
    }

    return result;
  }

  var _baseDifference = baseDifference;

  /**
   * Creates an array of `array` values not included in the other given arrays
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. The order and references of result values are
   * determined by the first array.
   *
   * **Note:** Unlike `_.pullAll`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {...Array} [values] The values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   * @see _.without, _.xor
   * @example
   *
   * _.difference([2, 1], [2, 3]);
   * // => [1]
   */

  var difference = _baseRest(function (array, values) {
    return isArrayLikeObject_1(array) ? _baseDifference(array, _baseFlatten(values, 1, isArrayLikeObject_1, true)) : [];
  });
  var difference_1 = difference;

  /** Used to generate unique IDs. */

  var idCounter = 0;
  /**
   * Generates a unique ID. If `prefix` is given, the ID is appended to it.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {string} [prefix=''] The value to prefix the ID with.
   * @returns {string} Returns the unique ID.
   * @example
   *
   * _.uniqueId('contact_');
   * // => 'contact_104'
   *
   * _.uniqueId();
   * // => '105'
   */

  function uniqueId(prefix) {
    var id = ++idCounter;
    return toString_1(prefix) + id;
  }

  var uniqueId_1 = uniqueId;

  /**
   * Checks if `value` is `null` or `undefined`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
   * @example
   *
   * _.isNil(null);
   * // => true
   *
   * _.isNil(void 0);
   * // => true
   *
   * _.isNil(NaN);
   * // => false
   */
  function isNil(value) {
    return value == null;
  }

  var isNil_1 = isNil;

  /**
   * Gets the last element of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the last element of `array`.
   * @example
   *
   * _.last([1, 2, 3]);
   * // => 3
   */
  function last(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
  }

  var last_1 = last;

  /**
   * Gets the parent value at `path` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} path The path to get the parent value of.
   * @returns {*} Returns the parent value.
   */

  function parent(object, path) {
    return path.length < 2 ? object : _baseGet(object, _baseSlice(path, 0, -1));
  }

  var _parent = parent;

  /**
   * The base implementation of `_.unset`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The property path to unset.
   * @returns {boolean} Returns `true` if the property is deleted, else `false`.
   */

  function baseUnset(object, path) {
    path = _castPath(path, object);
    object = _parent(object, path);
    return object == null || delete object[_toKey(last_1(path))];
  }

  var _baseUnset = baseUnset;

  /**
   * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
   * objects.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {string} key The key of the property to inspect.
   * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
   */

  function customOmitClone(value) {
    return isPlainObject_1(value) ? undefined : value;
  }

  var _customOmitClone = customOmitClone;

  /** Used to compose bitmasks for cloning. */

  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;
  /**
   * The opposite of `_.pick`; this method creates an object composed of the
   * own and inherited enumerable property paths of `object` that are not omitted.
   *
   * **Note:** This method is considerably slower than `_.pick`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to omit.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.omit(object, ['a', 'c']);
   * // => { 'b': '2' }
   */

  var omit = _flatRest(function (object, paths) {
    var result = {};

    if (object == null) {
      return result;
    }

    var isDeep = false;
    paths = _arrayMap(paths, function (path) {
      path = _castPath(path, object);
      isDeep || (isDeep = path.length > 1);
      return path;
    });
    _copyObject(object, _getAllKeysIn(object), result);

    if (isDeep) {
      result = _baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, _customOmitClone);
    }

    var length = paths.length;

    while (length--) {
      _baseUnset(result, paths[length]);
    }

    return result;
  });
  var omit_1 = omit;

  function ownKeys$1A(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1A(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1A(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function getExposedProps(node) {
    var props = pick_1(node, ["value", "label", "data", "actived", "expanded", "checked", "indeterminate", "loading"]);
    return props;
  }

  function createNodeModel(node) {
    var props = getExposedProps(node);

    var model = _objectSpread$1z(_objectSpread$1z({}, props), {}, {
      getLevel: function getLevel() {
        return node.getLevel();
      },
      getIndex: function getIndex() {
        return node.getIndex();
      },
      isFirst: function isFirst() {
        return node.isFirst();
      },
      isLast: function isLast() {
        return node.isLast();
      },
      isLeaf: function isLeaf() {
        return node.isLeaf();
      },
      insertBefore: function insertBefore(newData) {
        return node.insertBefore(newData);
      },
      insertAfter: function insertAfter(newData) {
        return node.insertAfter(newData);
      },
      appendData: function appendData(data) {
        return node.append(data);
      },
      getPath: function getPath() {
        var nodes = node.getPath();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getParent: function getParent() {
        var _node$parent;

        return (_node$parent = node.parent) === null || _node$parent === void 0 ? void 0 : _node$parent.getModel();
      },
      getParents: function getParents() {
        var nodes = node.getParents();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getRoot: function getRoot() {
        var root = node.getRoot();
        return root === null || root === void 0 ? void 0 : root.getModel();
      },
      getSiblings: function getSiblings() {
        var nodes = node.getSiblings();
        return nodes.map(function (item) {
          return item.getModel();
        });
      },
      getChildren: function getChildren(deep) {
        var childrenModel = false;
        var children = node.children;

        if (Array.isArray(children)) {
          if (children.length > 0) {
            if (deep) {
              var nodes = node.walk();
              nodes.shift();
              childrenModel = nodes.map(function (item) {
                return item.getModel();
              });
            } else {
              childrenModel = children.map(function (item) {
                return item.getModel();
              });
            }
          } else {
            childrenModel = false;
          }
        } else if (typeof children === "boolean") {
          childrenModel = children;
        }

        return childrenModel;
      },
      remove: function remove(value) {
        if (!value) {
          node.remove();
          return;
        }

        var tree = node.tree;
        var targetNode = tree.getNode(value);

        if (!targetNode) {
          log.warnOnce("Tree", "`".concat(value, "` is not exist"));
          return;
        }

        var parents = targetNode.getParents();
        var parentValues = parents.map(function (pnode) {
          return pnode.value;
        });

        if (parentValues.indexOf(node.value) < 0) {
          log.warnOnce("Tree", "`".concat(value, "` is not a childNode of current node"));
          return;
        }

        targetNode.remove();
      },
      setData: function setData(data) {
        var _data = omit_1(data, ["children"]);

        Object.assign(node.data, _data);
        Object.assign(node, _data);
      }
    });

    return model;
  }
  function updateNodeModel(model, node) {
    var props = getExposedProps(node);
    Object.assign(model, props);
  }

  function ownKeys$1z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1z(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
  var defaultStatus = {
    expandMutex: false,
    activable: false,
    checkable: false,
    disabled: false,
    draggable: false,
    loading: false
  };
  var TreeNode = /*#__PURE__*/function () {
    function TreeNode(tree, data, parent) {
      _classCallCheck(this, TreeNode);

      _defineProperty$3(this, "tree", void 0);

      _defineProperty$3(this, "value", void 0);

      _defineProperty$3(this, "label", void 0);

      _defineProperty$3(this, "data", void 0);

      _defineProperty$3(this, "parent", void 0);

      _defineProperty$3(this, "children", void 0);

      _defineProperty$3(this, "model", void 0);

      _defineProperty$3(this, "vmIsLeaf", void 0);

      _defineProperty$3(this, "vmIsFirst", void 0);

      _defineProperty$3(this, "vmIsLast", void 0);

      _defineProperty$3(this, "vmIsRest", void 0);

      _defineProperty$3(this, "vmIsLocked", void 0);

      _defineProperty$3(this, "expanded", void 0);

      _defineProperty$3(this, "expandMutex", void 0);

      _defineProperty$3(this, "actived", void 0);

      _defineProperty$3(this, "activable", void 0);

      _defineProperty$3(this, "checkable", void 0);

      _defineProperty$3(this, "vmCheckable", void 0);

      _defineProperty$3(this, "checked", void 0);

      _defineProperty$3(this, "indeterminate", void 0);

      _defineProperty$3(this, "disabled", void 0);

      _defineProperty$3(this, "draggable", void 0);

      _defineProperty$3(this, "visible", void 0);

      _defineProperty$3(this, "level", void 0);

      _defineProperty$3(this, "loading", void 0);

      this.data = data;
      this.tree = tree;
      var config = tree.config || {};
      var prefix = config.prefix || "t";
      var keys = get_1(tree, "config.keys") || {};
      var propChildren = keys.children || "children";
      var propLabel = keys.label || "label";
      var propValue = keys.value || "value";
      this.model = null;
      this.children = null;
      this.vmCheckable = false;
      this.vmIsLeaf = false;
      this.vmIsFirst = false;
      this.vmIsLast = false;
      this.vmIsRest = true;
      this.vmIsLocked = false;

      var spec = _objectSpread$1y(_objectSpread$1y({}, defaultStatus), {}, {
        actived: false,
        expanded: false,
        checked: false
      }, data);

      var children = spec[propChildren];
      this.set(spec);
      this.label = spec[propLabel] || "";
      this.value = isNil_1(spec[propValue]) ? uniqueId_1(prefix) : spec[propValue];
      this.tree.nodeMap.set(this.value, this);

      if (parent && parent instanceof TreeNode) {
        this.parent = parent;
      } else {
        this.parent = null;
      }

      if (children === true) {
        this.children = children;
      }

      this.level = 0;
      this.visible = true;
      this.actived = spec.actived;
      this.initActived();
      this.expanded = spec.expanded;
      this.initExpanded();
      this.checked = spec.checked;
      this.initChecked();
      this.update();
      tree.reflow(this);

      if (Array.isArray(children)) {
        this.append(children);
      } else if (children === true && !config.lazy) {
        this.loadChildren();
      }

      this.checked = false;
      this.indeterminate = false;
      this.updateChecked();
    }

    _createClass(TreeNode, [{
      key: "initChecked",
      value: function initChecked() {
        var tree = this.tree,
            value = this.value,
            parent = this.parent;
        var checkStrictly = tree.config.checkStrictly;
        var checked = this.checked;
        checked = parent === null || parent === void 0 ? void 0 : parent.isChecked();

        if (checked && !checkStrictly) {
          tree.checkedMap.set(value, true);
        }

        this.checked = checked;
      }
    }, {
      key: "initExpanded",
      value: function initExpanded() {
        var tree = this.tree;
        var expanded = this.expanded;
        var config = tree.config;

        if (typeof config.expandLevel === "number" && this.getLevel() < config.expandLevel) {
          tree.expandedMap.set(this.value, true);
          expanded = true;
        }

        if (config.expandAll) {
          expanded = true;
        }

        if (this.children === true && config.lazy) {
          expanded = false;
        }

        if (expanded) {
          tree.expandedMap.set(this.value, true);
        } else {
          tree.expandedMap["delete"](this.value);
        }

        this.expanded = expanded;
      }
    }, {
      key: "initActived",
      value: function initActived() {
        var tree = this.tree,
            actived = this.actived;

        if (actived) {
          tree.activedMap.set(this.value, true);
        }
      }
    }, {
      key: "append",
      value: function append(data) {
        var _this = this;

        var list = [];

        if (!Array.isArray(data)) {
          list.push(data);
        } else {
          list.push.apply(list, _toConsumableArray(data));
        }

        if (list.length <= 0) {
          return;
        }

        if (!Array.isArray(this.children)) {
          this.children = [];
        }

        var children = this.children,
            tree = this.tree;
        list.forEach(function (item) {
          var node = null;

          if (item instanceof TreeNode) {
            node = item;
            node.appendTo(_this.tree, _this);
          } else {
            node = new TreeNode(_this.tree, item, _this);
            children.push(node);
          }
        });
        tree.reflow(this);
        this.updateRelated();
      }
    }, {
      key: "appendTo",
      value: function appendTo(tree, parent, index) {
        var _this2 = this;

        var parentNode = parent;
        var targetParents = (parentNode === null || parentNode === void 0 ? void 0 : parentNode.getParents()) || [];
        var includeCurrent = targetParents.some(function (node) {
          return node.value === _this2.value;
        });

        if (includeCurrent) {
          return;
        }

        if (Array.isArray(parentNode === null || parentNode === void 0 ? void 0 : parentNode.children)) {
          var targetIndex = 0;

          if (typeof index === "number") {
            targetIndex = index;
          }

          var targetPosNode = parentNode === null || parentNode === void 0 ? void 0 : parentNode.children[targetIndex];

          if ((targetPosNode === null || targetPosNode === void 0 ? void 0 : targetPosNode.value) === this.value) {
            return;
          }
        }

        this.remove();
        this.parent = parentNode;
        var siblings = null;

        if (parentNode instanceof TreeNode) {
          if (!Array.isArray(parentNode === null || parentNode === void 0 ? void 0 : parentNode.children)) {
            parentNode.children = [];
          }

          siblings = parent.children;
        } else {
          siblings = tree.children;
        }

        if (Array.isArray(siblings)) {
          if (typeof index === "number") {
            siblings.splice(index, 0, this);
          } else {
            siblings.push(this);
          }
        }

        var nodes = this.walk();
        nodes.forEach(function (item) {
          var node = item;
          node.tree = tree;
          tree.nodeMap.set(node.value, node);

          if (node.expanded) {
            tree.expandedMap.set(node.value, true);
          }
        });
        var updateNodes = (parentNode === null || parentNode === void 0 ? void 0 : parentNode.walk()) || tree.children.map(function (item) {
          return item.walk();
        }).flat();
        updateNodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
        tree.reflow();
      }
    }, {
      key: "insert",
      value: function insert(item, index) {
        var tree = this.tree,
            parent = this.parent;
        var siblings = this.getSiblings();
        var node = null;

        if (item instanceof TreeNode) {
          node = item;
          node.appendTo(tree, parent, index);
        } else if (item) {
          node = new TreeNode(tree, item, parent);

          if (typeof index === "number") {
            siblings.splice(index, 0, node);
          }

          siblings.forEach(function (sibling) {
            sibling.update();
          });
        }

        tree.reflow();
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(newData) {
        var index = this.getIndex();
        this.insert(newData, index);
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(newData) {
        var index = this.getIndex();
        this.insert(newData, index + 1);
      }
    }, {
      key: "remove",
      value: function remove() {
        var tree = this.tree;
        var nodes = this.walk();
        var siblings = this.getSiblings();
        var index = this.getIndex();

        if (Array.isArray(siblings)) {
          siblings.splice(index, 1);
        }

        nodes.forEach(function (node) {
          node.clean();
        });
        siblings.forEach(function (node) {
          node.update();
        });
        this.updateParents();
        tree.reflow();
      }
    }, {
      key: "clean",
      value: function clean() {
        var tree = this.tree,
            value = this.value;
        tree.activedMap["delete"](value);
        tree.checkedMap["delete"](value);
        tree.expandedMap["delete"](value);
        tree.nodeMap["delete"](value);
      }
    }, {
      key: "loadChildren",
      value: function () {
        var _loadChildren = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var config, list;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  config = get_1(this, "tree.config") || {};

                  if (!(this.children === true && !this.loading)) {
                    _context.next = 13;
                    break;
                  }

                  if (!(typeof config.load === "function")) {
                    _context.next = 13;
                    break;
                  }

                  this.loading = true;
                  this.update();
                  list = [];
                  _context.next = 8;
                  return config.load(this);

                case 8:
                  list = _context.sent;
                  this.tree.emit("load", {
                    node: this,
                    data: list
                  });
                  this.loading = false;

                  if (Array.isArray(list) && list.length > 0) {
                    this.append(list);
                  } else {
                    this.children = false;
                  }

                  this.update();

                case 13:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function loadChildren() {
          return _loadChildren.apply(this, arguments);
        }

        return loadChildren;
      }()
    }, {
      key: "set",
      value: function set(item) {
        var _this3 = this;

        var tree = this.tree;
        var keys = Object.keys(item);
        keys.forEach(function (key) {
          if (hasOwnProperty$2.call(defaultStatus, key) || key === "label") {
            _this3[key] = item[key];
          }
        });
        tree.updated(this);
      }
    }, {
      key: "getParent",
      value: function getParent() {
        return this.parent;
      }
    }, {
      key: "getParents",
      value: function getParents() {
        var parents = [];
        var node = this.parent;

        while (node) {
          parents.push(node);
          node = node.parent;
        }

        return parents;
      }
    }, {
      key: "getSiblings",
      value: function getSiblings() {
        var parent = this.parent,
            tree = this.tree;
        var list = [];

        if (parent) {
          if (Array.isArray(parent.children)) {
            list = parent.children;
          }
        } else if (tree) {
          list = tree.children;
        }

        return list;
      }
    }, {
      key: "getRoot",
      value: function getRoot() {
        var parents = this.getParents();
        return parents[parents.length - 1] || null;
      }
    }, {
      key: "getIndex",
      value: function getIndex() {
        var list = this.getSiblings();
        return list.indexOf(this);
      }
    }, {
      key: "getPath",
      value: function getPath() {
        var nodes = this.getParents();
        nodes.unshift(this);
        return nodes.reverse();
      }
    }, {
      key: "getLevel",
      value: function getLevel() {
        var parents = this.getParents();
        return parents.length;
      }
    }, {
      key: "isRest",
      value: function isRest() {
        var _this$tree = this.tree,
            config = _this$tree.config,
            filterMap = _this$tree.filterMap;
        var rest = true;

        if (typeof config.filter === "function") {
          var nodeModel = this.getModel();
          rest = config.filter(nodeModel);
        }

        if (rest) {
          filterMap.set(this.value, true);
        } else if (filterMap.get(this.value)) {
          filterMap["delete"](this.value);
        }

        return rest;
      }
    }, {
      key: "isVisible",
      value: function isVisible() {
        var nodeMap = this.tree.nodeMap;
        var visible = true;

        if (this.vmIsLocked) {
          return true;
        }

        if (nodeMap.get(this.value)) {
          var filterVisible = this.isRest();
          var expandVisible = true;
          var parents = this.getParents();

          if (parents.length > 0) {
            expandVisible = parents.every(function (node) {
              return node.isExpanded();
            });
          }

          visible = expandVisible && filterVisible;
        } else {
          visible = false;
        }

        return visible;
      }
    }, {
      key: "isDisabled",
      value: function isDisabled() {
        if (this.vmIsLocked) return true;
        var treeDisabled = get_1(this, "tree.config.disabled");
        return !!(treeDisabled || this.disabled);
      }
    }, {
      key: "isDraggable",
      value: function isDraggable() {
        return !!(get_1(this, "tree.config.draggable") || this.draggable);
      }
    }, {
      key: "isExpandMutex",
      value: function isExpandMutex() {
        return !!(get_1(this, "tree.config.expandMutex") || this.expandMutex);
      }
    }, {
      key: "isActivable",
      value: function isActivable() {
        return !!(get_1(this, "tree.config.activable") || this.activable);
      }
    }, {
      key: "isCheckable",
      value: function isCheckable() {
        return !!(get_1(this, "tree.config.checkable") || this.checkable);
      }
    }, {
      key: "isActived",
      value: function isActived(map) {
        var tree = this.tree,
            value = this.value;
        var activedMap = map || tree.activedMap;
        return !!(tree.nodeMap.get(value) && activedMap.get(value));
      }
    }, {
      key: "isExpanded",
      value: function isExpanded(map) {
        var tree = this.tree,
            value = this.value,
            vmIsLocked = this.vmIsLocked;
        if (vmIsLocked) return true;
        var expandedMap = map || tree.expandedMap;
        return !!(tree.nodeMap.get(value) && expandedMap.get(value));
      }
    }, {
      key: "isChecked",
      value: function isChecked(map) {
        var children = this.children,
            tree = this.tree;
        var checkStrictly = tree.config.checkStrictly;
        var checked = false;
        var checkedMap = map || tree.checkedMap;

        if (tree.nodeMap.get(this.value)) {
          if (checkedMap.get(this.value)) {
            checked = true;
          } else if (Array.isArray(children) && children.length > 0 && !checkStrictly) {
            checked = children.every(function (node) {
              var childIsChecked = node.isChecked(checkedMap);
              return childIsChecked;
            });
          } else if (!checkStrictly) {
            var parents = this.getParents();
            checked = parents.some(function (node) {
              return checkedMap.get(node.value);
            });
          }
        }

        return !!checked;
      }
    }, {
      key: "isIndeterminate",
      value: function isIndeterminate() {
        var children = this.children,
            tree = this.tree;
        var checkStrictly = tree.config.checkStrictly;

        if (checkStrictly) {
          return false;
        }

        var indeterminate = false;

        if (Array.isArray(children)) {
          var childChecked = null;
          indeterminate = children.some(function (node) {
            if (node.isIndeterminate()) {
              return true;
            }

            if (childChecked === null) {
              childChecked = node.isChecked();
            }

            if (childChecked !== node.isChecked()) {
              return true;
            }

            return false;
          });
        }

        return indeterminate;
      }
    }, {
      key: "isFirst",
      value: function isFirst() {
        var siblings = this.getSiblings();
        return siblings[0] === this;
      }
    }, {
      key: "isLast",
      value: function isLast() {
        var siblings = this.getSiblings();
        return siblings[siblings.length - 1] === this;
      }
    }, {
      key: "isLeaf",
      value: function isLeaf() {
        var isLeaf = false;

        if (Array.isArray(this.children)) {
          isLeaf = this.children.length <= 0;
        } else {
          isLeaf = !this.children;
        }

        return isLeaf;
      }
    }, {
      key: "lock",
      value: function lock(lockState) {
        this.vmIsLocked = lockState;
        this.expanded = this.isExpanded();
        this.visible = this.isVisible();
      }
    }, {
      key: "afterExpanded",
      value: function afterExpanded() {
        this.update();

        if (this.expanded && this.children === true) {
          this.loadChildren();
        }
      }
    }, {
      key: "toggleExpanded",
      value: function toggleExpanded() {
        return this.setExpanded(!this.isExpanded());
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(expanded, opts) {
        var tree = this.tree;

        var options = _objectSpread$1y({
          directly: false
        }, opts);

        var map = tree.expandedMap;

        if (!options.directly) {
          map = new Map(tree.expandedMap);
        }

        if (expanded) {
          var shouldExpandNodes = [];
          shouldExpandNodes.push(this);

          if (get_1(tree, "config.expandParent")) {
            this.getParents().forEach(function (node) {
              shouldExpandNodes.push(node);
            });
          }

          shouldExpandNodes.forEach(function (node) {
            var isExpandMutex = false;

            if (node.parent) {
              isExpandMutex = node.parent.isExpandMutex();
            } else {
              var _tree$config;

              isExpandMutex = tree === null || tree === void 0 ? void 0 : (_tree$config = tree.config) === null || _tree$config === void 0 ? void 0 : _tree$config.expandMutex;
            }

            if (isExpandMutex) {
              var siblings = node.getSiblings();
              siblings.forEach(function (snode) {
                map["delete"](snode.value);
              });
            }

            map.set(node.value, true);
          });
        } else {
          map["delete"](this.value);
        }

        if (options.directly) {
          this.afterExpanded();
          this.update();
          this.updateChildren();
        }

        return tree.getExpanded(map);
      }
    }, {
      key: "toggleActived",
      value: function toggleActived() {
        return this.setActived(!this.isActived());
      }
    }, {
      key: "setActived",
      value: function setActived(actived, opts) {
        var tree = this.tree;

        var options = _objectSpread$1y({
          directly: false
        }, opts);

        var config = tree.config || {};
        var map = tree.activedMap;

        if (!options.directly) {
          map = new Map(tree.activedMap);
        }

        if (this.isActivable()) {
          if (actived) {
            if (!config.activeMultiple) {
              map.clear();
            }

            map.set(this.value, true);
          } else {
            map["delete"](this.value);
          }
        }

        if (options.directly) {
          this.update();
        }

        return tree.getActived(map);
      }
    }, {
      key: "toggleChecked",
      value: function toggleChecked() {
        return this.setChecked(!this.isChecked());
      }
    }, {
      key: "setChecked",
      value: function setChecked(checked, opts) {
        var tree = this.tree;
        var config = tree.config || {};

        var options = _objectSpread$1y({
          directly: false
        }, opts);

        var map = tree.checkedMap;

        if (!options.directly) {
          map = new Map(tree.checkedMap);
        }

        if (this.isCheckable() && checked !== this.isChecked()) {
          if (config.checkStrictly) {
            if (checked) {
              map.set(this.value, true);
            } else {
              map["delete"](this.value);
            }
          } else {
            var children = this.walk();
            children.forEach(function (node) {
              if (checked) {
                map.set(node.value, true);
              } else {
                map["delete"](node.value);
              }
            });
            var parents = this.getParents();
            parents.forEach(function (node) {
              map["delete"](node.value);
            });
          }
        }

        if (options.directly) {
          if (config.checkStrictly) {
            this.updateChecked();
          } else {
            var relatedNodes = tree.getRelatedNodes([this.value]);
            relatedNodes.forEach(function (node) {
              node.updateChecked();
            });
          }
        }

        return tree.getChecked(map);
      }
    }, {
      key: "update",
      value: function update() {
        this.level = this.getLevel();
        this.actived = this.isActived();
        this.expanded = this.isExpanded();
        this.vmCheckable = this.isCheckable();
        this.visible = this.isVisible();
        this.vmIsRest = this.isRest();
        this.vmIsFirst = this.isFirst();
        this.vmIsLast = this.isLast();
        this.vmIsLeaf = this.isLeaf();
        this.tree.updated(this);
      }
    }, {
      key: "updateChecked",
      value: function updateChecked(isFromValueChange) {
        var tree = this.tree;
        this.vmCheckable = this.isCheckable();

        if (this.vmCheckable && (!this.disabled || isFromValueChange)) {
          this.checked = this.isChecked();

          if (this.checked) {
            tree.checkedMap.set(this.value, true);
          }

          this.indeterminate = this.isIndeterminate();
          tree.updated(this);
        }
      }
    }, {
      key: "updateChildren",
      value: function updateChildren() {
        var children = this.children;

        if (Array.isArray(children)) {
          children.forEach(function (node) {
            node.update();
            node.updateChecked();
            node.updateChildren();
          });
        }
      }
    }, {
      key: "updateParents",
      value: function updateParents() {
        var parent = this.parent;

        if (parent) {
          parent.update();
          parent.updateChecked();
          parent.updateParents();
        }
      }
    }, {
      key: "updateRelated",
      value: function updateRelated() {
        var tree = this.tree;
        var relatedNodes = tree.getRelatedNodes([this.value]);
        relatedNodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
        tree.reflow();
      }
    }, {
      key: "walk",
      value: function walk() {
        var children = this.children;
        var list = [];
        list.push(this);

        if (Array.isArray(children) && children.length > 0) {
          children.forEach(function (node) {
            list = list.concat(node.walk());
          });
        }

        return list;
      }
    }, {
      key: "getModel",
      value: function getModel() {
        var model = this.model;

        if (!model) {
          model = createNodeModel(this);
          this.model = model;
        }

        updateNodeModel(model, this);
        return model;
      }
    }]);

    return TreeNode;
  }();

  function ownKeys$1y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1x(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1y(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TreeStore = /*#__PURE__*/function () {
    function TreeStore(options) {
      _classCallCheck(this, TreeStore);

      _defineProperty$3(this, "children", void 0);

      _defineProperty$3(this, "nodes", void 0);

      _defineProperty$3(this, "nodeMap", void 0);

      _defineProperty$3(this, "config", void 0);

      _defineProperty$3(this, "activedMap", void 0);

      _defineProperty$3(this, "updatedMap", void 0);

      _defineProperty$3(this, "checkedMap", void 0);

      _defineProperty$3(this, "expandedMap", void 0);

      _defineProperty$3(this, "filterMap", void 0);

      _defineProperty$3(this, "updateTimer", void 0);

      _defineProperty$3(this, "shouldReflow", void 0);

      _defineProperty$3(this, "prevFilter", void 0);

      _defineProperty$3(this, "nullNodeModel", void 0);

      var config = _objectSpread$1x({
        prefix: "t",
        keys: {},
        expandAll: false,
        expandLevel: 0,
        expandMutex: false,
        expandParent: false,
        activable: false,
        activeMultiple: false,
        checkable: false,
        checkStrictly: false,
        disabled: false,
        draggable: false,
        load: null,
        lazy: false,
        valueMode: "onlyLeaf",
        filter: null,
        onLoad: null,
        onReflow: null,
        onUpdate: null,
        allowFoldNodeOnFilter: false
      }, options);

      this.config = config;
      this.nodes = [];
      this.children = [];
      this.nodeMap = /* @__PURE__ */new Map();
      this.activedMap = /* @__PURE__ */new Map();
      this.expandedMap = /* @__PURE__ */new Map();
      this.checkedMap = /* @__PURE__ */new Map();
      this.updatedMap = /* @__PURE__ */new Map();
      this.filterMap = /* @__PURE__ */new Map();
      this.prevFilter = null;
      this.updateTimer = null;
      this.shouldReflow = false;
      this.initNullNodeModel();
    }

    _createClass(TreeStore, [{
      key: "initNullNodeModel",
      value: function initNullNodeModel() {
        var nullNode = new TreeNode(this, {
          value: "",
          label: "",
          children: []
        });
        this.nullNodeModel = nullNode.getModel();
        nullNode.remove();
      }
    }, {
      key: "setConfig",
      value: function setConfig(options) {
        var _this = this;

        var hasChanged = false;
        Object.keys(options).forEach(function (key) {
          var val = options[key];

          if (val !== _this.config[key]) {
            hasChanged = true;
            _this.config[key] = val;
          }
        });

        if (hasChanged) {
          this.refreshState();
        }
      }
    }, {
      key: "getChildren",
      value: function getChildren() {
        return this.children;
      }
    }, {
      key: "getNode",
      value: function getNode(item) {
        var node = null;

        if (typeof item === "string" || typeof item === "number") {
          node = this.nodeMap.get(item);
        } else if (item instanceof TreeNode) {
          node = this.nodeMap.get(item.value);
        }

        return node;
      }
    }, {
      key: "getIndex",
      value: function getIndex(node) {
        return this.nodes.indexOf(node);
      }
    }, {
      key: "getParent",
      value: function getParent(value) {
        var parent = null;
        var node = this.getNode(value);

        if (node) {
          parent = node.getParent();
        }

        return parent;
      }
    }, {
      key: "getParents",
      value: function getParents(value) {
        var node = this.getNode(value);
        var parents = [];

        if (node) {
          parents = node.getParents();
        }

        return parents;
      }
    }, {
      key: "getNodeIndex",
      value: function getNodeIndex(value) {
        var node = this.getNode(value);
        var index = -1;

        if (node) {
          index = node.getIndex();
        }

        return index;
      }
    }, {
      key: "getNodes",
      value: function getNodes(item, options) {
        var nodes = [];
        var val = "";

        if (typeof item === "string" || typeof item === "number") {
          val = item;
        } else if (item instanceof TreeNode) {
          val = item.value;
        }

        if (!val) {
          nodes = this.nodes.slice(0);
        } else {
          var node = this.getNode(val);

          if (node) {
            nodes = node.walk();
          }
        }

        if (options) {
          var conf = _objectSpread$1x({
            filter: null,
            level: Infinity
          }, options);

          if (typeof conf.level === "number" && conf.level !== Infinity) {
            nodes = nodes.filter(function (node) {
              return node.level <= conf.level;
            });
          }

          if (typeof conf.filter === "function") {
            nodes = nodes.filter(function (node) {
              var nodeModel = node.getModel();
              return conf.filter(nodeModel);
            });
          }

          if (isPlainObject_1(conf.props)) {
            nodes = nodes.filter(function (node) {
              var result = Object.keys(conf.props).every(function (key) {
                var propEqual = node[key] === conf.props[key];
                return propEqual;
              });
              return result;
            });
          }
        }

        return nodes;
      }
    }, {
      key: "append",
      value: function append(list) {
        var _this2 = this;

        list.forEach(function (item) {
          var node = new TreeNode(_this2, item);

          _this2.children.push(node);
        });
        this.reflow();
      }
    }, {
      key: "reload",
      value: function reload(list) {
        this.expandedMap.clear();
        this.checkedMap.clear();
        this.activedMap.clear();
        this.filterMap.clear();
        this.removeAll();
        this.append(list);
      }
    }, {
      key: "parseNodeData",
      value: function parseNodeData(para, item) {
        var value = "";
        var node = null;
        var data = null;

        if (typeof para === "string" || typeof para === "number") {
          value = para;
          data = item;
          node = this.getNode(value);
        } else if (para instanceof TreeNode) {
          node = para;
          data = item;
        } else {
          data = para;
        }

        var spec = {
          node: node,
          data: data
        };
        return spec;
      }
    }, {
      key: "appendNodes",
      value: function appendNodes(para, item) {
        var spec = this.parseNodeData(para, item);

        if (spec.data) {
          if (!spec.node) {
            if (spec.data instanceof TreeNode) {
              spec.data.appendTo(this);
            } else if (Array.isArray(spec.data)) {
              this.append(spec.data);
            } else {
              this.append([spec.data]);
            }
          } else {
            if (spec.data instanceof TreeNode) {
              spec.data.appendTo(this, spec.node);
            } else if (Array.isArray(spec.data)) {
              spec.node.append(spec.data);
            } else {
              spec.node.append([spec.data]);
            }

            spec.node.updateRelated();
          }
        }
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(value, item) {
        var node = this.getNode(value);

        if (node) {
          node.insertBefore(item);
        }
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(value, item) {
        var node = this.getNode(value);

        if (node) {
          node.insertAfter(item);
        }
      }
    }, {
      key: "refreshNodes",
      value: function refreshNodes() {
        var children = this.children,
            nodes = this.nodes;
        nodes.length = 0;
        children.forEach(function (node) {
          var list = node.walk();
          Array.prototype.push.apply(nodes, list);
        });
      }
    }, {
      key: "refreshState",
      value: function refreshState() {
        var nodes = this.nodes;
        nodes.forEach(function (node) {
          node.update();
          node.updateChecked();
        });
      }
    }, {
      key: "reflow",
      value: function reflow(node) {
        this.shouldReflow = true;
        this.updated(node);
      }
    }, {
      key: "updated",
      value: function updated(node) {
        var _this3 = this;

        if (node !== null && node !== void 0 && node.value) {
          this.updatedMap.set(node.value, true);
        }

        if (this.updateTimer) return;
        this.updateTimer = +setTimeout(function () {
          var _this3$config;

          clearTimeout(_this3.updateTimer);
          _this3.updateTimer = null;

          if (_this3.shouldReflow) {
            _this3.refreshNodes();

            _this3.emit("reflow");
          }

          if (!((_this3$config = _this3.config) !== null && _this3$config !== void 0 && _this3$config.allowFoldNodeOnFilter)) _this3.lockFilterPathNodes();
          var updatedList = Array.from(_this3.updatedMap.keys());

          if (updatedList.length > 0) {
            var updatedNodes = updatedList.map(function (value) {
              return _this3.getNode(value);
            });

            _this3.emit("update", {
              nodes: updatedNodes,
              map: _this3.updatedMap
            });
          } else if (_this3.shouldReflow) {
            _this3.emit("update", {
              nodes: [],
              map: _this3.updatedMap
            });
          }

          _this3.shouldReflow = false;

          _this3.updatedMap.clear();
        });
      }
    }, {
      key: "getActived",
      value: function getActived(map) {
        var activedMap = map || this.activedMap;
        return Array.from(activedMap.keys());
      }
    }, {
      key: "getActivedNodes",
      value: function getActivedNodes(item) {
        var nodes = this.getNodes(item);
        nodes = nodes.filter(function (node) {
          return node.isActived();
        });
        return nodes;
      }
    }, {
      key: "replaceActived",
      value: function replaceActived(list) {
        this.resetActived();
        this.setActived(list);
      }
    }, {
      key: "setActived",
      value: function setActived(actived) {
        var _this4 = this;

        var activeMultiple = this.config.activeMultiple;
        var list = actived.slice(0);

        if (!activeMultiple) {
          list.length = 1;
        }

        list.forEach(function (val) {
          _this4.activedMap.set(val, true);

          var node = _this4.getNode(val);

          if (node) {
            node.update();
          }
        });
      }
    }, {
      key: "resetActived",
      value: function resetActived() {
        var actived = this.getActived();
        this.activedMap.clear();
        var relatedNodes = this.getRelatedNodes(actived);
        relatedNodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "getExpanded",
      value: function getExpanded(map) {
        var expandedMap = map || this.expandedMap;
        return Array.from(expandedMap.keys());
      }
    }, {
      key: "replaceExpanded",
      value: function replaceExpanded(list) {
        var expanded = this.getExpanded();
        var added = difference_1(list, expanded);
        var removed = difference_1(expanded, list);
        this.setExpandedDirectly(removed, false);
        this.updateExpanded(removed);
        this.setExpanded(added);
      }
    }, {
      key: "setExpanded",
      value: function setExpanded(list) {
        this.setExpandedDirectly(list);
        this.updateExpanded(list);
      }
    }, {
      key: "setExpandedDirectly",
      value: function setExpandedDirectly(list) {
        var _this5 = this;

        var expanded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        list.forEach(function (val) {
          if (expanded) {
            _this5.expandedMap.set(val, true);

            var node = _this5.getNode(val);

            if (node) {
              node.afterExpanded();
            }
          } else {
            _this5.expandedMap["delete"](val);
          }
        });
      }
    }, {
      key: "resetExpanded",
      value: function resetExpanded() {
        var expanded = this.getExpanded();
        this.expandedMap.clear();
        this.updateExpanded(expanded);
      }
    }, {
      key: "updateExpanded",
      value: function updateExpanded(list) {
        var relatedNodes = this.getRelatedNodes(list, {
          withParents: false
        });
        relatedNodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "getChecked",
      value: function getChecked(map) {
        var nodes = this.nodes,
            config = this.config;
        var valueMode = config.valueMode,
            checkStrictly = config.checkStrictly;
        var list = [];
        var checkedMap = map || this.checkedMap;
        nodes.forEach(function (node) {
          if (node.isChecked(checkedMap)) {
            if (valueMode === "parentFirst" && !checkStrictly) {
              if (!node.parent || !node.parent.isChecked(checkedMap)) {
                list.push(node.value);
              }
            } else if (valueMode === "onlyLeaf" && !checkStrictly) {
              if (node.isLeaf()) {
                list.push(node.value);
              }
            } else {
              list.push(node.value);
            }
          }
        });
        return list;
      }
    }, {
      key: "getCheckedNodes",
      value: function getCheckedNodes(item) {
        var nodes = this.getNodes(item);
        nodes = nodes.filter(function (node) {
          return node.isChecked();
        });
        return nodes;
      }
    }, {
      key: "replaceChecked",
      value: function replaceChecked(list) {
        this.resetChecked();
        this.setChecked(list, true);
      }
    }, {
      key: "setChecked",
      value: function setChecked(list, isFromValueChange) {
        var _this6 = this;

        var _this$config = this.config,
            valueMode = _this$config.valueMode,
            checkStrictly = _this$config.checkStrictly,
            checkable = _this$config.checkable;
        if (!checkable) return;
        list.forEach(function (val) {
          var node = _this6.getNode(val);

          if (node) {
            if (valueMode === "parentFirst" && !checkStrictly) {
              var childrenNodes = node.walk();
              childrenNodes.forEach(function (childNode) {
                _this6.checkedMap.set(childNode.value, true);
              });
            } else {
              _this6.checkedMap.set(val, true);

              node.updateChecked(isFromValueChange);
            }
          }
        });

        if (!checkStrictly) {
          var checked = this.getChecked();
          var relatedNodes = this.getRelatedNodes(checked);
          relatedNodes.forEach(function (node) {
            node.updateChecked();
          });
        }
      }
    }, {
      key: "resetChecked",
      value: function resetChecked() {
        var checked = this.getChecked();
        var relatedNodes = this.getRelatedNodes(checked);
        this.checkedMap.clear();
        relatedNodes.forEach(function (node) {
          node.updateChecked();
        });
      }
    }, {
      key: "updateAll",
      value: function updateAll() {
        var nodes = this.getNodes();
        nodes.forEach(function (node) {
          node.update();
        });
      }
    }, {
      key: "remove",
      value: function remove(value) {
        var node = this.getNode(value);

        if (node) {
          node.remove();
        }
      }
    }, {
      key: "removeAll",
      value: function removeAll() {
        var nodes = this.getNodes();
        nodes.forEach(function (node) {
          node.remove();
        });
      }
    }, {
      key: "getRelatedNodes",
      value: function getRelatedNodes(list, options) {
        var _this7 = this;

        var conf = _objectSpread$1x({
          withParents: true
        }, options);

        var map = /* @__PURE__ */new Map();
        list.forEach(function (value) {
          if (map.get(value)) return;

          var node = _this7.getNode(value);

          if (node) {
            var parents = node.getParents();
            var children = node.walk();
            var related = [];

            if (conf.withParents) {
              related = parents.concat(children);
            } else {
              related = children;
            }

            related.forEach(function (relatedNode) {
              map.set(relatedNode.value, relatedNode);
            });
          }
        });
        var relatedNodes = Array.from(map.values());
        return relatedNodes;
      }
    }, {
      key: "emit",
      value: function emit(name, state) {
        var config = this.config || {};
        var methodName = camelCase_1("on-".concat(name));
        var method = config[methodName];

        if (typeof method === "function") {
          method(state);
        }
      }
    }, {
      key: "lockFilterPathNodes",
      value: function lockFilterPathNodes() {
        var _this8 = this;

        var config = this.config;
        var allNodes = this.getNodes();

        if (this.prevFilter) {
          allNodes.forEach(function (node) {
            node.lock(false);
          });
        }

        var currentFilter = config.filter;
        if (!currentFilter || typeof currentFilter !== "function") return;
        if (currentFilter(this.nullNodeModel)) return;
        this.prevFilter = config.filter;
        var map = /* @__PURE__ */new Map();
        allNodes.reverse().forEach(function (item) {
          var node = item;
          var parent = node.getParent();

          if (node.vmIsRest) {
            if (parent) {
              parent.expanded = true;
            }

            node.visible = true;
          }

          if (node.vmIsRest || map.get(node.value)) {
            if (parent && !parent.vmIsRest) {
              map.set(parent.value, true);
            }
          }
        });
        var filterPathValues = Array.from(map.keys());
        filterPathValues.forEach(function (value) {
          var node = _this8.getNode(value);

          if (node) {
            node.lock(true);
          }
        });
      }
    }]);

    return TreeStore;
  }();

  function ownKeys$1x(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1w(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1x(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1x(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var useContext = function useContext(props, setInnerValue, innerPopupVisible, setPopupVisible) {
    var statusContext = VueCompositionAPI.reactive({
      treeStore: null,
      inputVal: null,
      scopeVal: void 0,
      treeNodes: [],
      expend: []
    });
    return {
      statusContext: statusContext,
      cascaderContext: VueCompositionAPI.computed(function () {
        var size = props.size,
            checkStrictly = props.checkStrictly,
            lazy = props.lazy,
            multiple = props.multiple,
            filterable = props.filterable,
            clearable = props.clearable,
            checkProps = props.checkProps,
            max = props.max,
            disabled = props.disabled,
            showAllLevels = props.showAllLevels,
            minCollapsedNum = props.minCollapsedNum,
            valueType = props.valueType;
        return _objectSpread$1w(_objectSpread$1w({
          value: statusContext.scopeVal,
          size: size,
          checkStrictly: checkStrictly,
          lazy: lazy,
          multiple: multiple,
          filterable: filterable,
          clearable: clearable,
          checkProps: checkProps,
          max: max,
          disabled: disabled,
          showAllLevels: showAllLevels,
          minCollapsedNum: minCollapsedNum,
          valueType: valueType,
          visible: innerPopupVisible.value
        }, statusContext), {}, {
          setTreeNodes: function setTreeNodes(nodes) {
            statusContext.treeNodes = nodes;
          },
          setValue: function setValue(val, source, node) {
            if (isEqual_1(val, statusContext.scopeVal)) return;
            setInnerValue(val, {
              source: source,
              node: node
            });
          },
          setVisible: setPopupVisible,
          setInputVal: function setInputVal(val) {
            statusContext.inputVal = val;
          },
          setExpend: function setExpend(val) {
            statusContext.expend = val;
          }
        });
      })
    };
  };
  var useCascaderContext = function useCascaderContext(props) {
    var disabled = props.disabled;

    var _toRefs = VueCompositionAPI.toRefs(props),
        value = _toRefs.value,
        popupVisible = _toRefs.popupVisible;

    var _useVModel = useVModel(value, props.defaultValue, props.onChange, "change"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        innerValue = _useVModel2[0],
        setInnerValue = _useVModel2[1];

    var _useDefaultValue = useDefaultValue(popupVisible, false, props.onPopupVisibleChange, "popupVisible", "popup-visible-change"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        innerPopupVisible = _useDefaultValue2[0],
        setPopupVisible = _useDefaultValue2[1];

    var _useContext = useContext(props, setInnerValue, innerPopupVisible, setPopupVisible),
        cascaderContext = _useContext.cascaderContext,
        statusContext = _useContext.statusContext;

    var isFilterable = VueCompositionAPI.computed(function () {
      return Boolean(props.filterable || isFunction_1(props.filter));
    });

    var updatedTreeNodes = function updatedTreeNodes() {
      var _cascaderContext$valu = cascaderContext.value,
          inputVal = _cascaderContext$valu.inputVal,
          treeStore = _cascaderContext$valu.treeStore,
          setTreeNodes = _cascaderContext$valu.setTreeNodes;
      treeNodesEffect(inputVal, treeStore, setTreeNodes, props.filter);
    };

    var updateExpend = function updateExpend() {
      var _cascaderContext$valu2 = cascaderContext.value,
          value2 = _cascaderContext$valu2.value,
          treeStore = _cascaderContext$valu2.treeStore;
      var expend = statusContext.expend;
      treeStoreExpendEffect(treeStore, value2, expend);
      treeStore.replaceChecked(getTreeValue(value2));
    };

    VueCompositionAPI.watch(function () {
      return props.options;
    }, function () {
      var options = props.options,
          _props$keys = props.keys,
          keys = _props$keys === void 0 ? {} : _props$keys,
          checkStrictly = props.checkStrictly;
      var treeStore = statusContext.treeStore;
      if (!options.length && !treeStore) return;

      if (!treeStore) {
        var store = new TreeStore({
          keys: _objectSpread$1w(_objectSpread$1w({}, keys), {}, {
            children: typeof keys.children === "string" ? keys.children : "children"
          }),
          checkable: true,
          expandMutex: true,
          expandParent: true,
          checkStrictly: checkStrictly,
          onLoad: function onLoad() {
            VueCompositionAPI.nextTick(function () {
              store.refreshNodes();
              updatedTreeNodes();
            });
          }
        });
        store.append(options);
        statusContext.treeStore = store;
      } else {
        treeStore.reload(options);
        treeStore.refreshNodes();
      }

      updateExpend();
      updatedTreeNodes();
    }, {
      immediate: true
    });
    VueCompositionAPI.watch(function () {
      var checkStrictly = props.checkStrictly,
          lazy = props.lazy,
          load = props.load,
          valueMode = props.valueMode;
      return JSON.stringify({
        valueMode: valueMode,
        checkStrictly: checkStrictly,
        lazy: lazy,
        load: load
      });
    }, function () {
      var treeStore = statusContext.treeStore;
      if (!treeStore) return;
      var checkStrictly = props.checkStrictly,
          lazy = props.lazy,
          load = props.load,
          valueMode = props.valueMode;
      var treeProps = {
        checkStrictly: checkStrictly,
        disabled: disabled,
        load: load,
        lazy: lazy,
        valueMode: valueMode
      };
      treeStore.setConfig(treeProps);
    }, {
      immediate: true
    });
    VueCompositionAPI.watch(innerValue, function () {
      var _cascaderContext$valu3 = cascaderContext.value,
          setValue = _cascaderContext$valu3.setValue,
          multiple = _cascaderContext$valu3.multiple,
          valueType = _cascaderContext$valu3.valueType;

      if (isValueInvalid(innerValue.value, cascaderContext.value)) {
        setValue(multiple ? [] : "", "invalid-value");
      }

      if (!isEmptyValues(innerValue)) {
        statusContext.scopeVal = getCascaderValue(innerValue.value, valueType, multiple);
      } else {
        statusContext.scopeVal = multiple ? [] : "";
      }

      if (!statusContext.treeStore) return;
      updateExpend();
      updatedTreeNodes();
    }, {
      immediate: true
    });
    VueCompositionAPI.watch(function () {
      return innerPopupVisible.value && isFilterable.value;
    }, function (visible) {
      var setInputVal = cascaderContext.value.setInputVal;

      if (visible) {
        setInputVal("");
      }
    });
    VueCompositionAPI.watch(function () {
      return statusContext.inputVal;
    }, function () {
      updatedTreeNodes();
    });
    return {
      cascaderContext: cascaderContext,
      isFilterable: isFilterable
    };
  };

  function ownKeys$1w(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1v(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1w(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1w(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Cascader = VueCompositionAPI.defineComponent({
    name: "TCascader",
    props: _objectSpread$1v({}, props$z),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots,
          emit = _ref.emit;
      var COMPONENT_NAME = usePrefixClass("cascader");
      var classPrefix = usePrefixClass();

      var _useCommonClassName = useCommonClassName$1(),
          STATUS = _useCommonClassName.STATUS;

      var overlayClassName = usePrefixClass("cascader__popup");

      var _useConfig = useConfig("cascader"),
          global = _useConfig.global;

      var _useCascaderContext = useCascaderContext(props2),
          cascaderContext = _useCascaderContext.cascaderContext,
          isFilterable = _useCascaderContext.isFilterable;

      var displayValue = VueCompositionAPI.computed(function () {
        return props2.multiple ? getMultipleContent(cascaderContext.value) : getSingleContent(cascaderContext.value);
      });
      var panels = VueCompositionAPI.computed(function () {
        return getPanels(cascaderContext.value.treeNodes);
      });
      var inputPlaceholder = VueCompositionAPI.computed(function () {
        var _props2$placeholder;

        return cascaderContext.value.visible && !props2.multiple && getSingleContent(cascaderContext.value) || ((_props2$placeholder = props2.placeholder) !== null && _props2$placeholder !== void 0 ? _props2$placeholder : global.value.placeholder);
      });
      return {
        COMPONENT_NAME: COMPONENT_NAME,
        overlayClassName: overlayClassName,
        panels: panels,
        displayValue: displayValue,
        inputPlaceholder: inputPlaceholder,
        isFilterable: isFilterable,
        STATUS: STATUS,
        classPrefix: classPrefix,
        cascaderContext: cascaderContext,
        slots: slots,
        emit: emit
      };
    },
    render: function render() {
      var _this$popupProps,
          _this = this;

      var h = arguments[0];
      var COMPONENT_NAME = this.COMPONENT_NAME,
          overlayClassName = this.overlayClassName,
          panels = this.panels,
          displayValue = this.displayValue,
          inputPlaceholder = this.inputPlaceholder,
          isFilterable = this.isFilterable,
          STATUS = this.STATUS,
          classPrefix = this.classPrefix,
          cascaderContext = this.cascaderContext,
          slots = this.slots,
          emit = this.emit;

      var renderSuffixIcon = function renderSuffixIcon() {
        var visible2 = cascaderContext.visible,
            disabled = cascaderContext.disabled;
        return h(FakeArrow, {
          "attrs": {
            "overlayClassName": getFakeArrowIconClass(classPrefix, STATUS, cascaderContext),
            "isActive": visible2,
            "disabled": disabled
          }
        });
      };

      var setVisible = cascaderContext.setVisible,
          visible = cascaderContext.visible,
          inputVal = cascaderContext.inputVal,
          setInputVal = cascaderContext.setInputVal;
      return h(SelectInput, {
        "class": COMPONENT_NAME,
        "props": _objectSpread$1v({}, _objectSpread$1v({
          value: displayValue,
          inputValue: visible ? inputVal : "",
          popupVisible: visible,
          keys: this.keys,
          allowInput: isFilterable,
          minCollapsedNum: this.minCollapsedNum,
          collapsedItems: this.collapsedItems,
          readonly: this.readonly,
          disabled: this.disabled,
          clearable: this.clearable,
          placeholder: inputPlaceholder,
          multiple: this.multiple,
          loading: this.loading,
          status: this.status,
          tips: this.tips,
          suffixIcon: function suffixIcon() {
            return renderSuffixIcon();
          },
          popupProps: _objectSpread$1v(_objectSpread$1v({}, this.popupProps), {}, {
            overlayInnerStyle: panels.length ? {
              width: "auto"
            } : "",
            overlayClassName: [overlayClassName, (_this$popupProps = this.popupProps) === null || _this$popupProps === void 0 ? void 0 : _this$popupProps.overlayClassName]
          }),
          inputProps: _objectSpread$1v({
            size: this.size
          }, this.inputProps),
          tagInputProps: _objectSpread$1v({
            size: this.size
          }, this.tagInputProps),
          tagProps: _objectSpread$1v({}, this.tagProps),
          onInputChange: function onInputChange(value) {
            if (!_this.isFilterable) return;
            setInputVal("".concat(value));
          },
          onTagChange: function onTagChange(val, ctx) {
            handleRemoveTagEffect(cascaderContext, ctx.index, _this.onRemove);
          },
          onBlur: function onBlur(val, context) {
            var _this$onBlur;

            var ctx = {
              value: cascaderContext.value,
              e: context.e
            };
            (_this$onBlur = _this.onBlur) === null || _this$onBlur === void 0 ? void 0 : _this$onBlur.call(_this, ctx);
            emit("blur", ctx);
          },
          onFocus: function onFocus(val, context) {
            var _this$onFocus;

            var ctx = {
              value: cascaderContext.value,
              e: context.e
            };
            (_this$onFocus = _this.onFocus) === null || _this$onFocus === void 0 ? void 0 : _this$onFocus.call(_this, ctx);
            emit("focus", ctx);
          },
          onPopupVisibleChange: function onPopupVisibleChange(val, context) {
            if (_this.disabled) return;
            setVisible(val, context);
          },
          onClear: function onClear() {
            closeIconClickEffect(cascaderContext);
          }
        }, this.selectInputProps)),
        "scopedSlots": {
          panel: function panel() {
            return h(Panel, {
              "attrs": {
                "empty": _this.empty,
                "trigger": _this.trigger,
                "cascaderContext": cascaderContext
              },
              "scopedSlots": {
                empty: slots.empty
              }
            });
          },
          collapsedItems: slots.collapsedItems
        }
      });
    }
  });

  function ownKeys$1v(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1u(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1v(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1v(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _CascaderPanel = VueCompositionAPI.defineComponent({
    name: "TCascaderPanel",
    props: _objectSpread$1u({}, props$z),
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;

      var _useCascaderContext = useCascaderContext(props2),
          cascaderContext = _useCascaderContext.cascaderContext;

      return {
        cascaderContext: cascaderContext,
        slots: slots
      };
    },
    render: function render() {
      var h = arguments[0];
      return h(Panel, {
        "attrs": {
          "empty": this.empty,
          "trigger": this.trigger,
          "cascaderContext": this.cascaderContext
        },
        "scopedSlots": {
          empty: this.slots.empty
        }
      });
    }
  });

  var Cascader = withInstall(_Cascader, VueCompositionAPI__default["default"]);
  var CascaderPanel = withInstall(_CascaderPanel, VueCompositionAPI__default["default"]);

  var props$y = {
    closeBtn: {
      type: [String, Boolean, Function],
      "default": true
    },
    colorModes: {
      type: Array,
      "default": function _default() {
        return ["monochrome", "linear-gradient"];
      }
    },
    disabled: Boolean,
    enableAlpha: Boolean,
    format: {
      type: String,
      "default": "RGB",
      validator: function validator(val) {
        if (!val) return true;
        return ["RGB", "RGBA", "HSL", "HSLA", "HSB", "HSV", "HSVA", "HEX", "CMYK", "CSS"].includes(val);
      }
    },
    inputProps: {
      type: Object
    },
    multiple: Boolean,
    popupProps: {
      type: Object
    },
    recentColors: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    defaultRecentColors: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    selectInputProps: {
      type: Object
    },
    swatchColors: {
      type: Array
    },
    value: {
      type: String,
      "default": ""
    },
    defaultValue: {
      type: String,
      "default": ""
    },
    onChange: Function,
    onPaletteBarChange: Function,
    onRecentColorsChange: Function
  };

  var TD_COLOR_USED_COLORS_MAX_SIZE = 100;
  var COLOR_MODES = {
    monochrome: "\u5355\u8272",
    "linear-gradient": "\u6E10\u53D8"
  };
  var DEFAULT_COLOR = "#001F97";
  var DEFAULT_LINEAR_GRADIENT = "linear-gradient(90deg, rgba(241,29,0,1) 0%, rgba(73,106,220,1) 100%);";
  var DEFAULT_SYSTEM_SWATCH_COLORS = ["#ECF2FE", "#D4E3FC", "#BBD3FB", "#96BBF8", "#699EF5", "#4787F0", "#266FE8", "#0052D9", "#0034B5", "#001F97", "#FDECEE", "#F9D7D9", "#F8B9BE", "#F78D94", "#F36D78", "#E34D59", "#C9353F", "#B11F26", "#951114", "#680506", "#FEF3E6", "#F9E0C7", "#F7C797", "#F2995F", "#ED7B2F", "#D35A21", "#BA431B", "#9E3610", "#842B0B", "#5A1907", "#E8F8F2", "#BCEBDC", "#85DBBE", "#48C79C", "#00A870", "#078D5C", "#067945", "#056334", "#044F2A", "#033017"];
  var SATURATION_PANEL_DEFAULT_WIDTH = 230;
  var SATURATION_PANEL_DEFAULT_HEIGHT = 168;
  var SLIDER_DEFAULT_WIDTH = 186;
  var GRADIENT_SLIDER_DEFAULT_WIDTH = 176;

  var FORMATS = ["HEX", "RGB", "HSL", "HSV", "CMYK", "CSS"];

  var props$x = {
    allowUncheck: Boolean,
    checked: Boolean,
    defaultChecked: Boolean,
    "default": {
      type: [String, Function]
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    label: {
      type: [String, Function]
    },
    name: {
      type: String,
      "default": ""
    },
    value: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    onChange: Function
  };

  function ownKeys$1u(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1t(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1u(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1u(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$n = getClassPrefixMixins("radio");
  var _Radio = mixins(Vue__default["default"], classPrefixMixins$n).extend({
    name: "TRadio",
    inheritAttrs: false,
    props: _objectSpread$1t({}, props$x),
    inject: {
      radioGroup: {
        "default": void 0
      },
      radioButton: {
        "default": void 0
      }
    },
    data: function data() {
      return {
        formDisabled: void 0
      };
    },
    computed: {
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      }
    },
    render: function render() {
      var _ref;

      var h = arguments[0];
      var radioGroup = this.radioGroup,
          radioButton = this.radioButton;
      var inputProps = {
        checked: this.checked,
        disabled: this.tDisabled,
        value: this.value,
        name: this.name
      };

      if (radioGroup) {
        inputProps.checked = this.value === radioGroup.value;
        inputProps.disabled = this.tDisabled === void 0 ? radioGroup.disabled : this.tDisabled;
        inputProps.name = radioGroup.name;
      }

      var prefixCls = radioButton ? "".concat(this.componentName, "-button") : this.componentName;
      var inputClass = ["".concat(prefixCls), (_ref = {}, _defineProperty$3(_ref, this.commonStatusClassName.checked, inputProps.checked), _defineProperty$3(_ref, this.commonStatusClassName.disabled, inputProps.disabled), _ref)];
      return h("label", {
        "class": inputClass
      }, [h("input", helper([{
        "attrs": {
          "type": "radio"
        },
        "class": "".concat(prefixCls, "__former")
      }, {
        "on": _objectSpread$1t({}, omit$1(this.$listeners, ["change", "click"]))
      }, {
        "domProps": _objectSpread$1t({}, inputProps),
        "on": {
          "change": this.handleChange,
          "click": this.handleClick
        }
      }])), h("span", {
        "class": "".concat(prefixCls, "__input")
      }), h("span", {
        "class": "".concat(prefixCls, "__label")
      }, [renderContent(this, "default", "label")])]);
    },
    methods: {
      handleChange: function handleChange(e) {
        if (this.radioGroup) {
          this.radioGroup.handleRadioChange(this.value, {
            e: e
          });
        } else {
          var target = e.target;
          emitEvent(this, "change", target.checked, {
            e: e
          });
        }
      },
      handleClick: function handleClick(e) {
        this.$emit("click");
        if (!this.checked || !this.allowUncheck) return;

        if (this.radioGroup) {
          this.radioGroup.handleRadioChange(void 0, {
            e: e
          });
        } else {
          emitEvent(this, "change", false, {
            e: e
          });
        }
      }
    }
  });

  var props$w = {
    disabled: {
      type: Boolean,
      "default": void 0
    },
    name: {
      type: String,
      "default": ""
    },
    options: {
      type: Array
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    value: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Boolean],
      "default": void 0
    },
    variant: {
      type: String,
      "default": "outline",
      validator: function validator(val) {
        return ["outline", "primary-filled", "default-filled"].includes(val);
      }
    },
    onChange: Function
  };

  function ownKeys$1t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1s(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1t(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1t(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$m = getClassPrefixMixins("radio-group");
  var _RadioGroup = mixins(classPrefixMixins$m).extend({
    name: "TRadioGroup",
    props: _objectSpread$1s({}, props$w),
    components: {
      Radio: _Radio
    },
    provide: function provide() {
      return {
        radioGroup: this
      };
    },
    data: function data() {
      return {
        barStyle: {
          width: "0px",
          left: "0px"
        },
        observer: null
      };
    },
    computed: {
      checkedClassName: function checkedClassName() {
        return ".".concat(this.classPrefix, "-radio-button.").concat(this.commonStatusClassName.checked);
      }
    },
    render: function render(h) {
      var _this = this,
          _ref;

      var $scopedSlots = this.$scopedSlots;
      var children = $scopedSlots["default"] && $scopedSlots["default"](null);

      if (this.options && this.options.length) {
        children = this.options.map(function (option, index) {
          var opt = option;

          if (isNumber_1(option) || isString_1(option)) {
            opt = {
              value: option,
              label: option.toString()
            };
          }

          return h(_Radio, helper([{}, {
            "props": option
          }, {
            "key": "radio-group-options-".concat(opt.value, "-").concat(index),
            "attrs": {
              "name": _this.name,
              "checked": _this.value === opt.value,
              "disabled": "disabled" in opt ? opt.disabled : _this.disabled,
              "value": opt.value
            }
          }]), [typeof opt.label === "function" ? opt.label(h) : opt.label]);
        });
      }

      var groupClass = ["".concat(this.componentName), this.commonSizeClassName[this.size], (_ref = {}, _defineProperty$3(_ref, "".concat(this.componentName, "__outline"), this.variant === "outline"), _defineProperty$3(_ref, "".concat(this.componentName, "--filled"), this.variant.includes("filled")), _defineProperty$3(_ref, "".concat(this.componentName, "--primary-filled"), this.variant === "primary-filled"), _ref)];

      if (this.variant.includes("filled")) {
        children && children.push(h("div", {
          "style": this.barStyle,
          "class": "".concat(this.componentName, "__bg-block")
        }));
      }

      return h("div", {
        "class": groupClass
      }, [children]);
    },
    watch: {
      value: function value() {
        var _this2 = this;

        this.$nextTick(function () {
          return _this2.calcBarStyle();
        });
      }
    },
    created: function created() {
      this.$on("checked-change", this.handleRadioChange);
    },
    mounted: function mounted() {
      this.calcBarStyle();
      var observer = new MutationObserver(this.calcBarStyle);
      observer.observe(this.$el, {
        childList: true,
        attributes: true,
        subtree: true
      });
      this.observer = observer;
    },
    beforeDestroy: function beforeDestroy() {
      this.observer.disconnect();
    },
    methods: {
      handleRadioChange: function handleRadioChange(value, context) {
        emitEvent(this, "change", value, context);
      },
      calcDefaultBarStyle: function calcDefaultBarStyle() {
        var defaultNode = this.$el.cloneNode(true);
        var div = document.createElement("div");
        div.setAttribute("style", "position: absolute; visibility: hidden;");
        div.appendChild(defaultNode);
        document.body.appendChild(div);
        var defaultCheckedRadio = div.querySelector(this.checkedClassName);
        var offsetWidth = defaultCheckedRadio.offsetWidth,
            offsetLeft = defaultCheckedRadio.offsetLeft;
        this.barStyle = {
          width: "".concat(offsetWidth, "px"),
          left: "".concat(offsetLeft, "px")
        };
        document.body.removeChild(div);
      },
      calcBarStyle: function calcBarStyle() {
        if (this.variant === "outline") return;
        var checkedRadio = this.$el.querySelector(this.checkedClassName);
        if (!checkedRadio) return;
        var offsetWidth = checkedRadio.offsetWidth,
            offsetLeft = checkedRadio.offsetLeft;

        if (!offsetWidth) {
          this.calcDefaultBarStyle();
        } else {
          this.barStyle = {
            width: "".concat(offsetWidth, "px"),
            left: "".concat(offsetLeft, "px")
          };
        }
      }
    }
  });

  function ownKeys$1s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1r(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1s(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _RadioButton = Vue__default["default"].extend({
    name: "TRadioButton",
    inheritAttrs: false,
    props: _objectSpread$1r({}, props$x),
    components: {
      Radio: _Radio
    },
    provide: function provide() {
      return {
        radioButton: this
      };
    },
    inject: {
      radioGroup: {
        "default": void 0
      }
    },
    render: function render() {
      var h = arguments[0];
      var $props = this.$props,
          $listeners = this.$listeners,
          radioGroup = this.radioGroup;
      var radioProps = {
        props: _objectSpread$1r({}, $props),
        on: $listeners
      };

      if (radioGroup) {
        radioProps.props.checked = $props.value === radioGroup.value;
        radioProps.props.disabled = $props.disabled === void 0 ? radioGroup.disabled : $props.disabled;
        radioProps.props.name = radioGroup.name;
      }

      return h(_Radio, helper([{}, radioProps]), [renderContent(this, "default", "label")]);
    }
  });

  var Radio = withInstall(mapProps(["checked"], {
    model: {
      prop: "checked",
      event: "change"
    }
  })(_Radio));
  var RadioGroup = withInstall(mapProps(["value"], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_RadioGroup));
  var RadioButton = withInstall(_RadioButton);

  var BASE_COMPONENT_NAME = "color-picker";
  var useBaseClassName = function useBaseClassName(className) {
    var baseClassName = usePrefixClass(BASE_COMPONENT_NAME);
    return VueCompositionAPI.computed(function () {
      return className ? "".concat(baseClassName.value, "-").concat(className) : baseClassName.value;
    });
  };

  function ownKeys$1r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1r(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var PanelHeader = VueCompositionAPI.defineComponent({
    name: "PanelHeader",
    components: {
      TRadioGroup: RadioGroup,
      TRadioButton: RadioButton
    },
    props: _objectSpread$1q(_objectSpread$1q({}, props$y), {}, {
      mode: {
        type: String,
        "default": "color"
      },
      togglePopup: {
        type: Function
      },
      handleModeChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    }),
    setup: function setup(props2) {
      var baseClassName = useBaseClassName();
      var modeValue = VueCompositionAPI.ref(props2.mode);
      VueCompositionAPI.watch(function () {
        return props2.mode;
      }, function (v) {
        modeValue.value = v;
      });
      return {
        baseClassName: baseClassName,
        modeValue: modeValue
      };
    },
    render: function render() {
      var _this$colorModes,
          _this$colorModes2,
          _this = this;

      var h = arguments[0];

      if (((_this$colorModes = this.colorModes) === null || _this$colorModes === void 0 ? void 0 : _this$colorModes.length) === 1) {
        return null;
      }

      var baseClassName = this.baseClassName;
      return h("div", {
        "class": "".concat(baseClassName, "__head")
      }, [h("div", {
        "class": "".concat(baseClassName, "__mode")
      }, [((_this$colorModes2 = this.colorModes) === null || _this$colorModes2 === void 0 ? void 0 : _this$colorModes2.length) === 1 ? COLOR_MODES[this.colorModes[0]] : h("t-radio-group", {
        "attrs": {
          "variant": "default-filled",
          "size": "small"
        },
        "on": {
          "change": this.handleModeChange
        },
        "model": {
          value: _this.modeValue,
          callback: function callback($$v) {
            _this.modeValue = $$v;
          }
        }
      }, [Object.keys(COLOR_MODES).map(function (key) {
        return h("t-radio-button", {
          "key": key,
          "attrs": {
            "value": key
          }
        }, [COLOR_MODES[key]]);
      })])])]);
    }
  });

  var rgb2cmyk = function rgb2cmyk(red, green, blue) {
    var computedC = 0;
    var computedM = 0;
    var computedY = 0;
    var computedK = 0;
    var r = parseInt("".concat(red).replace(/\s/g, ""), 10);
    var g = parseInt("".concat(green).replace(/\s/g, ""), 10);
    var b = parseInt("".concat(blue).replace(/\s/g, ""), 10);

    if (r === 0 && g === 0 && b === 0) {
      computedK = 1;
      return [0, 0, 0, 1];
    }

    computedC = 1 - r / 255;
    computedM = 1 - g / 255;
    computedY = 1 - b / 255;
    var minCMY = Math.min(computedC, Math.min(computedM, computedY));
    computedC = (computedC - minCMY) / (1 - minCMY);
    computedM = (computedM - minCMY) / (1 - minCMY);
    computedY = (computedY - minCMY) / (1 - minCMY);
    computedK = minCMY;
    return [computedC, computedM, computedY, computedK];
  };
  var cmyk2rgb = function cmyk2rgb(cyan, magenta, yellow, black) {
    var c = cyan / 100;
    var m = magenta / 100;
    var y = yellow / 100;
    var k = black / 100;
    c = c * (1 - k) + k;
    m = m * (1 - k) + k;
    y = y * (1 - k) + k;
    var r = 1 - c;
    var g = 1 - m;
    var b = 1 - y;
    r = Math.round(255 * r);
    g = Math.round(255 * g);
    b = Math.round(255 * b);
    return {
      r: r,
      g: g,
      b: b
    };
  };
  var REG_CMYK_STRING = /cmyk\((\d+%?),(\d+%?),(\d+%?),(\d+%?)\)/;

  var toNumber = function toNumber(str) {
    return Math.max(0, Math.min(255, parseInt(str, 10)));
  };

  var cmykInputToColor = function cmykInputToColor(input) {
    if (/cmyk/i.test(input)) {
      var str = input.replace(/\s/g, "");
      var match = str.match(REG_CMYK_STRING);
      var c = toNumber(match[1]);
      var m = toNumber(match[2]);
      var y = toNumber(match[3]);
      var k = toNumber(match[4]);

      var _cmyk2rgb = cmyk2rgb(c, m, y, k),
          r = _cmyk2rgb.r,
          g = _cmyk2rgb.g,
          b = _cmyk2rgb.b;

      return "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")");
    }

    return input;
  };

  var tinycolor = createCommonjsModule(function (module) {
    // TinyColor v1.4.2
    // https://github.com/bgrins/TinyColor
    // Brian Grinstead, MIT License
    (function (Math) {
      var trimLeft = /^\s+/,
          trimRight = /\s+$/,
          tinyCounter = 0,
          mathRound = Math.round,
          mathMin = Math.min,
          mathMax = Math.max,
          mathRandom = Math.random;

      function tinycolor(color, opts) {
        color = color ? color : '';
        opts = opts || {}; // If input is already a tinycolor, return itself

        if (color instanceof tinycolor) {
          return color;
        } // If we are called as a function, call using new instead


        if (!(this instanceof tinycolor)) {
          return new tinycolor(color, opts);
        }

        var rgb = inputToRGB(color);
        this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;
        this._gradientType = opts.gradientType; // Don't let the range of [0,255] come back in [0,1].
        // Potentially lose a little bit of precision here, but will fix issues where
        // .5 gets interpreted as half of the total, instead of half of 1
        // If it was supposed to be 128, this was already taken care of by `inputToRgb`

        if (this._r < 1) {
          this._r = mathRound(this._r);
        }

        if (this._g < 1) {
          this._g = mathRound(this._g);
        }

        if (this._b < 1) {
          this._b = mathRound(this._b);
        }

        this._ok = rgb.ok;
        this._tc_id = tinyCounter++;
      }

      tinycolor.prototype = {
        isDark: function isDark() {
          return this.getBrightness() < 128;
        },
        isLight: function isLight() {
          return !this.isDark();
        },
        isValid: function isValid() {
          return this._ok;
        },
        getOriginalInput: function getOriginalInput() {
          return this._originalInput;
        },
        getFormat: function getFormat() {
          return this._format;
        },
        getAlpha: function getAlpha() {
          return this._a;
        },
        getBrightness: function getBrightness() {
          //http://www.w3.org/TR/AERT#color-contrast
          var rgb = this.toRgb();
          return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
        },
        getLuminance: function getLuminance() {
          //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
          var rgb = this.toRgb();
          var RsRGB, GsRGB, BsRGB, R, G, B;
          RsRGB = rgb.r / 255;
          GsRGB = rgb.g / 255;
          BsRGB = rgb.b / 255;

          if (RsRGB <= 0.03928) {
            R = RsRGB / 12.92;
          } else {
            R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
          }

          if (GsRGB <= 0.03928) {
            G = GsRGB / 12.92;
          } else {
            G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
          }

          if (BsRGB <= 0.03928) {
            B = BsRGB / 12.92;
          } else {
            B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
          }

          return 0.2126 * R + 0.7152 * G + 0.0722 * B;
        },
        setAlpha: function setAlpha(value) {
          this._a = boundAlpha(value);
          this._roundA = mathRound(100 * this._a) / 100;
          return this;
        },
        toHsv: function toHsv() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          return {
            h: hsv.h * 360,
            s: hsv.s,
            v: hsv.v,
            a: this._a
          };
        },
        toHsvString: function toHsvString() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          var h = mathRound(hsv.h * 360),
              s = mathRound(hsv.s * 100),
              v = mathRound(hsv.v * 100);
          return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
        },
        toHsl: function toHsl() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          return {
            h: hsl.h * 360,
            s: hsl.s,
            l: hsl.l,
            a: this._a
          };
        },
        toHslString: function toHslString() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          var h = mathRound(hsl.h * 360),
              s = mathRound(hsl.s * 100),
              l = mathRound(hsl.l * 100);
          return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
        },
        toHex: function toHex(allow3Char) {
          return rgbToHex(this._r, this._g, this._b, allow3Char);
        },
        toHexString: function toHexString(allow3Char) {
          return '#' + this.toHex(allow3Char);
        },
        toHex8: function toHex8(allow4Char) {
          return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
        },
        toHex8String: function toHex8String(allow4Char) {
          return '#' + this.toHex8(allow4Char);
        },
        toRgb: function toRgb() {
          return {
            r: mathRound(this._r),
            g: mathRound(this._g),
            b: mathRound(this._b),
            a: this._a
          };
        },
        toRgbString: function toRgbString() {
          return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
        },
        toPercentageRgb: function toPercentageRgb() {
          return {
            r: mathRound(bound01(this._r, 255) * 100) + "%",
            g: mathRound(bound01(this._g, 255) * 100) + "%",
            b: mathRound(bound01(this._b, 255) * 100) + "%",
            a: this._a
          };
        },
        toPercentageRgbString: function toPercentageRgbString() {
          return this._a == 1 ? "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
        },
        toName: function toName() {
          if (this._a === 0) {
            return "transparent";
          }

          if (this._a < 1) {
            return false;
          }

          return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
        },
        toFilter: function toFilter(secondColor) {
          var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
          var secondHex8String = hex8String;
          var gradientType = this._gradientType ? "GradientType = 1, " : "";

          if (secondColor) {
            var s = tinycolor(secondColor);
            secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
          }

          return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
        },
        toString: function toString(format) {
          var formatSet = !!format;
          format = format || this._format;
          var formattedString = false;
          var hasAlpha = this._a < 1 && this._a >= 0;
          var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");

          if (needsAlphaFormat) {
            // Special case for "transparent", all other non-alpha formats
            // will return rgba when there is transparency.
            if (format === "name" && this._a === 0) {
              return this.toName();
            }

            return this.toRgbString();
          }

          if (format === "rgb") {
            formattedString = this.toRgbString();
          }

          if (format === "prgb") {
            formattedString = this.toPercentageRgbString();
          }

          if (format === "hex" || format === "hex6") {
            formattedString = this.toHexString();
          }

          if (format === "hex3") {
            formattedString = this.toHexString(true);
          }

          if (format === "hex4") {
            formattedString = this.toHex8String(true);
          }

          if (format === "hex8") {
            formattedString = this.toHex8String();
          }

          if (format === "name") {
            formattedString = this.toName();
          }

          if (format === "hsl") {
            formattedString = this.toHslString();
          }

          if (format === "hsv") {
            formattedString = this.toHsvString();
          }

          return formattedString || this.toHexString();
        },
        clone: function clone() {
          return tinycolor(this.toString());
        },
        _applyModification: function _applyModification(fn, args) {
          var color = fn.apply(null, [this].concat([].slice.call(args)));
          this._r = color._r;
          this._g = color._g;
          this._b = color._b;
          this.setAlpha(color._a);
          return this;
        },
        lighten: function lighten() {
          return this._applyModification(_lighten, arguments);
        },
        brighten: function brighten() {
          return this._applyModification(_brighten, arguments);
        },
        darken: function darken() {
          return this._applyModification(_darken, arguments);
        },
        desaturate: function desaturate() {
          return this._applyModification(_desaturate, arguments);
        },
        saturate: function saturate() {
          return this._applyModification(_saturate, arguments);
        },
        greyscale: function greyscale() {
          return this._applyModification(_greyscale, arguments);
        },
        spin: function spin() {
          return this._applyModification(_spin, arguments);
        },
        _applyCombination: function _applyCombination(fn, args) {
          return fn.apply(null, [this].concat([].slice.call(args)));
        },
        analogous: function analogous() {
          return this._applyCombination(_analogous, arguments);
        },
        complement: function complement() {
          return this._applyCombination(_complement, arguments);
        },
        monochromatic: function monochromatic() {
          return this._applyCombination(_monochromatic, arguments);
        },
        splitcomplement: function splitcomplement() {
          return this._applyCombination(_splitcomplement, arguments);
        },
        triad: function triad() {
          return this._applyCombination(_triad, arguments);
        },
        tetrad: function tetrad() {
          return this._applyCombination(_tetrad, arguments);
        }
      }; // If input is an object, force 1 into "1.0" to handle ratios properly
      // String input requires "1.0" as input, so 1 will be treated as 1

      tinycolor.fromRatio = function (color, opts) {
        if (_typeof$1(color) == "object") {
          var newColor = {};

          for (var i in color) {
            if (color.hasOwnProperty(i)) {
              if (i === "a") {
                newColor[i] = color[i];
              } else {
                newColor[i] = convertToPercentage(color[i]);
              }
            }
          }

          color = newColor;
        }

        return tinycolor(color, opts);
      }; // Given a string or object, convert that input to RGB
      // Possible string inputs:
      //
      //     "red"
      //     "#f00" or "f00"
      //     "#ff0000" or "ff0000"
      //     "#ff000000" or "ff000000"
      //     "rgb 255 0 0" or "rgb (255, 0, 0)"
      //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
      //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
      //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
      //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
      //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
      //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
      //


      function inputToRGB(color) {
        var rgb = {
          r: 0,
          g: 0,
          b: 0
        };
        var a = 1;
        var s = null;
        var v = null;
        var l = null;
        var ok = false;
        var format = false;

        if (typeof color == "string") {
          color = stringInputToObject(color);
        }

        if (_typeof$1(color) == "object") {
          if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
            rgb = rgbToRgb(color.r, color.g, color.b);
            ok = true;
            format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
          } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
            s = convertToPercentage(color.s);
            v = convertToPercentage(color.v);
            rgb = hsvToRgb(color.h, s, v);
            ok = true;
            format = "hsv";
          } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
            s = convertToPercentage(color.s);
            l = convertToPercentage(color.l);
            rgb = hslToRgb(color.h, s, l);
            ok = true;
            format = "hsl";
          }

          if (color.hasOwnProperty("a")) {
            a = color.a;
          }
        }

        a = boundAlpha(a);
        return {
          ok: ok,
          format: color.format || format,
          r: mathMin(255, mathMax(rgb.r, 0)),
          g: mathMin(255, mathMax(rgb.g, 0)),
          b: mathMin(255, mathMax(rgb.b, 0)),
          a: a
        };
      } // Conversion Functions
      // --------------------
      // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
      // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
      // `rgbToRgb`
      // Handle bounds / percentage checking to conform to CSS color spec
      // <http://www.w3.org/TR/css3-color/>
      // *Assumes:* r, g, b in [0, 255] or [0, 1]
      // *Returns:* { r, g, b } in [0, 255]


      function rgbToRgb(r, g, b) {
        return {
          r: bound01(r, 255) * 255,
          g: bound01(g, 255) * 255,
          b: bound01(b, 255) * 255
        };
      } // `rgbToHsl`
      // Converts an RGB color value to HSL.
      // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
      // *Returns:* { h, s, l } in [0,1]


      function rgbToHsl(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max = mathMax(r, g, b),
            min = mathMin(r, g, b);
        var h,
            s,
            l = (max + min) / 2;

        if (max == min) {
          h = s = 0; // achromatic
        } else {
          var d = max - min;
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

          switch (max) {
            case r:
              h = (g - b) / d + (g < b ? 6 : 0);
              break;

            case g:
              h = (b - r) / d + 2;
              break;

            case b:
              h = (r - g) / d + 4;
              break;
          }

          h /= 6;
        }

        return {
          h: h,
          s: s,
          l: l
        };
      } // `hslToRgb`
      // Converts an HSL color value to RGB.
      // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
      // *Returns:* { r, g, b } in the set [0, 255]


      function hslToRgb(h, s, l) {
        var r, g, b;
        h = bound01(h, 360);
        s = bound01(s, 100);
        l = bound01(l, 100);

        function hue2rgb(p, q, t) {
          if (t < 0) t += 1;
          if (t > 1) t -= 1;
          if (t < 1 / 6) return p + (q - p) * 6 * t;
          if (t < 1 / 2) return q;
          if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
          return p;
        }

        if (s === 0) {
          r = g = b = l; // achromatic
        } else {
          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p = 2 * l - q;
          r = hue2rgb(p, q, h + 1 / 3);
          g = hue2rgb(p, q, h);
          b = hue2rgb(p, q, h - 1 / 3);
        }

        return {
          r: r * 255,
          g: g * 255,
          b: b * 255
        };
      } // `rgbToHsv`
      // Converts an RGB color value to HSV
      // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
      // *Returns:* { h, s, v } in [0,1]


      function rgbToHsv(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max = mathMax(r, g, b),
            min = mathMin(r, g, b);
        var h,
            s,
            v = max;
        var d = max - min;
        s = max === 0 ? 0 : d / max;

        if (max == min) {
          h = 0; // achromatic
        } else {
          switch (max) {
            case r:
              h = (g - b) / d + (g < b ? 6 : 0);
              break;

            case g:
              h = (b - r) / d + 2;
              break;

            case b:
              h = (r - g) / d + 4;
              break;
          }

          h /= 6;
        }

        return {
          h: h,
          s: s,
          v: v
        };
      } // `hsvToRgb`
      // Converts an HSV color value to RGB.
      // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
      // *Returns:* { r, g, b } in the set [0, 255]


      function hsvToRgb(h, s, v) {
        h = bound01(h, 360) * 6;
        s = bound01(s, 100);
        v = bound01(v, 100);
        var i = Math.floor(h),
            f = h - i,
            p = v * (1 - s),
            q = v * (1 - f * s),
            t = v * (1 - (1 - f) * s),
            mod = i % 6,
            r = [v, q, p, p, t, v][mod],
            g = [t, v, v, q, p, p][mod],
            b = [p, p, t, v, v, q][mod];
        return {
          r: r * 255,
          g: g * 255,
          b: b * 255
        };
      } // `rgbToHex`
      // Converts an RGB color to hex
      // Assumes r, g, and b are contained in the set [0, 255]
      // Returns a 3 or 6 character hex


      function rgbToHex(r, g, b, allow3Char) {
        var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))]; // Return a 3 character hex if possible

        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
        }

        return hex.join("");
      } // `rgbaToHex`
      // Converts an RGBA color plus alpha transparency to hex
      // Assumes r, g, b are contained in the set [0, 255] and
      // a in [0, 1]. Returns a 4 or 8 character rgba hex


      function rgbaToHex(r, g, b, a, allow4Char) {
        var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16)), pad2(convertDecimalToHex(a))]; // Return a 4 character hex if possible

        if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
        }

        return hex.join("");
      } // `rgbaToArgbHex`
      // Converts an RGBA color to an ARGB Hex8 string
      // Rarely used, but required for "toFilter()"


      function rgbaToArgbHex(r, g, b, a) {
        var hex = [pad2(convertDecimalToHex(a)), pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];
        return hex.join("");
      } // `equals`
      // Can be called with any tinycolor input


      tinycolor.equals = function (color1, color2) {
        if (!color1 || !color2) {
          return false;
        }

        return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
      };

      tinycolor.random = function () {
        return tinycolor.fromRatio({
          r: mathRandom(),
          g: mathRandom(),
          b: mathRandom()
        });
      }; // Modification Functions
      // ----------------------
      // Thanks to less.js for some of the basics here
      // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>


      function _desaturate(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.s -= amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
      }

      function _saturate(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.s += amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
      }

      function _greyscale(color) {
        return tinycolor(color).desaturate(100);
      }

      function _lighten(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.l += amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
      }

      function _brighten(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var rgb = tinycolor(color).toRgb();
        rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));
        rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));
        rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));
        return tinycolor(rgb);
      }

      function _darken(color, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color).toHsl();
        hsl.l -= amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
      } // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
      // Values outside of this range will be wrapped into this range.


      function _spin(color, amount) {
        var hsl = tinycolor(color).toHsl();
        var hue = (hsl.h + amount) % 360;
        hsl.h = hue < 0 ? 360 + hue : hue;
        return tinycolor(hsl);
      } // Combination Functions
      // ---------------------
      // Thanks to jQuery xColor for some of the ideas behind these
      // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>


      function _complement(color) {
        var hsl = tinycolor(color).toHsl();
        hsl.h = (hsl.h + 180) % 360;
        return tinycolor(hsl);
      }

      function _triad(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [tinycolor(color), tinycolor({
          h: (h + 120) % 360,
          s: hsl.s,
          l: hsl.l
        }), tinycolor({
          h: (h + 240) % 360,
          s: hsl.s,
          l: hsl.l
        })];
      }

      function _tetrad(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [tinycolor(color), tinycolor({
          h: (h + 90) % 360,
          s: hsl.s,
          l: hsl.l
        }), tinycolor({
          h: (h + 180) % 360,
          s: hsl.s,
          l: hsl.l
        }), tinycolor({
          h: (h + 270) % 360,
          s: hsl.s,
          l: hsl.l
        })];
      }

      function _splitcomplement(color) {
        var hsl = tinycolor(color).toHsl();
        var h = hsl.h;
        return [tinycolor(color), tinycolor({
          h: (h + 72) % 360,
          s: hsl.s,
          l: hsl.l
        }), tinycolor({
          h: (h + 216) % 360,
          s: hsl.s,
          l: hsl.l
        })];
      }

      function _analogous(color, results, slices) {
        results = results || 6;
        slices = slices || 30;
        var hsl = tinycolor(color).toHsl();
        var part = 360 / slices;
        var ret = [tinycolor(color)];

        for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {
          hsl.h = (hsl.h + part) % 360;
          ret.push(tinycolor(hsl));
        }

        return ret;
      }

      function _monochromatic(color, results) {
        results = results || 6;
        var hsv = tinycolor(color).toHsv();
        var h = hsv.h,
            s = hsv.s,
            v = hsv.v;
        var ret = [];
        var modification = 1 / results;

        while (results--) {
          ret.push(tinycolor({
            h: h,
            s: s,
            v: v
          }));
          v = (v + modification) % 1;
        }

        return ret;
      } // Utility Functions
      // ---------------------


      tinycolor.mix = function (color1, color2, amount) {
        amount = amount === 0 ? 0 : amount || 50;
        var rgb1 = tinycolor(color1).toRgb();
        var rgb2 = tinycolor(color2).toRgb();
        var p = amount / 100;
        var rgba = {
          r: (rgb2.r - rgb1.r) * p + rgb1.r,
          g: (rgb2.g - rgb1.g) * p + rgb1.g,
          b: (rgb2.b - rgb1.b) * p + rgb1.b,
          a: (rgb2.a - rgb1.a) * p + rgb1.a
        };
        return tinycolor(rgba);
      }; // Readability Functions
      // ---------------------
      // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)
      // `contrast`
      // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)


      tinycolor.readability = function (color1, color2) {
        var c1 = tinycolor(color1);
        var c2 = tinycolor(color2);
        return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
      }; // `isReadable`
      // Ensure that foreground and background color combinations meet WCAG2 guidelines.
      // The third argument is an optional Object.
      //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
      //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
      // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.
      // *Example*
      //    tinycolor.isReadable("#000", "#111") => false
      //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false


      tinycolor.isReadable = function (color1, color2, wcag2) {
        var readability = tinycolor.readability(color1, color2);
        var wcag2Parms, out;
        out = false;
        wcag2Parms = validateWCAG2Parms(wcag2);

        switch (wcag2Parms.level + wcag2Parms.size) {
          case "AAsmall":
          case "AAAlarge":
            out = readability >= 4.5;
            break;

          case "AAlarge":
            out = readability >= 3;
            break;

          case "AAAsmall":
            out = readability >= 7;
            break;
        }

        return out;
      }; // `mostReadable`
      // Given a base color and a list of possible foreground or background
      // colors for that base, returns the most readable color.
      // Optionally returns Black or White if the most readable color is unreadable.
      // *Example*
      //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
      //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
      //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
      //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"


      tinycolor.mostReadable = function (baseColor, colorList, args) {
        var bestColor = null;
        var bestScore = 0;
        var readability;
        var includeFallbackColors, level, size;
        args = args || {};
        includeFallbackColors = args.includeFallbackColors;
        level = args.level;
        size = args.size;

        for (var i = 0; i < colorList.length; i++) {
          readability = tinycolor.readability(baseColor, colorList[i]);

          if (readability > bestScore) {
            bestScore = readability;
            bestColor = tinycolor(colorList[i]);
          }
        }

        if (tinycolor.isReadable(baseColor, bestColor, {
          "level": level,
          "size": size
        }) || !includeFallbackColors) {
          return bestColor;
        } else {
          args.includeFallbackColors = false;
          return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
        }
      }; // Big List of Colors
      // ------------------
      // <http://www.w3.org/TR/css3-color/#svg-color>


      var names = tinycolor.names = {
        aliceblue: "f0f8ff",
        antiquewhite: "faebd7",
        aqua: "0ff",
        aquamarine: "7fffd4",
        azure: "f0ffff",
        beige: "f5f5dc",
        bisque: "ffe4c4",
        black: "000",
        blanchedalmond: "ffebcd",
        blue: "00f",
        blueviolet: "8a2be2",
        brown: "a52a2a",
        burlywood: "deb887",
        burntsienna: "ea7e5d",
        cadetblue: "5f9ea0",
        chartreuse: "7fff00",
        chocolate: "d2691e",
        coral: "ff7f50",
        cornflowerblue: "6495ed",
        cornsilk: "fff8dc",
        crimson: "dc143c",
        cyan: "0ff",
        darkblue: "00008b",
        darkcyan: "008b8b",
        darkgoldenrod: "b8860b",
        darkgray: "a9a9a9",
        darkgreen: "006400",
        darkgrey: "a9a9a9",
        darkkhaki: "bdb76b",
        darkmagenta: "8b008b",
        darkolivegreen: "556b2f",
        darkorange: "ff8c00",
        darkorchid: "9932cc",
        darkred: "8b0000",
        darksalmon: "e9967a",
        darkseagreen: "8fbc8f",
        darkslateblue: "483d8b",
        darkslategray: "2f4f4f",
        darkslategrey: "2f4f4f",
        darkturquoise: "00ced1",
        darkviolet: "9400d3",
        deeppink: "ff1493",
        deepskyblue: "00bfff",
        dimgray: "696969",
        dimgrey: "696969",
        dodgerblue: "1e90ff",
        firebrick: "b22222",
        floralwhite: "fffaf0",
        forestgreen: "228b22",
        fuchsia: "f0f",
        gainsboro: "dcdcdc",
        ghostwhite: "f8f8ff",
        gold: "ffd700",
        goldenrod: "daa520",
        gray: "808080",
        green: "008000",
        greenyellow: "adff2f",
        grey: "808080",
        honeydew: "f0fff0",
        hotpink: "ff69b4",
        indianred: "cd5c5c",
        indigo: "4b0082",
        ivory: "fffff0",
        khaki: "f0e68c",
        lavender: "e6e6fa",
        lavenderblush: "fff0f5",
        lawngreen: "7cfc00",
        lemonchiffon: "fffacd",
        lightblue: "add8e6",
        lightcoral: "f08080",
        lightcyan: "e0ffff",
        lightgoldenrodyellow: "fafad2",
        lightgray: "d3d3d3",
        lightgreen: "90ee90",
        lightgrey: "d3d3d3",
        lightpink: "ffb6c1",
        lightsalmon: "ffa07a",
        lightseagreen: "20b2aa",
        lightskyblue: "87cefa",
        lightslategray: "789",
        lightslategrey: "789",
        lightsteelblue: "b0c4de",
        lightyellow: "ffffe0",
        lime: "0f0",
        limegreen: "32cd32",
        linen: "faf0e6",
        magenta: "f0f",
        maroon: "800000",
        mediumaquamarine: "66cdaa",
        mediumblue: "0000cd",
        mediumorchid: "ba55d3",
        mediumpurple: "9370db",
        mediumseagreen: "3cb371",
        mediumslateblue: "7b68ee",
        mediumspringgreen: "00fa9a",
        mediumturquoise: "48d1cc",
        mediumvioletred: "c71585",
        midnightblue: "191970",
        mintcream: "f5fffa",
        mistyrose: "ffe4e1",
        moccasin: "ffe4b5",
        navajowhite: "ffdead",
        navy: "000080",
        oldlace: "fdf5e6",
        olive: "808000",
        olivedrab: "6b8e23",
        orange: "ffa500",
        orangered: "ff4500",
        orchid: "da70d6",
        palegoldenrod: "eee8aa",
        palegreen: "98fb98",
        paleturquoise: "afeeee",
        palevioletred: "db7093",
        papayawhip: "ffefd5",
        peachpuff: "ffdab9",
        peru: "cd853f",
        pink: "ffc0cb",
        plum: "dda0dd",
        powderblue: "b0e0e6",
        purple: "800080",
        rebeccapurple: "663399",
        red: "f00",
        rosybrown: "bc8f8f",
        royalblue: "4169e1",
        saddlebrown: "8b4513",
        salmon: "fa8072",
        sandybrown: "f4a460",
        seagreen: "2e8b57",
        seashell: "fff5ee",
        sienna: "a0522d",
        silver: "c0c0c0",
        skyblue: "87ceeb",
        slateblue: "6a5acd",
        slategray: "708090",
        slategrey: "708090",
        snow: "fffafa",
        springgreen: "00ff7f",
        steelblue: "4682b4",
        tan: "d2b48c",
        teal: "008080",
        thistle: "d8bfd8",
        tomato: "ff6347",
        turquoise: "40e0d0",
        violet: "ee82ee",
        wheat: "f5deb3",
        white: "fff",
        whitesmoke: "f5f5f5",
        yellow: "ff0",
        yellowgreen: "9acd32"
      }; // Make it easy to access colors via `hexNames[hex]`

      var hexNames = tinycolor.hexNames = flip(names); // Utilities
      // ---------
      // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`

      function flip(o) {
        var flipped = {};

        for (var i in o) {
          if (o.hasOwnProperty(i)) {
            flipped[o[i]] = i;
          }
        }

        return flipped;
      } // Return a valid alpha value [0,1] with all invalid values being set to 1


      function boundAlpha(a) {
        a = parseFloat(a);

        if (isNaN(a) || a < 0 || a > 1) {
          a = 1;
        }

        return a;
      } // Take input from [0, n] and return it as [0, 1]


      function bound01(n, max) {
        if (isOnePointZero(n)) {
          n = "100%";
        }

        var processPercent = isPercentage(n);
        n = mathMin(max, mathMax(0, parseFloat(n))); // Automatically convert percentage into number

        if (processPercent) {
          n = parseInt(n * max, 10) / 100;
        } // Handle floating point rounding errors


        if (Math.abs(n - max) < 0.000001) {
          return 1;
        } // Convert into [0, 1] range if it isn't already


        return n % max / parseFloat(max);
      } // Force a number between 0 and 1


      function clamp01(val) {
        return mathMin(1, mathMax(0, val));
      } // Parse a base-16 hex value into a base-10 integer


      function parseIntFromHex(val) {
        return parseInt(val, 16);
      } // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
      // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>


      function isOnePointZero(n) {
        return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
      } // Check to see if string passed in is a percentage


      function isPercentage(n) {
        return typeof n === "string" && n.indexOf('%') != -1;
      } // Force a hex value to have 2 characters


      function pad2(c) {
        return c.length == 1 ? '0' + c : '' + c;
      } // Replace a decimal with it's percentage value


      function convertToPercentage(n) {
        if (n <= 1) {
          n = n * 100 + "%";
        }

        return n;
      } // Converts a decimal to a hex value


      function convertDecimalToHex(d) {
        return Math.round(parseFloat(d) * 255).toString(16);
      } // Converts a hex value to a decimal


      function convertHexToDecimal(h) {
        return parseIntFromHex(h) / 255;
      }

      var matchers = function () {
        // <http://www.w3.org/TR/css3-values/#integers>
        var CSS_INTEGER = "[-\\+]?\\d+%?"; // <http://www.w3.org/TR/css3-values/#number-value>

        var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?"; // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.

        var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")"; // Actual matching.
        // Parentheses and commas are optional, but not required.
        // Whitespace can take the place of commas or opening paren

        var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        return {
          CSS_UNIT: new RegExp(CSS_UNIT),
          rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
          rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
          hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
          hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
          hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
          hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
          hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
          hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
        };
      }(); // `isValidCSSUnit`
      // Take in a single string / number and check to see if it looks like a CSS unit
      // (see `matchers` above for definition).


      function isValidCSSUnit(color) {
        return !!matchers.CSS_UNIT.exec(color);
      } // `stringInputToObject`
      // Permissive string parsing.  Take in a number of formats, and output an object
      // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`


      function stringInputToObject(color) {
        color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
        var named = false;

        if (names[color]) {
          color = names[color];
          named = true;
        } else if (color == 'transparent') {
          return {
            r: 0,
            g: 0,
            b: 0,
            a: 0,
            format: "name"
          };
        } // Try to match string input using regular expressions.
        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
        // Just return an object and let the conversion functions handle that.
        // This way the result will be the same whether the tinycolor is initialized with string or object.


        var match;

        if (match = matchers.rgb.exec(color)) {
          return {
            r: match[1],
            g: match[2],
            b: match[3]
          };
        }

        if (match = matchers.rgba.exec(color)) {
          return {
            r: match[1],
            g: match[2],
            b: match[3],
            a: match[4]
          };
        }

        if (match = matchers.hsl.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            l: match[3]
          };
        }

        if (match = matchers.hsla.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            l: match[3],
            a: match[4]
          };
        }

        if (match = matchers.hsv.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            v: match[3]
          };
        }

        if (match = matchers.hsva.exec(color)) {
          return {
            h: match[1],
            s: match[2],
            v: match[3],
            a: match[4]
          };
        }

        if (match = matchers.hex8.exec(color)) {
          return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            a: convertHexToDecimal(match[4]),
            format: named ? "name" : "hex8"
          };
        }

        if (match = matchers.hex6.exec(color)) {
          return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named ? "name" : "hex"
          };
        }

        if (match = matchers.hex4.exec(color)) {
          return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            a: convertHexToDecimal(match[4] + '' + match[4]),
            format: named ? "name" : "hex8"
          };
        }

        if (match = matchers.hex3.exec(color)) {
          return {
            r: parseIntFromHex(match[1] + '' + match[1]),
            g: parseIntFromHex(match[2] + '' + match[2]),
            b: parseIntFromHex(match[3] + '' + match[3]),
            format: named ? "name" : "hex"
          };
        }

        return false;
      }

      function validateWCAG2Parms(parms) {
        // return valid WCAG2 parms for isReadable.
        // If input parms are invalid, return {"level":"AA", "size":"small"}
        var level, size;
        parms = parms || {
          "level": "AA",
          "size": "small"
        };
        level = (parms.level || "AA").toUpperCase();
        size = (parms.size || "small").toLowerCase();

        if (level !== "AA" && level !== "AAA") {
          level = "AA";
        }

        if (size !== "small" && size !== "large") {
          size = "small";
        }

        return {
          "level": level,
          "size": size
        };
      } // Node: Export function


      if (module.exports) {
        module.exports = tinycolor;
      } // AMD/requirejs: Define the module
      else {
        window.tinycolor = tinycolor;
      }
    })(Math);
  });

  var combineRegExp = function combineRegExp(regexpList, flags) {
    var source = "";

    for (var i = 0; i < regexpList.length; i++) {
      if (typeof regexpList[i] === "string") {
        source += regexpList[i];
      } else {
        source += regexpList[i].source;
      }
    }

    return new RegExp(source, flags);
  };

  var generateRegExp = function generateRegExp() {
    var searchFlags = "gi";
    var rAngle = /(?:[+-]?\d*\.?\d+)(?:deg|grad|rad|turn)/;
    var rSideCornerCapture = /to\s+((?:(?:left|right|top|bottom)(?:\s+(?:top|bottom|left|right))?))/;
    var rComma = /\s*,\s*/;
    var rColorHex = /#(?:[a-f0-9]{6}|[a-f0-9]{3})/;
    var rDigits3 = /\(\s*(?:\d{1,3}\s*,\s*){2}\d{1,3}\s*\)/;
    var rDigits4 = /\(\s*(?:\d{1,3}\s*,\s*){2}\d{1,3}\s*,\s*\d*\.?\d+\)/;
    var rValue = /(?:[+-]?\d*\.?\d+)(?:%|[a-z]+)?/;
    var rKeyword = /[_a-z-][_a-z0-9-]*/;
    var rColor = combineRegExp(["(?:", rColorHex, "|", "(?:rgb|hsl)", rDigits3, "|", "(?:rgba|hsla)", rDigits4, "|", rKeyword, ")"], "");
    var rColorStop = combineRegExp([rColor, "(?:\\s+", rValue, "(?:\\s+", rValue, ")?)?"], "");
    var rColorStopList = combineRegExp(["(?:", rColorStop, rComma, ")*", rColorStop], "");
    var rLineCapture = combineRegExp(["(?:(", rAngle, ")|", rSideCornerCapture, ")"], "");
    var rGradientSearch = combineRegExp(["(?:(", rLineCapture, ")", rComma, ")?(", rColorStopList, ")"], searchFlags);
    var rColorStopSearch = combineRegExp(["\\s*(", rColor, ")", "(?:\\s+", "(", rValue, "))?", "(?:", rComma, "\\s*)?"], searchFlags);
    return {
      gradientSearch: rGradientSearch,
      colorStopSearch: rColorStopSearch
    };
  };

  var parseGradient = function parseGradient(regExpLib, input) {
    var result;
    var matchColorStop;
    var stopResult;
    regExpLib.gradientSearch.lastIndex = 0;
    var matchGradient = regExpLib.gradientSearch.exec(input);

    if (matchGradient !== null) {
      result = {
        original: matchGradient[0],
        colorStopList: []
      };

      if (matchGradient[1]) {
        result.line = matchGradient[1];
      }

      if (matchGradient[2]) {
        result.angle = matchGradient[2];
      }

      if (matchGradient[3]) {
        result.sideCorner = matchGradient[3];
      }

      regExpLib.colorStopSearch.lastIndex = 0;
      matchColorStop = regExpLib.colorStopSearch.exec(matchGradient[4]);

      while (matchColorStop !== null) {
        stopResult = {
          color: matchColorStop[1]
        };

        if (matchColorStop[2]) {
          stopResult.position = matchColorStop[2];
        }

        result.colorStopList.push(stopResult);
        matchColorStop = regExpLib.colorStopSearch.exec(matchGradient[4]);
      }
    }

    return result;
  };

  var REGEXP_LIB = generateRegExp();
  var REG_GRADIENT = /.*gradient\s*\(((?:\([^)]*\)|[^)(]*)*)\)/gim;
  var isGradientColor = function isGradientColor(input) {
    REG_GRADIENT.lastIndex = 0;
    return REG_GRADIENT.exec(input);
  };
  var sideCornerDegreeMap = {
    top: 0,
    right: 90,
    bottom: 180,
    left: 270,
    "top left": 225,
    "left top": 225,
    "top right": 135,
    "right top": 135,
    "bottom left": 315,
    "left bottom": 315,
    "bottom right": 45,
    "right bottom": 45
  };
  var parseGradientString = function parseGradientString(input) {
    var match = isGradientColor(input);

    if (!match) {
      return false;
    }

    var gradientColors = {
      points: [],
      degree: 0
    };
    var result = parseGradient(REGEXP_LIB, match[1]);

    if (result.original.trim() !== match[1].trim()) {
      return false;
    }

    var points = result.colorStopList.map(function (_ref) {
      var color = _ref.color,
          position = _ref.position;
      var point = /* @__PURE__ */Object.create(null);
      point.color = tinycolor(color).toRgbString();
      point.left = parseFloat(position);
      return point;
    });
    gradientColors.points = points;
    var degree = parseInt(result.angle, 10);

    if (Number.isNaN(degree)) {
      degree = sideCornerDegreeMap[result.sideCorner] || 90;
    }

    gradientColors.degree = degree;
    return gradientColors;
  };

  function ownKeys$1q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1p(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1q(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var mathRound = Math.round;

  var hsv2rgba = function hsv2rgba(states) {
    return tinycolor(states).toRgb();
  };

  var hsv2hsva = function hsv2hsva(states) {
    return tinycolor(states).toHsv();
  };

  var hsv2hsla = function hsv2hsla(states) {
    return tinycolor(states).toHsl();
  };

  var gradientColors2string = function gradientColors2string(object) {
    var points = object.points,
        degree = object.degree;
    var colorsStop = points.sort(function (pA, pB) {
      return pA.left - pB.left;
    }).map(function (p) {
      return "".concat(p.color, " ").concat(Math.round(p.left * 100) / 100, "%");
    });
    return "linear-gradient(".concat(degree, "deg,").concat(colorsStop.join(","), ")");
  };
  var genId = function genId() {
    return (1 + Math.random() * 4294967295).toString(16);
  };
  var genGradientPoint = function genGradientPoint(left, color) {
    return {
      id: genId(),
      left: left,
      color: color
    };
  };
  var Color = /*#__PURE__*/function () {
    function Color(input) {
      _classCallCheck(this, Color);

      _defineProperty$3(this, "states", {
        s: 100,
        v: 100,
        h: 100,
        a: 1
      });

      _defineProperty$3(this, "originColor", void 0);

      _defineProperty$3(this, "isGradient", void 0);

      _defineProperty$3(this, "gradientStates", {
        colors: [],
        degree: 0,
        selectedId: null,
        css: ""
      });

      this.update(input);
    }

    _createClass(Color, [{
      key: "update",
      value: function update(input) {
        if (input === this.originColor) {
          return;
        }

        this.originColor = input;
        this.isGradient = false;
        var gradientColors = parseGradientString(input);
        var colorInput = input;

        if (gradientColors) {
          var _points$, _this$gradientSelecte;

          this.isGradient = true;
          var object = gradientColors;
          var points = object.points.map(function (c) {
            return genGradientPoint(c.left, c.color);
          });
          this.gradientStates = {
            colors: points,
            degree: object.degree,
            selectedId: ((_points$ = points[0]) === null || _points$ === void 0 ? void 0 : _points$.id) || null
          };
          this.gradientStates.css = this.linearGradient;
          colorInput = (_this$gradientSelecte = this.gradientSelectedPoint) === null || _this$gradientSelecte === void 0 ? void 0 : _this$gradientSelecte.color;
        }

        this.updateStates(colorInput);
      }
    }, {
      key: "saturation",
      get: function get() {
        return this.states.s;
      },
      set: function set(value) {
        this.states.s = Math.max(0, Math.min(100, value));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "value",
      get: function get() {
        return this.states.v;
      },
      set: function set(value) {
        this.states.v = Math.max(0, Math.min(100, value));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "hue",
      get: function get() {
        return this.states.h;
      },
      set: function set(value) {
        this.states.h = Math.max(0, Math.min(360, value));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "alpha",
      get: function get() {
        return this.states.a;
      },
      set: function set(value) {
        this.states.a = Math.max(0, Math.min(1, Math.round(value * 100) / 100));
        this.updateCurrentGradientColor();
      }
    }, {
      key: "rgb",
      get: function get() {
        var _hsv2rgba = hsv2rgba(this.states),
            r = _hsv2rgba.r,
            g = _hsv2rgba.g,
            b = _hsv2rgba.b;

        return "rgb(".concat(mathRound(r), ", ").concat(mathRound(g), ", ").concat(mathRound(b), ")");
      }
    }, {
      key: "rgba",
      get: function get() {
        var _hsv2rgba2 = hsv2rgba(this.states),
            r = _hsv2rgba2.r,
            g = _hsv2rgba2.g,
            b = _hsv2rgba2.b,
            a = _hsv2rgba2.a;

        return "rgba(".concat(mathRound(r), ", ").concat(mathRound(g), ", ").concat(mathRound(b), ", ").concat(a, ")");
      }
    }, {
      key: "hsv",
      get: function get() {
        var _this$getHsva = this.getHsva(),
            h = _this$getHsva.h,
            s = _this$getHsva.s,
            v = _this$getHsva.v;

        return "hsv(".concat(h, ", ").concat(s, "%, ").concat(v, "%)");
      }
    }, {
      key: "hsva",
      get: function get() {
        var _this$getHsva2 = this.getHsva(),
            h = _this$getHsva2.h,
            s = _this$getHsva2.s,
            v = _this$getHsva2.v,
            a = _this$getHsva2.a;

        return "hsva(".concat(h, ", ").concat(s, "%, ").concat(v, "%, ").concat(a, ")");
      }
    }, {
      key: "hsl",
      get: function get() {
        var _this$getHsla = this.getHsla(),
            h = _this$getHsla.h,
            s = _this$getHsla.s,
            l = _this$getHsla.l;

        return "hsl(".concat(h, ", ").concat(s, "%, ").concat(l, "%)");
      }
    }, {
      key: "hsla",
      get: function get() {
        var _this$getHsla2 = this.getHsla(),
            h = _this$getHsla2.h,
            s = _this$getHsla2.s,
            l = _this$getHsla2.l,
            a = _this$getHsla2.a;

        return "hsla(".concat(h, ", ").concat(s, "%, ").concat(l, "%, ").concat(a, ")");
      }
    }, {
      key: "hex",
      get: function get() {
        return tinycolor(this.states).toHexString();
      }
    }, {
      key: "hex8",
      get: function get() {
        return tinycolor(this.states).toHex8String();
      }
    }, {
      key: "cmyk",
      get: function get() {
        var _this$getCmyk = this.getCmyk(),
            c = _this$getCmyk.c,
            m = _this$getCmyk.m,
            y = _this$getCmyk.y,
            k = _this$getCmyk.k;

        return "cmyk(".concat(c, ", ").concat(m, ", ").concat(y, ", ").concat(k, ")");
      }
    }, {
      key: "css",
      get: function get() {
        if (this.isGradient) {
          return this.linearGradient;
        }

        return this.rgba;
      }
    }, {
      key: "linearGradient",
      get: function get() {
        var gradientColors = this.gradientColors,
            gradientDegree = this.gradientDegree;
        return gradientColors2string({
          points: gradientColors,
          degree: gradientDegree
        });
      }
    }, {
      key: "gradientColors",
      get: function get() {
        return this.gradientStates.colors;
      },
      set: function set(colors) {
        this.gradientStates.colors = colors;
        this.gradientStates.css = this.linearGradient;
      }
    }, {
      key: "gradientSelectedId",
      get: function get() {
        return this.gradientStates.selectedId;
      },
      set: function set(id) {
        var _this$gradientSelecte2;

        if (id === this.gradientSelectedId) {
          return;
        }

        this.gradientStates.selectedId = id;
        this.updateStates((_this$gradientSelecte2 = this.gradientSelectedPoint) === null || _this$gradientSelecte2 === void 0 ? void 0 : _this$gradientSelecte2.color);
      }
    }, {
      key: "gradientDegree",
      get: function get() {
        return this.gradientStates.degree;
      },
      set: function set(degree) {
        this.gradientStates.degree = Math.max(0, Math.min(360, degree));
        this.gradientStates.css = this.linearGradient;
      }
    }, {
      key: "gradientSelectedPoint",
      get: function get() {
        var gradientColors = this.gradientColors,
            gradientSelectedId = this.gradientSelectedId;
        return gradientColors.find(function (color) {
          return color.id === gradientSelectedId;
        });
      }
    }, {
      key: "getFormatsColorMap",
      value: function getFormatsColorMap() {
        return {
          HEX: this.hex,
          CMYK: this.cmyk,
          RGB: this.rgb,
          RGBA: this.rgba,
          HSL: this.hsl,
          HSLA: this.hsla,
          HSV: this.hsv,
          HSVA: this.hsva,
          CSS: this.css
        };
      }
    }, {
      key: "updateCurrentGradientColor",
      value: function updateCurrentGradientColor() {
        var isGradient = this.isGradient,
            gradientColors = this.gradientColors,
            gradientSelectedId = this.gradientSelectedId;
        var length = gradientColors.length;
        var current = this.gradientSelectedPoint;

        if (!isGradient || length === 0 || !current) {
          return false;
        }

        var index = gradientColors.findIndex(function (color) {
          return color.id === gradientSelectedId;
        });

        var newColor = _objectSpread$1p(_objectSpread$1p({}, current), {}, {
          color: this.rgba
        });

        gradientColors.splice(index, 1, newColor);
        this.gradientColors = gradientColors;
        return this;
      }
    }, {
      key: "updateStates",
      value: function updateStates(input) {
        var color = tinycolor(cmykInputToColor(input));
        var hsva = color.toHsv();
        this.states = hsva;
      }
    }, {
      key: "getRgba",
      value: function getRgba() {
        var _hsv2rgba3 = hsv2rgba(this.states),
            r = _hsv2rgba3.r,
            g = _hsv2rgba3.g,
            b = _hsv2rgba3.b,
            a = _hsv2rgba3.a;

        return {
          r: mathRound(r),
          g: mathRound(g),
          b: mathRound(b),
          a: a
        };
      }
    }, {
      key: "getCmyk",
      value: function getCmyk() {
        var _this$getRgba = this.getRgba(),
            r = _this$getRgba.r,
            g = _this$getRgba.g,
            b = _this$getRgba.b;

        var _rgb2cmyk = rgb2cmyk(r, g, b),
            _rgb2cmyk2 = _slicedToArray(_rgb2cmyk, 4),
            c = _rgb2cmyk2[0],
            m = _rgb2cmyk2[1],
            y = _rgb2cmyk2[2],
            k = _rgb2cmyk2[3];

        return {
          c: mathRound(c * 100),
          m: mathRound(m * 100),
          y: mathRound(y * 100),
          k: mathRound(k * 100)
        };
      }
    }, {
      key: "getHsva",
      value: function getHsva() {
        var _hsv2hsva = hsv2hsva(this.states),
            h = _hsv2hsva.h,
            s = _hsv2hsva.s,
            v = _hsv2hsva.v,
            a = _hsv2hsva.a;

        h = mathRound(h);
        s = mathRound(s * 100);
        v = mathRound(v * 100);
        a *= 1;
        return {
          h: h,
          s: s,
          v: v,
          a: a
        };
      }
    }, {
      key: "getHsla",
      value: function getHsla() {
        var _hsv2hsla = hsv2hsla(this.states),
            h = _hsv2hsla.h,
            s = _hsv2hsla.s,
            l = _hsv2hsla.l,
            a = _hsv2hsla.a;

        h = mathRound(h);
        s = mathRound(s * 100);
        l = mathRound(l * 100);
        a *= 1;
        return {
          h: h,
          s: s,
          l: l,
          a: a
        };
      }
    }, {
      key: "equals",
      value: function equals(color) {
        return tinycolor.equals(this.rgba, color);
      }
    }], [{
      key: "isValid",
      value: function isValid(color) {
        if (parseGradientString(color)) {
          return true;
        }

        return tinycolor(color).isValid();
      }
    }, {
      key: "hsva2color",
      value: function hsva2color(h, s, v, a) {
        return tinycolor({
          h: h,
          s: s,
          v: v,
          a: a
        }).toHsvString();
      }
    }, {
      key: "hsla2color",
      value: function hsla2color(h, s, l, a) {
        return tinycolor({
          h: h,
          s: s,
          l: l,
          a: a
        }).toHslString();
      }
    }, {
      key: "rgba2color",
      value: function rgba2color(r, g, b, a) {
        return tinycolor({
          r: r,
          g: g,
          b: b,
          a: a
        }).toHsvString();
      }
    }, {
      key: "hex2color",
      value: function hex2color(hex, a) {
        var color = tinycolor(hex);
        color.setAlpha(a);
        return color.toHexString();
      }
    }, {
      key: "object2color",
      value: function object2color(object, format) {
        if (format === "CMYK") {
          var c = object.c,
              m = object.m,
              y = object.y,
              k = object.k;
          return "cmyk(".concat(c, ", ").concat(m, ", ").concat(y, ", ").concat(k, ")");
        }

        var color = tinycolor(object, {
          format: format
        });
        return color.toRgbString();
      }
    }]);

    return Color;
  }();

  _defineProperty$3(Color, "isGradientColor", function (input) {
    return !!isGradientColor(input);
  });

  _defineProperty$3(Color, "compare", function (color1, color2) {
    var isGradientColor1 = Color.isGradientColor(color1);
    var isGradientColor2 = Color.isGradientColor(color2);

    if (isGradientColor1 && isGradientColor2) {
      var gradientColor1 = gradientColors2string(parseGradientString(color1));
      var gradientColor2 = gradientColors2string(parseGradientString(color2));
      return gradientColor1 === gradientColor2;
    }

    if (!isGradientColor1 && !isGradientColor2) {
      return tinycolor.equals(color1, color2);
    }

    return false;
  });

  var COLOR_OBJECT_OUTPUT_KEYS = ["alpha", "css", "hex", "hex8", "hsl", "hsla", "hsv", "hsva", "rgb", "rgba", "saturation", "value", "isGradient"];
  var getColorObject = function getColorObject(color) {
    if (!color) {
      return null;
    }

    var colorObject = /* @__PURE__ */Object.create(null);
    COLOR_OBJECT_OUTPUT_KEYS.forEach(function (key) {
      return colorObject[key] = color[key];
    });

    if (color.isGradient) {
      colorObject.linearGradient = color.linearGradient;
    }

    return colorObject;
  };

  function ownKeys$1p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1o(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1p(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }

  function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

  function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }

  var defaultsOptions = {
    start: function start(coordinate, event) {},
    drag: function drag(coordinate, event) {},
    end: function end(coordinate, event) {}
  };

  var _dragStart = /*#__PURE__*/new WeakSet();

  var _drag = /*#__PURE__*/new WeakSet();

  var _dragEnd = /*#__PURE__*/new WeakSet();

  var _getCoordinate = /*#__PURE__*/new WeakSet();

  var Draggable = /*#__PURE__*/function () {
    function Draggable(el, options) {
      _classCallCheck(this, Draggable);

      _classPrivateMethodInitSpec(this, _getCoordinate);

      _classPrivateMethodInitSpec(this, _dragEnd);

      _classPrivateMethodInitSpec(this, _drag);

      _classPrivateMethodInitSpec(this, _dragStart);

      _defineProperty$3(this, "dragging", false);

      _defineProperty$3(this, "$el", void 0);

      _defineProperty$3(this, "props", void 0);

      _defineProperty$3(this, "handles", void 0);

      this.$el = el;
      this.props = _objectSpread$1o(_objectSpread$1o({}, defaultsOptions), options);
      this.handles = {
        start: _classPrivateMethodGet(this, _dragStart, _dragStart2).bind(this),
        drag: _classPrivateMethodGet(this, _drag, _drag2).bind(this),
        end: _classPrivateMethodGet(this, _dragEnd, _dragEnd2).bind(this)
      };
      this.$el.addEventListener("mousedown", this.handles.start, false);
    }

    _createClass(Draggable, [{
      key: "destroy",
      value: function destroy() {
        this.$el.removeEventListener("mousedown", this.handles.start, false);
        window.removeEventListener("mousemove", this.handles.drag, false);
        window.removeEventListener("mouseup", this.handles.end, false);
        window.removeEventListener("contextmenu", this.handles.end, false);
      }
    }]);

    return Draggable;
  }();

  function _dragStart2(event) {
    if (this.dragging) {
      return;
    }

    window.addEventListener("mousemove", this.handles.drag, false);
    window.addEventListener("mouseup", this.handles.end, false);
    window.addEventListener("contextmenu", this.handles.end, false);
    this.dragging = true;
    this.props.start(_classPrivateMethodGet(this, _getCoordinate, _getCoordinate2).call(this, event), event);
  }

  function _drag2(event) {
    if (!this.dragging) {
      return;
    }

    this.props.drag(_classPrivateMethodGet(this, _getCoordinate, _getCoordinate2).call(this, event), event);
  }

  function _dragEnd2(event) {
    var _this = this;

    setTimeout(function () {
      _this.dragging = false;

      _this.props.end(_classPrivateMethodGet(_this, _getCoordinate, _getCoordinate2).call(_this, event), event);
    }, 0);
    window.removeEventListener("mousemove", this.handles.drag, false);
    window.removeEventListener("mouseup", this.handles.end, false);
    window.removeEventListener("contextmenu", this.handles.end, false);
  }

  function _getCoordinate2(event) {
    var rect = this.$el.getBoundingClientRect();
    var mouseEvent = event;
    var left = mouseEvent.clientX - rect.left;
    var top = mouseEvent.clientY - rect.top;
    return {
      y: Math.min(Math.max(0, top), rect.height),
      x: Math.min(Math.max(0, left), rect.width)
    };
  }

  var baseProps = {
    disabled: Boolean,
    color: {
      type: Object
    },
    handleChange: {
      type: Function,
      "default": function _default() {
        return function () {};
      }
    }
  };

  function ownKeys$1o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1n(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1o(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DELETE_KEYS = ["delete", "backspace"];
  var LinearGradient = VueCompositionAPI.defineComponent({
    name: "LinearGradient",
    components: {
      TInputNumber: InputNumber
    },
    inheritAttrs: false,
    props: _objectSpread$1n({}, baseProps),
    setup: function setup(props) {
      var baseClassName = useBaseClassName();

      var _useCommonClassName = useCommonClassName(),
          statusClassNames = _useCommonClassName.statusClassNames;

      var refSlider = VueCompositionAPI.ref(null);
      var sliderRect = VueCompositionAPI.reactive({
        left: 0,
        width: GRADIENT_SLIDER_DEFAULT_WIDTH
      });
      var isDragging = VueCompositionAPI.ref(false);
      var isMoved = VueCompositionAPI.ref(false);
      var colorInstance = VueCompositionAPI.computed(function () {
        return cloneDeep_1(props.color);
      });
      var degree = VueCompositionAPI.ref(colorInstance.value.gradientDegree);
      var selectedId = VueCompositionAPI.ref(colorInstance.value.gradientSelectedId);
      var colors = VueCompositionAPI.ref(cloneDeep_1(colorInstance.value.gradientColors));
      VueCompositionAPI.watch(function () {
        return props.color.gradientDegree;
      }, function (value) {
        return degree.value = value;
      });
      VueCompositionAPI.watch(function () {
        return props.color.gradientSelectedId;
      }, function (value) {
        return selectedId.value = value;
      });
      VueCompositionAPI.watch(function () {
        return props.color.gradientColors;
      }, function (value) {
        colors.value = cloneDeep_1(value);
      }, {
        deep: true
      });

      var handleChange = function handleChange(key, payload, addUsedColor) {
        if (props.disabled) {
          return;
        }

        props.handleChange({
          key: key,
          payload: payload,
          addUsedColor: addUsedColor
        });
      };

      var handleDegreeChange = function handleDegreeChange(value) {
        if (props.disabled || value === colorInstance.value.gradientDegree) {
          return;
        }

        degree.value = value;
        handleChange("degree", value, true);
      };

      var handleSelectedIdChange = function handleSelectedIdChange(value) {
        if (props.disabled) {
          return;
        }

        selectedId.value = value;
        handleChange("selectedId", value);
      };

      var handleColorsChange = function handleColorsChange(value, isEnded) {
        if (props.disabled) {
          return;
        }

        colors.value = value;
        handleChange("colors", value, isEnded);
      };

      var updateActiveThumbLeft = function updateActiveThumbLeft(left) {
        var index = colors.value.findIndex(function (c) {
          return c.id === selectedId.value;
        });

        if (index === -1) {
          return;
        }

        var point = colors.value[index];
        left = Math.max(0, Math.min(sliderRect.width, left));
        var percentLeft = left / sliderRect.width * 100;
        colors.value.splice(index, 1, {
          color: point.color,
          left: percentLeft,
          id: point.id
        });
        handleColorsChange(colors.value);
      };

      var handleStart = function handleStart(id, e) {
        var rect = refSlider.value.getBoundingClientRect();
        sliderRect.left = rect.left;
        sliderRect.width = rect.width || GRADIENT_SLIDER_DEFAULT_WIDTH;

        if (isDragging.value || props.disabled) {
          return;
        }

        isMoved.value = false;
        isDragging.value = true;
        e.preventDefault();
        e.stopPropagation();
        handleSelectedIdChange(id);
        refSlider.value.focus();
        window.addEventListener("mousemove", handleMove, false);
        window.addEventListener("mouseup", handleEnd, false);
        window.addEventListener("contextmenu", handleEnd, false);
      };

      var handleMove = function handleMove(e) {
        if (!isDragging.value || props.disabled) {
          return;
        }

        var left = e.clientX - sliderRect.left;
        isMoved.value = true;
        updateActiveThumbLeft(left);
      };

      var handleEnd = function handleEnd() {
        if (!isDragging.value) {
          return;
        }

        setTimeout(function () {
          isDragging.value = false;
        }, 0);

        if (isMoved.value) {
          handleColorsChange(colors.value, true);
          isMoved.value = false;
        }

        window.removeEventListener("mousemove", handleMove, false);
        window.removeEventListener("mouseup", handleEnd, false);
        window.removeEventListener("contextmenu", handleEnd, false);
      };

      var handleKeyup = function handleKeyup(e) {
        if (props.disabled) {
          return;
        }

        var points = colors.value;
        var pos = points.findIndex(function (c) {
          return c.id === selectedId.value;
        });
        var length = points.length;

        if (DELETE_KEYS.includes(e.key.toLocaleLowerCase()) && length > 2 && pos >= 0 && pos <= length - 1) {
          points.splice(pos, 1);

          if (!points[pos]) {
            pos = points[pos + 1] ? pos + 1 : points[pos - 1] ? pos - 1 : 0;
          }

          var current = points[pos];
          handleColorsChange(points, true);
          handleSelectedIdChange(current === null || current === void 0 ? void 0 : current.id);
        }
      };

      var handleThumbBarClick = function handleThumbBarClick(e) {
        if (props.disabled) {
          return;
        }

        var left = e.clientX - sliderRect.left;
        left = Math.max(0, Math.min(sliderRect.width, left));
        var percentLeft = left / sliderRect.width * 100;
        var newPoint = genGradientPoint(percentLeft, colorInstance.value.rgba);
        colors.value.push(newPoint);
        handleColorsChange(colors.value, true);
        handleSelectedIdChange(newPoint.id);
      };

      VueCompositionAPI.onMounted(function () {
        var rect = refSlider.value.getBoundingClientRect();
        sliderRect.left = rect.left;
        sliderRect.width = rect.width || GRADIENT_SLIDER_DEFAULT_WIDTH;
      });
      VueCompositionAPI.onBeforeUnmount(function () {
        window.removeEventListener("mousemove", handleMove, false);
        window.removeEventListener("mouseup", handleEnd, false);
        window.removeEventListener("contextmenu", handleEnd, false);
      });
      return {
        baseClassName: baseClassName,
        statusClassNames: statusClassNames,
        refSlider: refSlider,
        degree: degree,
        selectedId: selectedId,
        colors: colors,
        colorInstance: colorInstance,
        handleDegreeChange: handleDegreeChange,
        handleStart: handleStart,
        handleMove: handleMove,
        handleEnd: handleEnd,
        handleKeyup: handleKeyup,
        handleThumbBarClick: handleThumbBarClick
      };
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var _this$colorInstance = this.colorInstance,
          linearGradient = _this$colorInstance.linearGradient,
          gradientColors = _this$colorInstance.gradientColors;
      var colors = this.colors,
          selectedId = this.selectedId,
          degree = this.degree,
          disabled = this.disabled,
          baseClassName = this.baseClassName,
          statusClassNames = this.statusClassNames;
      var thumbBackground = gradientColors2string({
        points: gradientColors,
        degree: 90
      });
      return h("div", {
        "class": "".concat(baseClassName, "__gradient")
      }, [h("div", {
        "class": "".concat(baseClassName, "__gradient-slider")
      }, [h("div", {
        "class": ["".concat(baseClassName, "__slider"), "".concat(baseClassName, "--bg-alpha")],
        "on": {
          "keyup": this.handleKeyup
        },
        "attrs": {
          "tabindex": 0
        },
        "ref": "refSlider"
      }, [h("ul", {
        "class": "gradient-thumbs",
        "on": {
          "click": this.handleThumbBarClick
        },
        "style": {
          background: thumbBackground
        }
      }, [colors.map(function (t) {
        var left = "".concat(Math.round(t.left * 100) / 100, "%");
        return h("li", {
          "class": ["".concat(baseClassName, "__thumb"), "gradient-thumbs__item", selectedId === t.id ? statusClassNames.active : ""],
          "key": t.id,
          "attrs": {
            "title": "".concat(t.color, " ").concat(left)
          },
          "style": {
            color: t.color,
            left: left
          },
          "on": {
            "click": function click(e) {
              return e.stopPropagation();
            },
            "mousedown": function mousedown(e) {
              return _this.handleStart(t.id, e);
            }
          }
        }, [h("span", {
          "class": ["gradient-thumbs__item-inner", "".concat(baseClassName, "--bg-alpha")]
        })]);
      })])])]), h("div", {
        "class": "".concat(baseClassName, "__gradient-degree"),
        "attrs": {
          "title": "".concat(degree, "deg")
        }
      }, [h("t-input-number", {
        "attrs": {
          "theme": "normal",
          "size": "small",
          "min": 0,
          "max": 360,
          "step": 1,
          "format": function format(value) {
            return "".concat(value, "\xB0");
          },
          "disabled": disabled
        },
        "on": {
          "blur": this.handleDegreeChange,
          "enter": this.handleDegreeChange
        },
        "model": {
          value: _this.degree,
          callback: function callback($$v) {
            _this.degree = $$v;
          }
        }
      })]), h("div", {
        "class": ["".concat(baseClassName, "__gradient-preview"), "".concat(baseClassName, "--bg-alpha")]
      }, [h("span", {
        "class": "preview-inner",
        "style": {
          background: linearGradient
        }
      })])]);
    }
  });

  function ownKeys$1n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1n(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var SaturationPanel = VueCompositionAPI.defineComponent({
    name: "SaturationPanel",
    components: {
      TSelect: Select,
      TOption: Option
    },
    props: _objectSpread$1m({}, baseProps),
    setup: function setup(props) {
      var baseClassName = useBaseClassName();
      var refPanel = VueCompositionAPI.ref(null);
      var refThumb = VueCompositionAPI.ref(null);
      var dragInstance = VueCompositionAPI.ref(null);
      var panelRect = VueCompositionAPI.reactive({
        width: SATURATION_PANEL_DEFAULT_WIDTH,
        height: SATURATION_PANEL_DEFAULT_HEIGHT
      });
      var styles = VueCompositionAPI.computed(function () {
        var _props$color = props.color,
            saturation = _props$color.saturation,
            value = _props$color.value;
        var width = panelRect.width,
            height = panelRect.height;
        var top = Math.round((1 - value) * height);
        var left = Math.round(saturation * width);
        return {
          color: props.color.rgb,
          left: "".concat(left, "px"),
          top: "".concat(top, "px")
        };
      });

      var getSaturationAndValueByCoordinate = function getSaturationAndValueByCoordinate(coordinate) {
        var width = panelRect.width,
            height = panelRect.height;
        var x = coordinate.x,
            y = coordinate.y;
        var saturation = Math.round(x / width * 100);
        var value = Math.round((1 - y / height) * 100);
        return {
          saturation: saturation,
          value: value
        };
      };

      var handleDrag = function handleDrag(coordinate, isEnded) {
        if (props.disabled) {
          return;
        }

        var _getSaturationAndValu = getSaturationAndValueByCoordinate(coordinate),
            saturation = _getSaturationAndValu.saturation,
            value = _getSaturationAndValu.value;

        props.handleChange({
          saturation: saturation / 100,
          value: value / 100,
          addUsedColor: isEnded
        });
      };

      var handleDragEnd = function handleDragEnd(coordinate) {
        if (props.disabled) {
          return;
        }

        VueCompositionAPI.nextTick(function () {
          handleDrag(coordinate, true);
        });
      };

      var panelBackground = VueCompositionAPI.computed(function () {
        return "hsl(".concat(props.color.hue, ", 100%, 50%)");
      });
      VueCompositionAPI.onMounted(function () {
        panelRect.width = refPanel.value.offsetWidth || SATURATION_PANEL_DEFAULT_WIDTH;
        panelRect.height = refPanel.value.offsetHeight || SATURATION_PANEL_DEFAULT_HEIGHT;
        dragInstance.value = new Draggable(refPanel.value, {
          start: function start() {
            panelRect.width = refPanel.value.offsetWidth;
            panelRect.height = refPanel.value.offsetHeight;
          },
          drag: function drag(coordinate) {
            handleDrag(coordinate);
          },
          end: handleDragEnd
        });
      });
      VueCompositionAPI.onBeforeUnmount(function () {
        dragInstance.value.destroy();
      });
      return {
        baseClassName: baseClassName,
        refThumb: refThumb,
        refPanel: refPanel,
        styles: styles,
        panelBackground: panelBackground
      };
    },
    render: function render() {
      var h = arguments[0];
      var baseClassName = this.baseClassName,
          styles = this.styles,
          panelBackground = this.panelBackground;
      return h("div", {
        "class": ["".concat(baseClassName, "__saturation")],
        "ref": "refPanel",
        "style": {
          background: panelBackground
        }
      }, [h("span", {
        "class": ["".concat(baseClassName, "__thumb")],
        "attrs": {
          "role": "slider",
          "tabindex": 0
        },
        "ref": "refThumb",
        "style": styles
      })]);
    }
  });

  function ownKeys$1m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1m(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var ColorSlider = VueCompositionAPI.defineComponent({
    name: "ColorSlider",
    components: {
      TSelect: Select,
      TOption: Option
    },
    props: _objectSpread$1l(_objectSpread$1l({}, baseProps), {}, {
      className: {
        type: String,
        "default": ""
      },
      value: {
        type: Number,
        "default": 0
      },
      maxValue: {
        type: Number,
        "default": 360
      },
      railStyle: {
        type: Object
      },
      type: {
        type: String,
        "default": "hue"
      }
    }),
    setup: function setup(props, _ref) {
      var emit = _ref.emit;
      var baseClassName = useBaseClassName();
      var refPanel = VueCompositionAPI.ref(null);
      var refThumb = VueCompositionAPI.ref(null);
      var dragInstance = VueCompositionAPI.ref(null);
      var panelRect = VueCompositionAPI.reactive({
        width: SLIDER_DEFAULT_WIDTH
      });
      var styles = VueCompositionAPI.computed(function () {
        var width = panelRect.width;

        if (!width) {
          return;
        }

        var left = Math.round(props.value / props.maxValue * width);
        return {
          left: "".concat(left, "px"),
          color: props.color.rgb
        };
      });

      var handleDrag = function handleDrag(coordinate, isEnded) {
        if (props.disabled) {
          return;
        }

        var width = panelRect.width;
        var x = coordinate.x;
        var value = Math.round(x / width * props.maxValue * 100) / 100;
        props.handleChange(value, isEnded);
        emit("change", value, isEnded);
      };

      var handleDragEnd = function handleDragEnd(coordinate) {
        if (props.disabled) {
          return;
        }

        handleDrag(coordinate, true);
      };

      VueCompositionAPI.onMounted(function () {
        panelRect.width = refPanel.value.offsetWidth || SLIDER_DEFAULT_WIDTH;
        dragInstance.value = new Draggable(refPanel.value, {
          start: function start() {
            panelRect.width = refPanel.value.offsetWidth;
          },
          drag: function drag(coordinate) {
            handleDrag(coordinate);
          },
          end: handleDragEnd
        });
      });
      VueCompositionAPI.onBeforeUnmount(function () {
        dragInstance.value.destroy();
      });
      return {
        baseClassName: baseClassName,
        refThumb: refThumb,
        refPanel: refPanel,
        styles: styles
      };
    },
    render: function render() {
      var h = arguments[0];
      var baseClassName = this.baseClassName,
          className = this.className,
          railStyle = this.railStyle,
          styles = this.styles,
          type = this.type,
          color = this.color;
      var paddingStyle = {
        background: "linear-gradient(90deg, rgba(0,0,0,.0) 0%, rgba(0,0,0,.0) 93%, ".concat(color.rgb, " 93%, ").concat(color.rgb, " 100%)")
      };
      return h("div", {
        "class": ["".concat(baseClassName, "__slider-wrapper"), "".concat(baseClassName, "__slider-wrapper--").concat(type, "-type")]
      }, [type === "alpha" && h("div", {
        "class": "".concat(baseClassName, "__slider-padding"),
        "style": paddingStyle
      }), h("div", {
        "class": ["".concat(baseClassName, "__slider"), className],
        "ref": "refPanel"
      }, [h("div", {
        "class": "".concat(baseClassName, "__rail"),
        "style": railStyle
      }), h("span", {
        "class": ["".concat(baseClassName, "__thumb")],
        "attrs": {
          "role": "slider",
          "tabindex": 0
        },
        "ref": "refThumb",
        "style": styles
      })])]);
    }
  });

  function ownKeys$1l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1l(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var HueSlider = VueCompositionAPI.defineComponent({
    name: "HueSlider",
    components: {
      ColorSlider: ColorSlider
    },
    inheritAttrs: false,
    props: _objectSpread$1k({}, baseProps),
    setup: function setup() {
      var baseClassName = useBaseClassName();
      return {
        baseClassName: baseClassName
      };
    },
    render: function render() {
      var h = arguments[0];
      return h("color-slider", {
        "class": "".concat(this.baseClassName, "__hue"),
        "attrs": {
          "color": this.color,
          "value": this.color.hue,
          "handleChange": this.handleChange,
          "disabled": this.disabled,
          "type": "hue"
        }
      });
    }
  });

  var AlphaSlider = VueCompositionAPI.defineComponent({
    name: "AlphaSlider",
    components: {
      ColorSlider: ColorSlider
    },
    inheritAttrs: false,
    props: {
      color: {
        type: Object
      },
      disabled: {
        type: Boolean,
        "default": false
      },
      handleChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    },
    setup: function setup(props) {
      var baseClassName = useBaseClassName();

      var handleValueChange = function handleValueChange(v, isDragEnd) {
        props.handleChange(v / 100, isDragEnd);
      };

      var railStyle = VueCompositionAPI.computed(function () {
        return {
          background: "linear-gradient(to right, rgba(0, 0, 0, 0), ".concat(props.color.rgb, ")")
        };
      });
      return {
        baseClassName: baseClassName,
        railStyle: railStyle,
        handleValueChange: handleValueChange
      };
    },
    render: function render() {
      var h = arguments[0];
      var baseClassName = this.baseClassName;
      return h("color-slider", {
        "class": ["".concat(baseClassName, "__alpha"), "".concat(baseClassName, "--bg-alpha")],
        "attrs": {
          "color": this.color,
          "value": this.color.alpha * 100,
          "handleChange": this.handleValueChange,
          "rail-style": this.railStyle,
          "max-value": 100,
          "disabled": this.disabled,
          "type": "alpha"
        }
      });
    }
  });

  /**
   * Converts `string`, as space separated words, to upper case.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the upper cased string.
   * @example
   *
   * _.upperCase('--foo-bar');
   * // => 'FOO BAR'
   *
   * _.upperCase('fooBar');
   * // => 'FOO BAR'
   *
   * _.upperCase('__foo_bar__');
   * // => 'FOO BAR'
   */

  var upperCase = _createCompounder(function (result, word, index) {
    return result + (index ? ' ' : '') + word.toUpperCase();
  });
  var upperCase_1 = upperCase;

  /** Error message constants. */

  var FUNC_ERROR_TEXT = 'Expected a function';
  /**
   * Creates a throttled function that only invokes `func` at most once per
   * every `wait` milliseconds. The throttled function comes with a `cancel`
   * method to cancel delayed `func` invocations and a `flush` method to
   * immediately invoke them. Provide `options` to indicate whether `func`
   * should be invoked on the leading and/or trailing edge of the `wait`
   * timeout. The `func` is invoked with the last arguments provided to the
   * throttled function. Subsequent calls to the throttled function return the
   * result of the last `func` invocation.
   *
   * **Note:** If `leading` and `trailing` options are `true`, `func` is
   * invoked on the trailing edge of the timeout only if the throttled function
   * is invoked more than once during the `wait` timeout.
   *
   * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
   * until to the next tick, similar to `setTimeout` with a timeout of `0`.
   *
   * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
   * for details over the differences between `_.throttle` and `_.debounce`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to throttle.
   * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.leading=true]
   *  Specify invoking on the leading edge of the timeout.
   * @param {boolean} [options.trailing=true]
   *  Specify invoking on the trailing edge of the timeout.
   * @returns {Function} Returns the new throttled function.
   * @example
   *
   * // Avoid excessively updating the position while scrolling.
   * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
   *
   * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
   * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
   * jQuery(element).on('click', throttled);
   *
   * // Cancel the trailing throttled invocation.
   * jQuery(window).on('popstate', throttled.cancel);
   */

  function throttle$1(func, wait, options) {
    var leading = true,
        trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }

    if (isObject_1(options)) {
      leading = 'leading' in options ? !!options.leading : leading;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    return debounce_1(func, wait, {
      'leading': leading,
      'maxWait': wait,
      'trailing': trailing
    });
  }

  var throttle_1 = throttle$1;

  var FORMAT_INPUT_CONFIG = {
    RGB: [{
      key: "r",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "g",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "b",
      min: 0,
      max: 255,
      type: "inputNumber"
    }],
    HSV: [{
      key: "h",
      min: 0,
      max: 360,
      type: "inputNumber"
    }, {
      key: "s",
      min: 0,
      max: 100,
      type: "inputNumber"
    }, {
      key: "v",
      min: 0,
      max: 100,
      type: "inputNumber"
    }],
    HSL: [{
      key: "h",
      min: 0,
      max: 360,
      type: "inputNumber"
    }, {
      key: "s",
      min: 0,
      max: 100,
      type: "inputNumber"
    }, {
      key: "l",
      min: 0,
      max: 100,
      type: "inputNumber"
    }],
    CMYK: [{
      key: "c",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "m",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "y",
      min: 0,
      max: 255,
      type: "inputNumber"
    }, {
      key: "k",
      min: 0,
      max: 255,
      type: "inputNumber"
    }],
    CSS: [{
      key: "css",
      type: "input",
      flex: 3
    }],
    HEX: [{
      key: "hex",
      type: "input",
      flex: 3
    }]
  };

  function ownKeys$1k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1k(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var FormatInputs = VueCompositionAPI.defineComponent({
    name: "FormatInputs",
    components: {
      TSelect: Select,
      TOption: Option,
      TInput: Input,
      TInputNumber: InputNumber
    },
    inheritAttrs: false,
    props: _objectSpread$1j(_objectSpread$1j({}, props$y), {}, {
      color: {
        type: Object
      },
      handleFormatInputChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    }),
    setup: function setup(props2) {
      var inputConfigs = VueCompositionAPI.computed(function () {
        var configs = _toConsumableArray(FORMAT_INPUT_CONFIG[props2.format]);

        if (props2.enableAlpha) {
          configs.push({
            type: "inputNumber",
            key: "a",
            min: 0,
            max: 100,
            format: function format(value) {
              return "".concat(value, "%");
            },
            flex: 1.15
          });
        }

        return configs;
      });
      var modelValues = VueCompositionAPI.reactive({
        r: 0,
        g: 0,
        b: 0,
        a: 0,
        c: 0,
        m: 0,
        y: 0,
        k: 0,
        h: 0,
        l: 0,
        s: 0,
        v: 0,
        hex: "",
        css: ""
      });
      var lastModelValue = VueCompositionAPI.reactive({});

      var getFormatColorMap = function getFormatColorMap(type) {
        var color = props2.color;

        if (type === "encode") {
          return {
            HSV: color.getHsva(),
            HSL: color.getHsla(),
            RGB: color.getRgba(),
            CMYK: color.getCmyk(),
            CSS: {
              css: color.css
            },
            HEX: {
              hex: color.hex
            }
          };
        }

        return {
          HSV: Color.object2color(modelValues, "HSV"),
          HSL: Color.object2color(modelValues, "HSL"),
          RGB: Color.object2color(modelValues, "RGB"),
          CMYK: Color.object2color(modelValues, "CMYK"),
          CSS: modelValues.css,
          HEX: modelValues.hex
        };
      };

      var updateModelValue = function updateModelValue() {
        var format = props2.format,
            color = props2.color;
        var values = getFormatColorMap("encode")[format];
        values.a = Math.round(color.alpha * 100);
        Object.keys(values).forEach(function (key) {
          modelValues[key] = values[key];
          lastModelValue[key] = values[key];
        });
      };

      updateModelValue();
      var throttleUpdate = throttle_1(updateModelValue, 100);
      VueCompositionAPI.watch(function () {
        var _props2$color = props2.color,
            saturation = _props2$color.saturation,
            hue = _props2$color.hue,
            value = _props2$color.value,
            alpha = _props2$color.alpha;
        return [saturation, hue, value, alpha, props2.format];
      }, throttleUpdate);

      var handleChange = function handleChange(key, v) {
        if (v === lastModelValue[key]) {
          return;
        }

        var value = getFormatColorMap("decode")[props2.format];
        props2.handleFormatInputChange(value, modelValues.a / 100, key, v);
      };

      return {
        modelValues: modelValues,
        inputConfigs: inputConfigs,
        handleChange: handleChange
      };
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];

      var inputProps = _objectSpread$1j({}, this.inputProps || {});

      return h("div", {
        "class": "input-group"
      }, [this.inputConfigs.map(function (config) {
        return h("div", {
          "class": "input-group__item",
          "key": config.key,
          "style": {
            flex: config.flex || 1
          }
        }, [config.type === "input" ? h("t-input", helper([{}, inputProps, {
          "attrs": {
            "align": "center",
            "size": "small",
            "disabled": _this.disabled,
            "maxlength": _this.format === "HEX" ? 9 : void 0,
            "title": _this.modelValues[config.key]
          },
          "on": {
            "blur": function blur(v) {
              return _this.handleChange(config.key, v);
            },
            "enter": function enter(v) {
              return _this.handleChange(config.key, v);
            }
          },
          "model": {
            value: _this.modelValues[config.key],
            callback: function callback($$v) {
              _this.$set(_this.modelValues, config.key, $$v);
            }
          }
        }])) : h("t-input-number", helper([{}, inputProps, {
          "attrs": {
            "align": "center",
            "theme": "normal",
            "size": "small",
            "disabled": _this.disabled,
            "title": _this.modelValues[config.key],
            "min": config.min,
            "max": config.max,
            "step": 1,
            "format": config.format
          },
          "on": {
            "blur": function blur(v) {
              return _this.handleChange(config.key, v);
            },
            "enter": function enter(v) {
              return _this.handleChange(config.key, v);
            }
          },
          "model": {
            value: _this.modelValues[config.key],
            callback: function callback($$v) {
              _this.$set(_this.modelValues, config.key, $$v);
            }
          }
        }]))]);
      })]);
    }
  });

  function ownKeys$1j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1j(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var FormatPanel = VueCompositionAPI.defineComponent({
    name: "FormatPanel",
    components: {
      TSelect: Select,
      TInput: Input,
      TOption: Option,
      FormatInputs: FormatInputs
    },
    inheritAttrs: false,
    props: _objectSpread$1i(_objectSpread$1i({}, props$y), {}, {
      color: {
        type: Object
      },
      handleFormatModeChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      },
      handleFormatInputChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    }),
    setup: function setup(props2) {
      var baseClassName = useBaseClassName();
      var formatModel = VueCompositionAPI.ref(props2.format);
      VueCompositionAPI.watch(function () {
        return [props2.format];
      }, function () {
        return formatModel.value = props2.format;
      });

      var handleModeChange = function handleModeChange(v) {
        formatModel.value = v;
        props2.handleFormatModeChange(v);
      };

      return {
        formatModel: formatModel,
        baseClassName: baseClassName,
        handleModeChange: handleModeChange
      };
    },
    render: function render(h) {
      var _this = this;

      var formats = _toConsumableArray(FORMATS);

      var baseClassName = this.baseClassName,
          handleModeChange = this.handleModeChange;

      var newProps = _objectSpread$1i(_objectSpread$1i({}, this.$props), {}, {
        format: this.formatModel
      });

      var selectInputProps = _objectSpread$1i({}, this.selectInputProps || {});

      return h("div", {
        "class": "".concat(baseClassName, "__format")
      }, [h("div", {
        "class": "".concat(baseClassName, "__format--item")
      }, [h("t-select", helper([{
        "attrs": {
          "size": "small"
        },
        "class": "".concat(baseClassName, "__format-mode-select")
      }, selectInputProps, {
        "attrs": {
          "popupProps": {
            overlayClassName: "".concat(baseClassName, "__select-options")
          }
        },
        "on": {
          "change": handleModeChange
        },
        "model": {
          value: _this.formatModel,
          callback: function callback($$v) {
            _this.formatModel = $$v;
          }
        }
      }]), [formats.map(function (item) {
        return h("t-option", {
          "key": item,
          "attrs": {
            "value": item,
            "label": upperCase_1(item)
          },
          "style": {
            fontSize: "12px"
          }
        });
      })])]), h("div", {
        "class": "".concat(baseClassName, "__format--item")
      }, [h("format-inputs", {
        props: newProps
      })])]);
    }
  });

  var lodash=createCommonjsModule(function(module,exports){(function(){/** Used as a safe reference for `undefined` in pre-ES5 environments. */var undefined$1;/** Used as the semantic version number. */var VERSION='4.17.21';/** Used as the size to enable large array optimizations. */var LARGE_ARRAY_SIZE=200;/** Error message constants. */var CORE_ERROR_TEXT='Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',FUNC_ERROR_TEXT='Expected a function',INVALID_TEMPL_VAR_ERROR_TEXT='Invalid `variable` option passed into `_.template`';/** Used to stand-in for `undefined` hash values. */var HASH_UNDEFINED='__lodash_hash_undefined__';/** Used as the maximum memoize cache size. */var MAX_MEMOIZE_SIZE=500;/** Used as the internal argument placeholder. */var PLACEHOLDER='__lodash_placeholder__';/** Used to compose bitmasks for cloning. */var CLONE_DEEP_FLAG=1,CLONE_FLAT_FLAG=2,CLONE_SYMBOLS_FLAG=4;/** Used to compose bitmasks for value comparisons. */var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;/** Used to compose bitmasks for function metadata. */var WRAP_BIND_FLAG=1,WRAP_BIND_KEY_FLAG=2,WRAP_CURRY_BOUND_FLAG=4,WRAP_CURRY_FLAG=8,WRAP_CURRY_RIGHT_FLAG=16,WRAP_PARTIAL_FLAG=32,WRAP_PARTIAL_RIGHT_FLAG=64,WRAP_ARY_FLAG=128,WRAP_REARG_FLAG=256,WRAP_FLIP_FLAG=512;/** Used as default options for `_.truncate`. */var DEFAULT_TRUNC_LENGTH=30,DEFAULT_TRUNC_OMISSION='...';/** Used to detect hot functions by number of calls within a span of milliseconds. */var HOT_COUNT=800,HOT_SPAN=16;/** Used to indicate the type of lazy iteratees. */var LAZY_FILTER_FLAG=1,LAZY_MAP_FLAG=2,LAZY_WHILE_FLAG=3;/** Used as references for various `Number` constants. */var INFINITY=1/0,MAX_SAFE_INTEGER=9007199254740991,MAX_INTEGER=1.7976931348623157e+308,NAN=0/0;/** Used as references for the maximum length and index of an array. */var MAX_ARRAY_LENGTH=4294967295,MAX_ARRAY_INDEX=MAX_ARRAY_LENGTH-1,HALF_MAX_ARRAY_LENGTH=MAX_ARRAY_LENGTH>>>1;/** Used to associate wrap methods with their bit flags. */var wrapFlags=[['ary',WRAP_ARY_FLAG],['bind',WRAP_BIND_FLAG],['bindKey',WRAP_BIND_KEY_FLAG],['curry',WRAP_CURRY_FLAG],['curryRight',WRAP_CURRY_RIGHT_FLAG],['flip',WRAP_FLIP_FLAG],['partial',WRAP_PARTIAL_FLAG],['partialRight',WRAP_PARTIAL_RIGHT_FLAG],['rearg',WRAP_REARG_FLAG]];/** `Object#toString` result references. */var argsTag='[object Arguments]',arrayTag='[object Array]',asyncTag='[object AsyncFunction]',boolTag='[object Boolean]',dateTag='[object Date]',domExcTag='[object DOMException]',errorTag='[object Error]',funcTag='[object Function]',genTag='[object GeneratorFunction]',mapTag='[object Map]',numberTag='[object Number]',nullTag='[object Null]',objectTag='[object Object]',promiseTag='[object Promise]',proxyTag='[object Proxy]',regexpTag='[object RegExp]',setTag='[object Set]',stringTag='[object String]',symbolTag='[object Symbol]',undefinedTag='[object Undefined]',weakMapTag='[object WeakMap]',weakSetTag='[object WeakSet]';var arrayBufferTag='[object ArrayBuffer]',dataViewTag='[object DataView]',float32Tag='[object Float32Array]',float64Tag='[object Float64Array]',int8Tag='[object Int8Array]',int16Tag='[object Int16Array]',int32Tag='[object Int32Array]',uint8Tag='[object Uint8Array]',uint8ClampedTag='[object Uint8ClampedArray]',uint16Tag='[object Uint16Array]',uint32Tag='[object Uint32Array]';/** Used to match empty string literals in compiled template source. */var reEmptyStringLeading=/\b__p \+= '';/g,reEmptyStringMiddle=/\b(__p \+=) '' \+/g,reEmptyStringTrailing=/(__e\(.*?\)|\b__t\)) \+\n'';/g;/** Used to match HTML entities and HTML characters. */var reEscapedHtml=/&(?:amp|lt|gt|quot|#39);/g,reUnescapedHtml=/[&<>"']/g,reHasEscapedHtml=RegExp(reEscapedHtml.source),reHasUnescapedHtml=RegExp(reUnescapedHtml.source);/** Used to match template delimiters. */var reEscape=/<%-([\s\S]+?)%>/g,reEvaluate=/<%([\s\S]+?)%>/g,reInterpolate=/<%=([\s\S]+?)%>/g;/** Used to match property names within property paths. */var reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/,rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;/**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */var reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reHasRegExpChar=RegExp(reRegExpChar.source);/** Used to match leading whitespace. */var reTrimStart=/^\s+/;/** Used to match a single whitespace character. */var reWhitespace=/\s/;/** Used to match wrap detail comments. */var reWrapComment=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,reWrapDetails=/\{\n\/\* \[wrapped with (.+)\] \*/,reSplitDetails=/,? & /;/** Used to match words composed of alphanumeric characters. */var reAsciiWord=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;/**
     * Used to validate the `validate` option in `_.template` variable.
     *
     * Forbids characters which could potentially change the meaning of the function argument definition:
     * - "()," (modification of function parameters)
     * - "=" (default value)
     * - "[]{}" (destructuring of function parameters)
     * - "/" (beginning of a comment)
     * - whitespace
     */var reForbiddenIdentifierChars=/[()=,{}\[\]\/\s]/;/** Used to match backslashes in property paths. */var reEscapeChar=/\\(\\)?/g;/**
     * Used to match
     * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
     */var reEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;/** Used to match `RegExp` flags from their coerced string values. */var reFlags=/\w*$/;/** Used to detect bad signed hexadecimal string values. */var reIsBadHex=/^[-+]0x[0-9a-f]+$/i;/** Used to detect binary string values. */var reIsBinary=/^0b[01]+$/i;/** Used to detect host constructors (Safari). */var reIsHostCtor=/^\[object .+?Constructor\]$/;/** Used to detect octal string values. */var reIsOctal=/^0o[0-7]+$/i;/** Used to detect unsigned integer values. */var reIsUint=/^(?:0|[1-9]\d*)$/;/** Used to match Latin Unicode letters (excluding mathematical operators). */var reLatin=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;/** Used to ensure capturing order of template delimiters. */var reNoMatch=/($^)/;/** Used to match unescaped characters in compiled string literals. */var reUnescapedString=/['\n\r\u2028\u2029\\]/g;/** Used to compose unicode character classes. */var rsAstralRange="\\ud800-\\udfff",rsComboMarksRange="\\u0300-\\u036f",reComboHalfMarksRange="\\ufe20-\\ufe2f",rsComboSymbolsRange="\\u20d0-\\u20ff",rsComboRange=rsComboMarksRange+reComboHalfMarksRange+rsComboSymbolsRange,rsDingbatRange="\\u2700-\\u27bf",rsLowerRange='a-z\\xdf-\\xf6\\xf8-\\xff',rsMathOpRange='\\xac\\xb1\\xd7\\xf7',rsNonCharRange='\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',rsPunctuationRange="\\u2000-\\u206f",rsSpaceRange=" \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",rsUpperRange='A-Z\\xc0-\\xd6\\xd8-\\xde',rsVarRange="\\ufe0e\\ufe0f",rsBreakRange=rsMathOpRange+rsNonCharRange+rsPunctuationRange+rsSpaceRange;/** Used to compose unicode capture groups. */var rsApos="['\u2019]",rsAstral='['+rsAstralRange+']',rsBreak='['+rsBreakRange+']',rsCombo='['+rsComboRange+']',rsDigits='\\d+',rsDingbat='['+rsDingbatRange+']',rsLower='['+rsLowerRange+']',rsMisc='[^'+rsAstralRange+rsBreakRange+rsDigits+rsDingbatRange+rsLowerRange+rsUpperRange+']',rsFitz="\\ud83c[\\udffb-\\udfff]",rsModifier='(?:'+rsCombo+'|'+rsFitz+')',rsNonAstral='[^'+rsAstralRange+']',rsRegional="(?:\\ud83c[\\udde6-\\uddff]){2}",rsSurrPair="[\\ud800-\\udbff][\\udc00-\\udfff]",rsUpper='['+rsUpperRange+']',rsZWJ="\\u200d";/** Used to compose unicode regexes. */var rsMiscLower='(?:'+rsLower+'|'+rsMisc+')',rsMiscUpper='(?:'+rsUpper+'|'+rsMisc+')',rsOptContrLower='(?:'+rsApos+'(?:d|ll|m|re|s|t|ve))?',rsOptContrUpper='(?:'+rsApos+'(?:D|LL|M|RE|S|T|VE))?',reOptMod=rsModifier+'?',rsOptVar='['+rsVarRange+']?',rsOptJoin='(?:'+rsZWJ+'(?:'+[rsNonAstral,rsRegional,rsSurrPair].join('|')+')'+rsOptVar+reOptMod+')*',rsOrdLower='\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',rsOrdUpper='\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',rsSeq=rsOptVar+reOptMod+rsOptJoin,rsEmoji='(?:'+[rsDingbat,rsRegional,rsSurrPair].join('|')+')'+rsSeq,rsSymbol='(?:'+[rsNonAstral+rsCombo+'?',rsCombo,rsRegional,rsSurrPair,rsAstral].join('|')+')';/** Used to match apostrophes. */var reApos=RegExp(rsApos,'g');/**
     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
     */var reComboMark=RegExp(rsCombo,'g');/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */var reUnicode=RegExp(rsFitz+'(?='+rsFitz+')|'+rsSymbol+rsSeq,'g');/** Used to match complex or compound words. */var reUnicodeWord=RegExp([rsUpper+'?'+rsLower+'+'+rsOptContrLower+'(?='+[rsBreak,rsUpper,'$'].join('|')+')',rsMiscUpper+'+'+rsOptContrUpper+'(?='+[rsBreak,rsUpper+rsMiscLower,'$'].join('|')+')',rsUpper+'?'+rsMiscLower+'+'+rsOptContrLower,rsUpper+'+'+rsOptContrUpper,rsOrdUpper,rsOrdLower,rsDigits,rsEmoji].join('|'),'g');/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */var reHasUnicode=RegExp('['+rsZWJ+rsAstralRange+rsComboRange+rsVarRange+']');/** Used to detect strings that need a more robust regexp to match words. */var reHasUnicodeWord=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;/** Used to assign default `context` object properties. */var contextProps=['Array','Buffer','DataView','Date','Error','Float32Array','Float64Array','Function','Int8Array','Int16Array','Int32Array','Map','Math','Object','Promise','RegExp','Set','String','Symbol','TypeError','Uint8Array','Uint8ClampedArray','Uint16Array','Uint32Array','WeakMap','_','clearTimeout','isFinite','parseInt','setTimeout'];/** Used to make template sourceURLs easier to identify. */var templateCounter=-1;/** Used to identify `toStringTag` values of typed arrays. */var typedArrayTags={};typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=true;typedArrayTags[argsTag]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=false;/** Used to identify `toStringTag` values supported by `_.clone`. */var cloneableTags={};cloneableTags[argsTag]=cloneableTags[arrayTag]=cloneableTags[arrayBufferTag]=cloneableTags[dataViewTag]=cloneableTags[boolTag]=cloneableTags[dateTag]=cloneableTags[float32Tag]=cloneableTags[float64Tag]=cloneableTags[int8Tag]=cloneableTags[int16Tag]=cloneableTags[int32Tag]=cloneableTags[mapTag]=cloneableTags[numberTag]=cloneableTags[objectTag]=cloneableTags[regexpTag]=cloneableTags[setTag]=cloneableTags[stringTag]=cloneableTags[symbolTag]=cloneableTags[uint8Tag]=cloneableTags[uint8ClampedTag]=cloneableTags[uint16Tag]=cloneableTags[uint32Tag]=true;cloneableTags[errorTag]=cloneableTags[funcTag]=cloneableTags[weakMapTag]=false;/** Used to map Latin Unicode letters to basic Latin letters. */var deburredLetters={// Latin-1 Supplement block.
  '\xc0':'A','\xc1':'A','\xc2':'A','\xc3':'A','\xc4':'A','\xc5':'A','\xe0':'a','\xe1':'a','\xe2':'a','\xe3':'a','\xe4':'a','\xe5':'a','\xc7':'C','\xe7':'c','\xd0':'D','\xf0':'d','\xc8':'E','\xc9':'E','\xca':'E','\xcb':'E','\xe8':'e','\xe9':'e','\xea':'e','\xeb':'e','\xcc':'I','\xcd':'I','\xce':'I','\xcf':'I','\xec':'i','\xed':'i','\xee':'i','\xef':'i','\xd1':'N','\xf1':'n','\xd2':'O','\xd3':'O','\xd4':'O','\xd5':'O','\xd6':'O','\xd8':'O','\xf2':'o','\xf3':'o','\xf4':'o','\xf5':'o','\xf6':'o','\xf8':'o','\xd9':'U','\xda':'U','\xdb':'U','\xdc':'U','\xf9':'u','\xfa':'u','\xfb':'u','\xfc':'u','\xdd':'Y','\xfd':'y','\xff':'y','\xc6':'Ae','\xe6':'ae','\xde':'Th','\xfe':'th','\xdf':'ss',// Latin Extended-A block.
  "\u0100":'A',"\u0102":'A',"\u0104":'A',"\u0101":'a',"\u0103":'a',"\u0105":'a',"\u0106":'C',"\u0108":'C',"\u010A":'C',"\u010C":'C',"\u0107":'c',"\u0109":'c',"\u010B":'c',"\u010D":'c',"\u010E":'D',"\u0110":'D',"\u010F":'d',"\u0111":'d',"\u0112":'E',"\u0114":'E',"\u0116":'E',"\u0118":'E',"\u011A":'E',"\u0113":'e',"\u0115":'e',"\u0117":'e',"\u0119":'e',"\u011B":'e',"\u011C":'G',"\u011E":'G',"\u0120":'G',"\u0122":'G',"\u011D":'g',"\u011F":'g',"\u0121":'g',"\u0123":'g',"\u0124":'H',"\u0126":'H',"\u0125":'h',"\u0127":'h',"\u0128":'I',"\u012A":'I',"\u012C":'I',"\u012E":'I',"\u0130":'I',"\u0129":'i',"\u012B":'i',"\u012D":'i',"\u012F":'i',"\u0131":'i',"\u0134":'J',"\u0135":'j',"\u0136":'K',"\u0137":'k',"\u0138":'k',"\u0139":'L',"\u013B":'L',"\u013D":'L',"\u013F":'L',"\u0141":'L',"\u013A":'l',"\u013C":'l',"\u013E":'l',"\u0140":'l',"\u0142":'l',"\u0143":'N',"\u0145":'N',"\u0147":'N',"\u014A":'N',"\u0144":'n',"\u0146":'n',"\u0148":'n',"\u014B":'n',"\u014C":'O',"\u014E":'O',"\u0150":'O',"\u014D":'o',"\u014F":'o',"\u0151":'o',"\u0154":'R',"\u0156":'R',"\u0158":'R',"\u0155":'r',"\u0157":'r',"\u0159":'r',"\u015A":'S',"\u015C":'S',"\u015E":'S',"\u0160":'S',"\u015B":'s',"\u015D":'s',"\u015F":'s',"\u0161":'s',"\u0162":'T',"\u0164":'T',"\u0166":'T',"\u0163":'t',"\u0165":'t',"\u0167":'t',"\u0168":'U',"\u016A":'U',"\u016C":'U',"\u016E":'U',"\u0170":'U',"\u0172":'U',"\u0169":'u',"\u016B":'u',"\u016D":'u',"\u016F":'u',"\u0171":'u',"\u0173":'u',"\u0174":'W',"\u0175":'w',"\u0176":'Y',"\u0177":'y',"\u0178":'Y',"\u0179":'Z',"\u017B":'Z',"\u017D":'Z',"\u017A":'z',"\u017C":'z',"\u017E":'z',"\u0132":'IJ',"\u0133":'ij',"\u0152":'Oe',"\u0153":'oe',"\u0149":"'n","\u017F":'s'};/** Used to map characters to HTML entities. */var htmlEscapes={'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'};/** Used to map HTML entities to characters. */var htmlUnescapes={'&amp;':'&','&lt;':'<','&gt;':'>','&quot;':'"','&#39;':"'"};/** Used to escape characters for inclusion in compiled string literals. */var stringEscapes={'\\':'\\',"'":"'",'\n':'n','\r':'r',"\u2028":'u2028',"\u2029":'u2029'};/** Built-in method references without a dependency on `root`. */var freeParseFloat=parseFloat,freeParseInt=parseInt;/** Detect free variable `global` from Node.js. */var freeGlobal=_typeof$1(commonjsGlobal)=='object'&&commonjsGlobal&&commonjsGlobal.Object===Object&&commonjsGlobal;/** Detect free variable `self`. */var freeSelf=(typeof self==="undefined"?"undefined":_typeof$1(self))=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();/** Detect free variable `exports`. */var freeExports=exports&&!exports.nodeType&&exports;/** Detect free variable `module`. */var freeModule=freeExports&&'object'=='object'&&module&&!module.nodeType&&module;/** Detect the popular CommonJS extension `module.exports`. */var moduleExports=freeModule&&freeModule.exports===freeExports;/** Detect free variable `process` from Node.js. */var freeProcess=moduleExports&&freeGlobal.process;/** Used to access faster Node.js helpers. */var nodeUtil=function(){try{// Use `util.types` for Node.js 10+.
  var types=freeModule&&freeModule.require&&freeModule.require('util').types;if(types){return types;}// Legacy `process.binding('util')` for Node.js < 10.
  return freeProcess&&freeProcess.binding&&freeProcess.binding('util');}catch(e){}}();/* Node.js helper references. */var nodeIsArrayBuffer=nodeUtil&&nodeUtil.isArrayBuffer,nodeIsDate=nodeUtil&&nodeUtil.isDate,nodeIsMap=nodeUtil&&nodeUtil.isMap,nodeIsRegExp=nodeUtil&&nodeUtil.isRegExp,nodeIsSet=nodeUtil&&nodeUtil.isSet,nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray;/*--------------------------------------------------------------------------*/ /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */function apply(func,thisArg,args){switch(args.length){case 0:return func.call(thisArg);case 1:return func.call(thisArg,args[0]);case 2:return func.call(thisArg,args[0],args[1]);case 3:return func.call(thisArg,args[0],args[1],args[2]);}return func.apply(thisArg,args);}/**
     * A specialized version of `baseAggregator` for arrays.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */function arrayAggregator(array,setter,iteratee,accumulator){var index=-1,length=array==null?0:array.length;while(++index<length){var value=array[index];setter(accumulator,value,iteratee(value),array);}return accumulator;}/**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */function arrayEach(array,iteratee){var index=-1,length=array==null?0:array.length;while(++index<length){if(iteratee(array[index],index,array)===false){break;}}return array;}/**
     * A specialized version of `_.forEachRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */function arrayEachRight(array,iteratee){var length=array==null?0:array.length;while(length--){if(iteratee(array[length],length,array)===false){break;}}return array;}/**
     * A specialized version of `_.every` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */function arrayEvery(array,predicate){var index=-1,length=array==null?0:array.length;while(++index<length){if(!predicate(array[index],index,array)){return false;}}return true;}/**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */function arrayFilter(array,predicate){var index=-1,length=array==null?0:array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(predicate(value,index,array)){result[resIndex++]=value;}}return result;}/**
     * A specialized version of `_.includes` for arrays without support for
     * specifying an index to search from.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */function arrayIncludes(array,value){var length=array==null?0:array.length;return !!length&&baseIndexOf(array,value,0)>-1;}/**
     * This function is like `arrayIncludes` except that it accepts a comparator.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */function arrayIncludesWith(array,value,comparator){var index=-1,length=array==null?0:array.length;while(++index<length){if(comparator(value,array[index])){return true;}}return false;}/**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */function arrayMap(array,iteratee){var index=-1,length=array==null?0:array.length,result=Array(length);while(++index<length){result[index]=iteratee(array[index],index,array);}return result;}/**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */function arrayPush(array,values){var index=-1,length=values.length,offset=array.length;while(++index<length){array[offset+index]=values[index];}return array;}/**
     * A specialized version of `_.reduce` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the first element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */function arrayReduce(array,iteratee,accumulator,initAccum){var index=-1,length=array==null?0:array.length;if(initAccum&&length){accumulator=array[++index];}while(++index<length){accumulator=iteratee(accumulator,array[index],index,array);}return accumulator;}/**
     * A specialized version of `_.reduceRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the last element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */function arrayReduceRight(array,iteratee,accumulator,initAccum){var length=array==null?0:array.length;if(initAccum&&length){accumulator=array[--length];}while(length--){accumulator=iteratee(accumulator,array[length],length,array);}return accumulator;}/**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */function arraySome(array,predicate){var index=-1,length=array==null?0:array.length;while(++index<length){if(predicate(array[index],index,array)){return true;}}return false;}/**
     * Gets the size of an ASCII `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */var asciiSize=baseProperty('length');/**
     * Converts an ASCII `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */function asciiToArray(string){return string.split('');}/**
     * Splits an ASCII `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */function asciiWords(string){return string.match(reAsciiWord)||[];}/**
     * The base implementation of methods like `_.findKey` and `_.findLastKey`,
     * without support for iteratee shorthands, which iterates over `collection`
     * using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */function baseFindKey(collection,predicate,eachFunc){var result;eachFunc(collection,function(value,key,collection){if(predicate(value,key,collection)){result=key;return false;}});return result;}/**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */function baseFindIndex(array,predicate,fromIndex,fromRight){var length=array.length,index=fromIndex+(fromRight?1:-1);while(fromRight?index--:++index<length){if(predicate(array[index],index,array)){return index;}}return -1;}/**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */function baseIndexOf(array,value,fromIndex){return value===value?strictIndexOf(array,value,fromIndex):baseFindIndex(array,baseIsNaN,fromIndex);}/**
     * This function is like `baseIndexOf` except that it accepts a comparator.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */function baseIndexOfWith(array,value,fromIndex,comparator){var index=fromIndex-1,length=array.length;while(++index<length){if(comparator(array[index],value)){return index;}}return -1;}/**
     * The base implementation of `_.isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */function baseIsNaN(value){return value!==value;}/**
     * The base implementation of `_.mean` and `_.meanBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the mean.
     */function baseMean(array,iteratee){var length=array==null?0:array.length;return length?baseSum(array,iteratee)/length:NAN;}/**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */function baseProperty(key){return function(object){return object==null?undefined$1:object[key];};}/**
     * The base implementation of `_.propertyOf` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     */function basePropertyOf(object){return function(key){return object==null?undefined$1:object[key];};}/**
     * The base implementation of `_.reduce` and `_.reduceRight`, without support
     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initAccum Specify using the first or last element of
     *  `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */function baseReduce(collection,iteratee,accumulator,initAccum,eachFunc){eachFunc(collection,function(value,index,collection){accumulator=initAccum?(initAccum=false,value):iteratee(accumulator,value,index,collection);});return accumulator;}/**
     * The base implementation of `_.sortBy` which uses `comparer` to define the
     * sort order of `array` and replaces criteria objects with their corresponding
     * values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */function baseSortBy(array,comparer){var length=array.length;array.sort(comparer);while(length--){array[length]=array[length].value;}return array;}/**
     * The base implementation of `_.sum` and `_.sumBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */function baseSum(array,iteratee){var result,index=-1,length=array.length;while(++index<length){var current=iteratee(array[index]);if(current!==undefined$1){result=result===undefined$1?current:result+current;}}return result;}/**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index<n){result[index]=iteratee(index);}return result;}/**
     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
     * of key-value pairs for `object` corresponding to the property names of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the key-value pairs.
     */function baseToPairs(object,props){return arrayMap(props,function(key){return [key,object[key]];});}/**
     * The base implementation of `_.trim`.
     *
     * @private
     * @param {string} string The string to trim.
     * @returns {string} Returns the trimmed string.
     */function baseTrim(string){return string?string.slice(0,trimmedEndIndex(string)+1).replace(reTrimStart,''):string;}/**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */function baseUnary(func){return function(value){return func(value);};}/**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */function baseValues(object,props){return arrayMap(props,function(key){return object[key];});}/**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */function cacheHas(cache,key){return cache.has(key);}/**
     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the first unmatched string symbol.
     */function charsStartIndex(strSymbols,chrSymbols){var index=-1,length=strSymbols.length;while(++index<length&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}return index;}/**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the last unmatched string symbol.
     */function charsEndIndex(strSymbols,chrSymbols){var index=strSymbols.length;while(index--&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}return index;}/**
     * Gets the number of `placeholder` occurrences in `array`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} placeholder The placeholder to search for.
     * @returns {number} Returns the placeholder count.
     */function countHolders(array,placeholder){var length=array.length,result=0;while(length--){if(array[length]===placeholder){++result;}}return result;}/**
     * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
     * letters to basic Latin letters.
     *
     * @private
     * @param {string} letter The matched letter to deburr.
     * @returns {string} Returns the deburred letter.
     */var deburrLetter=basePropertyOf(deburredLetters);/**
     * Used by `_.escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */var escapeHtmlChar=basePropertyOf(htmlEscapes);/**
     * Used by `_.template` to escape characters for inclusion in compiled string literals.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */function escapeStringChar(chr){return '\\'+stringEscapes[chr];}/**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */function getValue(object,key){return object==null?undefined$1:object[key];}/**
     * Checks if `string` contains Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a symbol is found, else `false`.
     */function hasUnicode(string){return reHasUnicode.test(string);}/**
     * Checks if `string` contains a word composed of Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a word is found, else `false`.
     */function hasUnicodeWord(string){return reHasUnicodeWord.test(string);}/**
     * Converts `iterator` to an array.
     *
     * @private
     * @param {Object} iterator The iterator to convert.
     * @returns {Array} Returns the converted array.
     */function iteratorToArray(iterator){var data,result=[];while(!(data=iterator.next()).done){result.push(data.value);}return result;}/**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */function mapToArray(map){var index=-1,result=Array(map.size);map.forEach(function(value,key){result[++index]=[key,value];});return result;}/**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */function overArg(func,transform){return function(arg){return func(transform(arg));};}/**
     * Replaces all `placeholder` elements in `array` with an internal placeholder
     * and returns an array of their indexes.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {*} placeholder The placeholder to replace.
     * @returns {Array} Returns the new array of placeholder indexes.
     */function replaceHolders(array,placeholder){var index=-1,length=array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(value===placeholder||value===PLACEHOLDER){array[index]=PLACEHOLDER;result[resIndex++]=index;}}return result;}/**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */function setToArray(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=value;});return result;}/**
     * Converts `set` to its value-value pairs.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the value-value pairs.
     */function setToPairs(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=[value,value];});return result;}/**
     * A specialized version of `_.indexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */function strictIndexOf(array,value,fromIndex){var index=fromIndex-1,length=array.length;while(++index<length){if(array[index]===value){return index;}}return -1;}/**
     * A specialized version of `_.lastIndexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */function strictLastIndexOf(array,value,fromIndex){var index=fromIndex+1;while(index--){if(array[index]===value){return index;}}return index;}/**
     * Gets the number of symbols in `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the string size.
     */function stringSize(string){return hasUnicode(string)?unicodeSize(string):asciiSize(string);}/**
     * Converts `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */function stringToArray(string){return hasUnicode(string)?unicodeToArray(string):asciiToArray(string);}/**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
     * character of `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the index of the last non-whitespace character.
     */function trimmedEndIndex(string){var index=string.length;while(index--&&reWhitespace.test(string.charAt(index))){}return index;}/**
     * Used by `_.unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} chr The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */var unescapeHtmlChar=basePropertyOf(htmlUnescapes);/**
     * Gets the size of a Unicode `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */function unicodeSize(string){var result=reUnicode.lastIndex=0;while(reUnicode.test(string)){++result;}return result;}/**
     * Converts a Unicode `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */function unicodeToArray(string){return string.match(reUnicode)||[];}/**
     * Splits a Unicode `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */function unicodeWords(string){return string.match(reUnicodeWord)||[];}/*--------------------------------------------------------------------------*/ /**
     * Create a new pristine `lodash` function using the `context` object.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Util
     * @param {Object} [context=root] The context object.
     * @returns {Function} Returns a new `lodash` function.
     * @example
     *
     * _.mixin({ 'foo': _.constant('foo') });
     *
     * var lodash = _.runInContext();
     * lodash.mixin({ 'bar': lodash.constant('bar') });
     *
     * _.isFunction(_.foo);
     * // => true
     * _.isFunction(_.bar);
     * // => false
     *
     * lodash.isFunction(lodash.foo);
     * // => false
     * lodash.isFunction(lodash.bar);
     * // => true
     *
     * // Create a suped-up `defer` in Node.js.
     * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
     */var runInContext=function runInContext(context){context=context==null?root:_.defaults(root.Object(),context,_.pick(root,contextProps));/** Built-in constructor references. */var Array=context.Array,Date=context.Date,Error=context.Error,Function=context.Function,Math=context.Math,Object=context.Object,RegExp=context.RegExp,String=context.String,TypeError=context.TypeError;/** Used for built-in method references. */var arrayProto=Array.prototype,funcProto=Function.prototype,objectProto=Object.prototype;/** Used to detect overreaching core-js shims. */var coreJsData=context['__core-js_shared__'];/** Used to resolve the decompiled source of functions. */var funcToString=funcProto.toString;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/** Used to generate unique IDs. */var idCounter=0;/** Used to detect methods masquerading as native. */var maskSrcKey=function(){var uid=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||'');return uid?'Symbol(src)_1.'+uid:'';}();/**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */var nativeObjectToString=objectProto.toString;/** Used to infer the `Object` constructor. */var objectCtorString=funcToString.call(Object);/** Used to restore the original `_` reference in `_.noConflict`. */var oldDash=root._;/** Used to detect if a method is native. */var reIsNative=RegExp('^'+funcToString.call(hasOwnProperty).replace(reRegExpChar,'\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,'$1.*?')+'$');/** Built-in value references. */var Buffer=moduleExports?context.Buffer:undefined$1,_Symbol=context.Symbol,Uint8Array=context.Uint8Array,allocUnsafe=Buffer?Buffer.allocUnsafe:undefined$1,getPrototype=overArg(Object.getPrototypeOf,Object),objectCreate=Object.create,propertyIsEnumerable=objectProto.propertyIsEnumerable,splice=arrayProto.splice,spreadableSymbol=_Symbol?_Symbol.isConcatSpreadable:undefined$1,symIterator=_Symbol?_Symbol.iterator:undefined$1,symToStringTag=_Symbol?_Symbol.toStringTag:undefined$1;var defineProperty=function(){try{var func=getNative(Object,'defineProperty');func({},'',{});return func;}catch(e){}}();/** Mocked built-ins. */var ctxClearTimeout=context.clearTimeout!==root.clearTimeout&&context.clearTimeout,ctxNow=Date&&Date.now!==root.Date.now&&Date.now,ctxSetTimeout=context.setTimeout!==root.setTimeout&&context.setTimeout;/* Built-in method references for those with the same name as other `lodash` methods. */var nativeCeil=Math.ceil,nativeFloor=Math.floor,nativeGetSymbols=Object.getOwnPropertySymbols,nativeIsBuffer=Buffer?Buffer.isBuffer:undefined$1,nativeIsFinite=context.isFinite,nativeJoin=arrayProto.join,nativeKeys=overArg(Object.keys,Object),nativeMax=Math.max,nativeMin=Math.min,nativeNow=Date.now,nativeParseInt=context.parseInt,nativeRandom=Math.random,nativeReverse=arrayProto.reverse;/* Built-in method references that are verified to be native. */var DataView=getNative(context,'DataView'),Map=getNative(context,'Map'),Promise=getNative(context,'Promise'),Set=getNative(context,'Set'),WeakMap=getNative(context,'WeakMap'),nativeCreate=getNative(Object,'create');/** Used to store function metadata. */var metaMap=WeakMap&&new WeakMap();/** Used to lookup unminified function names. */var realNames={};/** Used to detect maps, sets, and weakmaps. */var dataViewCtorString=toSource(DataView),mapCtorString=toSource(Map),promiseCtorString=toSource(Promise),setCtorString=toSource(Set),weakMapCtorString=toSource(WeakMap);/** Used to convert symbols to primitives and strings. */var symbolProto=_Symbol?_Symbol.prototype:undefined$1,symbolValueOf=symbolProto?symbolProto.valueOf:undefined$1,symbolToString=symbolProto?symbolProto.toString:undefined$1;/*------------------------------------------------------------------------*/ /**
       * Creates a `lodash` object which wraps `value` to enable implicit method
       * chain sequences. Methods that operate on and return arrays, collections,
       * and functions can be chained together. Methods that retrieve a single value
       * or may return a primitive value will automatically end the chain sequence
       * and return the unwrapped value. Otherwise, the value must be unwrapped
       * with `_#value`.
       *
       * Explicit chain sequences, which must be unwrapped with `_#value`, may be
       * enabled using `_.chain`.
       *
       * The execution of chained methods is lazy, that is, it's deferred until
       * `_#value` is implicitly or explicitly called.
       *
       * Lazy evaluation allows several methods to support shortcut fusion.
       * Shortcut fusion is an optimization to merge iteratee calls; this avoids
       * the creation of intermediate arrays and can greatly reduce the number of
       * iteratee executions. Sections of a chain sequence qualify for shortcut
       * fusion if the section is applied to an array and iteratees accept only
       * one argument. The heuristic for whether a section qualifies for shortcut
       * fusion is subject to change.
       *
       * Chaining is supported in custom builds as long as the `_#value` method is
       * directly or indirectly included in the build.
       *
       * In addition to lodash methods, wrappers have `Array` and `String` methods.
       *
       * The wrapper `Array` methods are:
       * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
       *
       * The wrapper `String` methods are:
       * `replace` and `split`
       *
       * The wrapper methods that support shortcut fusion are:
       * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
       * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
       * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
       *
       * The chainable wrapper methods are:
       * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
       * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
       * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
       * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
       * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
       * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
       * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
       * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
       * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
       * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
       * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
       * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
       * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
       * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
       * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
       * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
       * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
       * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
       * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
       * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
       * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
       * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
       * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
       * `zipObject`, `zipObjectDeep`, and `zipWith`
       *
       * The wrapper methods that are **not** chainable by default are:
       * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
       * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
       * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
       * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
       * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
       * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
       * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
       * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
       * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
       * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
       * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
       * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
       * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
       * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
       * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
       * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
       * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
       * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
       * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
       * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
       * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
       * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
       * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
       * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
       * `upperFirst`, `value`, and `words`
       *
       * @name _
       * @constructor
       * @category Seq
       * @param {*} value The value to wrap in a `lodash` instance.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2, 3]);
       *
       * // Returns an unwrapped value.
       * wrapped.reduce(_.add);
       * // => 6
       *
       * // Returns a wrapped value.
       * var squares = wrapped.map(square);
       *
       * _.isArray(squares);
       * // => false
       *
       * _.isArray(squares.value());
       * // => true
       */function lodash(value){if(isObjectLike(value)&&!isArray(value)&&!(value instanceof LazyWrapper)){if(value instanceof LodashWrapper){return value;}if(hasOwnProperty.call(value,'__wrapped__')){return wrapperClone(value);}}return new LodashWrapper(value);}/**
       * The base implementation of `_.create` without support for assigning
       * properties to the created object.
       *
       * @private
       * @param {Object} proto The object to inherit from.
       * @returns {Object} Returns the new object.
       */var baseCreate=function(){function object(){}return function(proto){if(!isObject(proto)){return {};}if(objectCreate){return objectCreate(proto);}object.prototype=proto;var result=new object();object.prototype=undefined$1;return result;};}();/**
       * The function whose prototype chain sequence wrappers inherit from.
       *
       * @private
       */function baseLodash(){// No operation performed.
  }/**
       * The base constructor for creating `lodash` wrapper objects.
       *
       * @private
       * @param {*} value The value to wrap.
       * @param {boolean} [chainAll] Enable explicit method chain sequences.
       */function LodashWrapper(value,chainAll){this.__wrapped__=value;this.__actions__=[];this.__chain__=!!chainAll;this.__index__=0;this.__values__=undefined$1;}/**
       * By default, the template delimiters used by lodash are like those in
       * embedded Ruby (ERB) as well as ES2015 template strings. Change the
       * following template settings to use alternative delimiters.
       *
       * @static
       * @memberOf _
       * @type {Object}
       */lodash.templateSettings={/**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */'escape':reEscape,/**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */'evaluate':reEvaluate,/**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */'interpolate':reInterpolate,/**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type {string}
         */'variable':'',/**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type {Object}
         */'imports':{/**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type {Function}
           */'_':lodash}};// Ensure wrappers are instances of `baseLodash`.
  lodash.prototype=baseLodash.prototype;lodash.prototype.constructor=lodash;LodashWrapper.prototype=baseCreate(baseLodash.prototype);LodashWrapper.prototype.constructor=LodashWrapper;/*------------------------------------------------------------------------*/ /**
       * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
       *
       * @private
       * @constructor
       * @param {*} value The value to wrap.
       */function LazyWrapper(value){this.__wrapped__=value;this.__actions__=[];this.__dir__=1;this.__filtered__=false;this.__iteratees__=[];this.__takeCount__=MAX_ARRAY_LENGTH;this.__views__=[];}/**
       * Creates a clone of the lazy wrapper object.
       *
       * @private
       * @name clone
       * @memberOf LazyWrapper
       * @returns {Object} Returns the cloned `LazyWrapper` object.
       */function lazyClone(){var result=new LazyWrapper(this.__wrapped__);result.__actions__=copyArray(this.__actions__);result.__dir__=this.__dir__;result.__filtered__=this.__filtered__;result.__iteratees__=copyArray(this.__iteratees__);result.__takeCount__=this.__takeCount__;result.__views__=copyArray(this.__views__);return result;}/**
       * Reverses the direction of lazy iteration.
       *
       * @private
       * @name reverse
       * @memberOf LazyWrapper
       * @returns {Object} Returns the new reversed `LazyWrapper` object.
       */function lazyReverse(){if(this.__filtered__){var result=new LazyWrapper(this);result.__dir__=-1;result.__filtered__=true;}else {result=this.clone();result.__dir__*=-1;}return result;}/**
       * Extracts the unwrapped value from its lazy wrapper.
       *
       * @private
       * @name value
       * @memberOf LazyWrapper
       * @returns {*} Returns the unwrapped value.
       */function lazyValue(){var array=this.__wrapped__.value(),dir=this.__dir__,isArr=isArray(array),isRight=dir<0,arrLength=isArr?array.length:0,view=getView(0,arrLength,this.__views__),start=view.start,end=view.end,length=end-start,index=isRight?end:start-1,iteratees=this.__iteratees__,iterLength=iteratees.length,resIndex=0,takeCount=nativeMin(length,this.__takeCount__);if(!isArr||!isRight&&arrLength==length&&takeCount==length){return baseWrapperValue(array,this.__actions__);}var result=[];outer:while(length--&&resIndex<takeCount){index+=dir;var iterIndex=-1,value=array[index];while(++iterIndex<iterLength){var data=iteratees[iterIndex],iteratee=data.iteratee,type=data.type,computed=iteratee(value);if(type==LAZY_MAP_FLAG){value=computed;}else if(!computed){if(type==LAZY_FILTER_FLAG){continue outer;}else {break outer;}}}result[resIndex++]=value;}return result;}// Ensure `LazyWrapper` is an instance of `baseLodash`.
  LazyWrapper.prototype=baseCreate(baseLodash.prototype);LazyWrapper.prototype.constructor=LazyWrapper;/*------------------------------------------------------------------------*/ /**
       * Creates a hash object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */function Hash(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
       * Removes all key-value entries from the hash.
       *
       * @private
       * @name clear
       * @memberOf Hash
       */function hashClear(){this.__data__=nativeCreate?nativeCreate(null):{};this.size=0;}/**
       * Removes `key` and its value from the hash.
       *
       * @private
       * @name delete
       * @memberOf Hash
       * @param {Object} hash The hash to modify.
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */function hashDelete(key){var result=this.has(key)&&delete this.__data__[key];this.size-=result?1:0;return result;}/**
       * Gets the hash value for `key`.
       *
       * @private
       * @name get
       * @memberOf Hash
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */function hashGet(key){var data=this.__data__;if(nativeCreate){var result=data[key];return result===HASH_UNDEFINED?undefined$1:result;}return hasOwnProperty.call(data,key)?data[key]:undefined$1;}/**
       * Checks if a hash value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Hash
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */function hashHas(key){var data=this.__data__;return nativeCreate?data[key]!==undefined$1:hasOwnProperty.call(data,key);}/**
       * Sets the hash `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Hash
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the hash instance.
       */function hashSet(key,value){var data=this.__data__;this.size+=this.has(key)?0:1;data[key]=nativeCreate&&value===undefined$1?HASH_UNDEFINED:value;return this;}// Add methods to `Hash`.
  Hash.prototype.clear=hashClear;Hash.prototype['delete']=hashDelete;Hash.prototype.get=hashGet;Hash.prototype.has=hashHas;Hash.prototype.set=hashSet;/*------------------------------------------------------------------------*/ /**
       * Creates an list cache object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */function ListCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
       * Removes all key-value entries from the list cache.
       *
       * @private
       * @name clear
       * @memberOf ListCache
       */function listCacheClear(){this.__data__=[];this.size=0;}/**
       * Removes `key` and its value from the list cache.
       *
       * @private
       * @name delete
       * @memberOf ListCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */function listCacheDelete(key){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){return false;}var lastIndex=data.length-1;if(index==lastIndex){data.pop();}else {splice.call(data,index,1);}--this.size;return true;}/**
       * Gets the list cache value for `key`.
       *
       * @private
       * @name get
       * @memberOf ListCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */function listCacheGet(key){var data=this.__data__,index=assocIndexOf(data,key);return index<0?undefined$1:data[index][1];}/**
       * Checks if a list cache value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf ListCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */function listCacheHas(key){return assocIndexOf(this.__data__,key)>-1;}/**
       * Sets the list cache `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf ListCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the list cache instance.
       */function listCacheSet(key,value){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){++this.size;data.push([key,value]);}else {data[index][1]=value;}return this;}// Add methods to `ListCache`.
  ListCache.prototype.clear=listCacheClear;ListCache.prototype['delete']=listCacheDelete;ListCache.prototype.get=listCacheGet;ListCache.prototype.has=listCacheHas;ListCache.prototype.set=listCacheSet;/*------------------------------------------------------------------------*/ /**
       * Creates a map cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */function MapCache(entries){var index=-1,length=entries==null?0:entries.length;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**
       * Removes all key-value entries from the map.
       *
       * @private
       * @name clear
       * @memberOf MapCache
       */function mapCacheClear(){this.size=0;this.__data__={'hash':new Hash(),'map':new(Map||ListCache)(),'string':new Hash()};}/**
       * Removes `key` and its value from the map.
       *
       * @private
       * @name delete
       * @memberOf MapCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */function mapCacheDelete(key){var result=getMapData(this,key)['delete'](key);this.size-=result?1:0;return result;}/**
       * Gets the map value for `key`.
       *
       * @private
       * @name get
       * @memberOf MapCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */function mapCacheGet(key){return getMapData(this,key).get(key);}/**
       * Checks if a map value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf MapCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */function mapCacheHas(key){return getMapData(this,key).has(key);}/**
       * Sets the map `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf MapCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the map cache instance.
       */function mapCacheSet(key,value){var data=getMapData(this,key),size=data.size;data.set(key,value);this.size+=data.size==size?0:1;return this;}// Add methods to `MapCache`.
  MapCache.prototype.clear=mapCacheClear;MapCache.prototype['delete']=mapCacheDelete;MapCache.prototype.get=mapCacheGet;MapCache.prototype.has=mapCacheHas;MapCache.prototype.set=mapCacheSet;/*------------------------------------------------------------------------*/ /**
       *
       * Creates an array cache object to store unique values.
       *
       * @private
       * @constructor
       * @param {Array} [values] The values to cache.
       */function SetCache(values){var index=-1,length=values==null?0:values.length;this.__data__=new MapCache();while(++index<length){this.add(values[index]);}}/**
       * Adds `value` to the array cache.
       *
       * @private
       * @name add
       * @memberOf SetCache
       * @alias push
       * @param {*} value The value to cache.
       * @returns {Object} Returns the cache instance.
       */function setCacheAdd(value){this.__data__.set(value,HASH_UNDEFINED);return this;}/**
       * Checks if `value` is in the array cache.
       *
       * @private
       * @name has
       * @memberOf SetCache
       * @param {*} value The value to search for.
       * @returns {number} Returns `true` if `value` is found, else `false`.
       */function setCacheHas(value){return this.__data__.has(value);}// Add methods to `SetCache`.
  SetCache.prototype.add=SetCache.prototype.push=setCacheAdd;SetCache.prototype.has=setCacheHas;/*------------------------------------------------------------------------*/ /**
       * Creates a stack cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */function Stack(entries){var data=this.__data__=new ListCache(entries);this.size=data.size;}/**
       * Removes all key-value entries from the stack.
       *
       * @private
       * @name clear
       * @memberOf Stack
       */function stackClear(){this.__data__=new ListCache();this.size=0;}/**
       * Removes `key` and its value from the stack.
       *
       * @private
       * @name delete
       * @memberOf Stack
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */function stackDelete(key){var data=this.__data__,result=data['delete'](key);this.size=data.size;return result;}/**
       * Gets the stack value for `key`.
       *
       * @private
       * @name get
       * @memberOf Stack
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */function stackGet(key){return this.__data__.get(key);}/**
       * Checks if a stack value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Stack
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */function stackHas(key){return this.__data__.has(key);}/**
       * Sets the stack `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Stack
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the stack cache instance.
       */function stackSet(key,value){var data=this.__data__;if(data instanceof ListCache){var pairs=data.__data__;if(!Map||pairs.length<LARGE_ARRAY_SIZE-1){pairs.push([key,value]);this.size=++data.size;return this;}data=this.__data__=new MapCache(pairs);}data.set(key,value);this.size=data.size;return this;}// Add methods to `Stack`.
  Stack.prototype.clear=stackClear;Stack.prototype['delete']=stackDelete;Stack.prototype.get=stackGet;Stack.prototype.has=stackHas;Stack.prototype.set=stackSet;/*------------------------------------------------------------------------*/ /**
       * Creates an array of the enumerable property names of the array-like `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @param {boolean} inherited Specify returning inherited property names.
       * @returns {Array} Returns the array of property names.
       */function arrayLikeKeys(value,inherited){var isArr=isArray(value),isArg=!isArr&&isArguments(value),isBuff=!isArr&&!isArg&&isBuffer(value),isType=!isArr&&!isArg&&!isBuff&&isTypedArray(value),skipIndexes=isArr||isArg||isBuff||isType,result=skipIndexes?baseTimes(value.length,String):[],length=result.length;for(var key in value){if((inherited||hasOwnProperty.call(value,key))&&!(skipIndexes&&(// Safari 9 has enumerable `arguments.length` in strict mode.
  key=='length'||// Node.js 0.10 has enumerable non-index properties on buffers.
  isBuff&&(key=='offset'||key=='parent')||// PhantomJS 2 has enumerable non-index properties on typed arrays.
  isType&&(key=='buffer'||key=='byteLength'||key=='byteOffset')||// Skip index properties.
  isIndex(key,length)))){result.push(key);}}return result;}/**
       * A specialized version of `_.sample` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @returns {*} Returns the random element.
       */function arraySample(array){var length=array.length;return length?array[baseRandom(0,length-1)]:undefined$1;}/**
       * A specialized version of `_.sampleSize` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */function arraySampleSize(array,n){return shuffleSelf(copyArray(array),baseClamp(n,0,array.length));}/**
       * A specialized version of `_.shuffle` for arrays.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */function arrayShuffle(array){return shuffleSelf(copyArray(array));}/**
       * This function is like `assignValue` except that it doesn't assign
       * `undefined` values.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */function assignMergeValue(object,key,value){if(value!==undefined$1&&!eq(object[key],value)||value===undefined$1&&!(key in object)){baseAssignValue(object,key,value);}}/**
       * Assigns `value` to `key` of `object` if the existing value is not equivalent
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */function assignValue(object,key,value){var objValue=object[key];if(!(hasOwnProperty.call(object,key)&&eq(objValue,value))||value===undefined$1&&!(key in object)){baseAssignValue(object,key,value);}}/**
       * Gets the index at which the `key` is found in `array` of key-value pairs.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} key The key to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */function assocIndexOf(array,key){var length=array.length;while(length--){if(eq(array[length][0],key)){return length;}}return -1;}/**
       * Aggregates elements of `collection` on `accumulator` with keys transformed
       * by `iteratee` and values set by `setter`.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform keys.
       * @param {Object} accumulator The initial aggregated object.
       * @returns {Function} Returns `accumulator`.
       */function baseAggregator(collection,setter,iteratee,accumulator){baseEach(collection,function(value,key,collection){setter(accumulator,value,iteratee(value),collection);});return accumulator;}/**
       * The base implementation of `_.assign` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */function baseAssign(object,source){return object&&copyObject(source,keys(source),object);}/**
       * The base implementation of `_.assignIn` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */function baseAssignIn(object,source){return object&&copyObject(source,keysIn(source),object);}/**
       * The base implementation of `assignValue` and `assignMergeValue` without
       * value checks.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */function baseAssignValue(object,key,value){if(key=='__proto__'&&defineProperty){defineProperty(object,key,{'configurable':true,'enumerable':true,'value':value,'writable':true});}else {object[key]=value;}}/**
       * The base implementation of `_.at` without support for individual paths.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {string[]} paths The property paths to pick.
       * @returns {Array} Returns the picked elements.
       */function baseAt(object,paths){var index=-1,length=paths.length,result=Array(length),skip=object==null;while(++index<length){result[index]=skip?undefined$1:get(object,paths[index]);}return result;}/**
       * The base implementation of `_.clamp` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       */function baseClamp(number,lower,upper){if(number===number){if(upper!==undefined$1){number=number<=upper?number:upper;}if(lower!==undefined$1){number=number>=lower?number:lower;}}return number;}/**
       * The base implementation of `_.clone` and `_.cloneDeep` which tracks
       * traversed objects.
       *
       * @private
       * @param {*} value The value to clone.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Deep clone
       *  2 - Flatten inherited properties
       *  4 - Clone symbols
       * @param {Function} [customizer] The function to customize cloning.
       * @param {string} [key] The key of `value`.
       * @param {Object} [object] The parent object of `value`.
       * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
       * @returns {*} Returns the cloned value.
       */function baseClone(value,bitmask,customizer,key,object,stack){var result,isDeep=bitmask&CLONE_DEEP_FLAG,isFlat=bitmask&CLONE_FLAT_FLAG,isFull=bitmask&CLONE_SYMBOLS_FLAG;if(customizer){result=object?customizer(value,key,object,stack):customizer(value);}if(result!==undefined$1){return result;}if(!isObject(value)){return value;}var isArr=isArray(value);if(isArr){result=initCloneArray(value);if(!isDeep){return copyArray(value,result);}}else {var tag=getTag(value),isFunc=tag==funcTag||tag==genTag;if(isBuffer(value)){return cloneBuffer(value,isDeep);}if(tag==objectTag||tag==argsTag||isFunc&&!object){result=isFlat||isFunc?{}:initCloneObject(value);if(!isDeep){return isFlat?copySymbolsIn(value,baseAssignIn(result,value)):copySymbols(value,baseAssign(result,value));}}else {if(!cloneableTags[tag]){return object?value:{};}result=initCloneByTag(value,tag,isDeep);}}// Check for circular references and return its corresponding clone.
  stack||(stack=new Stack());var stacked=stack.get(value);if(stacked){return stacked;}stack.set(value,result);if(isSet(value)){value.forEach(function(subValue){result.add(baseClone(subValue,bitmask,customizer,subValue,value,stack));});}else if(isMap(value)){value.forEach(function(subValue,key){result.set(key,baseClone(subValue,bitmask,customizer,key,value,stack));});}var keysFunc=isFull?isFlat?getAllKeysIn:getAllKeys:isFlat?keysIn:keys;var props=isArr?undefined$1:keysFunc(value);arrayEach(props||value,function(subValue,key){if(props){key=subValue;subValue=value[key];}// Recursively populate clone (susceptible to call stack limits).
  assignValue(result,key,baseClone(subValue,bitmask,customizer,key,value,stack));});return result;}/**
       * The base implementation of `_.conforms` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       */function baseConforms(source){var props=keys(source);return function(object){return baseConformsTo(object,source,props);};}/**
       * The base implementation of `_.conformsTo` which accepts `props` to check.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       */function baseConformsTo(object,source,props){var length=props.length;if(object==null){return !length;}object=Object(object);while(length--){var key=props[length],predicate=source[key],value=object[key];if(value===undefined$1&&!(key in object)||!predicate(value)){return false;}}return true;}/**
       * The base implementation of `_.delay` and `_.defer` which accepts `args`
       * to provide to `func`.
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {Array} args The arguments to provide to `func`.
       * @returns {number|Object} Returns the timer id or timeout object.
       */function baseDelay(func,wait,args){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return setTimeout(function(){func.apply(undefined$1,args);},wait);}/**
       * The base implementation of methods like `_.difference` without support
       * for excluding multiple arrays or iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Array} values The values to exclude.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       */function baseDifference(array,values,iteratee,comparator){var index=-1,includes=arrayIncludes,isCommon=true,length=array.length,result=[],valuesLength=values.length;if(!length){return result;}if(iteratee){values=arrayMap(values,baseUnary(iteratee));}if(comparator){includes=arrayIncludesWith;isCommon=false;}else if(values.length>=LARGE_ARRAY_SIZE){includes=cacheHas;isCommon=false;values=new SetCache(values);}outer:while(++index<length){var value=array[index],computed=iteratee==null?value:iteratee(value);value=comparator||value!==0?value:0;if(isCommon&&computed===computed){var valuesIndex=valuesLength;while(valuesIndex--){if(values[valuesIndex]===computed){continue outer;}}result.push(value);}else if(!includes(values,computed,comparator)){result.push(value);}}return result;}/**
       * The base implementation of `_.forEach` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */var baseEach=createBaseEach(baseForOwn);/**
       * The base implementation of `_.forEachRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */var baseEachRight=createBaseEach(baseForOwnRight,true);/**
       * The base implementation of `_.every` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`
       */function baseEvery(collection,predicate){var result=true;baseEach(collection,function(value,index,collection){result=!!predicate(value,index,collection);return result;});return result;}/**
       * The base implementation of methods like `_.max` and `_.min` which accepts a
       * `comparator` to determine the extremum value.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The iteratee invoked per iteration.
       * @param {Function} comparator The comparator used to compare values.
       * @returns {*} Returns the extremum value.
       */function baseExtremum(array,iteratee,comparator){var index=-1,length=array.length;while(++index<length){var value=array[index],current=iteratee(value);if(current!=null&&(computed===undefined$1?current===current&&!isSymbol(current):comparator(current,computed))){var computed=current,result=value;}}return result;}/**
       * The base implementation of `_.fill` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       */function baseFill(array,value,start,end){var length=array.length;start=toInteger(start);if(start<0){start=-start>length?0:length+start;}end=end===undefined$1||end>length?length:toInteger(end);if(end<0){end+=length;}end=start>end?0:toLength(end);while(start<end){array[start++]=value;}return array;}/**
       * The base implementation of `_.filter` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */function baseFilter(collection,predicate){var result=[];baseEach(collection,function(value,index,collection){if(predicate(value,index,collection)){result.push(value);}});return result;}/**
       * The base implementation of `_.flatten` with support for restricting flattening.
       *
       * @private
       * @param {Array} array The array to flatten.
       * @param {number} depth The maximum recursion depth.
       * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
       * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
       * @param {Array} [result=[]] The initial result value.
       * @returns {Array} Returns the new flattened array.
       */function baseFlatten(array,depth,predicate,isStrict,result){var index=-1,length=array.length;predicate||(predicate=isFlattenable);result||(result=[]);while(++index<length){var value=array[index];if(depth>0&&predicate(value)){if(depth>1){// Recursively flatten arrays (susceptible to call stack limits).
  baseFlatten(value,depth-1,predicate,isStrict,result);}else {arrayPush(result,value);}}else if(!isStrict){result[result.length]=value;}}return result;}/**
       * The base implementation of `baseForOwn` which iterates over `object`
       * properties returned by `keysFunc` and invokes `iteratee` for each property.
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */var baseFor=createBaseFor();/**
       * This function is like `baseFor` except that it iterates over properties
       * in the opposite order.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */var baseForRight=createBaseFor(true);/**
       * The base implementation of `_.forOwn` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */function baseForOwn(object,iteratee){return object&&baseFor(object,iteratee,keys);}/**
       * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */function baseForOwnRight(object,iteratee){return object&&baseForRight(object,iteratee,keys);}/**
       * The base implementation of `_.functions` which creates an array of
       * `object` function property names filtered from `props`.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Array} props The property names to filter.
       * @returns {Array} Returns the function names.
       */function baseFunctions(object,props){return arrayFilter(props,function(key){return isFunction(object[key]);});}/**
       * The base implementation of `_.get` without support for default values.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @returns {*} Returns the resolved value.
       */function baseGet(object,path){path=castPath(path,object);var index=0,length=path.length;while(object!=null&&index<length){object=object[toKey(path[index++])];}return index&&index==length?object:undefined$1;}/**
       * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
       * `keysFunc` and `symbolsFunc` to get the enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @param {Function} symbolsFunc The function to get the symbols of `object`.
       * @returns {Array} Returns the array of property names and symbols.
       */function baseGetAllKeys(object,keysFunc,symbolsFunc){var result=keysFunc(object);return isArray(object)?result:arrayPush(result,symbolsFunc(object));}/**
       * The base implementation of `getTag` without fallbacks for buggy environments.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */function baseGetTag(value){if(value==null){return value===undefined$1?undefinedTag:nullTag;}return symToStringTag&&symToStringTag in Object(value)?getRawTag(value):objectToString(value);}/**
       * The base implementation of `_.gt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       */function baseGt(value,other){return value>other;}/**
       * The base implementation of `_.has` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */function baseHas(object,key){return object!=null&&hasOwnProperty.call(object,key);}/**
       * The base implementation of `_.hasIn` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */function baseHasIn(object,key){return object!=null&&key in Object(object);}/**
       * The base implementation of `_.inRange` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to check.
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       */function baseInRange(number,start,end){return number>=nativeMin(start,end)&&number<nativeMax(start,end);}/**
       * The base implementation of methods like `_.intersection`, without support
       * for iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of shared values.
       */function baseIntersection(arrays,iteratee,comparator){var includes=comparator?arrayIncludesWith:arrayIncludes,length=arrays[0].length,othLength=arrays.length,othIndex=othLength,caches=Array(othLength),maxLength=Infinity,result=[];while(othIndex--){var array=arrays[othIndex];if(othIndex&&iteratee){array=arrayMap(array,baseUnary(iteratee));}maxLength=nativeMin(array.length,maxLength);caches[othIndex]=!comparator&&(iteratee||length>=120&&array.length>=120)?new SetCache(othIndex&&array):undefined$1;}array=arrays[0];var index=-1,seen=caches[0];outer:while(++index<length&&result.length<maxLength){var value=array[index],computed=iteratee?iteratee(value):value;value=comparator||value!==0?value:0;if(!(seen?cacheHas(seen,computed):includes(result,computed,comparator))){othIndex=othLength;while(--othIndex){var cache=caches[othIndex];if(!(cache?cacheHas(cache,computed):includes(arrays[othIndex],computed,comparator))){continue outer;}}if(seen){seen.push(computed);}result.push(value);}}return result;}/**
       * The base implementation of `_.invert` and `_.invertBy` which inverts
       * `object` with values transformed by `iteratee` and set by `setter`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform values.
       * @param {Object} accumulator The initial inverted object.
       * @returns {Function} Returns `accumulator`.
       */function baseInverter(object,setter,iteratee,accumulator){baseForOwn(object,function(value,key,object){setter(accumulator,iteratee(value),key,object);});return accumulator;}/**
       * The base implementation of `_.invoke` without support for individual
       * method arguments.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {Array} args The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       */function baseInvoke(object,path,args){path=castPath(path,object);object=parent(object,path);var func=object==null?object:object[toKey(last(path))];return func==null?undefined$1:apply(func,object,args);}/**
       * The base implementation of `_.isArguments`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       */function baseIsArguments(value){return isObjectLike(value)&&baseGetTag(value)==argsTag;}/**
       * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       */function baseIsArrayBuffer(value){return isObjectLike(value)&&baseGetTag(value)==arrayBufferTag;}/**
       * The base implementation of `_.isDate` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       */function baseIsDate(value){return isObjectLike(value)&&baseGetTag(value)==dateTag;}/**
       * The base implementation of `_.isEqual` which supports partial comparisons
       * and tracks traversed objects.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Unordered comparison
       *  2 - Partial comparison
       * @param {Function} [customizer] The function to customize comparisons.
       * @param {Object} [stack] Tracks traversed `value` and `other` objects.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       */function baseIsEqual(value,other,bitmask,customizer,stack){if(value===other){return true;}if(value==null||other==null||!isObjectLike(value)&&!isObjectLike(other)){return value!==value&&other!==other;}return baseIsEqualDeep(value,other,bitmask,customizer,baseIsEqual,stack);}/**
       * A specialized version of `baseIsEqual` for arrays and objects which performs
       * deep comparisons and tracks traversed objects enabling objects with circular
       * references to be compared.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} [stack] Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */function baseIsEqualDeep(object,other,bitmask,customizer,equalFunc,stack){var objIsArr=isArray(object),othIsArr=isArray(other),objTag=objIsArr?arrayTag:getTag(object),othTag=othIsArr?arrayTag:getTag(other);objTag=objTag==argsTag?objectTag:objTag;othTag=othTag==argsTag?objectTag:othTag;var objIsObj=objTag==objectTag,othIsObj=othTag==objectTag,isSameTag=objTag==othTag;if(isSameTag&&isBuffer(object)){if(!isBuffer(other)){return false;}objIsArr=true;objIsObj=false;}if(isSameTag&&!objIsObj){stack||(stack=new Stack());return objIsArr||isTypedArray(object)?equalArrays(object,other,bitmask,customizer,equalFunc,stack):equalByTag(object,other,objTag,bitmask,customizer,equalFunc,stack);}if(!(bitmask&COMPARE_PARTIAL_FLAG)){var objIsWrapped=objIsObj&&hasOwnProperty.call(object,'__wrapped__'),othIsWrapped=othIsObj&&hasOwnProperty.call(other,'__wrapped__');if(objIsWrapped||othIsWrapped){var objUnwrapped=objIsWrapped?object.value():object,othUnwrapped=othIsWrapped?other.value():other;stack||(stack=new Stack());return equalFunc(objUnwrapped,othUnwrapped,bitmask,customizer,stack);}}if(!isSameTag){return false;}stack||(stack=new Stack());return equalObjects(object,other,bitmask,customizer,equalFunc,stack);}/**
       * The base implementation of `_.isMap` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       */function baseIsMap(value){return isObjectLike(value)&&getTag(value)==mapTag;}/**
       * The base implementation of `_.isMatch` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Array} matchData The property names, values, and compare flags to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       */function baseIsMatch(object,source,matchData,customizer){var index=matchData.length,length=index,noCustomizer=!customizer;if(object==null){return !length;}object=Object(object);while(index--){var data=matchData[index];if(noCustomizer&&data[2]?data[1]!==object[data[0]]:!(data[0]in object)){return false;}}while(++index<length){data=matchData[index];var key=data[0],objValue=object[key],srcValue=data[1];if(noCustomizer&&data[2]){if(objValue===undefined$1&&!(key in object)){return false;}}else {var stack=new Stack();if(customizer){var result=customizer(objValue,srcValue,key,object,source,stack);}if(!(result===undefined$1?baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG,customizer,stack):result)){return false;}}}return true;}/**
       * The base implementation of `_.isNative` without bad shim checks.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       */function baseIsNative(value){if(!isObject(value)||isMasked(value)){return false;}var pattern=isFunction(value)?reIsNative:reIsHostCtor;return pattern.test(toSource(value));}/**
       * The base implementation of `_.isRegExp` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       */function baseIsRegExp(value){return isObjectLike(value)&&baseGetTag(value)==regexpTag;}/**
       * The base implementation of `_.isSet` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       */function baseIsSet(value){return isObjectLike(value)&&getTag(value)==setTag;}/**
       * The base implementation of `_.isTypedArray` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       */function baseIsTypedArray(value){return isObjectLike(value)&&isLength(value.length)&&!!typedArrayTags[baseGetTag(value)];}/**
       * The base implementation of `_.iteratee`.
       *
       * @private
       * @param {*} [value=_.identity] The value to convert to an iteratee.
       * @returns {Function} Returns the iteratee.
       */function baseIteratee(value){// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if(typeof value=='function'){return value;}if(value==null){return identity;}if(_typeof$1(value)=='object'){return isArray(value)?baseMatchesProperty(value[0],value[1]):baseMatches(value);}return property(value);}/**
       * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */function baseKeys(object){if(!isPrototype(object)){return nativeKeys(object);}var result=[];for(var key in Object(object)){if(hasOwnProperty.call(object,key)&&key!='constructor'){result.push(key);}}return result;}/**
       * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */function baseKeysIn(object){if(!isObject(object)){return nativeKeysIn(object);}var isProto=isPrototype(object),result=[];for(var key in object){if(!(key=='constructor'&&(isProto||!hasOwnProperty.call(object,key)))){result.push(key);}}return result;}/**
       * The base implementation of `_.lt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       */function baseLt(value,other){return value<other;}/**
       * The base implementation of `_.map` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */function baseMap(collection,iteratee){var index=-1,result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value,key,collection){result[++index]=iteratee(value,key,collection);});return result;}/**
       * The base implementation of `_.matches` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       */function baseMatches(source){var matchData=getMatchData(source);if(matchData.length==1&&matchData[0][2]){return matchesStrictComparable(matchData[0][0],matchData[0][1]);}return function(object){return object===source||baseIsMatch(object,source,matchData);};}/**
       * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
       *
       * @private
       * @param {string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */function baseMatchesProperty(path,srcValue){if(isKey(path)&&isStrictComparable(srcValue)){return matchesStrictComparable(toKey(path),srcValue);}return function(object){var objValue=get(object,path);return objValue===undefined$1&&objValue===srcValue?hasIn(object,path):baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG);};}/**
       * The base implementation of `_.merge` without support for multiple sources.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} [customizer] The function to customize merged values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */function baseMerge(object,source,srcIndex,customizer,stack){if(object===source){return;}baseFor(source,function(srcValue,key){stack||(stack=new Stack());if(isObject(srcValue)){baseMergeDeep(object,source,key,srcIndex,baseMerge,customizer,stack);}else {var newValue=customizer?customizer(safeGet(object,key),srcValue,key+'',object,source,stack):undefined$1;if(newValue===undefined$1){newValue=srcValue;}assignMergeValue(object,key,newValue);}},keysIn);}/**
       * A specialized version of `baseMerge` for arrays and objects which performs
       * deep merges and tracks traversed objects enabling objects with circular
       * references to be merged.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {string} key The key of the value to merge.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} mergeFunc The function to merge values.
       * @param {Function} [customizer] The function to customize assigned values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */function baseMergeDeep(object,source,key,srcIndex,mergeFunc,customizer,stack){var objValue=safeGet(object,key),srcValue=safeGet(source,key),stacked=stack.get(srcValue);if(stacked){assignMergeValue(object,key,stacked);return;}var newValue=customizer?customizer(objValue,srcValue,key+'',object,source,stack):undefined$1;var isCommon=newValue===undefined$1;if(isCommon){var isArr=isArray(srcValue),isBuff=!isArr&&isBuffer(srcValue),isTyped=!isArr&&!isBuff&&isTypedArray(srcValue);newValue=srcValue;if(isArr||isBuff||isTyped){if(isArray(objValue)){newValue=objValue;}else if(isArrayLikeObject(objValue)){newValue=copyArray(objValue);}else if(isBuff){isCommon=false;newValue=cloneBuffer(srcValue,true);}else if(isTyped){isCommon=false;newValue=cloneTypedArray(srcValue,true);}else {newValue=[];}}else if(isPlainObject(srcValue)||isArguments(srcValue)){newValue=objValue;if(isArguments(objValue)){newValue=toPlainObject(objValue);}else if(!isObject(objValue)||isFunction(objValue)){newValue=initCloneObject(srcValue);}}else {isCommon=false;}}if(isCommon){// Recursively merge objects and arrays (susceptible to call stack limits).
  stack.set(srcValue,newValue);mergeFunc(newValue,srcValue,srcIndex,customizer,stack);stack['delete'](srcValue);}assignMergeValue(object,key,newValue);}/**
       * The base implementation of `_.nth` which doesn't coerce arguments.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {number} n The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       */function baseNth(array,n){var length=array.length;if(!length){return;}n+=n<0?length:0;return isIndex(n,length)?array[n]:undefined$1;}/**
       * The base implementation of `_.orderBy` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
       * @param {string[]} orders The sort orders of `iteratees`.
       * @returns {Array} Returns the new sorted array.
       */function baseOrderBy(collection,iteratees,orders){if(iteratees.length){iteratees=arrayMap(iteratees,function(iteratee){if(isArray(iteratee)){return function(value){return baseGet(value,iteratee.length===1?iteratee[0]:iteratee);};}return iteratee;});}else {iteratees=[identity];}var index=-1;iteratees=arrayMap(iteratees,baseUnary(getIteratee()));var result=baseMap(collection,function(value,key,collection){var criteria=arrayMap(iteratees,function(iteratee){return iteratee(value);});return {'criteria':criteria,'index':++index,'value':value};});return baseSortBy(result,function(object,other){return compareMultiple(object,other,orders);});}/**
       * The base implementation of `_.pick` without support for individual
       * property identifiers.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} paths The property paths to pick.
       * @returns {Object} Returns the new object.
       */function basePick(object,paths){return basePickBy(object,paths,function(value,path){return hasIn(object,path);});}/**
       * The base implementation of  `_.pickBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} paths The property paths to pick.
       * @param {Function} predicate The function invoked per property.
       * @returns {Object} Returns the new object.
       */function basePickBy(object,paths,predicate){var index=-1,length=paths.length,result={};while(++index<length){var path=paths[index],value=baseGet(object,path);if(predicate(value,path)){baseSet(result,castPath(path,object),value);}}return result;}/**
       * A specialized version of `baseProperty` which supports deep paths.
       *
       * @private
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       */function basePropertyDeep(path){return function(object){return baseGet(object,path);};}/**
       * The base implementation of `_.pullAllBy` without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       */function basePullAll(array,values,iteratee,comparator){var indexOf=comparator?baseIndexOfWith:baseIndexOf,index=-1,length=values.length,seen=array;if(array===values){values=copyArray(values);}if(iteratee){seen=arrayMap(array,baseUnary(iteratee));}while(++index<length){var fromIndex=0,value=values[index],computed=iteratee?iteratee(value):value;while((fromIndex=indexOf(seen,computed,fromIndex,comparator))>-1){if(seen!==array){splice.call(seen,fromIndex,1);}splice.call(array,fromIndex,1);}}return array;}/**
       * The base implementation of `_.pullAt` without support for individual
       * indexes or capturing the removed elements.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {number[]} indexes The indexes of elements to remove.
       * @returns {Array} Returns `array`.
       */function basePullAt(array,indexes){var length=array?indexes.length:0,lastIndex=length-1;while(length--){var index=indexes[length];if(length==lastIndex||index!==previous){var previous=index;if(isIndex(index)){splice.call(array,index,1);}else {baseUnset(array,index);}}}return array;}/**
       * The base implementation of `_.random` without support for returning
       * floating-point numbers.
       *
       * @private
       * @param {number} lower The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the random number.
       */function baseRandom(lower,upper){return lower+nativeFloor(nativeRandom()*(upper-lower+1));}/**
       * The base implementation of `_.range` and `_.rangeRight` which doesn't
       * coerce arguments.
       *
       * @private
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @param {number} step The value to increment or decrement by.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the range of numbers.
       */function baseRange(start,end,step,fromRight){var index=-1,length=nativeMax(nativeCeil((end-start)/(step||1)),0),result=Array(length);while(length--){result[fromRight?length:++index]=start;start+=step;}return result;}/**
       * The base implementation of `_.repeat` which doesn't coerce arguments.
       *
       * @private
       * @param {string} string The string to repeat.
       * @param {number} n The number of times to repeat the string.
       * @returns {string} Returns the repeated string.
       */function baseRepeat(string,n){var result='';if(!string||n<1||n>MAX_SAFE_INTEGER){return result;}// Leverage the exponentiation by squaring algorithm for a faster repeat.
  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
  do{if(n%2){result+=string;}n=nativeFloor(n/2);if(n){string+=string;}}while(n);return result;}/**
       * The base implementation of `_.rest` which doesn't validate or coerce arguments.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       */function baseRest(func,start){return setToString(overRest(func,start,identity),func+'');}/**
       * The base implementation of `_.sample`.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       */function baseSample(collection){return arraySample(values(collection));}/**
       * The base implementation of `_.sampleSize` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */function baseSampleSize(collection,n){var array=values(collection);return shuffleSelf(array,baseClamp(n,0,array.length));}/**
       * The base implementation of `_.set`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */function baseSet(object,path,value,customizer){if(!isObject(object)){return object;}path=castPath(path,object);var index=-1,length=path.length,lastIndex=length-1,nested=object;while(nested!=null&&++index<length){var key=toKey(path[index]),newValue=value;if(key==='__proto__'||key==='constructor'||key==='prototype'){return object;}if(index!=lastIndex){var objValue=nested[key];newValue=customizer?customizer(objValue,key,nested):undefined$1;if(newValue===undefined$1){newValue=isObject(objValue)?objValue:isIndex(path[index+1])?[]:{};}}assignValue(nested,key,newValue);nested=nested[key];}return object;}/**
       * The base implementation of `setData` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */var baseSetData=!metaMap?identity:function(func,data){metaMap.set(func,data);return func;};/**
       * The base implementation of `setToString` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */var baseSetToString=!defineProperty?identity:function(func,string){return defineProperty(func,'toString',{'configurable':true,'enumerable':false,'value':constant(string),'writable':true});};/**
       * The base implementation of `_.shuffle`.
       *
       * @private
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */function baseShuffle(collection){return shuffleSelf(values(collection));}/**
       * The base implementation of `_.slice` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */function baseSlice(array,start,end){var index=-1,length=array.length;if(start<0){start=-start>length?0:length+start;}end=end>length?length:end;if(end<0){end+=length;}length=start>end?0:end-start>>>0;start>>>=0;var result=Array(length);while(++index<length){result[index]=array[index+start];}return result;}/**
       * The base implementation of `_.some` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */function baseSome(collection,predicate){var result;baseEach(collection,function(value,index,collection){result=predicate(value,index,collection);return !result;});return !!result;}/**
       * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
       * performs a binary search of `array` to determine the index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */function baseSortedIndex(array,value,retHighest){var low=0,high=array==null?low:array.length;if(typeof value=='number'&&value===value&&high<=HALF_MAX_ARRAY_LENGTH){while(low<high){var mid=low+high>>>1,computed=array[mid];if(computed!==null&&!isSymbol(computed)&&(retHighest?computed<=value:computed<value)){low=mid+1;}else {high=mid;}}return high;}return baseSortedIndexBy(array,value,identity,retHighest);}/**
       * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
       * which invokes `iteratee` for `value` and each element of `array` to compute
       * their sort ranking. The iteratee is invoked with one argument; (value).
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} iteratee The iteratee invoked per element.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */function baseSortedIndexBy(array,value,iteratee,retHighest){var low=0,high=array==null?0:array.length;if(high===0){return 0;}value=iteratee(value);var valIsNaN=value!==value,valIsNull=value===null,valIsSymbol=isSymbol(value),valIsUndefined=value===undefined$1;while(low<high){var mid=nativeFloor((low+high)/2),computed=iteratee(array[mid]),othIsDefined=computed!==undefined$1,othIsNull=computed===null,othIsReflexive=computed===computed,othIsSymbol=isSymbol(computed);if(valIsNaN){var setLow=retHighest||othIsReflexive;}else if(valIsUndefined){setLow=othIsReflexive&&(retHighest||othIsDefined);}else if(valIsNull){setLow=othIsReflexive&&othIsDefined&&(retHighest||!othIsNull);}else if(valIsSymbol){setLow=othIsReflexive&&othIsDefined&&!othIsNull&&(retHighest||!othIsSymbol);}else if(othIsNull||othIsSymbol){setLow=false;}else {setLow=retHighest?computed<=value:computed<value;}if(setLow){low=mid+1;}else {high=mid;}}return nativeMin(high,MAX_ARRAY_INDEX);}/**
       * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
       * support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */function baseSortedUniq(array,iteratee){var index=-1,length=array.length,resIndex=0,result=[];while(++index<length){var value=array[index],computed=iteratee?iteratee(value):value;if(!index||!eq(computed,seen)){var seen=computed;result[resIndex++]=value===0?0:value;}}return result;}/**
       * The base implementation of `_.toNumber` which doesn't ensure correct
       * conversions of binary, hexadecimal, or octal string values.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       */function baseToNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}return +value;}/**
       * The base implementation of `_.toString` which doesn't convert nullish
       * values to empty strings.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       */function baseToString(value){// Exit early for strings to avoid a performance hit in some environments.
  if(typeof value=='string'){return value;}if(isArray(value)){// Recursively convert values (susceptible to call stack limits).
  return arrayMap(value,baseToString)+'';}if(isSymbol(value)){return symbolToString?symbolToString.call(value):'';}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}/**
       * The base implementation of `_.uniqBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */function baseUniq(array,iteratee,comparator){var index=-1,includes=arrayIncludes,length=array.length,isCommon=true,result=[],seen=result;if(comparator){isCommon=false;includes=arrayIncludesWith;}else if(length>=LARGE_ARRAY_SIZE){var set=iteratee?null:createSet(array);if(set){return setToArray(set);}isCommon=false;includes=cacheHas;seen=new SetCache();}else {seen=iteratee?[]:result;}outer:while(++index<length){var value=array[index],computed=iteratee?iteratee(value):value;value=comparator||value!==0?value:0;if(isCommon&&computed===computed){var seenIndex=seen.length;while(seenIndex--){if(seen[seenIndex]===computed){continue outer;}}if(iteratee){seen.push(computed);}result.push(value);}else if(!includes(seen,computed,comparator)){if(seen!==result){seen.push(computed);}result.push(value);}}return result;}/**
       * The base implementation of `_.unset`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The property path to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       */function baseUnset(object,path){path=castPath(path,object);object=parent(object,path);return object==null||delete object[toKey(last(path))];}/**
       * The base implementation of `_.update`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to update.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */function baseUpdate(object,path,updater,customizer){return baseSet(object,path,updater(baseGet(object,path)),customizer);}/**
       * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
       * without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {Function} predicate The function invoked per iteration.
       * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the slice of `array`.
       */function baseWhile(array,predicate,isDrop,fromRight){var length=array.length,index=fromRight?length:-1;while((fromRight?index--:++index<length)&&predicate(array[index],index,array)){}return isDrop?baseSlice(array,fromRight?0:index,fromRight?index+1:length):baseSlice(array,fromRight?index+1:0,fromRight?length:index);}/**
       * The base implementation of `wrapperValue` which returns the result of
       * performing a sequence of actions on the unwrapped `value`, where each
       * successive action is supplied the return value of the previous.
       *
       * @private
       * @param {*} value The unwrapped value.
       * @param {Array} actions Actions to perform to resolve the unwrapped value.
       * @returns {*} Returns the resolved value.
       */function baseWrapperValue(value,actions){var result=value;if(result instanceof LazyWrapper){result=result.value();}return arrayReduce(actions,function(result,action){return action.func.apply(action.thisArg,arrayPush([result],action.args));},result);}/**
       * The base implementation of methods like `_.xor`, without support for
       * iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of values.
       */function baseXor(arrays,iteratee,comparator){var length=arrays.length;if(length<2){return length?baseUniq(arrays[0]):[];}var index=-1,result=Array(length);while(++index<length){var array=arrays[index],othIndex=-1;while(++othIndex<length){if(othIndex!=index){result[index]=baseDifference(result[index]||array,arrays[othIndex],iteratee,comparator);}}}return baseUniq(baseFlatten(result,1),iteratee,comparator);}/**
       * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
       *
       * @private
       * @param {Array} props The property identifiers.
       * @param {Array} values The property values.
       * @param {Function} assignFunc The function to assign values.
       * @returns {Object} Returns the new object.
       */function baseZipObject(props,values,assignFunc){var index=-1,length=props.length,valsLength=values.length,result={};while(++index<length){var value=index<valsLength?values[index]:undefined$1;assignFunc(result,props[index],value);}return result;}/**
       * Casts `value` to an empty array if it's not an array like object.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Array|Object} Returns the cast array-like object.
       */function castArrayLikeObject(value){return isArrayLikeObject(value)?value:[];}/**
       * Casts `value` to `identity` if it's not a function.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Function} Returns cast function.
       */function castFunction(value){return typeof value=='function'?value:identity;}/**
       * Casts `value` to a path array if it's not one.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {Object} [object] The object to query keys on.
       * @returns {Array} Returns the cast property path array.
       */function castPath(value,object){if(isArray(value)){return value;}return isKey(value,object)?[value]:stringToPath(toString(value));}/**
       * A `baseRest` alias which can be replaced with `identity` by module
       * replacement plugins.
       *
       * @private
       * @type {Function}
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */var castRest=baseRest;/**
       * Casts `array` to a slice if it's needed.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {number} start The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the cast slice.
       */function castSlice(array,start,end){var length=array.length;end=end===undefined$1?length:end;return !start&&end>=length?array:baseSlice(array,start,end);}/**
       * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
       *
       * @private
       * @param {number|Object} id The timer id or timeout object of the timer to clear.
       */var clearTimeout=ctxClearTimeout||function(id){return root.clearTimeout(id);};/**
       * Creates a clone of  `buffer`.
       *
       * @private
       * @param {Buffer} buffer The buffer to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Buffer} Returns the cloned buffer.
       */function cloneBuffer(buffer,isDeep){if(isDeep){return buffer.slice();}var length=buffer.length,result=allocUnsafe?allocUnsafe(length):new buffer.constructor(length);buffer.copy(result);return result;}/**
       * Creates a clone of `arrayBuffer`.
       *
       * @private
       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
       * @returns {ArrayBuffer} Returns the cloned array buffer.
       */function cloneArrayBuffer(arrayBuffer){var result=new arrayBuffer.constructor(arrayBuffer.byteLength);new Uint8Array(result).set(new Uint8Array(arrayBuffer));return result;}/**
       * Creates a clone of `dataView`.
       *
       * @private
       * @param {Object} dataView The data view to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned data view.
       */function cloneDataView(dataView,isDeep){var buffer=isDeep?cloneArrayBuffer(dataView.buffer):dataView.buffer;return new dataView.constructor(buffer,dataView.byteOffset,dataView.byteLength);}/**
       * Creates a clone of `regexp`.
       *
       * @private
       * @param {Object} regexp The regexp to clone.
       * @returns {Object} Returns the cloned regexp.
       */function cloneRegExp(regexp){var result=new regexp.constructor(regexp.source,reFlags.exec(regexp));result.lastIndex=regexp.lastIndex;return result;}/**
       * Creates a clone of the `symbol` object.
       *
       * @private
       * @param {Object} symbol The symbol object to clone.
       * @returns {Object} Returns the cloned symbol object.
       */function cloneSymbol(symbol){return symbolValueOf?Object(symbolValueOf.call(symbol)):{};}/**
       * Creates a clone of `typedArray`.
       *
       * @private
       * @param {Object} typedArray The typed array to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned typed array.
       */function cloneTypedArray(typedArray,isDeep){var buffer=isDeep?cloneArrayBuffer(typedArray.buffer):typedArray.buffer;return new typedArray.constructor(buffer,typedArray.byteOffset,typedArray.length);}/**
       * Compares values to sort them in ascending order.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {number} Returns the sort order indicator for `value`.
       */function compareAscending(value,other){if(value!==other){var valIsDefined=value!==undefined$1,valIsNull=value===null,valIsReflexive=value===value,valIsSymbol=isSymbol(value);var othIsDefined=other!==undefined$1,othIsNull=other===null,othIsReflexive=other===other,othIsSymbol=isSymbol(other);if(!othIsNull&&!othIsSymbol&&!valIsSymbol&&value>other||valIsSymbol&&othIsDefined&&othIsReflexive&&!othIsNull&&!othIsSymbol||valIsNull&&othIsDefined&&othIsReflexive||!valIsDefined&&othIsReflexive||!valIsReflexive){return 1;}if(!valIsNull&&!valIsSymbol&&!othIsSymbol&&value<other||othIsSymbol&&valIsDefined&&valIsReflexive&&!valIsNull&&!valIsSymbol||othIsNull&&valIsDefined&&valIsReflexive||!othIsDefined&&valIsReflexive||!othIsReflexive){return -1;}}return 0;}/**
       * Used by `_.orderBy` to compare multiple properties of a value to another
       * and stable sort them.
       *
       * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
       * specify an order of "desc" for descending or "asc" for ascending sort order
       * of corresponding values.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {boolean[]|string[]} orders The order to sort by for each property.
       * @returns {number} Returns the sort order indicator for `object`.
       */function compareMultiple(object,other,orders){var index=-1,objCriteria=object.criteria,othCriteria=other.criteria,length=objCriteria.length,ordersLength=orders.length;while(++index<length){var result=compareAscending(objCriteria[index],othCriteria[index]);if(result){if(index>=ordersLength){return result;}var order=orders[index];return result*(order=='desc'?-1:1);}}// Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
  // that causes it, under certain circumstances, to provide the same value for
  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
  // for more details.
  //
  // This also ensures a stable sort in V8 and other engines.
  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
  return object.index-other.index;}/**
       * Creates an array that is the composition of partially applied arguments,
       * placeholders, and provided arguments into a single array of arguments.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to prepend to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */function composeArgs(args,partials,holders,isCurried){var argsIndex=-1,argsLength=args.length,holdersLength=holders.length,leftIndex=-1,leftLength=partials.length,rangeLength=nativeMax(argsLength-holdersLength,0),result=Array(leftLength+rangeLength),isUncurried=!isCurried;while(++leftIndex<leftLength){result[leftIndex]=partials[leftIndex];}while(++argsIndex<holdersLength){if(isUncurried||argsIndex<argsLength){result[holders[argsIndex]]=args[argsIndex];}}while(rangeLength--){result[leftIndex++]=args[argsIndex++];}return result;}/**
       * This function is like `composeArgs` except that the arguments composition
       * is tailored for `_.partialRight`.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to append to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */function composeArgsRight(args,partials,holders,isCurried){var argsIndex=-1,argsLength=args.length,holdersIndex=-1,holdersLength=holders.length,rightIndex=-1,rightLength=partials.length,rangeLength=nativeMax(argsLength-holdersLength,0),result=Array(rangeLength+rightLength),isUncurried=!isCurried;while(++argsIndex<rangeLength){result[argsIndex]=args[argsIndex];}var offset=argsIndex;while(++rightIndex<rightLength){result[offset+rightIndex]=partials[rightIndex];}while(++holdersIndex<holdersLength){if(isUncurried||argsIndex<argsLength){result[offset+holders[holdersIndex]]=args[argsIndex++];}}return result;}/**
       * Copies the values of `source` to `array`.
       *
       * @private
       * @param {Array} source The array to copy values from.
       * @param {Array} [array=[]] The array to copy values to.
       * @returns {Array} Returns `array`.
       */function copyArray(source,array){var index=-1,length=source.length;array||(array=Array(length));while(++index<length){array[index]=source[index];}return array;}/**
       * Copies properties of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy properties from.
       * @param {Array} props The property identifiers to copy.
       * @param {Object} [object={}] The object to copy properties to.
       * @param {Function} [customizer] The function to customize copied values.
       * @returns {Object} Returns `object`.
       */function copyObject(source,props,object,customizer){var isNew=!object;object||(object={});var index=-1,length=props.length;while(++index<length){var key=props[index];var newValue=customizer?customizer(object[key],source[key],key,object,source):undefined$1;if(newValue===undefined$1){newValue=source[key];}if(isNew){baseAssignValue(object,key,newValue);}else {assignValue(object,key,newValue);}}return object;}/**
       * Copies own symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */function copySymbols(source,object){return copyObject(source,getSymbols(source),object);}/**
       * Copies own and inherited symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */function copySymbolsIn(source,object){return copyObject(source,getSymbolsIn(source),object);}/**
       * Creates a function like `_.groupBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} [initializer] The accumulator object initializer.
       * @returns {Function} Returns the new aggregator function.
       */function createAggregator(setter,initializer){return function(collection,iteratee){var func=isArray(collection)?arrayAggregator:baseAggregator,accumulator=initializer?initializer():{};return func(collection,setter,getIteratee(iteratee,2),accumulator);};}/**
       * Creates a function like `_.assign`.
       *
       * @private
       * @param {Function} assigner The function to assign values.
       * @returns {Function} Returns the new assigner function.
       */function createAssigner(assigner){return baseRest(function(object,sources){var index=-1,length=sources.length,customizer=length>1?sources[length-1]:undefined$1,guard=length>2?sources[2]:undefined$1;customizer=assigner.length>3&&typeof customizer=='function'?(length--,customizer):undefined$1;if(guard&&isIterateeCall(sources[0],sources[1],guard)){customizer=length<3?undefined$1:customizer;length=1;}object=Object(object);while(++index<length){var source=sources[index];if(source){assigner(object,source,index,customizer);}}return object;});}/**
       * Creates a `baseEach` or `baseEachRight` function.
       *
       * @private
       * @param {Function} eachFunc The function to iterate over a collection.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */function createBaseEach(eachFunc,fromRight){return function(collection,iteratee){if(collection==null){return collection;}if(!isArrayLike(collection)){return eachFunc(collection,iteratee);}var length=collection.length,index=fromRight?length:-1,iterable=Object(collection);while(fromRight?index--:++index<length){if(iteratee(iterable[index],index,iterable)===false){break;}}return collection;};}/**
       * Creates a base function for methods like `_.forIn` and `_.forOwn`.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */function createBaseFor(fromRight){return function(object,iteratee,keysFunc){var index=-1,iterable=Object(object),props=keysFunc(object),length=props.length;while(length--){var key=props[fromRight?length:++index];if(iteratee(iterable[key],key,iterable)===false){break;}}return object;};}/**
       * Creates a function that wraps `func` to invoke it with the optional `this`
       * binding of `thisArg`.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @returns {Function} Returns the new wrapped function.
       */function createBind(func,bitmask,thisArg){var isBind=bitmask&WRAP_BIND_FLAG,Ctor=createCtor(func);function wrapper(){var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;return fn.apply(isBind?thisArg:this,arguments);}return wrapper;}/**
       * Creates a function like `_.lowerFirst`.
       *
       * @private
       * @param {string} methodName The name of the `String` case method to use.
       * @returns {Function} Returns the new case function.
       */function createCaseFirst(methodName){return function(string){string=toString(string);var strSymbols=hasUnicode(string)?stringToArray(string):undefined$1;var chr=strSymbols?strSymbols[0]:string.charAt(0);var trailing=strSymbols?castSlice(strSymbols,1).join(''):string.slice(1);return chr[methodName]()+trailing;};}/**
       * Creates a function like `_.camelCase`.
       *
       * @private
       * @param {Function} callback The function to combine each word.
       * @returns {Function} Returns the new compounder function.
       */function createCompounder(callback){return function(string){return arrayReduce(words(deburr(string).replace(reApos,'')),callback,'');};}/**
       * Creates a function that produces an instance of `Ctor` regardless of
       * whether it was invoked as part of a `new` expression or by `call` or `apply`.
       *
       * @private
       * @param {Function} Ctor The constructor to wrap.
       * @returns {Function} Returns the new wrapped function.
       */function createCtor(Ctor){return function(){// Use a `switch` statement to work with class constructors. See
  // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
  // for more details.
  var args=arguments;switch(args.length){case 0:return new Ctor();case 1:return new Ctor(args[0]);case 2:return new Ctor(args[0],args[1]);case 3:return new Ctor(args[0],args[1],args[2]);case 4:return new Ctor(args[0],args[1],args[2],args[3]);case 5:return new Ctor(args[0],args[1],args[2],args[3],args[4]);case 6:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5]);case 7:return new Ctor(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);}var thisBinding=baseCreate(Ctor.prototype),result=Ctor.apply(thisBinding,args);// Mimic the constructor's `return` behavior.
  // See https://es5.github.io/#x13.2.2 for more details.
  return isObject(result)?result:thisBinding;};}/**
       * Creates a function that wraps `func` to enable currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {number} arity The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */function createCurry(func,bitmask,arity){var Ctor=createCtor(func);function wrapper(){var length=arguments.length,args=Array(length),index=length,placeholder=getHolder(wrapper);while(index--){args[index]=arguments[index];}var holders=length<3&&args[0]!==placeholder&&args[length-1]!==placeholder?[]:replaceHolders(args,placeholder);length-=holders.length;if(length<arity){return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,undefined$1,args,holders,undefined$1,undefined$1,arity-length);}var fn=this&&this!==root&&this instanceof wrapper?Ctor:func;return apply(fn,this,args);}return wrapper;}/**
       * Creates a `_.find` or `_.findLast` function.
       *
       * @private
       * @param {Function} findIndexFunc The function to find the collection index.
       * @returns {Function} Returns the new find function.
       */function createFind(findIndexFunc){return function(collection,predicate,fromIndex){var iterable=Object(collection);if(!isArrayLike(collection)){var iteratee=getIteratee(predicate,3);collection=keys(collection);predicate=function predicate(key){return iteratee(iterable[key],key,iterable);};}var index=findIndexFunc(collection,predicate,fromIndex);return index>-1?iterable[iteratee?collection[index]:index]:undefined$1;};}/**
       * Creates a `_.flow` or `_.flowRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new flow function.
       */function createFlow(fromRight){return flatRest(function(funcs){var length=funcs.length,index=length,prereq=LodashWrapper.prototype.thru;if(fromRight){funcs.reverse();}while(index--){var func=funcs[index];if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(prereq&&!wrapper&&getFuncName(func)=='wrapper'){var wrapper=new LodashWrapper([],true);}}index=wrapper?index:length;while(++index<length){func=funcs[index];var funcName=getFuncName(func),data=funcName=='wrapper'?getData(func):undefined$1;if(data&&isLaziable(data[0])&&data[1]==(WRAP_ARY_FLAG|WRAP_CURRY_FLAG|WRAP_PARTIAL_FLAG|WRAP_REARG_FLAG)&&!data[4].length&&data[9]==1){wrapper=wrapper[getFuncName(data[0])].apply(wrapper,data[3]);}else {wrapper=func.length==1&&isLaziable(func)?wrapper[funcName]():wrapper.thru(func);}}return function(){var args=arguments,value=args[0];if(wrapper&&args.length==1&&isArray(value)){return wrapper.plant(value).value();}var index=0,result=length?funcs[index].apply(this,args):value;while(++index<length){result=funcs[index].call(this,result);}return result;};});}/**
       * Creates a function that wraps `func` to invoke it with optional `this`
       * binding of `thisArg`, partial application, and currying.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [partialsRight] The arguments to append to those provided
       *  to the new function.
       * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */function createHybrid(func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity){var isAry=bitmask&WRAP_ARY_FLAG,isBind=bitmask&WRAP_BIND_FLAG,isBindKey=bitmask&WRAP_BIND_KEY_FLAG,isCurried=bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG),isFlip=bitmask&WRAP_FLIP_FLAG,Ctor=isBindKey?undefined$1:createCtor(func);function wrapper(){var length=arguments.length,args=Array(length),index=length;while(index--){args[index]=arguments[index];}if(isCurried){var placeholder=getHolder(wrapper),holdersCount=countHolders(args,placeholder);}if(partials){args=composeArgs(args,partials,holders,isCurried);}if(partialsRight){args=composeArgsRight(args,partialsRight,holdersRight,isCurried);}length-=holdersCount;if(isCurried&&length<arity){var newHolders=replaceHolders(args,placeholder);return createRecurry(func,bitmask,createHybrid,wrapper.placeholder,thisArg,args,newHolders,argPos,ary,arity-length);}var thisBinding=isBind?thisArg:this,fn=isBindKey?thisBinding[func]:func;length=args.length;if(argPos){args=reorder(args,argPos);}else if(isFlip&&length>1){args.reverse();}if(isAry&&ary<length){args.length=ary;}if(this&&this!==root&&this instanceof wrapper){fn=Ctor||createCtor(fn);}return fn.apply(thisBinding,args);}return wrapper;}/**
       * Creates a function like `_.invertBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} toIteratee The function to resolve iteratees.
       * @returns {Function} Returns the new inverter function.
       */function createInverter(setter,toIteratee){return function(object,iteratee){return baseInverter(object,setter,toIteratee(iteratee),{});};}/**
       * Creates a function that performs a mathematical operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @param {number} [defaultValue] The value used for `undefined` arguments.
       * @returns {Function} Returns the new mathematical operation function.
       */function createMathOperation(operator,defaultValue){return function(value,other){var result;if(value===undefined$1&&other===undefined$1){return defaultValue;}if(value!==undefined$1){result=value;}if(other!==undefined$1){if(result===undefined$1){return other;}if(typeof value=='string'||typeof other=='string'){value=baseToString(value);other=baseToString(other);}else {value=baseToNumber(value);other=baseToNumber(other);}result=operator(value,other);}return result;};}/**
       * Creates a function like `_.over`.
       *
       * @private
       * @param {Function} arrayFunc The function to iterate over iteratees.
       * @returns {Function} Returns the new over function.
       */function createOver(arrayFunc){return flatRest(function(iteratees){iteratees=arrayMap(iteratees,baseUnary(getIteratee()));return baseRest(function(args){var thisArg=this;return arrayFunc(iteratees,function(iteratee){return apply(iteratee,thisArg,args);});});});}/**
       * Creates the padding for `string` based on `length`. The `chars` string
       * is truncated if the number of characters exceeds `length`.
       *
       * @private
       * @param {number} length The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padding for `string`.
       */function createPadding(length,chars){chars=chars===undefined$1?' ':baseToString(chars);var charsLength=chars.length;if(charsLength<2){return charsLength?baseRepeat(chars,length):chars;}var result=baseRepeat(chars,nativeCeil(length/stringSize(chars)));return hasUnicode(chars)?castSlice(stringToArray(result),0,length).join(''):result.slice(0,length);}/**
       * Creates a function that wraps `func` to invoke it with the `this` binding
       * of `thisArg` and `partials` prepended to the arguments it receives.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} partials The arguments to prepend to those provided to
       *  the new function.
       * @returns {Function} Returns the new wrapped function.
       */function createPartial(func,bitmask,thisArg,partials){var isBind=bitmask&WRAP_BIND_FLAG,Ctor=createCtor(func);function wrapper(){var argsIndex=-1,argsLength=arguments.length,leftIndex=-1,leftLength=partials.length,args=Array(leftLength+argsLength),fn=this&&this!==root&&this instanceof wrapper?Ctor:func;while(++leftIndex<leftLength){args[leftIndex]=partials[leftIndex];}while(argsLength--){args[leftIndex++]=arguments[++argsIndex];}return apply(fn,isBind?thisArg:this,args);}return wrapper;}/**
       * Creates a `_.range` or `_.rangeRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new range function.
       */function createRange(fromRight){return function(start,end,step){if(step&&typeof step!='number'&&isIterateeCall(start,end,step)){end=step=undefined$1;}// Ensure the sign of `-0` is preserved.
  start=toFinite(start);if(end===undefined$1){end=start;start=0;}else {end=toFinite(end);}step=step===undefined$1?start<end?1:-1:toFinite(step);return baseRange(start,end,step,fromRight);};}/**
       * Creates a function that performs a relational operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @returns {Function} Returns the new relational operation function.
       */function createRelationalOperation(operator){return function(value,other){if(!(typeof value=='string'&&typeof other=='string')){value=toNumber(value);other=toNumber(other);}return operator(value,other);};}/**
       * Creates a function that wraps `func` to continue currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {Function} wrapFunc The function to create the `func` wrapper.
       * @param {*} placeholder The placeholder value.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */function createRecurry(func,bitmask,wrapFunc,placeholder,thisArg,partials,holders,argPos,ary,arity){var isCurry=bitmask&WRAP_CURRY_FLAG,newHolders=isCurry?holders:undefined$1,newHoldersRight=isCurry?undefined$1:holders,newPartials=isCurry?partials:undefined$1,newPartialsRight=isCurry?undefined$1:partials;bitmask|=isCurry?WRAP_PARTIAL_FLAG:WRAP_PARTIAL_RIGHT_FLAG;bitmask&=~(isCurry?WRAP_PARTIAL_RIGHT_FLAG:WRAP_PARTIAL_FLAG);if(!(bitmask&WRAP_CURRY_BOUND_FLAG)){bitmask&=~(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG);}var newData=[func,bitmask,thisArg,newPartials,newHolders,newPartialsRight,newHoldersRight,argPos,ary,arity];var result=wrapFunc.apply(undefined$1,newData);if(isLaziable(func)){setData(result,newData);}result.placeholder=placeholder;return setWrapToString(result,func,bitmask);}/**
       * Creates a function like `_.round`.
       *
       * @private
       * @param {string} methodName The name of the `Math` method to use when rounding.
       * @returns {Function} Returns the new round function.
       */function createRound(methodName){var func=Math[methodName];return function(number,precision){number=toNumber(number);precision=precision==null?0:nativeMin(toInteger(precision),292);if(precision&&nativeIsFinite(number)){// Shift with exponential notation to avoid floating-point issues.
  // See [MDN](https://mdn.io/round#Examples) for more details.
  var pair=(toString(number)+'e').split('e'),value=func(pair[0]+'e'+(+pair[1]+precision));pair=(toString(value)+'e').split('e');return +(pair[0]+'e'+(+pair[1]-precision));}return func(number);};}/**
       * Creates a set object of `values`.
       *
       * @private
       * @param {Array} values The values to add to the set.
       * @returns {Object} Returns the new set.
       */var createSet=!(Set&&1/setToArray(new Set([,-0]))[1]==INFINITY)?noop:function(values){return new Set(values);};/**
       * Creates a `_.toPairs` or `_.toPairsIn` function.
       *
       * @private
       * @param {Function} keysFunc The function to get the keys of a given object.
       * @returns {Function} Returns the new pairs function.
       */function createToPairs(keysFunc){return function(object){var tag=getTag(object);if(tag==mapTag){return mapToArray(object);}if(tag==setTag){return setToPairs(object);}return baseToPairs(object,keysFunc(object));};}/**
       * Creates a function that either curries or invokes `func` with optional
       * `this` binding and partially applied arguments.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags.
       *    1 - `_.bind`
       *    2 - `_.bindKey`
       *    4 - `_.curry` or `_.curryRight` of a bound function
       *    8 - `_.curry`
       *   16 - `_.curryRight`
       *   32 - `_.partial`
       *   64 - `_.partialRight`
       *  128 - `_.rearg`
       *  256 - `_.ary`
       *  512 - `_.flip`
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to be partially applied.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */function createWrap(func,bitmask,thisArg,partials,holders,argPos,ary,arity){var isBindKey=bitmask&WRAP_BIND_KEY_FLAG;if(!isBindKey&&typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}var length=partials?partials.length:0;if(!length){bitmask&=~(WRAP_PARTIAL_FLAG|WRAP_PARTIAL_RIGHT_FLAG);partials=holders=undefined$1;}ary=ary===undefined$1?ary:nativeMax(toInteger(ary),0);arity=arity===undefined$1?arity:toInteger(arity);length-=holders?holders.length:0;if(bitmask&WRAP_PARTIAL_RIGHT_FLAG){var partialsRight=partials,holdersRight=holders;partials=holders=undefined$1;}var data=isBindKey?undefined$1:getData(func);var newData=[func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity];if(data){mergeData(newData,data);}func=newData[0];bitmask=newData[1];thisArg=newData[2];partials=newData[3];holders=newData[4];arity=newData[9]=newData[9]===undefined$1?isBindKey?0:func.length:nativeMax(newData[9]-length,0);if(!arity&&bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG)){bitmask&=~(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG);}if(!bitmask||bitmask==WRAP_BIND_FLAG){var result=createBind(func,bitmask,thisArg);}else if(bitmask==WRAP_CURRY_FLAG||bitmask==WRAP_CURRY_RIGHT_FLAG){result=createCurry(func,bitmask,arity);}else if((bitmask==WRAP_PARTIAL_FLAG||bitmask==(WRAP_BIND_FLAG|WRAP_PARTIAL_FLAG))&&!holders.length){result=createPartial(func,bitmask,thisArg,partials);}else {result=createHybrid.apply(undefined$1,newData);}var setter=data?baseSetData:setData;return setWrapToString(setter(result,newData),func,bitmask);}/**
       * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
       * of source objects to the destination object for all destination properties
       * that resolve to `undefined`.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to assign.
       * @param {Object} object The parent object of `objValue`.
       * @returns {*} Returns the value to assign.
       */function customDefaultsAssignIn(objValue,srcValue,key,object){if(objValue===undefined$1||eq(objValue,objectProto[key])&&!hasOwnProperty.call(object,key)){return srcValue;}return objValue;}/**
       * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
       * objects into destination objects that are passed thru.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to merge.
       * @param {Object} object The parent object of `objValue`.
       * @param {Object} source The parent object of `srcValue`.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       * @returns {*} Returns the value to assign.
       */function customDefaultsMerge(objValue,srcValue,key,object,source,stack){if(isObject(objValue)&&isObject(srcValue)){// Recursively merge objects and arrays (susceptible to call stack limits).
  stack.set(srcValue,objValue);baseMerge(objValue,srcValue,undefined$1,customDefaultsMerge,stack);stack['delete'](srcValue);}return objValue;}/**
       * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
       * objects.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {string} key The key of the property to inspect.
       * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
       */function customOmitClone(value){return isPlainObject(value)?undefined$1:value;}/**
       * A specialized version of `baseIsEqualDeep` for arrays with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Array} array The array to compare.
       * @param {Array} other The other array to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `array` and `other` objects.
       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
       */function equalArrays(array,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,arrLength=array.length,othLength=other.length;if(arrLength!=othLength&&!(isPartial&&othLength>arrLength)){return false;}// Check that cyclic values are equal.
  var arrStacked=stack.get(array);var othStacked=stack.get(other);if(arrStacked&&othStacked){return arrStacked==other&&othStacked==array;}var index=-1,result=true,seen=bitmask&COMPARE_UNORDERED_FLAG?new SetCache():undefined$1;stack.set(array,other);stack.set(other,array);// Ignore non-index properties.
  while(++index<arrLength){var arrValue=array[index],othValue=other[index];if(customizer){var compared=isPartial?customizer(othValue,arrValue,index,other,array,stack):customizer(arrValue,othValue,index,array,other,stack);}if(compared!==undefined$1){if(compared){continue;}result=false;break;}// Recursively compare arrays (susceptible to call stack limits).
  if(seen){if(!arraySome(other,function(othValue,othIndex){if(!cacheHas(seen,othIndex)&&(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){return seen.push(othIndex);}})){result=false;break;}}else if(!(arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){result=false;break;}}stack['delete'](array);stack['delete'](other);return result;}/**
       * A specialized version of `baseIsEqualDeep` for comparing objects of
       * the same `toStringTag`.
       *
       * **Note:** This function only supports comparing values with tags of
       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {string} tag The `toStringTag` of the objects to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */function equalByTag(object,other,tag,bitmask,customizer,equalFunc,stack){switch(tag){case dataViewTag:if(object.byteLength!=other.byteLength||object.byteOffset!=other.byteOffset){return false;}object=object.buffer;other=other.buffer;case arrayBufferTag:if(object.byteLength!=other.byteLength||!equalFunc(new Uint8Array(object),new Uint8Array(other))){return false;}return true;case boolTag:case dateTag:case numberTag:// Coerce booleans to `1` or `0` and dates to milliseconds.
  // Invalid dates are coerced to `NaN`.
  return eq(+object,+other);case errorTag:return object.name==other.name&&object.message==other.message;case regexpTag:case stringTag:// Coerce regexes to strings and treat strings, primitives and objects,
  // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
  // for more details.
  return object==other+'';case mapTag:var convert=mapToArray;case setTag:var isPartial=bitmask&COMPARE_PARTIAL_FLAG;convert||(convert=setToArray);if(object.size!=other.size&&!isPartial){return false;}// Assume cyclic values are equal.
  var stacked=stack.get(object);if(stacked){return stacked==other;}bitmask|=COMPARE_UNORDERED_FLAG;// Recursively compare objects (susceptible to call stack limits).
  stack.set(object,other);var result=equalArrays(convert(object),convert(other),bitmask,customizer,equalFunc,stack);stack['delete'](object);return result;case symbolTag:if(symbolValueOf){return symbolValueOf.call(object)==symbolValueOf.call(other);}}return false;}/**
       * A specialized version of `baseIsEqualDeep` for objects with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */function equalObjects(object,other,bitmask,customizer,equalFunc,stack){var isPartial=bitmask&COMPARE_PARTIAL_FLAG,objProps=getAllKeys(object),objLength=objProps.length,othProps=getAllKeys(other),othLength=othProps.length;if(objLength!=othLength&&!isPartial){return false;}var index=objLength;while(index--){var key=objProps[index];if(!(isPartial?key in other:hasOwnProperty.call(other,key))){return false;}}// Check that cyclic values are equal.
  var objStacked=stack.get(object);var othStacked=stack.get(other);if(objStacked&&othStacked){return objStacked==other&&othStacked==object;}var result=true;stack.set(object,other);stack.set(other,object);var skipCtor=isPartial;while(++index<objLength){key=objProps[index];var objValue=object[key],othValue=other[key];if(customizer){var compared=isPartial?customizer(othValue,objValue,key,other,object,stack):customizer(objValue,othValue,key,object,other,stack);}// Recursively compare objects (susceptible to call stack limits).
  if(!(compared===undefined$1?objValue===othValue||equalFunc(objValue,othValue,bitmask,customizer,stack):compared)){result=false;break;}skipCtor||(skipCtor=key=='constructor');}if(result&&!skipCtor){var objCtor=object.constructor,othCtor=other.constructor;// Non `Object` object instances with different constructors are not equal.
  if(objCtor!=othCtor&&'constructor'in object&&'constructor'in other&&!(typeof objCtor=='function'&&objCtor instanceof objCtor&&typeof othCtor=='function'&&othCtor instanceof othCtor)){result=false;}}stack['delete'](object);stack['delete'](other);return result;}/**
       * A specialized version of `baseRest` which flattens the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */function flatRest(func){return setToString(overRest(func,undefined$1,flatten),func+'');}/**
       * Creates an array of own enumerable property names and symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */function getAllKeys(object){return baseGetAllKeys(object,keys,getSymbols);}/**
       * Creates an array of own and inherited enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */function getAllKeysIn(object){return baseGetAllKeys(object,keysIn,getSymbolsIn);}/**
       * Gets metadata for `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {*} Returns the metadata for `func`.
       */var getData=!metaMap?noop:function(func){return metaMap.get(func);};/**
       * Gets the name of `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {string} Returns the function name.
       */function getFuncName(func){var result=func.name+'',array=realNames[result],length=hasOwnProperty.call(realNames,result)?array.length:0;while(length--){var data=array[length],otherFunc=data.func;if(otherFunc==null||otherFunc==func){return data.name;}}return result;}/**
       * Gets the argument placeholder value for `func`.
       *
       * @private
       * @param {Function} func The function to inspect.
       * @returns {*} Returns the placeholder value.
       */function getHolder(func){var object=hasOwnProperty.call(lodash,'placeholder')?lodash:func;return object.placeholder;}/**
       * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
       * this function returns the custom method, otherwise it returns `baseIteratee`.
       * If arguments are provided, the chosen function is invoked with them and
       * its result is returned.
       *
       * @private
       * @param {*} [value] The value to convert to an iteratee.
       * @param {number} [arity] The arity of the created iteratee.
       * @returns {Function} Returns the chosen function or its result.
       */function getIteratee(){var result=lodash.iteratee||iteratee;result=result===iteratee?baseIteratee:result;return arguments.length?result(arguments[0],arguments[1]):result;}/**
       * Gets the data for `map`.
       *
       * @private
       * @param {Object} map The map to query.
       * @param {string} key The reference key.
       * @returns {*} Returns the map data.
       */function getMapData(map,key){var data=map.__data__;return isKeyable(key)?data[typeof key=='string'?'string':'hash']:data.map;}/**
       * Gets the property names, values, and compare flags of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the match data of `object`.
       */function getMatchData(object){var result=keys(object),length=result.length;while(length--){var key=result[length],value=object[key];result[length]=[key,value,isStrictComparable(value)];}return result;}/**
       * Gets the native function at `key` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the method to get.
       * @returns {*} Returns the function if it's native, else `undefined`.
       */function getNative(object,key){var value=getValue(object,key);return baseIsNative(value)?value:undefined$1;}/**
       * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the raw `toStringTag`.
       */function getRawTag(value){var isOwn=hasOwnProperty.call(value,symToStringTag),tag=value[symToStringTag];try{value[symToStringTag]=undefined$1;var unmasked=true;}catch(e){}var result=nativeObjectToString.call(value);if(unmasked){if(isOwn){value[symToStringTag]=tag;}else {delete value[symToStringTag];}}return result;}/**
       * Creates an array of the own enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */var getSymbols=!nativeGetSymbols?stubArray:function(object){if(object==null){return [];}object=Object(object);return arrayFilter(nativeGetSymbols(object),function(symbol){return propertyIsEnumerable.call(object,symbol);});};/**
       * Creates an array of the own and inherited enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */var getSymbolsIn=!nativeGetSymbols?stubArray:function(object){var result=[];while(object){arrayPush(result,getSymbols(object));object=getPrototype(object);}return result;};/**
       * Gets the `toStringTag` of `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */var getTag=baseGetTag;// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag||Map&&getTag(new Map())!=mapTag||Promise&&getTag(Promise.resolve())!=promiseTag||Set&&getTag(new Set())!=setTag||WeakMap&&getTag(new WeakMap())!=weakMapTag){getTag=function getTag(value){var result=baseGetTag(value),Ctor=result==objectTag?value.constructor:undefined$1,ctorString=Ctor?toSource(Ctor):'';if(ctorString){switch(ctorString){case dataViewCtorString:return dataViewTag;case mapCtorString:return mapTag;case promiseCtorString:return promiseTag;case setCtorString:return setTag;case weakMapCtorString:return weakMapTag;}}return result;};}/**
       * Gets the view, applying any `transforms` to the `start` and `end` positions.
       *
       * @private
       * @param {number} start The start of the view.
       * @param {number} end The end of the view.
       * @param {Array} transforms The transformations to apply to the view.
       * @returns {Object} Returns an object containing the `start` and `end`
       *  positions of the view.
       */function getView(start,end,transforms){var index=-1,length=transforms.length;while(++index<length){var data=transforms[index],size=data.size;switch(data.type){case'drop':start+=size;break;case'dropRight':end-=size;break;case'take':end=nativeMin(end,start+size);break;case'takeRight':start=nativeMax(start,end-size);break;}}return {'start':start,'end':end};}/**
       * Extracts wrapper details from the `source` body comment.
       *
       * @private
       * @param {string} source The source to inspect.
       * @returns {Array} Returns the wrapper details.
       */function getWrapDetails(source){var match=source.match(reWrapDetails);return match?match[1].split(reSplitDetails):[];}/**
       * Checks if `path` exists on `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @param {Function} hasFunc The function to check properties.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       */function hasPath(object,path,hasFunc){path=castPath(path,object);var index=-1,length=path.length,result=false;while(++index<length){var key=toKey(path[index]);if(!(result=object!=null&&hasFunc(object,key))){break;}object=object[key];}if(result||++index!=length){return result;}length=object==null?0:object.length;return !!length&&isLength(length)&&isIndex(key,length)&&(isArray(object)||isArguments(object));}/**
       * Initializes an array clone.
       *
       * @private
       * @param {Array} array The array to clone.
       * @returns {Array} Returns the initialized clone.
       */function initCloneArray(array){var length=array.length,result=new array.constructor(length);// Add properties assigned by `RegExp#exec`.
  if(length&&typeof array[0]=='string'&&hasOwnProperty.call(array,'index')){result.index=array.index;result.input=array.input;}return result;}/**
       * Initializes an object clone.
       *
       * @private
       * @param {Object} object The object to clone.
       * @returns {Object} Returns the initialized clone.
       */function initCloneObject(object){return typeof object.constructor=='function'&&!isPrototype(object)?baseCreate(getPrototype(object)):{};}/**
       * Initializes an object clone based on its `toStringTag`.
       *
       * **Note:** This function only supports cloning values with tags of
       * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
       *
       * @private
       * @param {Object} object The object to clone.
       * @param {string} tag The `toStringTag` of the object to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the initialized clone.
       */function initCloneByTag(object,tag,isDeep){var Ctor=object.constructor;switch(tag){case arrayBufferTag:return cloneArrayBuffer(object);case boolTag:case dateTag:return new Ctor(+object);case dataViewTag:return cloneDataView(object,isDeep);case float32Tag:case float64Tag:case int8Tag:case int16Tag:case int32Tag:case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:return cloneTypedArray(object,isDeep);case mapTag:return new Ctor();case numberTag:case stringTag:return new Ctor(object);case regexpTag:return cloneRegExp(object);case setTag:return new Ctor();case symbolTag:return cloneSymbol(object);}}/**
       * Inserts wrapper `details` in a comment at the top of the `source` body.
       *
       * @private
       * @param {string} source The source to modify.
       * @returns {Array} details The details to insert.
       * @returns {string} Returns the modified source.
       */function insertWrapDetails(source,details){var length=details.length;if(!length){return source;}var lastIndex=length-1;details[lastIndex]=(length>1?'& ':'')+details[lastIndex];details=details.join(length>2?', ':' ');return source.replace(reWrapComment,'{\n/* [wrapped with '+details+'] */\n');}/**
       * Checks if `value` is a flattenable `arguments` object or array.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
       */function isFlattenable(value){return isArray(value)||isArguments(value)||!!(spreadableSymbol&&value&&value[spreadableSymbol]);}/**
       * Checks if `value` is a valid array-like index.
       *
       * @private
       * @param {*} value The value to check.
       * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
       * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
       */function isIndex(value,length){var type=_typeof$1(value);length=length==null?MAX_SAFE_INTEGER:length;return !!length&&(type=='number'||type!='symbol'&&reIsUint.test(value))&&value>-1&&value%1==0&&value<length;}/**
       * Checks if the given arguments are from an iteratee call.
       *
       * @private
       * @param {*} value The potential iteratee value argument.
       * @param {*} index The potential iteratee index or key argument.
       * @param {*} object The potential iteratee object argument.
       * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
       *  else `false`.
       */function isIterateeCall(value,index,object){if(!isObject(object)){return false;}var type=_typeof$1(index);if(type=='number'?isArrayLike(object)&&isIndex(index,object.length):type=='string'&&index in object){return eq(object[index],value);}return false;}/**
       * Checks if `value` is a property name and not a property path.
       *
       * @private
       * @param {*} value The value to check.
       * @param {Object} [object] The object to query keys on.
       * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
       */function isKey(value,object){if(isArray(value)){return false;}var type=_typeof$1(value);if(type=='number'||type=='symbol'||type=='boolean'||value==null||isSymbol(value)){return true;}return reIsPlainProp.test(value)||!reIsDeepProp.test(value)||object!=null&&value in Object(object);}/**
       * Checks if `value` is suitable for use as unique object key.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
       */function isKeyable(value){var type=_typeof$1(value);return type=='string'||type=='number'||type=='symbol'||type=='boolean'?value!=='__proto__':value===null;}/**
       * Checks if `func` has a lazy counterpart.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
       *  else `false`.
       */function isLaziable(func){var funcName=getFuncName(func),other=lodash[funcName];if(typeof other!='function'||!(funcName in LazyWrapper.prototype)){return false;}if(func===other){return true;}var data=getData(other);return !!data&&func===data[0];}/**
       * Checks if `func` has its source masked.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` is masked, else `false`.
       */function isMasked(func){return !!maskSrcKey&&maskSrcKey in func;}/**
       * Checks if `func` is capable of being masked.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
       */var isMaskable=coreJsData?isFunction:stubFalse;/**
       * Checks if `value` is likely a prototype object.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
       */function isPrototype(value){var Ctor=value&&value.constructor,proto=typeof Ctor=='function'&&Ctor.prototype||objectProto;return value===proto;}/**
       * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` if suitable for strict
       *  equality comparisons, else `false`.
       */function isStrictComparable(value){return value===value&&!isObject(value);}/**
       * A specialized version of `matchesProperty` for source values suitable
       * for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */function matchesStrictComparable(key,srcValue){return function(object){if(object==null){return false;}return object[key]===srcValue&&(srcValue!==undefined$1||key in Object(object));};}/**
       * A specialized version of `_.memoize` which clears the memoized function's
       * cache when it exceeds `MAX_MEMOIZE_SIZE`.
       *
       * @private
       * @param {Function} func The function to have its output memoized.
       * @returns {Function} Returns the new memoized function.
       */function memoizeCapped(func){var result=memoize(func,function(key){if(cache.size===MAX_MEMOIZE_SIZE){cache.clear();}return key;});var cache=result.cache;return result;}/**
       * Merges the function metadata of `source` into `data`.
       *
       * Merging metadata reduces the number of wrappers used to invoke a function.
       * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
       * may be applied regardless of execution order. Methods like `_.ary` and
       * `_.rearg` modify function arguments, making the order in which they are
       * executed important, preventing the merging of metadata. However, we make
       * an exception for a safe combined case where curried functions have `_.ary`
       * and or `_.rearg` applied.
       *
       * @private
       * @param {Array} data The destination metadata.
       * @param {Array} source The source metadata.
       * @returns {Array} Returns `data`.
       */function mergeData(data,source){var bitmask=data[1],srcBitmask=source[1],newBitmask=bitmask|srcBitmask,isCommon=newBitmask<(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG|WRAP_ARY_FLAG);var isCombo=srcBitmask==WRAP_ARY_FLAG&&bitmask==WRAP_CURRY_FLAG||srcBitmask==WRAP_ARY_FLAG&&bitmask==WRAP_REARG_FLAG&&data[7].length<=source[8]||srcBitmask==(WRAP_ARY_FLAG|WRAP_REARG_FLAG)&&source[7].length<=source[8]&&bitmask==WRAP_CURRY_FLAG;// Exit early if metadata can't be merged.
  if(!(isCommon||isCombo)){return data;}// Use source `thisArg` if available.
  if(srcBitmask&WRAP_BIND_FLAG){data[2]=source[2];// Set when currying a bound function.
  newBitmask|=bitmask&WRAP_BIND_FLAG?0:WRAP_CURRY_BOUND_FLAG;}// Compose partial arguments.
  var value=source[3];if(value){var partials=data[3];data[3]=partials?composeArgs(partials,value,source[4]):value;data[4]=partials?replaceHolders(data[3],PLACEHOLDER):source[4];}// Compose partial right arguments.
  value=source[5];if(value){partials=data[5];data[5]=partials?composeArgsRight(partials,value,source[6]):value;data[6]=partials?replaceHolders(data[5],PLACEHOLDER):source[6];}// Use source `argPos` if available.
  value=source[7];if(value){data[7]=value;}// Use source `ary` if it's smaller.
  if(srcBitmask&WRAP_ARY_FLAG){data[8]=data[8]==null?source[8]:nativeMin(data[8],source[8]);}// Use source `arity` if one is not provided.
  if(data[9]==null){data[9]=source[9];}// Use source `func` and merge bitmasks.
  data[0]=source[0];data[1]=newBitmask;return data;}/**
       * This function is like
       * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * except that it includes inherited enumerable properties.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */function nativeKeysIn(object){var result=[];if(object!=null){for(var key in Object(object)){result.push(key);}}return result;}/**
       * Converts `value` to a string using `Object.prototype.toString`.
       *
       * @private
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       */function objectToString(value){return nativeObjectToString.call(value);}/**
       * A specialized version of `baseRest` which transforms the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @param {Function} transform The rest array transform.
       * @returns {Function} Returns the new function.
       */function overRest(func,start,transform){start=nativeMax(start===undefined$1?func.length-1:start,0);return function(){var args=arguments,index=-1,length=nativeMax(args.length-start,0),array=Array(length);while(++index<length){array[index]=args[start+index];}index=-1;var otherArgs=Array(start+1);while(++index<start){otherArgs[index]=args[index];}otherArgs[start]=transform(array);return apply(func,this,otherArgs);};}/**
       * Gets the parent value at `path` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} path The path to get the parent value of.
       * @returns {*} Returns the parent value.
       */function parent(object,path){return path.length<2?object:baseGet(object,baseSlice(path,0,-1));}/**
       * Reorder `array` according to the specified indexes where the element at
       * the first index is assigned as the first element, the element at
       * the second index is assigned as the second element, and so on.
       *
       * @private
       * @param {Array} array The array to reorder.
       * @param {Array} indexes The arranged array indexes.
       * @returns {Array} Returns `array`.
       */function reorder(array,indexes){var arrLength=array.length,length=nativeMin(indexes.length,arrLength),oldArray=copyArray(array);while(length--){var index=indexes[length];array[length]=isIndex(index,arrLength)?oldArray[index]:undefined$1;}return array;}/**
       * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */function safeGet(object,key){if(key==='constructor'&&typeof object[key]==='function'){return;}if(key=='__proto__'){return;}return object[key];}/**
       * Sets metadata for `func`.
       *
       * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
       * period of time, it will trip its breaker and transition to an identity
       * function to avoid garbage collection pauses in V8. See
       * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
       * for more details.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */var setData=shortOut(baseSetData);/**
       * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @returns {number|Object} Returns the timer id or timeout object.
       */var setTimeout=ctxSetTimeout||function(func,wait){return root.setTimeout(func,wait);};/**
       * Sets the `toString` method of `func` to return `string`.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */var setToString=shortOut(baseSetToString);/**
       * Sets the `toString` method of `wrapper` to mimic the source of `reference`
       * with wrapper details in a comment at the top of the source body.
       *
       * @private
       * @param {Function} wrapper The function to modify.
       * @param {Function} reference The reference function.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Function} Returns `wrapper`.
       */function setWrapToString(wrapper,reference,bitmask){var source=reference+'';return setToString(wrapper,insertWrapDetails(source,updateWrapDetails(getWrapDetails(source),bitmask)));}/**
       * Creates a function that'll short out and invoke `identity` instead
       * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
       * milliseconds.
       *
       * @private
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new shortable function.
       */function shortOut(func){var count=0,lastCalled=0;return function(){var stamp=nativeNow(),remaining=HOT_SPAN-(stamp-lastCalled);lastCalled=stamp;if(remaining>0){if(++count>=HOT_COUNT){return arguments[0];}}else {count=0;}return func.apply(undefined$1,arguments);};}/**
       * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @param {number} [size=array.length] The size of `array`.
       * @returns {Array} Returns `array`.
       */function shuffleSelf(array,size){var index=-1,length=array.length,lastIndex=length-1;size=size===undefined$1?length:size;while(++index<size){var rand=baseRandom(index,lastIndex),value=array[rand];array[rand]=array[index];array[index]=value;}array.length=size;return array;}/**
       * Converts `string` to a property path array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the property path array.
       */var stringToPath=memoizeCapped(function(string){var result=[];if(string.charCodeAt(0)===46/* . */){result.push('');}string.replace(rePropName,function(match,number,quote,subString){result.push(quote?subString.replace(reEscapeChar,'$1'):number||match);});return result;});/**
       * Converts `value` to a string key if it's not a string or symbol.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {string|symbol} Returns the key.
       */function toKey(value){if(typeof value=='string'||isSymbol(value)){return value;}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}/**
       * Converts `func` to its source code.
       *
       * @private
       * @param {Function} func The function to convert.
       * @returns {string} Returns the source code.
       */function toSource(func){if(func!=null){try{return funcToString.call(func);}catch(e){}try{return func+'';}catch(e){}}return '';}/**
       * Updates wrapper `details` based on `bitmask` flags.
       *
       * @private
       * @returns {Array} details The details to modify.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Array} Returns `details`.
       */function updateWrapDetails(details,bitmask){arrayEach(wrapFlags,function(pair){var value='_.'+pair[0];if(bitmask&pair[1]&&!arrayIncludes(details,value)){details.push(value);}});return details.sort();}/**
       * Creates a clone of `wrapper`.
       *
       * @private
       * @param {Object} wrapper The wrapper to clone.
       * @returns {Object} Returns the cloned wrapper.
       */function wrapperClone(wrapper){if(wrapper instanceof LazyWrapper){return wrapper.clone();}var result=new LodashWrapper(wrapper.__wrapped__,wrapper.__chain__);result.__actions__=copyArray(wrapper.__actions__);result.__index__=wrapper.__index__;result.__values__=wrapper.__values__;return result;}/*------------------------------------------------------------------------*/ /**
       * Creates an array of elements split into groups the length of `size`.
       * If `array` can't be split evenly, the final chunk will be the remaining
       * elements.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to process.
       * @param {number} [size=1] The length of each chunk
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the new array of chunks.
       * @example
       *
       * _.chunk(['a', 'b', 'c', 'd'], 2);
       * // => [['a', 'b'], ['c', 'd']]
       *
       * _.chunk(['a', 'b', 'c', 'd'], 3);
       * // => [['a', 'b', 'c'], ['d']]
       */function chunk(array,size,guard){if(guard?isIterateeCall(array,size,guard):size===undefined$1){size=1;}else {size=nativeMax(toInteger(size),0);}var length=array==null?0:array.length;if(!length||size<1){return [];}var index=0,resIndex=0,result=Array(nativeCeil(length/size));while(index<length){result[resIndex++]=baseSlice(array,index,index+=size);}return result;}/**
       * Creates an array with all falsey values removed. The values `false`, `null`,
       * `0`, `""`, `undefined`, and `NaN` are falsey.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to compact.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.compact([0, 1, false, 2, '', 3]);
       * // => [1, 2, 3]
       */function compact(array){var index=-1,length=array==null?0:array.length,resIndex=0,result=[];while(++index<length){var value=array[index];if(value){result[resIndex++]=value;}}return result;}/**
       * Creates a new array concatenating `array` with any additional arrays
       * and/or values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to concatenate.
       * @param {...*} [values] The values to concatenate.
       * @returns {Array} Returns the new concatenated array.
       * @example
       *
       * var array = [1];
       * var other = _.concat(array, 2, [3], [[4]]);
       *
       * console.log(other);
       * // => [1, 2, 3, [4]]
       *
       * console.log(array);
       * // => [1]
       */function concat(){var length=arguments.length;if(!length){return [];}var args=Array(length-1),array=arguments[0],index=length;while(index--){args[index-1]=arguments[index];}return arrayPush(isArray(array)?copyArray(array):[array],baseFlatten(args,1));}/**
       * Creates an array of `array` values not included in the other given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * **Note:** Unlike `_.pullAll`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.without, _.xor
       * @example
       *
       * _.difference([2, 1], [2, 3]);
       * // => [1]
       */var difference=baseRest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true)):[];});/**
       * This method is like `_.difference` except that it accepts `iteratee` which
       * is invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */var differenceBy=baseRest(function(array,values){var iteratee=last(values);if(isArrayLikeObject(iteratee)){iteratee=undefined$1;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),getIteratee(iteratee,2)):[];});/**
       * This method is like `_.difference` except that it accepts `comparator`
       * which is invoked to compare elements of `array` to `values`. The order and
       * references of result values are determined by the first array. The comparator
       * is invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       *
       * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }]
       */var differenceWith=baseRest(function(array,values){var comparator=last(values);if(isArrayLikeObject(comparator)){comparator=undefined$1;}return isArrayLikeObject(array)?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),undefined$1,comparator):[];});/**
       * Creates a slice of `array` with `n` elements dropped from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.drop([1, 2, 3]);
       * // => [2, 3]
       *
       * _.drop([1, 2, 3], 2);
       * // => [3]
       *
       * _.drop([1, 2, 3], 5);
       * // => []
       *
       * _.drop([1, 2, 3], 0);
       * // => [1, 2, 3]
       */function drop(array,n,guard){var length=array==null?0:array.length;if(!length){return [];}n=guard||n===undefined$1?1:toInteger(n);return baseSlice(array,n<0?0:n,length);}/**
       * Creates a slice of `array` with `n` elements dropped from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.dropRight([1, 2, 3]);
       * // => [1, 2]
       *
       * _.dropRight([1, 2, 3], 2);
       * // => [1]
       *
       * _.dropRight([1, 2, 3], 5);
       * // => []
       *
       * _.dropRight([1, 2, 3], 0);
       * // => [1, 2, 3]
       */function dropRight(array,n,guard){var length=array==null?0:array.length;if(!length){return [];}n=guard||n===undefined$1?1:toInteger(n);n=length-n;return baseSlice(array,0,n<0?0:n);}/**
       * Creates a slice of `array` excluding elements dropped from the end.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.dropRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropRightWhile(users, ['active', false]);
       * // => objects for ['barney']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropRightWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */function dropRightWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),true,true):[];}/**
       * Creates a slice of `array` excluding elements dropped from the beginning.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.dropWhile(users, function(o) { return !o.active; });
       * // => objects for ['pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropWhile(users, ['active', false]);
       * // => objects for ['pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */function dropWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),true):[];}/**
       * Fills elements of `array` with `value` from `start` up to, but not
       * including, `end`.
       *
       * **Note:** This method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Array
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.fill(array, 'a');
       * console.log(array);
       * // => ['a', 'a', 'a']
       *
       * _.fill(Array(3), 2);
       * // => [2, 2, 2]
       *
       * _.fill([4, 6, 8, 10], '*', 1, 3);
       * // => [4, '*', '*', 10]
       */function fill(array,value,start,end){var length=array==null?0:array.length;if(!length){return [];}if(start&&typeof start!='number'&&isIterateeCall(array,value,start)){start=0;end=length;}return baseFill(array,value,start,end);}/**
       * This method is like `_.find` except that it returns the index of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.findIndex(users, function(o) { return o.user == 'barney'; });
       * // => 0
       *
       * // The `_.matches` iteratee shorthand.
       * _.findIndex(users, { 'user': 'fred', 'active': false });
       * // => 1
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findIndex(users, ['active', false]);
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.findIndex(users, 'active');
       * // => 2
       */function findIndex(array,predicate,fromIndex){var length=array==null?0:array.length;if(!length){return -1;}var index=fromIndex==null?0:toInteger(fromIndex);if(index<0){index=nativeMax(length+index,0);}return baseFindIndex(array,getIteratee(predicate,3),index);}/**
       * This method is like `_.findIndex` except that it iterates over elements
       * of `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
       * // => 2
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastIndex(users, { 'user': 'barney', 'active': true });
       * // => 0
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastIndex(users, ['active', false]);
       * // => 2
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastIndex(users, 'active');
       * // => 0
       */function findLastIndex(array,predicate,fromIndex){var length=array==null?0:array.length;if(!length){return -1;}var index=length-1;if(fromIndex!==undefined$1){index=toInteger(fromIndex);index=fromIndex<0?nativeMax(length+index,0):nativeMin(index,length-1);}return baseFindIndex(array,getIteratee(predicate,3),index,true);}/**
       * Flattens `array` a single level deep.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flatten([1, [2, [3, [4]], 5]]);
       * // => [1, 2, [3, [4]], 5]
       */function flatten(array){var length=array==null?0:array.length;return length?baseFlatten(array,1):[];}/**
       * Recursively flattens `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flattenDeep([1, [2, [3, [4]], 5]]);
       * // => [1, 2, 3, 4, 5]
       */function flattenDeep(array){var length=array==null?0:array.length;return length?baseFlatten(array,INFINITY):[];}/**
       * Recursively flatten `array` up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * var array = [1, [2, [3, [4]], 5]];
       *
       * _.flattenDepth(array, 1);
       * // => [1, 2, [3, [4]], 5]
       *
       * _.flattenDepth(array, 2);
       * // => [1, 2, 3, [4], 5]
       */function flattenDepth(array,depth){var length=array==null?0:array.length;if(!length){return [];}depth=depth===undefined$1?1:toInteger(depth);return baseFlatten(array,depth);}/**
       * The inverse of `_.toPairs`; this method returns an object composed
       * from key-value `pairs`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} pairs The key-value pairs.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.fromPairs([['a', 1], ['b', 2]]);
       * // => { 'a': 1, 'b': 2 }
       */function fromPairs(pairs){var index=-1,length=pairs==null?0:pairs.length,result={};while(++index<length){var pair=pairs[index];result[pair[0]]=pair[1];}return result;}/**
       * Gets the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias first
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the first element of `array`.
       * @example
       *
       * _.head([1, 2, 3]);
       * // => 1
       *
       * _.head([]);
       * // => undefined
       */function head(array){return array&&array.length?array[0]:undefined$1;}/**
       * Gets the index at which the first occurrence of `value` is found in `array`
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. If `fromIndex` is negative, it's used as the
       * offset from the end of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.indexOf([1, 2, 1, 2], 2);
       * // => 1
       *
       * // Search from the `fromIndex`.
       * _.indexOf([1, 2, 1, 2], 2, 2);
       * // => 3
       */function indexOf(array,value,fromIndex){var length=array==null?0:array.length;if(!length){return -1;}var index=fromIndex==null?0:toInteger(fromIndex);if(index<0){index=nativeMax(length+index,0);}return baseIndexOf(array,value,index);}/**
       * Gets all but the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.initial([1, 2, 3]);
       * // => [1, 2]
       */function initial(array){var length=array==null?0:array.length;return length?baseSlice(array,0,-1):[];}/**
       * Creates an array of unique values that are included in all given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersection([2, 1], [2, 3]);
       * // => [2]
       */var intersection=baseRest(function(arrays){var mapped=arrayMap(arrays,castArrayLikeObject);return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped):[];});/**
       * This method is like `_.intersection` except that it accepts `iteratee`
       * which is invoked for each element of each `arrays` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [2.1]
       *
       * // The `_.property` iteratee shorthand.
       * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }]
       */var intersectionBy=baseRest(function(arrays){var iteratee=last(arrays),mapped=arrayMap(arrays,castArrayLikeObject);if(iteratee===last(mapped)){iteratee=undefined$1;}else {mapped.pop();}return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped,getIteratee(iteratee,2)):[];});/**
       * This method is like `_.intersection` except that it accepts `comparator`
       * which is invoked to compare elements of `arrays`. The order and references
       * of result values are determined by the first array. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.intersectionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }]
       */var intersectionWith=baseRest(function(arrays){var comparator=last(arrays),mapped=arrayMap(arrays,castArrayLikeObject);comparator=typeof comparator=='function'?comparator:undefined$1;if(comparator){mapped.pop();}return mapped.length&&mapped[0]===arrays[0]?baseIntersection(mapped,undefined$1,comparator):[];});/**
       * Converts all elements in `array` into a string separated by `separator`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to convert.
       * @param {string} [separator=','] The element separator.
       * @returns {string} Returns the joined string.
       * @example
       *
       * _.join(['a', 'b', 'c'], '~');
       * // => 'a~b~c'
       */function join(array,separator){return array==null?'':nativeJoin.call(array,separator);}/**
       * Gets the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the last element of `array`.
       * @example
       *
       * _.last([1, 2, 3]);
       * // => 3
       */function last(array){var length=array==null?0:array.length;return length?array[length-1]:undefined$1;}/**
       * This method is like `_.indexOf` except that it iterates over elements of
       * `array` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.lastIndexOf([1, 2, 1, 2], 2);
       * // => 3
       *
       * // Search from the `fromIndex`.
       * _.lastIndexOf([1, 2, 1, 2], 2, 2);
       * // => 1
       */function lastIndexOf(array,value,fromIndex){var length=array==null?0:array.length;if(!length){return -1;}var index=length;if(fromIndex!==undefined$1){index=toInteger(fromIndex);index=index<0?nativeMax(length+index,0):nativeMin(index,length-1);}return value===value?strictLastIndexOf(array,value,index):baseFindIndex(array,baseIsNaN,index,true);}/**
       * Gets the element at index `n` of `array`. If `n` is negative, the nth
       * element from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.11.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=0] The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       *
       * _.nth(array, 1);
       * // => 'b'
       *
       * _.nth(array, -2);
       * // => 'c';
       */function nth(array,n){return array&&array.length?baseNth(array,toInteger(n)):undefined$1;}/**
       * Removes all given values from `array` using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
       * to remove elements from an array by predicate.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...*} [values] The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pull(array, 'a', 'c');
       * console.log(array);
       * // => ['b', 'b']
       */var pull=baseRest(pullAll);/**
       * This method is like `_.pull` except that it accepts an array of values to remove.
       *
       * **Note:** Unlike `_.difference`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pullAll(array, ['a', 'c']);
       * console.log(array);
       * // => ['b', 'b']
       */function pullAll(array,values){return array&&array.length&&values&&values.length?basePullAll(array,values):array;}/**
       * This method is like `_.pullAll` except that it accepts `iteratee` which is
       * invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The iteratee is invoked with one argument: (value).
       *
       * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
       *
       * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
       * console.log(array);
       * // => [{ 'x': 2 }]
       */function pullAllBy(array,values,iteratee){return array&&array.length&&values&&values.length?basePullAll(array,values,getIteratee(iteratee,2)):array;}/**
       * This method is like `_.pullAll` except that it accepts `comparator` which
       * is invoked to compare elements of `array` to `values`. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
       *
       * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
       * console.log(array);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
       */function pullAllWith(array,values,comparator){return array&&array.length&&values&&values.length?basePullAll(array,values,undefined$1,comparator):array;}/**
       * Removes elements from `array` corresponding to `indexes` and returns an
       * array of removed elements.
       *
       * **Note:** Unlike `_.at`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...(number|number[])} [indexes] The indexes of elements to remove.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       * var pulled = _.pullAt(array, [1, 3]);
       *
       * console.log(array);
       * // => ['a', 'c']
       *
       * console.log(pulled);
       * // => ['b', 'd']
       */var pullAt=flatRest(function(array,indexes){var length=array==null?0:array.length,result=baseAt(array,indexes);basePullAt(array,arrayMap(indexes,function(index){return isIndex(index,length)?+index:index;}).sort(compareAscending));return result;});/**
       * Removes all elements from `array` that `predicate` returns truthy for
       * and returns an array of the removed elements. The predicate is invoked
       * with three arguments: (value, index, array).
       *
       * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
       * to pull elements from an array by value.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = [1, 2, 3, 4];
       * var evens = _.remove(array, function(n) {
       *   return n % 2 == 0;
       * });
       *
       * console.log(array);
       * // => [1, 3]
       *
       * console.log(evens);
       * // => [2, 4]
       */function remove(array,predicate){var result=[];if(!(array&&array.length)){return result;}var index=-1,indexes=[],length=array.length;predicate=getIteratee(predicate,3);while(++index<length){var value=array[index];if(predicate(value,index,array)){result.push(value);indexes.push(index);}}basePullAt(array,indexes);return result;}/**
       * Reverses `array` so that the first element becomes the last, the second
       * element becomes the second to last, and so on.
       *
       * **Note:** This method mutates `array` and is based on
       * [`Array#reverse`](https://mdn.io/Array/reverse).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.reverse(array);
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */function reverse(array){return array==null?array:nativeReverse.call(array);}/**
       * Creates a slice of `array` from `start` up to, but not including, `end`.
       *
       * **Note:** This method is used instead of
       * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
       * returned.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */function slice(array,start,end){var length=array==null?0:array.length;if(!length){return [];}if(end&&typeof end!='number'&&isIterateeCall(array,start,end)){start=0;end=length;}else {start=start==null?0:toInteger(start);end=end===undefined$1?length:toInteger(end);}return baseSlice(array,start,end);}/**
       * Uses a binary search to determine the lowest index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedIndex([30, 50], 40);
       * // => 1
       */function sortedIndex(array,value){return baseSortedIndex(array,value);}/**
       * This method is like `_.sortedIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
       * // => 0
       */function sortedIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee,2));}/**
       * This method is like `_.indexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
       * // => 1
       */function sortedIndexOf(array,value){var length=array==null?0:array.length;if(length){var index=baseSortedIndex(array,value);if(index<length&&eq(array[index],value)){return index;}}return -1;}/**
       * This method is like `_.sortedIndex` except that it returns the highest
       * index at which `value` should be inserted into `array` in order to
       * maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
       * // => 4
       */function sortedLastIndex(array,value){return baseSortedIndex(array,value,true);}/**
       * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 1
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
       * // => 1
       */function sortedLastIndexBy(array,value,iteratee){return baseSortedIndexBy(array,value,getIteratee(iteratee,2),true);}/**
       * This method is like `_.lastIndexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
       * // => 3
       */function sortedLastIndexOf(array,value){var length=array==null?0:array.length;if(length){var index=baseSortedIndex(array,value,true)-1;if(eq(array[index],value)){return index;}}return -1;}/**
       * This method is like `_.uniq` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniq([1, 1, 2]);
       * // => [1, 2]
       */function sortedUniq(array){return array&&array.length?baseSortedUniq(array):[];}/**
       * This method is like `_.uniqBy` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
       * // => [1.1, 2.3]
       */function sortedUniqBy(array,iteratee){return array&&array.length?baseSortedUniq(array,getIteratee(iteratee,2)):[];}/**
       * Gets all but the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.tail([1, 2, 3]);
       * // => [2, 3]
       */function tail(array){var length=array==null?0:array.length;return length?baseSlice(array,1,length):[];}/**
       * Creates a slice of `array` with `n` elements taken from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.take([1, 2, 3]);
       * // => [1]
       *
       * _.take([1, 2, 3], 2);
       * // => [1, 2]
       *
       * _.take([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.take([1, 2, 3], 0);
       * // => []
       */function take(array,n,guard){if(!(array&&array.length)){return [];}n=guard||n===undefined$1?1:toInteger(n);return baseSlice(array,0,n<0?0:n);}/**
       * Creates a slice of `array` with `n` elements taken from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.takeRight([1, 2, 3]);
       * // => [3]
       *
       * _.takeRight([1, 2, 3], 2);
       * // => [2, 3]
       *
       * _.takeRight([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.takeRight([1, 2, 3], 0);
       * // => []
       */function takeRight(array,n,guard){var length=array==null?0:array.length;if(!length){return [];}n=guard||n===undefined$1?1:toInteger(n);n=length-n;return baseSlice(array,n<0?0:n,length);}/**
       * Creates a slice of `array` with elements taken from the end. Elements are
       * taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.takeRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeRightWhile(users, ['active', false]);
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeRightWhile(users, 'active');
       * // => []
       */function takeRightWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3),false,true):[];}/**
       * Creates a slice of `array` with elements taken from the beginning. Elements
       * are taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.takeWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeWhile(users, ['active', false]);
       * // => objects for ['barney', 'fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeWhile(users, 'active');
       * // => []
       */function takeWhile(array,predicate){return array&&array.length?baseWhile(array,getIteratee(predicate,3)):[];}/**
       * Creates an array of unique values, in order, from all given arrays using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.union([2], [1, 2]);
       * // => [2, 1]
       */var union=baseRest(function(arrays){return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true));});/**
       * This method is like `_.union` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which uniqueness is computed. Result values are chosen from the first
       * array in which the value occurs. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.unionBy([2.1], [1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */var unionBy=baseRest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee=undefined$1;}return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),getIteratee(iteratee,2));});/**
       * This method is like `_.union` except that it accepts `comparator` which
       * is invoked to compare elements of `arrays`. Result values are chosen from
       * the first array in which the value occurs. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.unionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */var unionWith=baseRest(function(arrays){var comparator=last(arrays);comparator=typeof comparator=='function'?comparator:undefined$1;return baseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),undefined$1,comparator);});/**
       * Creates a duplicate-free version of an array, using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons, in which only the first occurrence of each element
       * is kept. The order of result values is determined by the order they occur
       * in the array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniq([2, 1, 2]);
       * // => [2, 1]
       */function uniq(array){return array&&array.length?baseUniq(array):[];}/**
       * This method is like `_.uniq` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * uniqueness is computed. The order of result values is determined by the
       * order they occur in the array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */function uniqBy(array,iteratee){return array&&array.length?baseUniq(array,getIteratee(iteratee,2)):[];}/**
       * This method is like `_.uniq` except that it accepts `comparator` which
       * is invoked to compare elements of `array`. The order of result values is
       * determined by the order they occur in the array.The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.uniqWith(objects, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
       */function uniqWith(array,comparator){comparator=typeof comparator=='function'?comparator:undefined$1;return array&&array.length?baseUniq(array,undefined$1,comparator):[];}/**
       * This method is like `_.zip` except that it accepts an array of grouped
       * elements and creates an array regrouping the elements to their pre-zip
       * configuration.
       *
       * @static
       * @memberOf _
       * @since 1.2.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       *
       * _.unzip(zipped);
       * // => [['a', 'b'], [1, 2], [true, false]]
       */function unzip(array){if(!(array&&array.length)){return [];}var length=0;array=arrayFilter(array,function(group){if(isArrayLikeObject(group)){length=nativeMax(group.length,length);return true;}});return baseTimes(length,function(index){return arrayMap(array,baseProperty(index));});}/**
       * This method is like `_.unzip` except that it accepts `iteratee` to specify
       * how regrouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  regrouped values.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
       * // => [[1, 10, 100], [2, 20, 200]]
       *
       * _.unzipWith(zipped, _.add);
       * // => [3, 30, 300]
       */function unzipWith(array,iteratee){if(!(array&&array.length)){return [];}var result=unzip(array);if(iteratee==null){return result;}return arrayMap(result,function(group){return apply(iteratee,undefined$1,group);});}/**
       * Creates an array excluding all given values using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.pull`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...*} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.xor
       * @example
       *
       * _.without([2, 1, 2, 3], 1, 2);
       * // => [3]
       */var without=baseRest(function(array,values){return isArrayLikeObject(array)?baseDifference(array,values):[];});/**
       * Creates an array of unique values that is the
       * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
       * of the given arrays. The order of result values is determined by the order
       * they occur in the arrays.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.without
       * @example
       *
       * _.xor([2, 1], [2, 3]);
       * // => [1, 3]
       */var xor=baseRest(function(arrays){return baseXor(arrayFilter(arrays,isArrayLikeObject));});/**
       * This method is like `_.xor` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which by which they're compared. The order of result values is determined
       * by the order they occur in the arrays. The iteratee is invoked with one
       * argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2, 3.4]
       *
       * // The `_.property` iteratee shorthand.
       * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */var xorBy=baseRest(function(arrays){var iteratee=last(arrays);if(isArrayLikeObject(iteratee)){iteratee=undefined$1;}return baseXor(arrayFilter(arrays,isArrayLikeObject),getIteratee(iteratee,2));});/**
       * This method is like `_.xor` except that it accepts `comparator` which is
       * invoked to compare elements of `arrays`. The order of result values is
       * determined by the order they occur in the arrays. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.xorWith(objects, others, _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */var xorWith=baseRest(function(arrays){var comparator=last(arrays);comparator=typeof comparator=='function'?comparator:undefined$1;return baseXor(arrayFilter(arrays,isArrayLikeObject),undefined$1,comparator);});/**
       * Creates an array of grouped elements, the first of which contains the
       * first elements of the given arrays, the second of which contains the
       * second elements of the given arrays, and so on.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       */var zip=baseRest(unzip);/**
       * This method is like `_.fromPairs` except that it accepts two arrays,
       * one of property identifiers and one of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 0.4.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObject(['a', 'b'], [1, 2]);
       * // => { 'a': 1, 'b': 2 }
       */function zipObject(props,values){return baseZipObject(props||[],values||[],assignValue);}/**
       * This method is like `_.zipObject` except that it supports property paths.
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
       * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
       */function zipObjectDeep(props,values){return baseZipObject(props||[],values||[],baseSet);}/**
       * This method is like `_.zip` except that it accepts `iteratee` to specify
       * how grouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  grouped values.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
       *   return a + b + c;
       * });
       * // => [111, 222]
       */var zipWith=baseRest(function(arrays){var length=arrays.length,iteratee=length>1?arrays[length-1]:undefined$1;iteratee=typeof iteratee=='function'?(arrays.pop(),iteratee):undefined$1;return unzipWith(arrays,iteratee);});/*------------------------------------------------------------------------*/ /**
       * Creates a `lodash` wrapper instance that wraps `value` with explicit method
       * chain sequences enabled. The result of such sequences must be unwrapped
       * with `_#value`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Seq
       * @param {*} value The value to wrap.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36 },
       *   { 'user': 'fred',    'age': 40 },
       *   { 'user': 'pebbles', 'age': 1 }
       * ];
       *
       * var youngest = _
       *   .chain(users)
       *   .sortBy('age')
       *   .map(function(o) {
       *     return o.user + ' is ' + o.age;
       *   })
       *   .head()
       *   .value();
       * // => 'pebbles is 1'
       */function chain(value){var result=lodash(value);result.__chain__=true;return result;}/**
       * This method invokes `interceptor` and returns `value`. The interceptor
       * is invoked with one argument; (value). The purpose of this method is to
       * "tap into" a method chain sequence in order to modify intermediate results.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns `value`.
       * @example
       *
       * _([1, 2, 3])
       *  .tap(function(array) {
       *    // Mutate input array.
       *    array.pop();
       *  })
       *  .reverse()
       *  .value();
       * // => [2, 1]
       */function tap(value,interceptor){interceptor(value);return value;}/**
       * This method is like `_.tap` except that it returns the result of `interceptor`.
       * The purpose of this method is to "pass thru" values replacing intermediate
       * results in a method chain sequence.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns the result of `interceptor`.
       * @example
       *
       * _('  abc  ')
       *  .chain()
       *  .trim()
       *  .thru(function(value) {
       *    return [value];
       *  })
       *  .value();
       * // => ['abc']
       */function thru(value,interceptor){return interceptor(value);}/**
       * This method is the wrapper version of `_.at`.
       *
       * @name at
       * @memberOf _
       * @since 1.0.0
       * @category Seq
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _(object).at(['a[0].b.c', 'a[1]']).value();
       * // => [3, 4]
       */var wrapperAt=flatRest(function(paths){var length=paths.length,start=length?paths[0]:0,value=this.__wrapped__,interceptor=function interceptor(object){return baseAt(object,paths);};if(length>1||this.__actions__.length||!(value instanceof LazyWrapper)||!isIndex(start)){return this.thru(interceptor);}value=value.slice(start,+start+(length?1:0));value.__actions__.push({'func':thru,'args':[interceptor],'thisArg':undefined$1});return new LodashWrapper(value,this.__chain__).thru(function(array){if(length&&!array.length){array.push(undefined$1);}return array;});});/**
       * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
       *
       * @name chain
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 }
       * ];
       *
       * // A sequence without explicit chaining.
       * _(users).head();
       * // => { 'user': 'barney', 'age': 36 }
       *
       * // A sequence with explicit chaining.
       * _(users)
       *   .chain()
       *   .head()
       *   .pick('user')
       *   .value();
       * // => { 'user': 'barney' }
       */function wrapperChain(){return chain(this);}/**
       * Executes the chain sequence and returns the wrapped result.
       *
       * @name commit
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2];
       * var wrapped = _(array).push(3);
       *
       * console.log(array);
       * // => [1, 2]
       *
       * wrapped = wrapped.commit();
       * console.log(array);
       * // => [1, 2, 3]
       *
       * wrapped.last();
       * // => 3
       *
       * console.log(array);
       * // => [1, 2, 3]
       */function wrapperCommit(){return new LodashWrapper(this.value(),this.__chain__);}/**
       * Gets the next value on a wrapped object following the
       * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
       *
       * @name next
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the next iterator value.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 1 }
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 2 }
       *
       * wrapped.next();
       * // => { 'done': true, 'value': undefined }
       */function wrapperNext(){if(this.__values__===undefined$1){this.__values__=toArray(this.value());}var done=this.__index__>=this.__values__.length,value=done?undefined$1:this.__values__[this.__index__++];return {'done':done,'value':value};}/**
       * Enables the wrapper to be iterable.
       *
       * @name Symbol.iterator
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the wrapper object.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped[Symbol.iterator]() === wrapped;
       * // => true
       *
       * Array.from(wrapped);
       * // => [1, 2]
       */function wrapperToIterator(){return this;}/**
       * Creates a clone of the chain sequence planting `value` as the wrapped value.
       *
       * @name plant
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @param {*} value The value to plant.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2]).map(square);
       * var other = wrapped.plant([3, 4]);
       *
       * other.value();
       * // => [9, 16]
       *
       * wrapped.value();
       * // => [1, 4]
       */function wrapperPlant(value){var result,parent=this;while(parent instanceof baseLodash){var clone=wrapperClone(parent);clone.__index__=0;clone.__values__=undefined$1;if(result){previous.__wrapped__=clone;}else {result=clone;}var previous=clone;parent=parent.__wrapped__;}previous.__wrapped__=value;return result;}/**
       * This method is the wrapper version of `_.reverse`.
       *
       * **Note:** This method mutates the wrapped array.
       *
       * @name reverse
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _(array).reverse().value()
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */function wrapperReverse(){var value=this.__wrapped__;if(value instanceof LazyWrapper){var wrapped=value;if(this.__actions__.length){wrapped=new LazyWrapper(this);}wrapped=wrapped.reverse();wrapped.__actions__.push({'func':thru,'args':[reverse],'thisArg':undefined$1});return new LodashWrapper(wrapped,this.__chain__);}return this.thru(reverse);}/**
       * Executes the chain sequence to resolve the unwrapped value.
       *
       * @name value
       * @memberOf _
       * @since 0.1.0
       * @alias toJSON, valueOf
       * @category Seq
       * @returns {*} Returns the resolved unwrapped value.
       * @example
       *
       * _([1, 2, 3]).value();
       * // => [1, 2, 3]
       */function wrapperValue(){return baseWrapperValue(this.__wrapped__,this.__actions__);}/*------------------------------------------------------------------------*/ /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the number of times the key was returned by `iteratee`. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.countBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': 1, '6': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.countBy(['one', 'two', 'three'], 'length');
       * // => { '3': 2, '5': 1 }
       */var countBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){++result[key];}else {baseAssignValue(result,key,1);}});/**
       * Checks if `predicate` returns truthy for **all** elements of `collection`.
       * Iteration is stopped once `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * **Note:** This method returns `true` for
       * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
       * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
       * elements of empty collections.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`.
       * @example
       *
       * _.every([true, 1, null, 'yes'], Boolean);
       * // => false
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.every(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.every(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.every(users, 'active');
       * // => false
       */function every(collection,predicate,guard){var func=isArray(collection)?arrayEvery:baseEvery;if(guard&&isIterateeCall(collection,predicate,guard)){predicate=undefined$1;}return func(collection,getIteratee(predicate,3));}/**
       * Iterates over elements of `collection`, returning an array of all elements
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * **Note:** Unlike `_.remove`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.reject
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * _.filter(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, { 'age': 36, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.filter(users, 'active');
       * // => objects for ['barney']
       *
       * // Combining several predicates using `_.overEvery` or `_.overSome`.
       * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
       * // => objects for ['fred', 'barney']
       */function filter(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;return func(collection,getIteratee(predicate,3));}/**
       * Iterates over elements of `collection`, returning the first element
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': true },
       *   { 'user': 'fred',    'age': 40, 'active': false },
       *   { 'user': 'pebbles', 'age': 1,  'active': true }
       * ];
       *
       * _.find(users, function(o) { return o.age < 40; });
       * // => object for 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.find(users, { 'age': 1, 'active': true });
       * // => object for 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.find(users, ['active', false]);
       * // => object for 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.find(users, 'active');
       * // => object for 'barney'
       */var find=createFind(findIndex);/**
       * This method is like `_.find` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=collection.length-1] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * _.findLast([1, 2, 3, 4], function(n) {
       *   return n % 2 == 1;
       * });
       * // => 3
       */var findLast=createFind(findLastIndex);/**
       * Creates a flattened array of values by running each element in `collection`
       * thru `iteratee` and flattening the mapped results. The iteratee is invoked
       * with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [n, n];
       * }
       *
       * _.flatMap([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */function flatMap(collection,iteratee){return baseFlatten(map(collection,iteratee),1);}/**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDeep([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */function flatMapDeep(collection,iteratee){return baseFlatten(map(collection,iteratee),INFINITY);}/**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDepth([1, 2], duplicate, 2);
       * // => [[1, 1], [2, 2]]
       */function flatMapDepth(collection,iteratee,depth){depth=depth===undefined$1?1:toInteger(depth);return baseFlatten(map(collection,iteratee),depth);}/**
       * Iterates over elements of `collection` and invokes `iteratee` for each element.
       * The iteratee is invoked with three arguments: (value, index|key, collection).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * **Note:** As with other "Collections" methods, objects with a "length"
       * property are iterated like arrays. To avoid this behavior use `_.forIn`
       * or `_.forOwn` for object iteration.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias each
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEachRight
       * @example
       *
       * _.forEach([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `1` then `2`.
       *
       * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */function forEach(collection,iteratee){var func=isArray(collection)?arrayEach:baseEach;return func(collection,getIteratee(iteratee,3));}/**
       * This method is like `_.forEach` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @alias eachRight
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEach
       * @example
       *
       * _.forEachRight([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `2` then `1`.
       */function forEachRight(collection,iteratee){var func=isArray(collection)?arrayEachRight:baseEachRight;return func(collection,getIteratee(iteratee,3));}/**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The order of grouped values
       * is determined by the order they occur in `collection`. The corresponding
       * value of each key is an array of elements responsible for generating the
       * key. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.groupBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': [4.2], '6': [6.1, 6.3] }
       *
       * // The `_.property` iteratee shorthand.
       * _.groupBy(['one', 'two', 'three'], 'length');
       * // => { '3': ['one', 'two'], '5': ['three'] }
       */var groupBy=createAggregator(function(result,value,key){if(hasOwnProperty.call(result,key)){result[key].push(value);}else {baseAssignValue(result,key,[value]);}});/**
       * Checks if `value` is in `collection`. If `collection` is a string, it's
       * checked for a substring of `value`, otherwise
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * is used for equality comparisons. If `fromIndex` is negative, it's used as
       * the offset from the end of `collection`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {boolean} Returns `true` if `value` is found, else `false`.
       * @example
       *
       * _.includes([1, 2, 3], 1);
       * // => true
       *
       * _.includes([1, 2, 3], 1, 2);
       * // => false
       *
       * _.includes({ 'a': 1, 'b': 2 }, 1);
       * // => true
       *
       * _.includes('abcd', 'bc');
       * // => true
       */function includes(collection,value,fromIndex,guard){collection=isArrayLike(collection)?collection:values(collection);fromIndex=fromIndex&&!guard?toInteger(fromIndex):0;var length=collection.length;if(fromIndex<0){fromIndex=nativeMax(length+fromIndex,0);}return isString(collection)?fromIndex<=length&&collection.indexOf(value,fromIndex)>-1:!!length&&baseIndexOf(collection,value,fromIndex)>-1;}/**
       * Invokes the method at `path` of each element in `collection`, returning
       * an array of the results of each invoked method. Any additional arguments
       * are provided to each invoked method. If `path` is a function, it's invoked
       * for, and `this` bound to, each element in `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array|Function|string} path The path of the method to invoke or
       *  the function invoked per iteration.
       * @param {...*} [args] The arguments to invoke each method with.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
       * // => [[1, 5, 7], [1, 2, 3]]
       *
       * _.invokeMap([123, 456], String.prototype.split, '');
       * // => [['1', '2', '3'], ['4', '5', '6']]
       */var invokeMap=baseRest(function(collection,path,args){var index=-1,isFunc=typeof path=='function',result=isArrayLike(collection)?Array(collection.length):[];baseEach(collection,function(value){result[++index]=isFunc?apply(path,value,args):baseInvoke(value,path,args);});return result;});/**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the last element responsible for generating the key. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * var array = [
       *   { 'dir': 'left', 'code': 97 },
       *   { 'dir': 'right', 'code': 100 }
       * ];
       *
       * _.keyBy(array, function(o) {
       *   return String.fromCharCode(o.code);
       * });
       * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
       *
       * _.keyBy(array, 'dir');
       * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
       */var keyBy=createAggregator(function(result,value,key){baseAssignValue(result,key,value);});/**
       * Creates an array of values by running each element in `collection` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
       *
       * The guarded methods are:
       * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
       * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
       * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
       * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * _.map([4, 8], square);
       * // => [16, 64]
       *
       * _.map({ 'a': 4, 'b': 8 }, square);
       * // => [16, 64] (iteration order is not guaranteed)
       *
       * var users = [
       *   { 'user': 'barney' },
       *   { 'user': 'fred' }
       * ];
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, 'user');
       * // => ['barney', 'fred']
       */function map(collection,iteratee){var func=isArray(collection)?arrayMap:baseMap;return func(collection,getIteratee(iteratee,3));}/**
       * This method is like `_.sortBy` except that it allows specifying the sort
       * orders of the iteratees to sort by. If `orders` is unspecified, all values
       * are sorted in ascending order. Otherwise, specify an order of "desc" for
       * descending or "asc" for ascending sort order of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @param {string[]} [orders] The sort orders of `iteratees`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 34 },
       *   { 'user': 'fred',   'age': 40 },
       *   { 'user': 'barney', 'age': 36 }
       * ];
       *
       * // Sort by `user` in ascending order and by `age` in descending order.
       * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
       */function orderBy(collection,iteratees,orders,guard){if(collection==null){return [];}if(!isArray(iteratees)){iteratees=iteratees==null?[]:[iteratees];}orders=guard?undefined$1:orders;if(!isArray(orders)){orders=orders==null?[]:[orders];}return baseOrderBy(collection,iteratees,orders);}/**
       * Creates an array of elements split into two groups, the first of which
       * contains elements `predicate` returns truthy for, the second of which
       * contains elements `predicate` returns falsey for. The predicate is
       * invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of grouped elements.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': false },
       *   { 'user': 'fred',    'age': 40, 'active': true },
       *   { 'user': 'pebbles', 'age': 1,  'active': false }
       * ];
       *
       * _.partition(users, function(o) { return o.active; });
       * // => objects for [['fred'], ['barney', 'pebbles']]
       *
       * // The `_.matches` iteratee shorthand.
       * _.partition(users, { 'age': 1, 'active': false });
       * // => objects for [['pebbles'], ['barney', 'fred']]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.partition(users, ['active', false]);
       * // => objects for [['barney', 'pebbles'], ['fred']]
       *
       * // The `_.property` iteratee shorthand.
       * _.partition(users, 'active');
       * // => objects for [['fred'], ['barney', 'pebbles']]
       */var partition=createAggregator(function(result,value,key){result[key?0:1].push(value);},function(){return [[],[]];});/**
       * Reduces `collection` to a value which is the accumulated result of running
       * each element in `collection` thru `iteratee`, where each successive
       * invocation is supplied the return value of the previous. If `accumulator`
       * is not given, the first element of `collection` is used as the initial
       * value. The iteratee is invoked with four arguments:
       * (accumulator, value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.reduce`, `_.reduceRight`, and `_.transform`.
       *
       * The guarded methods are:
       * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
       * and `sortBy`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduceRight
       * @example
       *
       * _.reduce([1, 2], function(sum, n) {
       *   return sum + n;
       * }, 0);
       * // => 3
       *
       * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       *   return result;
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
       */function reduce(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduce:baseReduce,initAccum=arguments.length<3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEach);}/**
       * This method is like `_.reduce` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduce
       * @example
       *
       * var array = [[0, 1], [2, 3], [4, 5]];
       *
       * _.reduceRight(array, function(flattened, other) {
       *   return flattened.concat(other);
       * }, []);
       * // => [4, 5, 2, 3, 0, 1]
       */function reduceRight(collection,iteratee,accumulator){var func=isArray(collection)?arrayReduceRight:baseReduce,initAccum=arguments.length<3;return func(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEachRight);}/**
       * The opposite of `_.filter`; this method returns the elements of `collection`
       * that `predicate` does **not** return truthy for.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.filter
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': true }
       * ];
       *
       * _.reject(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.reject(users, { 'age': 40, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.reject(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.reject(users, 'active');
       * // => objects for ['barney']
       */function reject(collection,predicate){var func=isArray(collection)?arrayFilter:baseFilter;return func(collection,negate(getIteratee(predicate,3)));}/**
       * Gets a random element from `collection`.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       * @example
       *
       * _.sample([1, 2, 3, 4]);
       * // => 2
       */function sample(collection){var func=isArray(collection)?arraySample:baseSample;return func(collection);}/**
       * Gets `n` random elements at unique keys from `collection` up to the
       * size of `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @param {number} [n=1] The number of elements to sample.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the random elements.
       * @example
       *
       * _.sampleSize([1, 2, 3], 2);
       * // => [3, 1]
       *
       * _.sampleSize([1, 2, 3], 4);
       * // => [2, 3, 1]
       */function sampleSize(collection,n,guard){if(guard?isIterateeCall(collection,n,guard):n===undefined$1){n=1;}else {n=toInteger(n);}var func=isArray(collection)?arraySampleSize:baseSampleSize;return func(collection,n);}/**
       * Creates an array of shuffled values, using a version of the
       * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       * @example
       *
       * _.shuffle([1, 2, 3, 4]);
       * // => [4, 1, 3, 2]
       */function shuffle(collection){var func=isArray(collection)?arrayShuffle:baseShuffle;return func(collection);}/**
       * Gets the size of `collection` by returning its length for array-like
       * values or the number of own enumerable string keyed properties for objects.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @returns {number} Returns the collection size.
       * @example
       *
       * _.size([1, 2, 3]);
       * // => 3
       *
       * _.size({ 'a': 1, 'b': 2 });
       * // => 2
       *
       * _.size('pebbles');
       * // => 7
       */function size(collection){if(collection==null){return 0;}if(isArrayLike(collection)){return isString(collection)?stringSize(collection):collection.length;}var tag=getTag(collection);if(tag==mapTag||tag==setTag){return collection.size;}return baseKeys(collection).length;}/**
       * Checks if `predicate` returns truthy for **any** element of `collection`.
       * Iteration is stopped once `predicate` returns truthy. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       * @example
       *
       * _.some([null, 0, 'yes', false], Boolean);
       * // => true
       *
       * var users = [
       *   { 'user': 'barney', 'active': true },
       *   { 'user': 'fred',   'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.some(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.some(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.some(users, 'active');
       * // => true
       */function some(collection,predicate,guard){var func=isArray(collection)?arraySome:baseSome;if(guard&&isIterateeCall(collection,predicate,guard)){predicate=undefined$1;}return func(collection,getIteratee(predicate,3));}/**
       * Creates an array of elements, sorted in ascending order by the results of
       * running each element in a collection thru each iteratee. This method
       * performs a stable sort, that is, it preserves the original sort order of
       * equal elements. The iteratees are invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 30 },
       *   { 'user': 'barney', 'age': 34 }
       * ];
       *
       * _.sortBy(users, [function(o) { return o.user; }]);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
       *
       * _.sortBy(users, ['user', 'age']);
       * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
       */var sortBy=baseRest(function(collection,iteratees){if(collection==null){return [];}var length=iteratees.length;if(length>1&&isIterateeCall(collection,iteratees[0],iteratees[1])){iteratees=[];}else if(length>2&&isIterateeCall(iteratees[0],iteratees[1],iteratees[2])){iteratees=[iteratees[0]];}return baseOrderBy(collection,baseFlatten(iteratees,1),[]);});/*------------------------------------------------------------------------*/ /**
       * Gets the timestamp of the number of milliseconds that have elapsed since
       * the Unix epoch (1 January 1970 00:00:00 UTC).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Date
       * @returns {number} Returns the timestamp.
       * @example
       *
       * _.defer(function(stamp) {
       *   console.log(_.now() - stamp);
       * }, _.now());
       * // => Logs the number of milliseconds it took for the deferred invocation.
       */var now=ctxNow||function(){return root.Date.now();};/*------------------------------------------------------------------------*/ /**
       * The opposite of `_.before`; this method creates a function that invokes
       * `func` once it's called `n` or more times.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {number} n The number of calls before `func` is invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var saves = ['profile', 'settings'];
       *
       * var done = _.after(saves.length, function() {
       *   console.log('done saving!');
       * });
       *
       * _.forEach(saves, function(type) {
       *   asyncSave({ 'type': type, 'complete': done });
       * });
       * // => Logs 'done saving!' after the two async saves have completed.
       */function after(n,func){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}n=toInteger(n);return function(){if(--n<1){return func.apply(this,arguments);}};}/**
       * Creates a function that invokes `func`, with up to `n` arguments,
       * ignoring any additional arguments.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @param {number} [n=func.length] The arity cap.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.ary(parseInt, 1));
       * // => [6, 8, 10]
       */function ary(func,n,guard){n=guard?undefined$1:n;n=func&&n==null?func.length:n;return createWrap(func,WRAP_ARY_FLAG,undefined$1,undefined$1,undefined$1,undefined$1,n);}/**
       * Creates a function that invokes `func`, with the `this` binding and arguments
       * of the created function, while it's called less than `n` times. Subsequent
       * calls to the created function return the result of the last `func` invocation.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {number} n The number of calls at which `func` is no longer invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * jQuery(element).on('click', _.before(5, addContactToList));
       * // => Allows adding up to 4 contacts to the list.
       */function before(n,func){var result;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}n=toInteger(n);return function(){if(--n>0){result=func.apply(this,arguments);}if(n<=1){func=undefined$1;}return result;};}/**
       * Creates a function that invokes `func` with the `this` binding of `thisArg`
       * and `partials` prepended to the arguments it receives.
       *
       * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for partially applied arguments.
       *
       * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
       * property of bound functions.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to bind.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * function greet(greeting, punctuation) {
       *   return greeting + ' ' + this.user + punctuation;
       * }
       *
       * var object = { 'user': 'fred' };
       *
       * var bound = _.bind(greet, object, 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bind(greet, object, _, '!');
       * bound('hi');
       * // => 'hi fred!'
       */var bind=baseRest(function(func,thisArg,partials){var bitmask=WRAP_BIND_FLAG;if(partials.length){var holders=replaceHolders(partials,getHolder(bind));bitmask|=WRAP_PARTIAL_FLAG;}return createWrap(func,bitmask,thisArg,partials,holders);});/**
       * Creates a function that invokes the method at `object[key]` with `partials`
       * prepended to the arguments it receives.
       *
       * This method differs from `_.bind` by allowing bound functions to reference
       * methods that may be redefined or don't yet exist. See
       * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
       * for more details.
       *
       * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Function
       * @param {Object} object The object to invoke the method on.
       * @param {string} key The key of the method.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * var object = {
       *   'user': 'fred',
       *   'greet': function(greeting, punctuation) {
       *     return greeting + ' ' + this.user + punctuation;
       *   }
       * };
       *
       * var bound = _.bindKey(object, 'greet', 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * object.greet = function(greeting, punctuation) {
       *   return greeting + 'ya ' + this.user + punctuation;
       * };
       *
       * bound('!');
       * // => 'hiya fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bindKey(object, 'greet', _, '!');
       * bound('hi');
       * // => 'hiya fred!'
       */var bindKey=baseRest(function(object,key,partials){var bitmask=WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG;if(partials.length){var holders=replaceHolders(partials,getHolder(bindKey));bitmask|=WRAP_PARTIAL_FLAG;}return createWrap(key,bitmask,object,partials,holders);});/**
       * Creates a function that accepts arguments of `func` and either invokes
       * `func` returning its result, if at least `arity` number of arguments have
       * been provided, or returns a function that accepts the remaining `func`
       * arguments, and so on. The arity of `func` may be specified if `func.length`
       * is not sufficient.
       *
       * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curry(abc);
       *
       * curried(1)(2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(1)(_, 3)(2);
       * // => [1, 2, 3]
       */function curry(func,arity,guard){arity=guard?undefined$1:arity;var result=createWrap(func,WRAP_CURRY_FLAG,undefined$1,undefined$1,undefined$1,undefined$1,undefined$1,arity);result.placeholder=curry.placeholder;return result;}/**
       * This method is like `_.curry` except that arguments are applied to `func`
       * in the manner of `_.partialRight` instead of `_.partial`.
       *
       * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curryRight(abc);
       *
       * curried(3)(2)(1);
       * // => [1, 2, 3]
       *
       * curried(2, 3)(1);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(3)(1, _)(2);
       * // => [1, 2, 3]
       */function curryRight(func,arity,guard){arity=guard?undefined$1:arity;var result=createWrap(func,WRAP_CURRY_RIGHT_FLAG,undefined$1,undefined$1,undefined$1,undefined$1,undefined$1,arity);result.placeholder=curryRight.placeholder;return result;}/**
       * Creates a debounced function that delays invoking `func` until after `wait`
       * milliseconds have elapsed since the last time the debounced function was
       * invoked. The debounced function comes with a `cancel` method to cancel
       * delayed `func` invocations and a `flush` method to immediately invoke them.
       * Provide `options` to indicate whether `func` should be invoked on the
       * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
       * with the last arguments provided to the debounced function. Subsequent
       * calls to the debounced function return the result of the last `func`
       * invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the debounced function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.debounce` and `_.throttle`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to debounce.
       * @param {number} [wait=0] The number of milliseconds to delay.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=false]
       *  Specify invoking on the leading edge of the timeout.
       * @param {number} [options.maxWait]
       *  The maximum time `func` is allowed to be delayed before it's invoked.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new debounced function.
       * @example
       *
       * // Avoid costly calculations while the window size is in flux.
       * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
       *
       * // Invoke `sendMail` when clicked, debouncing subsequent calls.
       * jQuery(element).on('click', _.debounce(sendMail, 300, {
       *   'leading': true,
       *   'trailing': false
       * }));
       *
       * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
       * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
       * var source = new EventSource('/stream');
       * jQuery(source).on('message', debounced);
       *
       * // Cancel the trailing debounced invocation.
       * jQuery(window).on('popstate', debounced.cancel);
       */function debounce(func,wait,options){var lastArgs,lastThis,maxWait,result,timerId,lastCallTime,lastInvokeTime=0,leading=false,maxing=false,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}wait=toNumber(wait)||0;if(isObject(options)){leading=!!options.leading;maxing='maxWait'in options;maxWait=maxing?nativeMax(toNumber(options.maxWait)||0,wait):maxWait;trailing='trailing'in options?!!options.trailing:trailing;}function invokeFunc(time){var args=lastArgs,thisArg=lastThis;lastArgs=lastThis=undefined$1;lastInvokeTime=time;result=func.apply(thisArg,args);return result;}function leadingEdge(time){// Reset any `maxWait` timer.
  lastInvokeTime=time;// Start the timer for the trailing edge.
  timerId=setTimeout(timerExpired,wait);// Invoke the leading edge.
  return leading?invokeFunc(time):result;}function remainingWait(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime,timeWaiting=wait-timeSinceLastCall;return maxing?nativeMin(timeWaiting,maxWait-timeSinceLastInvoke):timeWaiting;}function shouldInvoke(time){var timeSinceLastCall=time-lastCallTime,timeSinceLastInvoke=time-lastInvokeTime;// Either this is the first call, activity has stopped and we're at the
  // trailing edge, the system time has gone backwards and we're treating
  // it as the trailing edge, or we've hit the `maxWait` limit.
  return lastCallTime===undefined$1||timeSinceLastCall>=wait||timeSinceLastCall<0||maxing&&timeSinceLastInvoke>=maxWait;}function timerExpired(){var time=now();if(shouldInvoke(time)){return trailingEdge(time);}// Restart the timer.
  timerId=setTimeout(timerExpired,remainingWait(time));}function trailingEdge(time){timerId=undefined$1;// Only invoke if we have `lastArgs` which means `func` has been
  // debounced at least once.
  if(trailing&&lastArgs){return invokeFunc(time);}lastArgs=lastThis=undefined$1;return result;}function cancel(){if(timerId!==undefined$1){clearTimeout(timerId);}lastInvokeTime=0;lastArgs=lastCallTime=lastThis=timerId=undefined$1;}function flush(){return timerId===undefined$1?result:trailingEdge(now());}function debounced(){var time=now(),isInvoking=shouldInvoke(time);lastArgs=arguments;lastThis=this;lastCallTime=time;if(isInvoking){if(timerId===undefined$1){return leadingEdge(lastCallTime);}if(maxing){// Handle invocations in a tight loop.
  clearTimeout(timerId);timerId=setTimeout(timerExpired,wait);return invokeFunc(lastCallTime);}}if(timerId===undefined$1){timerId=setTimeout(timerExpired,wait);}return result;}debounced.cancel=cancel;debounced.flush=flush;return debounced;}/**
       * Defers invoking the `func` until the current call stack has cleared. Any
       * additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to defer.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.defer(function(text) {
       *   console.log(text);
       * }, 'deferred');
       * // => Logs 'deferred' after one millisecond.
       */var defer=baseRest(function(func,args){return baseDelay(func,1,args);});/**
       * Invokes `func` after `wait` milliseconds. Any additional arguments are
       * provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.delay(function(text) {
       *   console.log(text);
       * }, 1000, 'later');
       * // => Logs 'later' after one second.
       */var delay=baseRest(function(func,wait,args){return baseDelay(func,toNumber(wait)||0,args);});/**
       * Creates a function that invokes `func` with arguments reversed.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to flip arguments for.
       * @returns {Function} Returns the new flipped function.
       * @example
       *
       * var flipped = _.flip(function() {
       *   return _.toArray(arguments);
       * });
       *
       * flipped('a', 'b', 'c', 'd');
       * // => ['d', 'c', 'b', 'a']
       */function flip(func){return createWrap(func,WRAP_FLIP_FLAG);}/**
       * Creates a function that memoizes the result of `func`. If `resolver` is
       * provided, it determines the cache key for storing the result based on the
       * arguments provided to the memoized function. By default, the first argument
       * provided to the memoized function is used as the map cache key. The `func`
       * is invoked with the `this` binding of the memoized function.
       *
       * **Note:** The cache is exposed as the `cache` property on the memoized
       * function. Its creation may be customized by replacing the `_.memoize.Cache`
       * constructor with one whose instances implement the
       * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
       * method interface of `clear`, `delete`, `get`, `has`, and `set`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to have its output memoized.
       * @param {Function} [resolver] The function to resolve the cache key.
       * @returns {Function} Returns the new memoized function.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       * var other = { 'c': 3, 'd': 4 };
       *
       * var values = _.memoize(_.values);
       * values(object);
       * // => [1, 2]
       *
       * values(other);
       * // => [3, 4]
       *
       * object.a = 2;
       * values(object);
       * // => [1, 2]
       *
       * // Modify the result cache.
       * values.cache.set(object, ['a', 'b']);
       * values(object);
       * // => ['a', 'b']
       *
       * // Replace `_.memoize.Cache`.
       * _.memoize.Cache = WeakMap;
       */function memoize(func,resolver){if(typeof func!='function'||resolver!=null&&typeof resolver!='function'){throw new TypeError(FUNC_ERROR_TEXT);}var memoized=function memoized(){var args=arguments,key=resolver?resolver.apply(this,args):args[0],cache=memoized.cache;if(cache.has(key)){return cache.get(key);}var result=func.apply(this,args);memoized.cache=cache.set(key,result)||cache;return result;};memoized.cache=new(memoize.Cache||MapCache)();return memoized;}// Expose `MapCache`.
  memoize.Cache=MapCache;/**
       * Creates a function that negates the result of the predicate `func`. The
       * `func` predicate is invoked with the `this` binding and arguments of the
       * created function.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} predicate The predicate to negate.
       * @returns {Function} Returns the new negated function.
       * @example
       *
       * function isEven(n) {
       *   return n % 2 == 0;
       * }
       *
       * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
       * // => [1, 3, 5]
       */function negate(predicate){if(typeof predicate!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return function(){var args=arguments;switch(args.length){case 0:return !predicate.call(this);case 1:return !predicate.call(this,args[0]);case 2:return !predicate.call(this,args[0],args[1]);case 3:return !predicate.call(this,args[0],args[1],args[2]);}return !predicate.apply(this,args);};}/**
       * Creates a function that is restricted to invoking `func` once. Repeat calls
       * to the function return the value of the first invocation. The `func` is
       * invoked with the `this` binding and arguments of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var initialize = _.once(createApplication);
       * initialize();
       * initialize();
       * // => `createApplication` is invoked once
       */function once(func){return before(2,func);}/**
       * Creates a function that invokes `func` with its arguments transformed.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Function
       * @param {Function} func The function to wrap.
       * @param {...(Function|Function[])} [transforms=[_.identity]]
       *  The argument transforms.
       * @returns {Function} Returns the new function.
       * @example
       *
       * function doubled(n) {
       *   return n * 2;
       * }
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var func = _.overArgs(function(x, y) {
       *   return [x, y];
       * }, [square, doubled]);
       *
       * func(9, 3);
       * // => [81, 6]
       *
       * func(10, 5);
       * // => [100, 10]
       */var overArgs=castRest(function(func,transforms){transforms=transforms.length==1&&isArray(transforms[0])?arrayMap(transforms[0],baseUnary(getIteratee())):arrayMap(baseFlatten(transforms,1),baseUnary(getIteratee()));var funcsLength=transforms.length;return baseRest(function(args){var index=-1,length=nativeMin(args.length,funcsLength);while(++index<length){args[index]=transforms[index].call(this,args[index]);}return apply(func,this,args);});});/**
       * Creates a function that invokes `func` with `partials` prepended to the
       * arguments it receives. This method is like `_.bind` except it does **not**
       * alter the `this` binding.
       *
       * The `_.partial.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 0.2.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var sayHelloTo = _.partial(greet, 'hello');
       * sayHelloTo('fred');
       * // => 'hello fred'
       *
       * // Partially applied with placeholders.
       * var greetFred = _.partial(greet, _, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       */var partial=baseRest(function(func,partials){var holders=replaceHolders(partials,getHolder(partial));return createWrap(func,WRAP_PARTIAL_FLAG,undefined$1,partials,holders);});/**
       * This method is like `_.partial` except that partially applied arguments
       * are appended to the arguments it receives.
       *
       * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var greetFred = _.partialRight(greet, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       *
       * // Partially applied with placeholders.
       * var sayHelloTo = _.partialRight(greet, 'hello', _);
       * sayHelloTo('fred');
       * // => 'hello fred'
       */var partialRight=baseRest(function(func,partials){var holders=replaceHolders(partials,getHolder(partialRight));return createWrap(func,WRAP_PARTIAL_RIGHT_FLAG,undefined$1,partials,holders);});/**
       * Creates a function that invokes `func` with arguments arranged according
       * to the specified `indexes` where the argument value at the first index is
       * provided as the first argument, the argument value at the second index is
       * provided as the second argument, and so on.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to rearrange arguments for.
       * @param {...(number|number[])} indexes The arranged argument indexes.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var rearged = _.rearg(function(a, b, c) {
       *   return [a, b, c];
       * }, [2, 0, 1]);
       *
       * rearged('b', 'c', 'a')
       * // => ['a', 'b', 'c']
       */var rearg=flatRest(function(func,indexes){return createWrap(func,WRAP_REARG_FLAG,undefined$1,undefined$1,undefined$1,indexes);});/**
       * Creates a function that invokes `func` with the `this` binding of the
       * created function and arguments from `start` and beyond provided as
       * an array.
       *
       * **Note:** This method is based on the
       * [rest parameter](https://mdn.io/rest_parameters).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.rest(function(what, names) {
       *   return what + ' ' + _.initial(names).join(', ') +
       *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
       * });
       *
       * say('hello', 'fred', 'barney', 'pebbles');
       * // => 'hello fred, barney, & pebbles'
       */function rest(func,start){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}start=start===undefined$1?start:toInteger(start);return baseRest(func,start);}/**
       * Creates a function that invokes `func` with the `this` binding of the
       * create function and an array of arguments much like
       * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
       *
       * **Note:** This method is based on the
       * [spread operator](https://mdn.io/spread_operator).
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Function
       * @param {Function} func The function to spread arguments over.
       * @param {number} [start=0] The start position of the spread.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.spread(function(who, what) {
       *   return who + ' says ' + what;
       * });
       *
       * say(['fred', 'hello']);
       * // => 'fred says hello'
       *
       * var numbers = Promise.all([
       *   Promise.resolve(40),
       *   Promise.resolve(36)
       * ]);
       *
       * numbers.then(_.spread(function(x, y) {
       *   return x + y;
       * }));
       * // => a Promise of 76
       */function spread(func,start){if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}start=start==null?0:nativeMax(toInteger(start),0);return baseRest(function(args){var array=args[start],otherArgs=castSlice(args,0,start);if(array){arrayPush(otherArgs,array);}return apply(func,this,otherArgs);});}/**
       * Creates a throttled function that only invokes `func` at most once per
       * every `wait` milliseconds. The throttled function comes with a `cancel`
       * method to cancel delayed `func` invocations and a `flush` method to
       * immediately invoke them. Provide `options` to indicate whether `func`
       * should be invoked on the leading and/or trailing edge of the `wait`
       * timeout. The `func` is invoked with the last arguments provided to the
       * throttled function. Subsequent calls to the throttled function return the
       * result of the last `func` invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the throttled function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.throttle` and `_.debounce`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to throttle.
       * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=true]
       *  Specify invoking on the leading edge of the timeout.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new throttled function.
       * @example
       *
       * // Avoid excessively updating the position while scrolling.
       * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
       *
       * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
       * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
       * jQuery(element).on('click', throttled);
       *
       * // Cancel the trailing throttled invocation.
       * jQuery(window).on('popstate', throttled.cancel);
       */function throttle(func,wait,options){var leading=true,trailing=true;if(typeof func!='function'){throw new TypeError(FUNC_ERROR_TEXT);}if(isObject(options)){leading='leading'in options?!!options.leading:leading;trailing='trailing'in options?!!options.trailing:trailing;}return debounce(func,wait,{'leading':leading,'maxWait':wait,'trailing':trailing});}/**
       * Creates a function that accepts up to one argument, ignoring any
       * additional arguments.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.unary(parseInt));
       * // => [6, 8, 10]
       */function unary(func){return ary(func,1);}/**
       * Creates a function that provides `value` to `wrapper` as its first
       * argument. Any additional arguments provided to the function are appended
       * to those provided to the `wrapper`. The wrapper is invoked with the `this`
       * binding of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {*} value The value to wrap.
       * @param {Function} [wrapper=identity] The wrapper function.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var p = _.wrap(_.escape, function(func, text) {
       *   return '<p>' + func(text) + '</p>';
       * });
       *
       * p('fred, barney, & pebbles');
       * // => '<p>fred, barney, &amp; pebbles</p>'
       */function wrap(value,wrapper){return partial(castFunction(wrapper),value);}/*------------------------------------------------------------------------*/ /**
       * Casts `value` as an array if it's not one.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Lang
       * @param {*} value The value to inspect.
       * @returns {Array} Returns the cast array.
       * @example
       *
       * _.castArray(1);
       * // => [1]
       *
       * _.castArray({ 'a': 1 });
       * // => [{ 'a': 1 }]
       *
       * _.castArray('abc');
       * // => ['abc']
       *
       * _.castArray(null);
       * // => [null]
       *
       * _.castArray(undefined);
       * // => [undefined]
       *
       * _.castArray();
       * // => []
       *
       * var array = [1, 2, 3];
       * console.log(_.castArray(array) === array);
       * // => true
       */function castArray(){if(!arguments.length){return [];}var value=arguments[0];return isArray(value)?value:[value];}/**
       * Creates a shallow clone of `value`.
       *
       * **Note:** This method is loosely based on the
       * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
       * and supports cloning arrays, array buffers, booleans, date objects, maps,
       * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
       * arrays. The own enumerable properties of `arguments` objects are cloned
       * as plain objects. An empty object is returned for uncloneable values such
       * as error objects, functions, DOM nodes, and WeakMaps.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to clone.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeep
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var shallow = _.clone(objects);
       * console.log(shallow[0] === objects[0]);
       * // => true
       */function clone(value){return baseClone(value,CLONE_SYMBOLS_FLAG);}/**
       * This method is like `_.clone` except that it accepts `customizer` which
       * is invoked to produce the cloned value. If `customizer` returns `undefined`,
       * cloning is handled by the method instead. The `customizer` is invoked with
       * up to four arguments; (value [, index|key, object, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeepWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(false);
       *   }
       * }
       *
       * var el = _.cloneWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 0
       */function cloneWith(value,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return baseClone(value,CLONE_SYMBOLS_FLAG,customizer);}/**
       * This method is like `_.clone` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @returns {*} Returns the deep cloned value.
       * @see _.clone
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var deep = _.cloneDeep(objects);
       * console.log(deep[0] === objects[0]);
       * // => false
       */function cloneDeep(value){return baseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG);}/**
       * This method is like `_.cloneWith` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the deep cloned value.
       * @see _.cloneWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(true);
       *   }
       * }
       *
       * var el = _.cloneDeepWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 20
       */function cloneDeepWith(value,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return baseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG,customizer);}/**
       * Checks if `object` conforms to `source` by invoking the predicate
       * properties of `source` with the corresponding property values of `object`.
       *
       * **Note:** This method is equivalent to `_.conforms` when `source` is
       * partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
       * // => true
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
       * // => false
       */function conformsTo(object,source){return source==null||baseConformsTo(object,source,keys(source));}/**
       * Performs a
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * comparison between two values to determine if they are equivalent.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.eq(object, object);
       * // => true
       *
       * _.eq(object, other);
       * // => false
       *
       * _.eq('a', 'a');
       * // => true
       *
       * _.eq('a', Object('a'));
       * // => false
       *
       * _.eq(NaN, NaN);
       * // => true
       */function eq(value,other){return value===other||value!==value&&other!==other;}/**
       * Checks if `value` is greater than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       * @see _.lt
       * @example
       *
       * _.gt(3, 1);
       * // => true
       *
       * _.gt(3, 3);
       * // => false
       *
       * _.gt(1, 3);
       * // => false
       */var gt=createRelationalOperation(baseGt);/**
       * Checks if `value` is greater than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than or equal to
       *  `other`, else `false`.
       * @see _.lte
       * @example
       *
       * _.gte(3, 1);
       * // => true
       *
       * _.gte(3, 3);
       * // => true
       *
       * _.gte(1, 3);
       * // => false
       */var gte=createRelationalOperation(function(value,other){return value>=other;});/**
       * Checks if `value` is likely an `arguments` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       *  else `false`.
       * @example
       *
       * _.isArguments(function() { return arguments; }());
       * // => true
       *
       * _.isArguments([1, 2, 3]);
       * // => false
       */var isArguments=baseIsArguments(function(){return arguments;}())?baseIsArguments:function(value){return isObjectLike(value)&&hasOwnProperty.call(value,'callee')&&!propertyIsEnumerable.call(value,'callee');};/**
       * Checks if `value` is classified as an `Array` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array, else `false`.
       * @example
       *
       * _.isArray([1, 2, 3]);
       * // => true
       *
       * _.isArray(document.body.children);
       * // => false
       *
       * _.isArray('abc');
       * // => false
       *
       * _.isArray(_.noop);
       * // => false
       */var isArray=Array.isArray;/**
       * Checks if `value` is classified as an `ArrayBuffer` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       * @example
       *
       * _.isArrayBuffer(new ArrayBuffer(2));
       * // => true
       *
       * _.isArrayBuffer(new Array(2));
       * // => false
       */var isArrayBuffer=nodeIsArrayBuffer?baseUnary(nodeIsArrayBuffer):baseIsArrayBuffer;/**
       * Checks if `value` is array-like. A value is considered array-like if it's
       * not a function and has a `value.length` that's an integer greater than or
       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
       * @example
       *
       * _.isArrayLike([1, 2, 3]);
       * // => true
       *
       * _.isArrayLike(document.body.children);
       * // => true
       *
       * _.isArrayLike('abc');
       * // => true
       *
       * _.isArrayLike(_.noop);
       * // => false
       */function isArrayLike(value){return value!=null&&isLength(value.length)&&!isFunction(value);}/**
       * This method is like `_.isArrayLike` except that it also checks if `value`
       * is an object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array-like object,
       *  else `false`.
       * @example
       *
       * _.isArrayLikeObject([1, 2, 3]);
       * // => true
       *
       * _.isArrayLikeObject(document.body.children);
       * // => true
       *
       * _.isArrayLikeObject('abc');
       * // => false
       *
       * _.isArrayLikeObject(_.noop);
       * // => false
       */function isArrayLikeObject(value){return isObjectLike(value)&&isArrayLike(value);}/**
       * Checks if `value` is classified as a boolean primitive or object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
       * @example
       *
       * _.isBoolean(false);
       * // => true
       *
       * _.isBoolean(null);
       * // => false
       */function isBoolean(value){return value===true||value===false||isObjectLike(value)&&baseGetTag(value)==boolTag;}/**
       * Checks if `value` is a buffer.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
       * @example
       *
       * _.isBuffer(new Buffer(2));
       * // => true
       *
       * _.isBuffer(new Uint8Array(2));
       * // => false
       */var isBuffer=nativeIsBuffer||stubFalse;/**
       * Checks if `value` is classified as a `Date` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       * @example
       *
       * _.isDate(new Date);
       * // => true
       *
       * _.isDate('Mon April 23 2012');
       * // => false
       */var isDate=nodeIsDate?baseUnary(nodeIsDate):baseIsDate;/**
       * Checks if `value` is likely a DOM element.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
       * @example
       *
       * _.isElement(document.body);
       * // => true
       *
       * _.isElement('<body>');
       * // => false
       */function isElement(value){return isObjectLike(value)&&value.nodeType===1&&!isPlainObject(value);}/**
       * Checks if `value` is an empty object, collection, map, or set.
       *
       * Objects are considered empty if they have no own enumerable string keyed
       * properties.
       *
       * Array-like values such as `arguments` objects, arrays, buffers, strings, or
       * jQuery-like collections are considered empty if they have a `length` of `0`.
       * Similarly, maps and sets are considered empty if they have a `size` of `0`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is empty, else `false`.
       * @example
       *
       * _.isEmpty(null);
       * // => true
       *
       * _.isEmpty(true);
       * // => true
       *
       * _.isEmpty(1);
       * // => true
       *
       * _.isEmpty([1, 2, 3]);
       * // => false
       *
       * _.isEmpty({ 'a': 1 });
       * // => false
       */function isEmpty(value){if(value==null){return true;}if(isArrayLike(value)&&(isArray(value)||typeof value=='string'||typeof value.splice=='function'||isBuffer(value)||isTypedArray(value)||isArguments(value))){return !value.length;}var tag=getTag(value);if(tag==mapTag||tag==setTag){return !value.size;}if(isPrototype(value)){return !baseKeys(value).length;}for(var key in value){if(hasOwnProperty.call(value,key)){return false;}}return true;}/**
       * Performs a deep comparison between two values to determine if they are
       * equivalent.
       *
       * **Note:** This method supports comparing arrays, array buffers, booleans,
       * date objects, error objects, maps, numbers, `Object` objects, regexes,
       * sets, strings, symbols, and typed arrays. `Object` objects are compared
       * by their own, not inherited, enumerable properties. Functions and DOM
       * nodes are compared by strict equality, i.e. `===`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.isEqual(object, other);
       * // => true
       *
       * object === other;
       * // => false
       */function isEqual(value,other){return baseIsEqual(value,other);}/**
       * This method is like `_.isEqual` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with up to
       * six arguments: (objValue, othValue [, index|key, object, other, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, othValue) {
       *   if (isGreeting(objValue) && isGreeting(othValue)) {
       *     return true;
       *   }
       * }
       *
       * var array = ['hello', 'goodbye'];
       * var other = ['hi', 'goodbye'];
       *
       * _.isEqualWith(array, other, customizer);
       * // => true
       */function isEqualWith(value,other,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;var result=customizer?customizer(value,other):undefined$1;return result===undefined$1?baseIsEqual(value,other,undefined$1,customizer):!!result;}/**
       * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
       * `SyntaxError`, `TypeError`, or `URIError` object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
       * @example
       *
       * _.isError(new Error);
       * // => true
       *
       * _.isError(Error);
       * // => false
       */function isError(value){if(!isObjectLike(value)){return false;}var tag=baseGetTag(value);return tag==errorTag||tag==domExcTag||typeof value.message=='string'&&typeof value.name=='string'&&!isPlainObject(value);}/**
       * Checks if `value` is a finite primitive number.
       *
       * **Note:** This method is based on
       * [`Number.isFinite`](https://mdn.io/Number/isFinite).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
       * @example
       *
       * _.isFinite(3);
       * // => true
       *
       * _.isFinite(Number.MIN_VALUE);
       * // => true
       *
       * _.isFinite(Infinity);
       * // => false
       *
       * _.isFinite('3');
       * // => false
       */function isFinite(value){return typeof value=='number'&&nativeIsFinite(value);}/**
       * Checks if `value` is classified as a `Function` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
       * @example
       *
       * _.isFunction(_);
       * // => true
       *
       * _.isFunction(/abc/);
       * // => false
       */function isFunction(value){if(!isObject(value)){return false;}// The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag=baseGetTag(value);return tag==funcTag||tag==genTag||tag==asyncTag||tag==proxyTag;}/**
       * Checks if `value` is an integer.
       *
       * **Note:** This method is based on
       * [`Number.isInteger`](https://mdn.io/Number/isInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
       * @example
       *
       * _.isInteger(3);
       * // => true
       *
       * _.isInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isInteger(Infinity);
       * // => false
       *
       * _.isInteger('3');
       * // => false
       */function isInteger(value){return typeof value=='number'&&value==toInteger(value);}/**
       * Checks if `value` is a valid array-like length.
       *
       * **Note:** This method is loosely based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
       * @example
       *
       * _.isLength(3);
       * // => true
       *
       * _.isLength(Number.MIN_VALUE);
       * // => false
       *
       * _.isLength(Infinity);
       * // => false
       *
       * _.isLength('3');
       * // => false
       */function isLength(value){return typeof value=='number'&&value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;}/**
       * Checks if `value` is the
       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(_.noop);
       * // => true
       *
       * _.isObject(null);
       * // => false
       */function isObject(value){var type=_typeof$1(value);return value!=null&&(type=='object'||type=='function');}/**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */function isObjectLike(value){return value!=null&&_typeof$1(value)=='object';}/**
       * Checks if `value` is classified as a `Map` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       * @example
       *
       * _.isMap(new Map);
       * // => true
       *
       * _.isMap(new WeakMap);
       * // => false
       */var isMap=nodeIsMap?baseUnary(nodeIsMap):baseIsMap;/**
       * Performs a partial deep comparison between `object` and `source` to
       * determine if `object` contains equivalent property values.
       *
       * **Note:** This method is equivalent to `_.matches` when `source` is
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.isMatch(object, { 'b': 2 });
       * // => true
       *
       * _.isMatch(object, { 'b': 1 });
       * // => false
       */function isMatch(object,source){return object===source||baseIsMatch(object,source,getMatchData(source));}/**
       * This method is like `_.isMatch` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with five
       * arguments: (objValue, srcValue, index|key, object, source).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, srcValue) {
       *   if (isGreeting(objValue) && isGreeting(srcValue)) {
       *     return true;
       *   }
       * }
       *
       * var object = { 'greeting': 'hello' };
       * var source = { 'greeting': 'hi' };
       *
       * _.isMatchWith(object, source, customizer);
       * // => true
       */function isMatchWith(object,source,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return baseIsMatch(object,source,getMatchData(source),customizer);}/**
       * Checks if `value` is `NaN`.
       *
       * **Note:** This method is based on
       * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
       * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
       * `undefined` and other non-number values.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       * @example
       *
       * _.isNaN(NaN);
       * // => true
       *
       * _.isNaN(new Number(NaN));
       * // => true
       *
       * isNaN(undefined);
       * // => true
       *
       * _.isNaN(undefined);
       * // => false
       */function isNaN(value){// An `NaN` primitive is the only value that is not equal to itself.
  // Perform the `toStringTag` check first to avoid errors with some
  // ActiveX objects in IE.
  return isNumber(value)&&value!=+value;}/**
       * Checks if `value` is a pristine native function.
       *
       * **Note:** This method can't reliably detect native functions in the presence
       * of the core-js package because core-js circumvents this kind of detection.
       * Despite multiple requests, the core-js maintainer has made it clear: any
       * attempt to fix the detection will be obstructed. As a result, we're left
       * with little choice but to throw an error. Unfortunately, this also affects
       * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
       * which rely on core-js.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       * @example
       *
       * _.isNative(Array.prototype.push);
       * // => true
       *
       * _.isNative(_);
       * // => false
       */function isNative(value){if(isMaskable(value)){throw new Error(CORE_ERROR_TEXT);}return baseIsNative(value);}/**
       * Checks if `value` is `null`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
       * @example
       *
       * _.isNull(null);
       * // => true
       *
       * _.isNull(void 0);
       * // => false
       */function isNull(value){return value===null;}/**
       * Checks if `value` is `null` or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
       * @example
       *
       * _.isNil(null);
       * // => true
       *
       * _.isNil(void 0);
       * // => true
       *
       * _.isNil(NaN);
       * // => false
       */function isNil(value){return value==null;}/**
       * Checks if `value` is classified as a `Number` primitive or object.
       *
       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
       * classified as numbers, use the `_.isFinite` method.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a number, else `false`.
       * @example
       *
       * _.isNumber(3);
       * // => true
       *
       * _.isNumber(Number.MIN_VALUE);
       * // => true
       *
       * _.isNumber(Infinity);
       * // => true
       *
       * _.isNumber('3');
       * // => false
       */function isNumber(value){return typeof value=='number'||isObjectLike(value)&&baseGetTag(value)==numberTag;}/**
       * Checks if `value` is a plain object, that is, an object created by the
       * `Object` constructor or one with a `[[Prototype]]` of `null`.
       *
       * @static
       * @memberOf _
       * @since 0.8.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * _.isPlainObject(new Foo);
       * // => false
       *
       * _.isPlainObject([1, 2, 3]);
       * // => false
       *
       * _.isPlainObject({ 'x': 0, 'y': 0 });
       * // => true
       *
       * _.isPlainObject(Object.create(null));
       * // => true
       */function isPlainObject(value){if(!isObjectLike(value)||baseGetTag(value)!=objectTag){return false;}var proto=getPrototype(value);if(proto===null){return true;}var Ctor=hasOwnProperty.call(proto,'constructor')&&proto.constructor;return typeof Ctor=='function'&&Ctor instanceof Ctor&&funcToString.call(Ctor)==objectCtorString;}/**
       * Checks if `value` is classified as a `RegExp` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       * @example
       *
       * _.isRegExp(/abc/);
       * // => true
       *
       * _.isRegExp('/abc/');
       * // => false
       */var isRegExp=nodeIsRegExp?baseUnary(nodeIsRegExp):baseIsRegExp;/**
       * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
       * double precision number which isn't the result of a rounded unsafe integer.
       *
       * **Note:** This method is based on
       * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
       * @example
       *
       * _.isSafeInteger(3);
       * // => true
       *
       * _.isSafeInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isSafeInteger(Infinity);
       * // => false
       *
       * _.isSafeInteger('3');
       * // => false
       */function isSafeInteger(value){return isInteger(value)&&value>=-MAX_SAFE_INTEGER&&value<=MAX_SAFE_INTEGER;}/**
       * Checks if `value` is classified as a `Set` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       * @example
       *
       * _.isSet(new Set);
       * // => true
       *
       * _.isSet(new WeakSet);
       * // => false
       */var isSet=nodeIsSet?baseUnary(nodeIsSet):baseIsSet;/**
       * Checks if `value` is classified as a `String` primitive or object.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a string, else `false`.
       * @example
       *
       * _.isString('abc');
       * // => true
       *
       * _.isString(1);
       * // => false
       */function isString(value){return typeof value=='string'||!isArray(value)&&isObjectLike(value)&&baseGetTag(value)==stringTag;}/**
       * Checks if `value` is classified as a `Symbol` primitive or object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
       * @example
       *
       * _.isSymbol(Symbol.iterator);
       * // => true
       *
       * _.isSymbol('abc');
       * // => false
       */function isSymbol(value){return _typeof$1(value)=='symbol'||isObjectLike(value)&&baseGetTag(value)==symbolTag;}/**
       * Checks if `value` is classified as a typed array.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       * @example
       *
       * _.isTypedArray(new Uint8Array);
       * // => true
       *
       * _.isTypedArray([]);
       * // => false
       */var isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray;/**
       * Checks if `value` is `undefined`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
       * @example
       *
       * _.isUndefined(void 0);
       * // => true
       *
       * _.isUndefined(null);
       * // => false
       */function isUndefined(value){return value===undefined$1;}/**
       * Checks if `value` is classified as a `WeakMap` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
       * @example
       *
       * _.isWeakMap(new WeakMap);
       * // => true
       *
       * _.isWeakMap(new Map);
       * // => false
       */function isWeakMap(value){return isObjectLike(value)&&getTag(value)==weakMapTag;}/**
       * Checks if `value` is classified as a `WeakSet` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
       * @example
       *
       * _.isWeakSet(new WeakSet);
       * // => true
       *
       * _.isWeakSet(new Set);
       * // => false
       */function isWeakSet(value){return isObjectLike(value)&&baseGetTag(value)==weakSetTag;}/**
       * Checks if `value` is less than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       * @see _.gt
       * @example
       *
       * _.lt(1, 3);
       * // => true
       *
       * _.lt(3, 3);
       * // => false
       *
       * _.lt(3, 1);
       * // => false
       */var lt=createRelationalOperation(baseLt);/**
       * Checks if `value` is less than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than or equal to
       *  `other`, else `false`.
       * @see _.gte
       * @example
       *
       * _.lte(1, 3);
       * // => true
       *
       * _.lte(3, 3);
       * // => true
       *
       * _.lte(3, 1);
       * // => false
       */var lte=createRelationalOperation(function(value,other){return value<=other;});/**
       * Converts `value` to an array.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Array} Returns the converted array.
       * @example
       *
       * _.toArray({ 'a': 1, 'b': 2 });
       * // => [1, 2]
       *
       * _.toArray('abc');
       * // => ['a', 'b', 'c']
       *
       * _.toArray(1);
       * // => []
       *
       * _.toArray(null);
       * // => []
       */function toArray(value){if(!value){return [];}if(isArrayLike(value)){return isString(value)?stringToArray(value):copyArray(value);}if(symIterator&&value[symIterator]){return iteratorToArray(value[symIterator]());}var tag=getTag(value),func=tag==mapTag?mapToArray:tag==setTag?setToArray:values;return func(value);}/**
       * Converts `value` to a finite number.
       *
       * @static
       * @memberOf _
       * @since 4.12.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted number.
       * @example
       *
       * _.toFinite(3.2);
       * // => 3.2
       *
       * _.toFinite(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toFinite(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toFinite('3.2');
       * // => 3.2
       */function toFinite(value){if(!value){return value===0?value:0;}value=toNumber(value);if(value===INFINITY||value===-INFINITY){var sign=value<0?-1:1;return sign*MAX_INTEGER;}return value===value?value:0;}/**
       * Converts `value` to an integer.
       *
       * **Note:** This method is loosely based on
       * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toInteger(3.2);
       * // => 3
       *
       * _.toInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toInteger(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toInteger('3.2');
       * // => 3
       */function toInteger(value){var result=toFinite(value),remainder=result%1;return result===result?remainder?result-remainder:result:0;}/**
       * Converts `value` to an integer suitable for use as the length of an
       * array-like object.
       *
       * **Note:** This method is based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toLength(3.2);
       * // => 3
       *
       * _.toLength(Number.MIN_VALUE);
       * // => 0
       *
       * _.toLength(Infinity);
       * // => 4294967295
       *
       * _.toLength('3.2');
       * // => 3
       */function toLength(value){return value?baseClamp(toInteger(value),0,MAX_ARRAY_LENGTH):0;}/**
       * Converts `value` to a number.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       * @example
       *
       * _.toNumber(3.2);
       * // => 3.2
       *
       * _.toNumber(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toNumber(Infinity);
       * // => Infinity
       *
       * _.toNumber('3.2');
       * // => 3.2
       */function toNumber(value){if(typeof value=='number'){return value;}if(isSymbol(value)){return NAN;}if(isObject(value)){var other=typeof value.valueOf=='function'?value.valueOf():value;value=isObject(other)?other+'':other;}if(typeof value!='string'){return value===0?value:+value;}value=baseTrim(value);var isBinary=reIsBinary.test(value);return isBinary||reIsOctal.test(value)?freeParseInt(value.slice(2),isBinary?2:8):reIsBadHex.test(value)?NAN:+value;}/**
       * Converts `value` to a plain object flattening inherited enumerable string
       * keyed properties of `value` to own properties of the plain object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Object} Returns the converted plain object.
       * @example
       *
       * function Foo() {
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.assign({ 'a': 1 }, new Foo);
       * // => { 'a': 1, 'b': 2 }
       *
       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
       * // => { 'a': 1, 'b': 2, 'c': 3 }
       */function toPlainObject(value){return copyObject(value,keysIn(value));}/**
       * Converts `value` to a safe integer. A safe integer can be compared and
       * represented correctly.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toSafeInteger(3.2);
       * // => 3
       *
       * _.toSafeInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toSafeInteger(Infinity);
       * // => 9007199254740991
       *
       * _.toSafeInteger('3.2');
       * // => 3
       */function toSafeInteger(value){return value?baseClamp(toInteger(value),-MAX_SAFE_INTEGER,MAX_SAFE_INTEGER):value===0?value:0;}/**
       * Converts `value` to a string. An empty string is returned for `null`
       * and `undefined` values. The sign of `-0` is preserved.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.toString(null);
       * // => ''
       *
       * _.toString(-0);
       * // => '-0'
       *
       * _.toString([1, 2, 3]);
       * // => '1,2,3'
       */function toString(value){return value==null?'':baseToString(value);}/*------------------------------------------------------------------------*/ /**
       * Assigns own enumerable string keyed properties of source objects to the
       * destination object. Source objects are applied from left to right.
       * Subsequent sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object` and is loosely based on
       * [`Object.assign`](https://mdn.io/Object/assign).
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assignIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assign({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'c': 3 }
       */var assign=createAssigner(function(object,source){if(isPrototype(source)||isArrayLike(source)){copyObject(source,keys(source),object);return;}for(var key in source){if(hasOwnProperty.call(source,key)){assignValue(object,key,source[key]);}}});/**
       * This method is like `_.assign` except that it iterates over own and
       * inherited source properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extend
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assign
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assignIn({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
       */var assignIn=createAssigner(function(object,source){copyObject(source,keysIn(source),object);});/**
       * This method is like `_.assignIn` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extendWith
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignInWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */var assignInWith=createAssigner(function(object,source,srcIndex,customizer){copyObject(source,keysIn(source),object,customizer);});/**
       * This method is like `_.assign` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignInWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */var assignWith=createAssigner(function(object,source,srcIndex,customizer){copyObject(source,keys(source),object,customizer);});/**
       * Creates an array of values corresponding to `paths` of `object`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Array} Returns the picked values.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _.at(object, ['a[0].b.c', 'a[1]']);
       * // => [3, 4]
       */var at=flatRest(baseAt);/**
       * Creates an object that inherits from the `prototype` object. If a
       * `properties` object is given, its own enumerable string keyed properties
       * are assigned to the created object.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Object
       * @param {Object} prototype The object to inherit from.
       * @param {Object} [properties] The properties to assign to the object.
       * @returns {Object} Returns the new object.
       * @example
       *
       * function Shape() {
       *   this.x = 0;
       *   this.y = 0;
       * }
       *
       * function Circle() {
       *   Shape.call(this);
       * }
       *
       * Circle.prototype = _.create(Shape.prototype, {
       *   'constructor': Circle
       * });
       *
       * var circle = new Circle;
       * circle instanceof Circle;
       * // => true
       *
       * circle instanceof Shape;
       * // => true
       */function create(prototype,properties){var result=baseCreate(prototype);return properties==null?result:baseAssign(result,properties);}/**
       * Assigns own and inherited enumerable string keyed properties of source
       * objects to the destination object for all destination properties that
       * resolve to `undefined`. Source objects are applied from left to right.
       * Once a property is set, additional values of the same property are ignored.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaultsDeep
       * @example
       *
       * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */var defaults=baseRest(function(object,sources){object=Object(object);var index=-1;var length=sources.length;var guard=length>2?sources[2]:undefined$1;if(guard&&isIterateeCall(sources[0],sources[1],guard)){length=1;}while(++index<length){var source=sources[index];var props=keysIn(source);var propsIndex=-1;var propsLength=props.length;while(++propsIndex<propsLength){var key=props[propsIndex];var value=object[key];if(value===undefined$1||eq(value,objectProto[key])&&!hasOwnProperty.call(object,key)){object[key]=source[key];}}}return object;});/**
       * This method is like `_.defaults` except that it recursively assigns
       * default properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaults
       * @example
       *
       * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
       * // => { 'a': { 'b': 2, 'c': 3 } }
       */var defaultsDeep=baseRest(function(args){args.push(undefined$1,customDefaultsMerge);return apply(mergeWith,undefined$1,args);});/**
       * This method is like `_.find` except that it returns the key of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findKey(users, function(o) { return o.age < 40; });
       * // => 'barney' (iteration order is not guaranteed)
       *
       * // The `_.matches` iteratee shorthand.
       * _.findKey(users, { 'age': 1, 'active': true });
       * // => 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findKey(users, 'active');
       * // => 'barney'
       */function findKey(object,predicate){return baseFindKey(object,getIteratee(predicate,3),baseForOwn);}/**
       * This method is like `_.findKey` except that it iterates over elements of
       * a collection in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findLastKey(users, function(o) { return o.age < 40; });
       * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastKey(users, { 'age': 36, 'active': true });
       * // => 'barney'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastKey(users, 'active');
       * // => 'pebbles'
       */function findLastKey(object,predicate){return baseFindKey(object,getIteratee(predicate,3),baseForOwnRight);}/**
       * Iterates over own and inherited enumerable string keyed properties of an
       * object and invokes `iteratee` for each property. The iteratee is invoked
       * with three arguments: (value, key, object). Iteratee functions may exit
       * iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forInRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forIn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
       */function forIn(object,iteratee){return object==null?object:baseFor(object,getIteratee(iteratee,3),keysIn);}/**
       * This method is like `_.forIn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forInRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
       */function forInRight(object,iteratee){return object==null?object:baseForRight(object,getIteratee(iteratee,3),keysIn);}/**
       * Iterates over own enumerable string keyed properties of an object and
       * invokes `iteratee` for each property. The iteratee is invoked with three
       * arguments: (value, key, object). Iteratee functions may exit iteration
       * early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwnRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */function forOwn(object,iteratee){return object&&baseForOwn(object,getIteratee(iteratee,3));}/**
       * This method is like `_.forOwn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwnRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
       */function forOwnRight(object,iteratee){return object&&baseForOwnRight(object,getIteratee(iteratee,3));}/**
       * Creates an array of function property names from own enumerable properties
       * of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functionsIn
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functions(new Foo);
       * // => ['a', 'b']
       */function functions(object){return object==null?[]:baseFunctions(object,keys(object));}/**
       * Creates an array of function property names from own and inherited
       * enumerable properties of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functions
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functionsIn(new Foo);
       * // => ['a', 'b', 'c']
       */function functionsIn(object){return object==null?[]:baseFunctions(object,keysIn(object));}/**
       * Gets the value at `path` of `object`. If the resolved value is
       * `undefined`, the `defaultValue` is returned in its place.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.get(object, 'a[0].b.c');
       * // => 3
       *
       * _.get(object, ['a', '0', 'b', 'c']);
       * // => 3
       *
       * _.get(object, 'a.b.c', 'default');
       * // => 'default'
       */function get(object,path,defaultValue){var result=object==null?undefined$1:baseGet(object,path);return result===undefined$1?defaultValue:result;}/**
       * Checks if `path` is a direct property of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = { 'a': { 'b': 2 } };
       * var other = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.has(object, 'a');
       * // => true
       *
       * _.has(object, 'a.b');
       * // => true
       *
       * _.has(object, ['a', 'b']);
       * // => true
       *
       * _.has(other, 'a');
       * // => false
       */function has(object,path){return object!=null&&hasPath(object,path,baseHas);}/**
       * Checks if `path` is a direct or inherited property of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.hasIn(object, 'a');
       * // => true
       *
       * _.hasIn(object, 'a.b');
       * // => true
       *
       * _.hasIn(object, ['a', 'b']);
       * // => true
       *
       * _.hasIn(object, 'b');
       * // => false
       */function hasIn(object,path){return object!=null&&hasPath(object,path,baseHasIn);}/**
       * Creates an object composed of the inverted keys and values of `object`.
       * If `object` contains duplicate values, subsequent values overwrite
       * property assignments of previous values.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Object
       * @param {Object} object The object to invert.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invert(object);
       * // => { '1': 'c', '2': 'b' }
       */var invert=createInverter(function(result,value,key){if(value!=null&&typeof value.toString!='function'){value=nativeObjectToString.call(value);}result[value]=key;},constant(identity));/**
       * This method is like `_.invert` except that the inverted object is generated
       * from the results of running each element of `object` thru `iteratee`. The
       * corresponding inverted value of each inverted key is an array of keys
       * responsible for generating the inverted value. The iteratee is invoked
       * with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Object
       * @param {Object} object The object to invert.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invertBy(object);
       * // => { '1': ['a', 'c'], '2': ['b'] }
       *
       * _.invertBy(object, function(value) {
       *   return 'group' + value;
       * });
       * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
       */var invertBy=createInverter(function(result,value,key){if(value!=null&&typeof value.toString!='function'){value=nativeObjectToString.call(value);}if(hasOwnProperty.call(result,value)){result[value].push(key);}else {result[value]=[key];}},getIteratee);/**
       * Invokes the method at `path` of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
       *
       * _.invoke(object, 'a[0].b.c.slice', 1, 3);
       * // => [2, 3]
       */var invoke=baseRest(baseInvoke);/**
       * Creates an array of the own enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects. See the
       * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * for more details.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keys(new Foo);
       * // => ['a', 'b'] (iteration order is not guaranteed)
       *
       * _.keys('hi');
       * // => ['0', '1']
       */function keys(object){return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object);}/**
       * Creates an array of the own and inherited enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keysIn(new Foo);
       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
       */function keysIn(object){return isArrayLike(object)?arrayLikeKeys(object,true):baseKeysIn(object);}/**
       * The opposite of `_.mapValues`; this method creates an object with the
       * same values as `object` and keys generated by running each own enumerable
       * string keyed property of `object` thru `iteratee`. The iteratee is invoked
       * with three arguments: (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapValues
       * @example
       *
       * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
       *   return key + value;
       * });
       * // => { 'a1': 1, 'b2': 2 }
       */function mapKeys(object,iteratee){var result={};iteratee=getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){baseAssignValue(result,iteratee(value,key,object),value);});return result;}/**
       * Creates an object with the same keys as `object` and values generated
       * by running each own enumerable string keyed property of `object` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapKeys
       * @example
       *
       * var users = {
       *   'fred':    { 'user': 'fred',    'age': 40 },
       *   'pebbles': { 'user': 'pebbles', 'age': 1 }
       * };
       *
       * _.mapValues(users, function(o) { return o.age; });
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       *
       * // The `_.property` iteratee shorthand.
       * _.mapValues(users, 'age');
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       */function mapValues(object,iteratee){var result={};iteratee=getIteratee(iteratee,3);baseForOwn(object,function(value,key,object){baseAssignValue(result,key,iteratee(value,key,object));});return result;}/**
       * This method is like `_.assign` except that it recursively merges own and
       * inherited enumerable string keyed properties of source objects into the
       * destination object. Source properties that resolve to `undefined` are
       * skipped if a destination value exists. Array and plain object properties
       * are merged recursively. Other objects and value types are overridden by
       * assignment. Source objects are applied from left to right. Subsequent
       * sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {
       *   'a': [{ 'b': 2 }, { 'd': 4 }]
       * };
       *
       * var other = {
       *   'a': [{ 'c': 3 }, { 'e': 5 }]
       * };
       *
       * _.merge(object, other);
       * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
       */var merge=createAssigner(function(object,source,srcIndex){baseMerge(object,source,srcIndex);});/**
       * This method is like `_.merge` except that it accepts `customizer` which
       * is invoked to produce the merged values of the destination and source
       * properties. If `customizer` returns `undefined`, merging is handled by the
       * method instead. The `customizer` is invoked with six arguments:
       * (objValue, srcValue, key, object, source, stack).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} customizer The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   if (_.isArray(objValue)) {
       *     return objValue.concat(srcValue);
       *   }
       * }
       *
       * var object = { 'a': [1], 'b': [2] };
       * var other = { 'a': [3], 'b': [4] };
       *
       * _.mergeWith(object, other, customizer);
       * // => { 'a': [1, 3], 'b': [2, 4] }
       */var mergeWith=createAssigner(function(object,source,srcIndex,customizer){baseMerge(object,source,srcIndex,customizer);});/**
       * The opposite of `_.pick`; this method creates an object composed of the
       * own and inherited enumerable property paths of `object` that are not omitted.
       *
       * **Note:** This method is considerably slower than `_.pick`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [paths] The property paths to omit.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omit(object, ['a', 'c']);
       * // => { 'b': '2' }
       */var omit=flatRest(function(object,paths){var result={};if(object==null){return result;}var isDeep=false;paths=arrayMap(paths,function(path){path=castPath(path,object);isDeep||(isDeep=path.length>1);return path;});copyObject(object,getAllKeysIn(object),result);if(isDeep){result=baseClone(result,CLONE_DEEP_FLAG|CLONE_FLAT_FLAG|CLONE_SYMBOLS_FLAG,customOmitClone);}var length=paths.length;while(length--){baseUnset(result,paths[length]);}return result;});/**
       * The opposite of `_.pickBy`; this method creates an object composed of
       * the own and inherited enumerable string keyed properties of `object` that
       * `predicate` doesn't return truthy for. The predicate is invoked with two
       * arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omitBy(object, _.isNumber);
       * // => { 'b': '2' }
       */function omitBy(object,predicate){return pickBy(object,negate(getIteratee(predicate)));}/**
       * Creates an object composed of the picked `object` properties.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pick(object, ['a', 'c']);
       * // => { 'a': 1, 'c': 3 }
       */var pick=flatRest(function(object,paths){return object==null?{}:basePick(object,paths);});/**
       * Creates an object composed of the `object` properties `predicate` returns
       * truthy for. The predicate is invoked with two arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pickBy(object, _.isNumber);
       * // => { 'a': 1, 'c': 3 }
       */function pickBy(object,predicate){if(object==null){return {};}var props=arrayMap(getAllKeysIn(object),function(prop){return [prop];});predicate=getIteratee(predicate);return basePickBy(object,props,function(value,path){return predicate(value,path[0]);});}/**
       * This method is like `_.get` except that if the resolved value is a
       * function it's invoked with the `this` binding of its parent object and
       * its result is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to resolve.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
       *
       * _.result(object, 'a[0].b.c1');
       * // => 3
       *
       * _.result(object, 'a[0].b.c2');
       * // => 4
       *
       * _.result(object, 'a[0].b.c3', 'default');
       * // => 'default'
       *
       * _.result(object, 'a[0].b.c3', _.constant('default'));
       * // => 'default'
       */function result(object,path,defaultValue){path=castPath(path,object);var index=-1,length=path.length;// Ensure the loop is entered when path is empty.
  if(!length){length=1;object=undefined$1;}while(++index<length){var value=object==null?undefined$1:object[toKey(path[index])];if(value===undefined$1){index=length;value=defaultValue;}object=isFunction(value)?value.call(object):value;}return object;}/**
       * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
       * it's created. Arrays are created for missing index properties while objects
       * are created for all other missing properties. Use `_.setWith` to customize
       * `path` creation.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.set(object, 'a[0].b.c', 4);
       * console.log(object.a[0].b.c);
       * // => 4
       *
       * _.set(object, ['x', '0', 'y', 'z'], 5);
       * console.log(object.x[0].y.z);
       * // => 5
       */function set(object,path,value){return object==null?object:baseSet(object,path,value);}/**
       * This method is like `_.set` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.setWith(object, '[0][1]', 'a', Object);
       * // => { '0': { '1': 'a' } }
       */function setWith(object,path,value,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return object==null?object:baseSet(object,path,value,customizer);}/**
       * Creates an array of own enumerable string keyed-value pairs for `object`
       * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
       * entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entries
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairs(new Foo);
       * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
       */var toPairs=createToPairs(keys);/**
       * Creates an array of own and inherited enumerable string keyed-value pairs
       * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
       * or set, its entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entriesIn
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairsIn(new Foo);
       * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
       */var toPairsIn=createToPairs(keysIn);/**
       * An alternative to `_.reduce`; this method transforms `object` to a new
       * `accumulator` object which is the result of running each of its own
       * enumerable string keyed properties thru `iteratee`, with each invocation
       * potentially mutating the `accumulator` object. If `accumulator` is not
       * provided, a new object with the same `[[Prototype]]` will be used. The
       * iteratee is invoked with four arguments: (accumulator, value, key, object).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The custom accumulator value.
       * @returns {*} Returns the accumulated value.
       * @example
       *
       * _.transform([2, 3, 4], function(result, n) {
       *   result.push(n *= n);
       *   return n % 2 == 0;
       * }, []);
       * // => [4, 9]
       *
       * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] }
       */function transform(object,iteratee,accumulator){var isArr=isArray(object),isArrLike=isArr||isBuffer(object)||isTypedArray(object);iteratee=getIteratee(iteratee,4);if(accumulator==null){var Ctor=object&&object.constructor;if(isArrLike){accumulator=isArr?new Ctor():[];}else if(isObject(object)){accumulator=isFunction(Ctor)?baseCreate(getPrototype(object)):{};}else {accumulator={};}}(isArrLike?arrayEach:baseForOwn)(object,function(value,index,object){return iteratee(accumulator,value,index,object);});return accumulator;}/**
       * Removes the property at `path` of `object`.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 7 } }] };
       * _.unset(object, 'a[0].b.c');
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       *
       * _.unset(object, ['a', '0', 'b', 'c']);
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       */function unset(object,path){return object==null?true:baseUnset(object,path);}/**
       * This method is like `_.set` except that accepts `updater` to produce the
       * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
       * is invoked with one argument: (value).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.update(object, 'a[0].b.c', function(n) { return n * n; });
       * console.log(object.a[0].b.c);
       * // => 9
       *
       * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
       * console.log(object.x[0].y.z);
       * // => 0
       */function update(object,path,updater){return object==null?object:baseUpdate(object,path,castFunction(updater));}/**
       * This method is like `_.update` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.updateWith(object, '[0][1]', _.constant('a'), Object);
       * // => { '0': { '1': 'a' } }
       */function updateWith(object,path,updater,customizer){customizer=typeof customizer=='function'?customizer:undefined$1;return object==null?object:baseUpdate(object,path,castFunction(updater),customizer);}/**
       * Creates an array of the own enumerable string keyed property values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.values(new Foo);
       * // => [1, 2] (iteration order is not guaranteed)
       *
       * _.values('hi');
       * // => ['h', 'i']
       */function values(object){return object==null?[]:baseValues(object,keys(object));}/**
       * Creates an array of the own and inherited enumerable string keyed property
       * values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.valuesIn(new Foo);
       * // => [1, 2, 3] (iteration order is not guaranteed)
       */function valuesIn(object){return object==null?[]:baseValues(object,keysIn(object));}/*------------------------------------------------------------------------*/ /**
       * Clamps `number` within the inclusive `lower` and `upper` bounds.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Number
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       * @example
       *
       * _.clamp(-10, -5, 5);
       * // => -5
       *
       * _.clamp(10, -5, 5);
       * // => 5
       */function clamp(number,lower,upper){if(upper===undefined$1){upper=lower;lower=undefined$1;}if(upper!==undefined$1){upper=toNumber(upper);upper=upper===upper?upper:0;}if(lower!==undefined$1){lower=toNumber(lower);lower=lower===lower?lower:0;}return baseClamp(toNumber(number),lower,upper);}/**
       * Checks if `n` is between `start` and up to, but not including, `end`. If
       * `end` is not specified, it's set to `start` with `start` then set to `0`.
       * If `start` is greater than `end` the params are swapped to support
       * negative ranges.
       *
       * @static
       * @memberOf _
       * @since 3.3.0
       * @category Number
       * @param {number} number The number to check.
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       * @see _.range, _.rangeRight
       * @example
       *
       * _.inRange(3, 2, 4);
       * // => true
       *
       * _.inRange(4, 8);
       * // => true
       *
       * _.inRange(4, 2);
       * // => false
       *
       * _.inRange(2, 2);
       * // => false
       *
       * _.inRange(1.2, 2);
       * // => true
       *
       * _.inRange(5.2, 4);
       * // => false
       *
       * _.inRange(-3, -2, -6);
       * // => true
       */function inRange(number,start,end){start=toFinite(start);if(end===undefined$1){end=start;start=0;}else {end=toFinite(end);}number=toNumber(number);return baseInRange(number,start,end);}/**
       * Produces a random number between the inclusive `lower` and `upper` bounds.
       * If only one argument is provided a number between `0` and the given number
       * is returned. If `floating` is `true`, or either `lower` or `upper` are
       * floats, a floating-point number is returned instead of an integer.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Number
       * @param {number} [lower=0] The lower bound.
       * @param {number} [upper=1] The upper bound.
       * @param {boolean} [floating] Specify returning a floating-point number.
       * @returns {number} Returns the random number.
       * @example
       *
       * _.random(0, 5);
       * // => an integer between 0 and 5
       *
       * _.random(5);
       * // => also an integer between 0 and 5
       *
       * _.random(5, true);
       * // => a floating-point number between 0 and 5
       *
       * _.random(1.2, 5.2);
       * // => a floating-point number between 1.2 and 5.2
       */function random(lower,upper,floating){if(floating&&typeof floating!='boolean'&&isIterateeCall(lower,upper,floating)){upper=floating=undefined$1;}if(floating===undefined$1){if(typeof upper=='boolean'){floating=upper;upper=undefined$1;}else if(typeof lower=='boolean'){floating=lower;lower=undefined$1;}}if(lower===undefined$1&&upper===undefined$1){lower=0;upper=1;}else {lower=toFinite(lower);if(upper===undefined$1){upper=lower;lower=0;}else {upper=toFinite(upper);}}if(lower>upper){var temp=lower;lower=upper;upper=temp;}if(floating||lower%1||upper%1){var rand=nativeRandom();return nativeMin(lower+rand*(upper-lower+freeParseFloat('1e-'+((rand+'').length-1))),upper);}return baseRandom(lower,upper);}/*------------------------------------------------------------------------*/ /**
       * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the camel cased string.
       * @example
       *
       * _.camelCase('Foo Bar');
       * // => 'fooBar'
       *
       * _.camelCase('--foo-bar--');
       * // => 'fooBar'
       *
       * _.camelCase('__FOO_BAR__');
       * // => 'fooBar'
       */var camelCase=createCompounder(function(result,word,index){word=word.toLowerCase();return result+(index?capitalize(word):word);});/**
       * Converts the first character of `string` to upper case and the remaining
       * to lower case.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to capitalize.
       * @returns {string} Returns the capitalized string.
       * @example
       *
       * _.capitalize('FRED');
       * // => 'Fred'
       */function capitalize(string){return upperFirst(toString(string).toLowerCase());}/**
       * Deburrs `string` by converting
       * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
       * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
       * letters to basic Latin letters and removing
       * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to deburr.
       * @returns {string} Returns the deburred string.
       * @example
       *
       * _.deburr('déjà vu');
       * // => 'deja vu'
       */function deburr(string){string=toString(string);return string&&string.replace(reLatin,deburrLetter).replace(reComboMark,'');}/**
       * Checks if `string` ends with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=string.length] The position to search up to.
       * @returns {boolean} Returns `true` if `string` ends with `target`,
       *  else `false`.
       * @example
       *
       * _.endsWith('abc', 'c');
       * // => true
       *
       * _.endsWith('abc', 'b');
       * // => false
       *
       * _.endsWith('abc', 'b', 2);
       * // => true
       */function endsWith(string,target,position){string=toString(string);target=baseToString(target);var length=string.length;position=position===undefined$1?length:baseClamp(toInteger(position),0,length);var end=position;position-=target.length;return position>=0&&string.slice(position,end)==target;}/**
       * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
       * corresponding HTML entities.
       *
       * **Note:** No other characters are escaped. To escape additional
       * characters use a third-party library like [_he_](https://mths.be/he).
       *
       * Though the ">" character is escaped for symmetry, characters like
       * ">" and "/" don't need escaping in HTML and have no special meaning
       * unless they're part of a tag or unquoted attribute value. See
       * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
       * (under "semi-related fun fact") for more details.
       *
       * When working with HTML you should always
       * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
       * XSS vectors.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escape('fred, barney, & pebbles');
       * // => 'fred, barney, &amp; pebbles'
       */function escape(string){string=toString(string);return string&&reHasUnescapedHtml.test(string)?string.replace(reUnescapedHtml,escapeHtmlChar):string;}/**
       * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
       * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escapeRegExp('[lodash](https://lodash.com/)');
       * // => '\[lodash\]\(https://lodash\.com/\)'
       */function escapeRegExp(string){string=toString(string);return string&&reHasRegExpChar.test(string)?string.replace(reRegExpChar,'\\$&'):string;}/**
       * Converts `string` to
       * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the kebab cased string.
       * @example
       *
       * _.kebabCase('Foo Bar');
       * // => 'foo-bar'
       *
       * _.kebabCase('fooBar');
       * // => 'foo-bar'
       *
       * _.kebabCase('__FOO_BAR__');
       * // => 'foo-bar'
       */var kebabCase=createCompounder(function(result,word,index){return result+(index?'-':'')+word.toLowerCase();});/**
       * Converts `string`, as space separated words, to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.lowerCase('--Foo-Bar--');
       * // => 'foo bar'
       *
       * _.lowerCase('fooBar');
       * // => 'foo bar'
       *
       * _.lowerCase('__FOO_BAR__');
       * // => 'foo bar'
       */var lowerCase=createCompounder(function(result,word,index){return result+(index?' ':'')+word.toLowerCase();});/**
       * Converts the first character of `string` to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.lowerFirst('Fred');
       * // => 'fred'
       *
       * _.lowerFirst('FRED');
       * // => 'fRED'
       */var lowerFirst=createCaseFirst('toLowerCase');/**
       * Pads `string` on the left and right sides if it's shorter than `length`.
       * Padding characters are truncated if they can't be evenly divided by `length`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.pad('abc', 8);
       * // => '  abc   '
       *
       * _.pad('abc', 8, '_-');
       * // => '_-abc_-_'
       *
       * _.pad('abc', 3);
       * // => 'abc'
       */function pad(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;if(!length||strLength>=length){return string;}var mid=(length-strLength)/2;return createPadding(nativeFloor(mid),chars)+string+createPadding(nativeCeil(mid),chars);}/**
       * Pads `string` on the right side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padEnd('abc', 6);
       * // => 'abc   '
       *
       * _.padEnd('abc', 6, '_-');
       * // => 'abc_-_'
       *
       * _.padEnd('abc', 3);
       * // => 'abc'
       */function padEnd(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;return length&&strLength<length?string+createPadding(length-strLength,chars):string;}/**
       * Pads `string` on the left side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padStart('abc', 6);
       * // => '   abc'
       *
       * _.padStart('abc', 6, '_-');
       * // => '_-_abc'
       *
       * _.padStart('abc', 3);
       * // => 'abc'
       */function padStart(string,length,chars){string=toString(string);length=toInteger(length);var strLength=length?stringSize(string):0;return length&&strLength<length?createPadding(length-strLength,chars)+string:string;}/**
       * Converts `string` to an integer of the specified radix. If `radix` is
       * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
       * hexadecimal, in which case a `radix` of `16` is used.
       *
       * **Note:** This method aligns with the
       * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category String
       * @param {string} string The string to convert.
       * @param {number} [radix=10] The radix to interpret `value` by.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.parseInt('08');
       * // => 8
       *
       * _.map(['6', '08', '10'], _.parseInt);
       * // => [6, 8, 10]
       */function parseInt(string,radix,guard){if(guard||radix==null){radix=0;}else if(radix){radix=+radix;}return nativeParseInt(toString(string).replace(reTrimStart,''),radix||0);}/**
       * Repeats the given string `n` times.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to repeat.
       * @param {number} [n=1] The number of times to repeat the string.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the repeated string.
       * @example
       *
       * _.repeat('*', 3);
       * // => '***'
       *
       * _.repeat('abc', 2);
       * // => 'abcabc'
       *
       * _.repeat('abc', 0);
       * // => ''
       */function repeat(string,n,guard){if(guard?isIterateeCall(string,n,guard):n===undefined$1){n=1;}else {n=toInteger(n);}return baseRepeat(toString(string),n);}/**
       * Replaces matches for `pattern` in `string` with `replacement`.
       *
       * **Note:** This method is based on
       * [`String#replace`](https://mdn.io/String/replace).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to modify.
       * @param {RegExp|string} pattern The pattern to replace.
       * @param {Function|string} replacement The match replacement.
       * @returns {string} Returns the modified string.
       * @example
       *
       * _.replace('Hi Fred', 'Fred', 'Barney');
       * // => 'Hi Barney'
       */function replace(){var args=arguments,string=toString(args[0]);return args.length<3?string:string.replace(args[1],args[2]);}/**
       * Converts `string` to
       * [snake case](https://en.wikipedia.org/wiki/Snake_case).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the snake cased string.
       * @example
       *
       * _.snakeCase('Foo Bar');
       * // => 'foo_bar'
       *
       * _.snakeCase('fooBar');
       * // => 'foo_bar'
       *
       * _.snakeCase('--FOO-BAR--');
       * // => 'foo_bar'
       */var snakeCase=createCompounder(function(result,word,index){return result+(index?'_':'')+word.toLowerCase();});/**
       * Splits `string` by `separator`.
       *
       * **Note:** This method is based on
       * [`String#split`](https://mdn.io/String/split).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to split.
       * @param {RegExp|string} separator The separator pattern to split by.
       * @param {number} [limit] The length to truncate results to.
       * @returns {Array} Returns the string segments.
       * @example
       *
       * _.split('a-b-c', '-', 2);
       * // => ['a', 'b']
       */function split(string,separator,limit){if(limit&&typeof limit!='number'&&isIterateeCall(string,separator,limit)){separator=limit=undefined$1;}limit=limit===undefined$1?MAX_ARRAY_LENGTH:limit>>>0;if(!limit){return [];}string=toString(string);if(string&&(typeof separator=='string'||separator!=null&&!isRegExp(separator))){separator=baseToString(separator);if(!separator&&hasUnicode(string)){return castSlice(stringToArray(string),0,limit);}}return string.split(separator,limit);}/**
       * Converts `string` to
       * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
       *
       * @static
       * @memberOf _
       * @since 3.1.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the start cased string.
       * @example
       *
       * _.startCase('--foo-bar--');
       * // => 'Foo Bar'
       *
       * _.startCase('fooBar');
       * // => 'Foo Bar'
       *
       * _.startCase('__FOO_BAR__');
       * // => 'FOO BAR'
       */var startCase=createCompounder(function(result,word,index){return result+(index?' ':'')+upperFirst(word);});/**
       * Checks if `string` starts with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=0] The position to search from.
       * @returns {boolean} Returns `true` if `string` starts with `target`,
       *  else `false`.
       * @example
       *
       * _.startsWith('abc', 'a');
       * // => true
       *
       * _.startsWith('abc', 'b');
       * // => false
       *
       * _.startsWith('abc', 'b', 1);
       * // => true
       */function startsWith(string,target,position){string=toString(string);position=position==null?0:baseClamp(toInteger(position),0,string.length);target=baseToString(target);return string.slice(position,position+target.length)==target;}/**
       * Creates a compiled template function that can interpolate data properties
       * in "interpolate" delimiters, HTML-escape interpolated data properties in
       * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
       * properties may be accessed as free variables in the template. If a setting
       * object is given, it takes precedence over `_.templateSettings` values.
       *
       * **Note:** In the development build `_.template` utilizes
       * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
       * for easier debugging.
       *
       * For more information on precompiling templates see
       * [lodash's custom builds documentation](https://lodash.com/custom-builds).
       *
       * For more information on Chrome extension sandboxes see
       * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The template string.
       * @param {Object} [options={}] The options object.
       * @param {RegExp} [options.escape=_.templateSettings.escape]
       *  The HTML "escape" delimiter.
       * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
       *  The "evaluate" delimiter.
       * @param {Object} [options.imports=_.templateSettings.imports]
       *  An object to import into the template as free variables.
       * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
       *  The "interpolate" delimiter.
       * @param {string} [options.sourceURL='lodash.templateSources[n]']
       *  The sourceURL of the compiled template.
       * @param {string} [options.variable='obj']
       *  The data object variable name.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the compiled template function.
       * @example
       *
       * // Use the "interpolate" delimiter to create a compiled template.
       * var compiled = _.template('hello <%= user %>!');
       * compiled({ 'user': 'fred' });
       * // => 'hello fred!'
       *
       * // Use the HTML "escape" delimiter to escape data property values.
       * var compiled = _.template('<b><%- value %></b>');
       * compiled({ 'value': '<script>' });
       * // => '<b>&lt;script&gt;</b>'
       *
       * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
       * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the internal `print` function in "evaluate" delimiters.
       * var compiled = _.template('<% print("hello " + user); %>!');
       * compiled({ 'user': 'barney' });
       * // => 'hello barney!'
       *
       * // Use the ES template literal delimiter as an "interpolate" delimiter.
       * // Disable support by replacing the "interpolate" delimiter.
       * var compiled = _.template('hello ${ user }!');
       * compiled({ 'user': 'pebbles' });
       * // => 'hello pebbles!'
       *
       * // Use backslashes to treat delimiters as plain text.
       * var compiled = _.template('<%= "\\<%- value %\\>" %>');
       * compiled({ 'value': 'ignored' });
       * // => '<%- value %>'
       *
       * // Use the `imports` option to import `jQuery` as `jq`.
       * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
       * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the `sourceURL` option to specify a custom sourceURL for the template.
       * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
       * compiled(data);
       * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
       *
       * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
       * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
       * compiled.source;
       * // => function(data) {
       * //   var __t, __p = '';
       * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
       * //   return __p;
       * // }
       *
       * // Use custom template delimiters.
       * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
       * var compiled = _.template('hello {{ user }}!');
       * compiled({ 'user': 'mustache' });
       * // => 'hello mustache!'
       *
       * // Use the `source` property to inline compiled templates for meaningful
       * // line numbers in error messages and stack traces.
       * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
       *   var JST = {\
       *     "main": ' + _.template(mainText).source + '\
       *   };\
       * ');
       */function template(string,options,guard){// Based on John Resig's `tmpl` implementation
  // (http://ejohn.org/blog/javascript-micro-templating/)
  // and Laura Doktorova's doT.js (https://github.com/olado/doT).
  var settings=lodash.templateSettings;if(guard&&isIterateeCall(string,options,guard)){options=undefined$1;}string=toString(string);options=assignInWith({},options,settings,customDefaultsAssignIn);var imports=assignInWith({},options.imports,settings.imports,customDefaultsAssignIn),importsKeys=keys(imports),importsValues=baseValues(imports,importsKeys);var isEscaping,isEvaluating,index=0,interpolate=options.interpolate||reNoMatch,source="__p += '";// Compile the regexp to match each delimiter.
  var reDelimiters=RegExp((options.escape||reNoMatch).source+'|'+interpolate.source+'|'+(interpolate===reInterpolate?reEsTemplate:reNoMatch).source+'|'+(options.evaluate||reNoMatch).source+'|$','g');// Use a sourceURL for easier debugging.
  // The sourceURL gets injected into the source that's eval-ed, so be careful
  // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
  // and escape the comment, thus injecting code that gets evaled.
  var sourceURL='//# sourceURL='+(hasOwnProperty.call(options,'sourceURL')?(options.sourceURL+'').replace(/\s/g,' '):'lodash.templateSources['+ ++templateCounter+']')+'\n';string.replace(reDelimiters,function(match,escapeValue,interpolateValue,esTemplateValue,evaluateValue,offset){interpolateValue||(interpolateValue=esTemplateValue);// Escape characters that can't be included in string literals.
  source+=string.slice(index,offset).replace(reUnescapedString,escapeStringChar);// Replace delimiters with snippets.
  if(escapeValue){isEscaping=true;source+="' +\n__e("+escapeValue+") +\n'";}if(evaluateValue){isEvaluating=true;source+="';\n"+evaluateValue+";\n__p += '";}if(interpolateValue){source+="' +\n((__t = ("+interpolateValue+")) == null ? '' : __t) +\n'";}index=offset+match.length;// The JS engine embedded in Adobe products needs `match` returned in
  // order to produce the correct `offset` value.
  return match;});source+="';\n";// If `variable` is not specified wrap a with-statement around the generated
  // code to add the data object to the top of the scope chain.
  var variable=hasOwnProperty.call(options,'variable')&&options.variable;if(!variable){source='with (obj) {\n'+source+'\n}\n';}// Throw an error if a forbidden character was found in `variable`, to prevent
  // potential command injection attacks.
  else if(reForbiddenIdentifierChars.test(variable)){throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);}// Cleanup code by stripping empty strings.
  source=(isEvaluating?source.replace(reEmptyStringLeading,''):source).replace(reEmptyStringMiddle,'$1').replace(reEmptyStringTrailing,'$1;');// Frame code as the function body.
  source='function('+(variable||'obj')+') {\n'+(variable?'':'obj || (obj = {});\n')+"var __t, __p = ''"+(isEscaping?', __e = _.escape':'')+(isEvaluating?', __j = Array.prototype.join;\n'+"function print() { __p += __j.call(arguments, '') }\n":';\n')+source+'return __p\n}';var result=attempt(function(){return Function(importsKeys,sourceURL+'return '+source).apply(undefined$1,importsValues);});// Provide the compiled function's source by its `toString` method or
  // the `source` property as a convenience for inlining compiled templates.
  result.source=source;if(isError(result)){throw result;}return result;}/**
       * Converts `string`, as a whole, to lower case just like
       * [String#toLowerCase](https://mdn.io/toLowerCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.toLower('--Foo-Bar--');
       * // => '--foo-bar--'
       *
       * _.toLower('fooBar');
       * // => 'foobar'
       *
       * _.toLower('__FOO_BAR__');
       * // => '__foo_bar__'
       */function toLower(value){return toString(value).toLowerCase();}/**
       * Converts `string`, as a whole, to upper case just like
       * [String#toUpperCase](https://mdn.io/toUpperCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.toUpper('--foo-bar--');
       * // => '--FOO-BAR--'
       *
       * _.toUpper('fooBar');
       * // => 'FOOBAR'
       *
       * _.toUpper('__foo_bar__');
       * // => '__FOO_BAR__'
       */function toUpper(value){return toString(value).toUpperCase();}/**
       * Removes leading and trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trim('  abc  ');
       * // => 'abc'
       *
       * _.trim('-_-abc-_-', '_-');
       * // => 'abc'
       *
       * _.map(['  foo  ', '  bar  '], _.trim);
       * // => ['foo', 'bar']
       */function trim(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined$1)){return baseTrim(string);}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),chrSymbols=stringToArray(chars),start=charsStartIndex(strSymbols,chrSymbols),end=charsEndIndex(strSymbols,chrSymbols)+1;return castSlice(strSymbols,start,end).join('');}/**
       * Removes trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimEnd('  abc  ');
       * // => '  abc'
       *
       * _.trimEnd('-_-abc-_-', '_-');
       * // => '-_-abc'
       */function trimEnd(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined$1)){return string.slice(0,trimmedEndIndex(string)+1);}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),end=charsEndIndex(strSymbols,stringToArray(chars))+1;return castSlice(strSymbols,0,end).join('');}/**
       * Removes leading whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimStart('  abc  ');
       * // => 'abc  '
       *
       * _.trimStart('-_-abc-_-', '_-');
       * // => 'abc-_-'
       */function trimStart(string,chars,guard){string=toString(string);if(string&&(guard||chars===undefined$1)){return string.replace(reTrimStart,'');}if(!string||!(chars=baseToString(chars))){return string;}var strSymbols=stringToArray(string),start=charsStartIndex(strSymbols,stringToArray(chars));return castSlice(strSymbols,start).join('');}/**
       * Truncates `string` if it's longer than the given maximum string length.
       * The last characters of the truncated string are replaced with the omission
       * string which defaults to "...".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to truncate.
       * @param {Object} [options={}] The options object.
       * @param {number} [options.length=30] The maximum string length.
       * @param {string} [options.omission='...'] The string to indicate text is omitted.
       * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
       * @returns {string} Returns the truncated string.
       * @example
       *
       * _.truncate('hi-diddly-ho there, neighborino');
       * // => 'hi-diddly-ho there, neighbo...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': ' '
       * });
       * // => 'hi-diddly-ho there,...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': /,? +/
       * });
       * // => 'hi-diddly-ho there...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'omission': ' [...]'
       * });
       * // => 'hi-diddly-ho there, neig [...]'
       */function truncate(string,options){var length=DEFAULT_TRUNC_LENGTH,omission=DEFAULT_TRUNC_OMISSION;if(isObject(options)){var separator='separator'in options?options.separator:separator;length='length'in options?toInteger(options.length):length;omission='omission'in options?baseToString(options.omission):omission;}string=toString(string);var strLength=string.length;if(hasUnicode(string)){var strSymbols=stringToArray(string);strLength=strSymbols.length;}if(length>=strLength){return string;}var end=length-stringSize(omission);if(end<1){return omission;}var result=strSymbols?castSlice(strSymbols,0,end).join(''):string.slice(0,end);if(separator===undefined$1){return result+omission;}if(strSymbols){end+=result.length-end;}if(isRegExp(separator)){if(string.slice(end).search(separator)){var match,substring=result;if(!separator.global){separator=RegExp(separator.source,toString(reFlags.exec(separator))+'g');}separator.lastIndex=0;while(match=separator.exec(substring)){var newEnd=match.index;}result=result.slice(0,newEnd===undefined$1?end:newEnd);}}else if(string.indexOf(baseToString(separator),end)!=end){var index=result.lastIndexOf(separator);if(index>-1){result=result.slice(0,index);}}return result+omission;}/**
       * The inverse of `_.escape`; this method converts the HTML entities
       * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
       * their corresponding characters.
       *
       * **Note:** No other HTML entities are unescaped. To unescape additional
       * HTML entities use a third-party library like [_he_](https://mths.be/he).
       *
       * @static
       * @memberOf _
       * @since 0.6.0
       * @category String
       * @param {string} [string=''] The string to unescape.
       * @returns {string} Returns the unescaped string.
       * @example
       *
       * _.unescape('fred, barney, &amp; pebbles');
       * // => 'fred, barney, & pebbles'
       */function unescape(string){string=toString(string);return string&&reHasEscapedHtml.test(string)?string.replace(reEscapedHtml,unescapeHtmlChar):string;}/**
       * Converts `string`, as space separated words, to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.upperCase('--foo-bar');
       * // => 'FOO BAR'
       *
       * _.upperCase('fooBar');
       * // => 'FOO BAR'
       *
       * _.upperCase('__foo_bar__');
       * // => 'FOO BAR'
       */var upperCase=createCompounder(function(result,word,index){return result+(index?' ':'')+word.toUpperCase();});/**
       * Converts the first character of `string` to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.upperFirst('fred');
       * // => 'Fred'
       *
       * _.upperFirst('FRED');
       * // => 'FRED'
       */var upperFirst=createCaseFirst('toUpperCase');/**
       * Splits `string` into an array of its words.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {RegExp|string} [pattern] The pattern to match words.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the words of `string`.
       * @example
       *
       * _.words('fred, barney, & pebbles');
       * // => ['fred', 'barney', 'pebbles']
       *
       * _.words('fred, barney, & pebbles', /[^, ]+/g);
       * // => ['fred', 'barney', '&', 'pebbles']
       */function words(string,pattern,guard){string=toString(string);pattern=guard?undefined$1:pattern;if(pattern===undefined$1){return hasUnicodeWord(string)?unicodeWords(string):asciiWords(string);}return string.match(pattern)||[];}/*------------------------------------------------------------------------*/ /**
       * Attempts to invoke `func`, returning either the result or the caught error
       * object. Any additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Function} func The function to attempt.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {*} Returns the `func` result or error object.
       * @example
       *
       * // Avoid throwing errors for invalid selectors.
       * var elements = _.attempt(function(selector) {
       *   return document.querySelectorAll(selector);
       * }, '>_>');
       *
       * if (_.isError(elements)) {
       *   elements = [];
       * }
       */var attempt=baseRest(function(func,args){try{return apply(func,undefined$1,args);}catch(e){return isError(e)?e:new Error(e);}});/**
       * Binds methods of an object to the object itself, overwriting the existing
       * method.
       *
       * **Note:** This method doesn't set the "length" property of bound functions.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Object} object The object to bind and assign the bound methods to.
       * @param {...(string|string[])} methodNames The object method names to bind.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var view = {
       *   'label': 'docs',
       *   'click': function() {
       *     console.log('clicked ' + this.label);
       *   }
       * };
       *
       * _.bindAll(view, ['click']);
       * jQuery(element).on('click', view.click);
       * // => Logs 'clicked docs' when clicked.
       */var bindAll=flatRest(function(object,methodNames){arrayEach(methodNames,function(key){key=toKey(key);baseAssignValue(object,key,bind(object[key],object));});return object;});/**
       * Creates a function that iterates over `pairs` and invokes the corresponding
       * function of the first predicate to return truthy. The predicate-function
       * pairs are invoked with the `this` binding and arguments of the created
       * function.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Array} pairs The predicate-function pairs.
       * @returns {Function} Returns the new composite function.
       * @example
       *
       * var func = _.cond([
       *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
       *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
       *   [_.stubTrue,                      _.constant('no match')]
       * ]);
       *
       * func({ 'a': 1, 'b': 2 });
       * // => 'matches A'
       *
       * func({ 'a': 0, 'b': 1 });
       * // => 'matches B'
       *
       * func({ 'a': '1', 'b': '2' });
       * // => 'no match'
       */function cond(pairs){var length=pairs==null?0:pairs.length,toIteratee=getIteratee();pairs=!length?[]:arrayMap(pairs,function(pair){if(typeof pair[1]!='function'){throw new TypeError(FUNC_ERROR_TEXT);}return [toIteratee(pair[0]),pair[1]];});return baseRest(function(args){var index=-1;while(++index<length){var pair=pairs[index];if(apply(pair[0],this,args)){return apply(pair[1],this,args);}}});}/**
       * Creates a function that invokes the predicate properties of `source` with
       * the corresponding property values of a given object, returning `true` if
       * all predicates return truthy, else `false`.
       *
       * **Note:** The created function is equivalent to `_.conformsTo` with
       * `source` partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 2, 'b': 1 },
       *   { 'a': 1, 'b': 2 }
       * ];
       *
       * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
       * // => [{ 'a': 1, 'b': 2 }]
       */function conforms(source){return baseConforms(baseClone(source,CLONE_DEEP_FLAG));}/**
       * Creates a function that returns `value`.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {*} value The value to return from the new function.
       * @returns {Function} Returns the new constant function.
       * @example
       *
       * var objects = _.times(2, _.constant({ 'a': 1 }));
       *
       * console.log(objects);
       * // => [{ 'a': 1 }, { 'a': 1 }]
       *
       * console.log(objects[0] === objects[1]);
       * // => true
       */function constant(value){return function(){return value;};}/**
       * Checks `value` to determine whether a default value should be returned in
       * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
       * or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Util
       * @param {*} value The value to check.
       * @param {*} defaultValue The default value.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * _.defaultTo(1, 10);
       * // => 1
       *
       * _.defaultTo(undefined, 10);
       * // => 10
       */function defaultTo(value,defaultValue){return value==null||value!==value?defaultValue:value;}/**
       * Creates a function that returns the result of invoking the given functions
       * with the `this` binding of the created function, where each successive
       * invocation is supplied the return value of the previous.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flowRight
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flow([_.add, square]);
       * addSquare(1, 2);
       * // => 9
       */var flow=createFlow();/**
       * This method is like `_.flow` except that it creates a function that
       * invokes the given functions from right to left.
       *
       * @static
       * @since 3.0.0
       * @memberOf _
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flow
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flowRight([square, _.add]);
       * addSquare(1, 2);
       * // => 9
       */var flowRight=createFlow(true);/**
       * This method returns the first argument it receives.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {*} value Any value.
       * @returns {*} Returns `value`.
       * @example
       *
       * var object = { 'a': 1 };
       *
       * console.log(_.identity(object) === object);
       * // => true
       */function identity(value){return value;}/**
       * Creates a function that invokes `func` with the arguments of the created
       * function. If `func` is a property name, the created function returns the
       * property value for a given element. If `func` is an array or object, the
       * created function returns `true` for elements that contain the equivalent
       * source properties, otherwise it returns `false`.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Util
       * @param {*} [func=_.identity] The value to convert to a callback.
       * @returns {Function} Returns the callback.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
       * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, _.iteratee(['user', 'fred']));
       * // => [{ 'user': 'fred', 'age': 40 }]
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, _.iteratee('user'));
       * // => ['barney', 'fred']
       *
       * // Create custom iteratee shorthands.
       * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
       *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
       *     return func.test(string);
       *   };
       * });
       *
       * _.filter(['abc', 'def'], /ef/);
       * // => ['def']
       */function iteratee(func){return baseIteratee(typeof func=='function'?func:baseClone(func,CLONE_DEEP_FLAG));}/**
       * Creates a function that performs a partial deep comparison between a given
       * object and `source`, returning `true` if the given object has equivalent
       * property values, else `false`.
       *
       * **Note:** The created function is equivalent to `_.isMatch` with `source`
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * **Note:** Multiple values can be checked by combining several matchers
       * using `_.overSome`
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
       * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
       *
       * // Checking for several possible values
       * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
       * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
       */function matches(source){return baseMatches(baseClone(source,CLONE_DEEP_FLAG));}/**
       * Creates a function that performs a partial deep comparison between the
       * value at `path` of a given object to `srcValue`, returning `true` if the
       * object value is equivalent, else `false`.
       *
       * **Note:** Partial comparisons will match empty array and empty object
       * `srcValue` values against any array or object value, respectively. See
       * `_.isEqual` for a list of supported value comparisons.
       *
       * **Note:** Multiple values can be checked by combining several matchers
       * using `_.overSome`
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.find(objects, _.matchesProperty('a', 4));
       * // => { 'a': 4, 'b': 5, 'c': 6 }
       *
       * // Checking for several possible values
       * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
       * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
       */function matchesProperty(path,srcValue){return baseMatchesProperty(path,baseClone(srcValue,CLONE_DEEP_FLAG));}/**
       * Creates a function that invokes the method at `path` of a given object.
       * Any additional arguments are provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': _.constant(2) } },
       *   { 'a': { 'b': _.constant(1) } }
       * ];
       *
       * _.map(objects, _.method('a.b'));
       * // => [2, 1]
       *
       * _.map(objects, _.method(['a', 'b']));
       * // => [2, 1]
       */var method=baseRest(function(path,args){return function(object){return baseInvoke(object,path,args);};});/**
       * The opposite of `_.method`; this method creates a function that invokes
       * the method at a given path of `object`. Any additional arguments are
       * provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Object} object The object to query.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var array = _.times(3, _.constant),
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.methodOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
       * // => [2, 0]
       */var methodOf=baseRest(function(object,args){return function(path){return baseInvoke(object,path,args);};});/**
       * Adds all own enumerable string keyed function properties of a source
       * object to the destination object. If `object` is a function, then methods
       * are added to its prototype as well.
       *
       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
       * avoid conflicts caused by modifying the original.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Function|Object} [object=lodash] The destination object.
       * @param {Object} source The object of functions to add.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
       * @returns {Function|Object} Returns `object`.
       * @example
       *
       * function vowels(string) {
       *   return _.filter(string, function(v) {
       *     return /[aeiou]/i.test(v);
       *   });
       * }
       *
       * _.mixin({ 'vowels': vowels });
       * _.vowels('fred');
       * // => ['e']
       *
       * _('fred').vowels().value();
       * // => ['e']
       *
       * _.mixin({ 'vowels': vowels }, { 'chain': false });
       * _('fred').vowels();
       * // => ['e']
       */function mixin(object,source,options){var props=keys(source),methodNames=baseFunctions(source,props);if(options==null&&!(isObject(source)&&(methodNames.length||!props.length))){options=source;source=object;object=this;methodNames=baseFunctions(source,keys(source));}var chain=!(isObject(options)&&'chain'in options)||!!options.chain,isFunc=isFunction(object);arrayEach(methodNames,function(methodName){var func=source[methodName];object[methodName]=func;if(isFunc){object.prototype[methodName]=function(){var chainAll=this.__chain__;if(chain||chainAll){var result=object(this.__wrapped__),actions=result.__actions__=copyArray(this.__actions__);actions.push({'func':func,'args':arguments,'thisArg':object});result.__chain__=chainAll;return result;}return func.apply(object,arrayPush([this.value()],arguments));};}});return object;}/**
       * Reverts the `_` variable to its previous value and returns a reference to
       * the `lodash` function.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @returns {Function} Returns the `lodash` function.
       * @example
       *
       * var lodash = _.noConflict();
       */function noConflict(){if(root._===this){root._=oldDash;}return this;}/**
       * This method returns `undefined`.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Util
       * @example
       *
       * _.times(2, _.noop);
       * // => [undefined, undefined]
       */function noop(){// No operation performed.
  }/**
       * Creates a function that gets the argument at index `n`. If `n` is negative,
       * the nth argument from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [n=0] The index of the argument to return.
       * @returns {Function} Returns the new pass-thru function.
       * @example
       *
       * var func = _.nthArg(1);
       * func('a', 'b', 'c', 'd');
       * // => 'b'
       *
       * var func = _.nthArg(-2);
       * func('a', 'b', 'c', 'd');
       * // => 'c'
       */function nthArg(n){n=toInteger(n);return baseRest(function(args){return baseNth(args,n);});}/**
       * Creates a function that invokes `iteratees` with the arguments it receives
       * and returns their results.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to invoke.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.over([Math.max, Math.min]);
       *
       * func(1, 2, 3, 4);
       * // => [4, 1]
       */var over=createOver(arrayMap);/**
       * Creates a function that checks if **all** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * Following shorthands are possible for providing predicates.
       * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
       * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overEvery([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => false
       *
       * func(NaN);
       * // => false
       */var overEvery=createOver(arrayEvery);/**
       * Creates a function that checks if **any** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * Following shorthands are possible for providing predicates.
       * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
       * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overSome([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => true
       *
       * func(NaN);
       * // => false
       *
       * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
       * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
       */var overSome=createOver(arraySome);/**
       * Creates a function that returns the value at `path` of a given object.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': 2 } },
       *   { 'a': { 'b': 1 } }
       * ];
       *
       * _.map(objects, _.property('a.b'));
       * // => [2, 1]
       *
       * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
       * // => [1, 2]
       */function property(path){return isKey(path)?baseProperty(toKey(path)):basePropertyDeep(path);}/**
       * The opposite of `_.property`; this method creates a function that returns
       * the value at a given path of `object`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} object The object to query.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var array = [0, 1, 2],
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
       * // => [2, 0]
       */function propertyOf(object){return function(path){return object==null?undefined$1:baseGet(object,path);};}/**
       * Creates an array of numbers (positive and/or negative) progressing from
       * `start` up to, but not including, `end`. A step of `-1` is used if a negative
       * `start` is specified without an `end` or `step`. If `end` is not specified,
       * it's set to `start` with `start` then set to `0`.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.rangeRight
       * @example
       *
       * _.range(4);
       * // => [0, 1, 2, 3]
       *
       * _.range(-4);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 5);
       * // => [1, 2, 3, 4]
       *
       * _.range(0, 20, 5);
       * // => [0, 5, 10, 15]
       *
       * _.range(0, -4, -1);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.range(0);
       * // => []
       */var range=createRange();/**
       * This method is like `_.range` except that it populates values in
       * descending order.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.range
       * @example
       *
       * _.rangeRight(4);
       * // => [3, 2, 1, 0]
       *
       * _.rangeRight(-4);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 5);
       * // => [4, 3, 2, 1]
       *
       * _.rangeRight(0, 20, 5);
       * // => [15, 10, 5, 0]
       *
       * _.rangeRight(0, -4, -1);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.rangeRight(0);
       * // => []
       */var rangeRight=createRange(true);/**
       * This method returns a new empty array.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Array} Returns the new empty array.
       * @example
       *
       * var arrays = _.times(2, _.stubArray);
       *
       * console.log(arrays);
       * // => [[], []]
       *
       * console.log(arrays[0] === arrays[1]);
       * // => false
       */function stubArray(){return [];}/**
       * This method returns `false`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `false`.
       * @example
       *
       * _.times(2, _.stubFalse);
       * // => [false, false]
       */function stubFalse(){return false;}/**
       * This method returns a new empty object.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Object} Returns the new empty object.
       * @example
       *
       * var objects = _.times(2, _.stubObject);
       *
       * console.log(objects);
       * // => [{}, {}]
       *
       * console.log(objects[0] === objects[1]);
       * // => false
       */function stubObject(){return {};}/**
       * This method returns an empty string.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {string} Returns the empty string.
       * @example
       *
       * _.times(2, _.stubString);
       * // => ['', '']
       */function stubString(){return '';}/**
       * This method returns `true`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `true`.
       * @example
       *
       * _.times(2, _.stubTrue);
       * // => [true, true]
       */function stubTrue(){return true;}/**
       * Invokes the iteratee `n` times, returning an array of the results of
       * each invocation. The iteratee is invoked with one argument; (index).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.times(3, String);
       * // => ['0', '1', '2']
       *
       *  _.times(4, _.constant(0));
       * // => [0, 0, 0, 0]
       */function times(n,iteratee){n=toInteger(n);if(n<1||n>MAX_SAFE_INTEGER){return [];}var index=MAX_ARRAY_LENGTH,length=nativeMin(n,MAX_ARRAY_LENGTH);iteratee=getIteratee(iteratee);n-=MAX_ARRAY_LENGTH;var result=baseTimes(length,iteratee);while(++index<n){iteratee(index);}return result;}/**
       * Converts `value` to a property path array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {*} value The value to convert.
       * @returns {Array} Returns the new property path array.
       * @example
       *
       * _.toPath('a.b.c');
       * // => ['a', 'b', 'c']
       *
       * _.toPath('a[0].b.c');
       * // => ['a', '0', 'b', 'c']
       */function toPath(value){if(isArray(value)){return arrayMap(value,toKey);}return isSymbol(value)?[value]:copyArray(stringToPath(toString(value)));}/**
       * Generates a unique ID. If `prefix` is given, the ID is appended to it.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {string} [prefix=''] The value to prefix the ID with.
       * @returns {string} Returns the unique ID.
       * @example
       *
       * _.uniqueId('contact_');
       * // => 'contact_104'
       *
       * _.uniqueId();
       * // => '105'
       */function uniqueId(prefix){var id=++idCounter;return toString(prefix)+id;}/*------------------------------------------------------------------------*/ /**
       * Adds two numbers.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {number} augend The first number in an addition.
       * @param {number} addend The second number in an addition.
       * @returns {number} Returns the total.
       * @example
       *
       * _.add(6, 4);
       * // => 10
       */var add=createMathOperation(function(augend,addend){return augend+addend;},0);/**
       * Computes `number` rounded up to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round up.
       * @param {number} [precision=0] The precision to round up to.
       * @returns {number} Returns the rounded up number.
       * @example
       *
       * _.ceil(4.006);
       * // => 5
       *
       * _.ceil(6.004, 2);
       * // => 6.01
       *
       * _.ceil(6040, -2);
       * // => 6100
       */var ceil=createRound('ceil');/**
       * Divide two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} dividend The first number in a division.
       * @param {number} divisor The second number in a division.
       * @returns {number} Returns the quotient.
       * @example
       *
       * _.divide(6, 4);
       * // => 1.5
       */var divide=createMathOperation(function(dividend,divisor){return dividend/divisor;},1);/**
       * Computes `number` rounded down to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round down.
       * @param {number} [precision=0] The precision to round down to.
       * @returns {number} Returns the rounded down number.
       * @example
       *
       * _.floor(4.006);
       * // => 4
       *
       * _.floor(0.046, 2);
       * // => 0.04
       *
       * _.floor(4060, -2);
       * // => 4000
       */var floor=createRound('floor');/**
       * Computes the maximum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * _.max([4, 2, 8, 6]);
       * // => 8
       *
       * _.max([]);
       * // => undefined
       */function max(array){return array&&array.length?baseExtremum(array,identity,baseGt):undefined$1;}/**
       * This method is like `_.max` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.maxBy(objects, function(o) { return o.n; });
       * // => { 'n': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.maxBy(objects, 'n');
       * // => { 'n': 2 }
       */function maxBy(array,iteratee){return array&&array.length?baseExtremum(array,getIteratee(iteratee,2),baseGt):undefined$1;}/**
       * Computes the mean of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the mean.
       * @example
       *
       * _.mean([4, 2, 8, 6]);
       * // => 5
       */function mean(array){return baseMean(array,identity);}/**
       * This method is like `_.mean` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be averaged.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the mean.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.meanBy(objects, function(o) { return o.n; });
       * // => 5
       *
       * // The `_.property` iteratee shorthand.
       * _.meanBy(objects, 'n');
       * // => 5
       */function meanBy(array,iteratee){return baseMean(array,getIteratee(iteratee,2));}/**
       * Computes the minimum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * _.min([4, 2, 8, 6]);
       * // => 2
       *
       * _.min([]);
       * // => undefined
       */function min(array){return array&&array.length?baseExtremum(array,identity,baseLt):undefined$1;}/**
       * This method is like `_.min` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.minBy(objects, function(o) { return o.n; });
       * // => { 'n': 1 }
       *
       * // The `_.property` iteratee shorthand.
       * _.minBy(objects, 'n');
       * // => { 'n': 1 }
       */function minBy(array,iteratee){return array&&array.length?baseExtremum(array,getIteratee(iteratee,2),baseLt):undefined$1;}/**
       * Multiply two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} multiplier The first number in a multiplication.
       * @param {number} multiplicand The second number in a multiplication.
       * @returns {number} Returns the product.
       * @example
       *
       * _.multiply(6, 4);
       * // => 24
       */var multiply=createMathOperation(function(multiplier,multiplicand){return multiplier*multiplicand;},1);/**
       * Computes `number` rounded to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round.
       * @param {number} [precision=0] The precision to round to.
       * @returns {number} Returns the rounded number.
       * @example
       *
       * _.round(4.006);
       * // => 4
       *
       * _.round(4.006, 2);
       * // => 4.01
       *
       * _.round(4060, -2);
       * // => 4100
       */var round=createRound('round');/**
       * Subtract two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {number} minuend The first number in a subtraction.
       * @param {number} subtrahend The second number in a subtraction.
       * @returns {number} Returns the difference.
       * @example
       *
       * _.subtract(6, 4);
       * // => 2
       */var subtract=createMathOperation(function(minuend,subtrahend){return minuend-subtrahend;},0);/**
       * Computes the sum of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the sum.
       * @example
       *
       * _.sum([4, 2, 8, 6]);
       * // => 20
       */function sum(array){return array&&array.length?baseSum(array,identity):0;}/**
       * This method is like `_.sum` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be summed.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the sum.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.sumBy(objects, function(o) { return o.n; });
       * // => 20
       *
       * // The `_.property` iteratee shorthand.
       * _.sumBy(objects, 'n');
       * // => 20
       */function sumBy(array,iteratee){return array&&array.length?baseSum(array,getIteratee(iteratee,2)):0;}/*------------------------------------------------------------------------*/ // Add methods that return wrapped values in chain sequences.
  lodash.after=after;lodash.ary=ary;lodash.assign=assign;lodash.assignIn=assignIn;lodash.assignInWith=assignInWith;lodash.assignWith=assignWith;lodash.at=at;lodash.before=before;lodash.bind=bind;lodash.bindAll=bindAll;lodash.bindKey=bindKey;lodash.castArray=castArray;lodash.chain=chain;lodash.chunk=chunk;lodash.compact=compact;lodash.concat=concat;lodash.cond=cond;lodash.conforms=conforms;lodash.constant=constant;lodash.countBy=countBy;lodash.create=create;lodash.curry=curry;lodash.curryRight=curryRight;lodash.debounce=debounce;lodash.defaults=defaults;lodash.defaultsDeep=defaultsDeep;lodash.defer=defer;lodash.delay=delay;lodash.difference=difference;lodash.differenceBy=differenceBy;lodash.differenceWith=differenceWith;lodash.drop=drop;lodash.dropRight=dropRight;lodash.dropRightWhile=dropRightWhile;lodash.dropWhile=dropWhile;lodash.fill=fill;lodash.filter=filter;lodash.flatMap=flatMap;lodash.flatMapDeep=flatMapDeep;lodash.flatMapDepth=flatMapDepth;lodash.flatten=flatten;lodash.flattenDeep=flattenDeep;lodash.flattenDepth=flattenDepth;lodash.flip=flip;lodash.flow=flow;lodash.flowRight=flowRight;lodash.fromPairs=fromPairs;lodash.functions=functions;lodash.functionsIn=functionsIn;lodash.groupBy=groupBy;lodash.initial=initial;lodash.intersection=intersection;lodash.intersectionBy=intersectionBy;lodash.intersectionWith=intersectionWith;lodash.invert=invert;lodash.invertBy=invertBy;lodash.invokeMap=invokeMap;lodash.iteratee=iteratee;lodash.keyBy=keyBy;lodash.keys=keys;lodash.keysIn=keysIn;lodash.map=map;lodash.mapKeys=mapKeys;lodash.mapValues=mapValues;lodash.matches=matches;lodash.matchesProperty=matchesProperty;lodash.memoize=memoize;lodash.merge=merge;lodash.mergeWith=mergeWith;lodash.method=method;lodash.methodOf=methodOf;lodash.mixin=mixin;lodash.negate=negate;lodash.nthArg=nthArg;lodash.omit=omit;lodash.omitBy=omitBy;lodash.once=once;lodash.orderBy=orderBy;lodash.over=over;lodash.overArgs=overArgs;lodash.overEvery=overEvery;lodash.overSome=overSome;lodash.partial=partial;lodash.partialRight=partialRight;lodash.partition=partition;lodash.pick=pick;lodash.pickBy=pickBy;lodash.property=property;lodash.propertyOf=propertyOf;lodash.pull=pull;lodash.pullAll=pullAll;lodash.pullAllBy=pullAllBy;lodash.pullAllWith=pullAllWith;lodash.pullAt=pullAt;lodash.range=range;lodash.rangeRight=rangeRight;lodash.rearg=rearg;lodash.reject=reject;lodash.remove=remove;lodash.rest=rest;lodash.reverse=reverse;lodash.sampleSize=sampleSize;lodash.set=set;lodash.setWith=setWith;lodash.shuffle=shuffle;lodash.slice=slice;lodash.sortBy=sortBy;lodash.sortedUniq=sortedUniq;lodash.sortedUniqBy=sortedUniqBy;lodash.split=split;lodash.spread=spread;lodash.tail=tail;lodash.take=take;lodash.takeRight=takeRight;lodash.takeRightWhile=takeRightWhile;lodash.takeWhile=takeWhile;lodash.tap=tap;lodash.throttle=throttle;lodash.thru=thru;lodash.toArray=toArray;lodash.toPairs=toPairs;lodash.toPairsIn=toPairsIn;lodash.toPath=toPath;lodash.toPlainObject=toPlainObject;lodash.transform=transform;lodash.unary=unary;lodash.union=union;lodash.unionBy=unionBy;lodash.unionWith=unionWith;lodash.uniq=uniq;lodash.uniqBy=uniqBy;lodash.uniqWith=uniqWith;lodash.unset=unset;lodash.unzip=unzip;lodash.unzipWith=unzipWith;lodash.update=update;lodash.updateWith=updateWith;lodash.values=values;lodash.valuesIn=valuesIn;lodash.without=without;lodash.words=words;lodash.wrap=wrap;lodash.xor=xor;lodash.xorBy=xorBy;lodash.xorWith=xorWith;lodash.zip=zip;lodash.zipObject=zipObject;lodash.zipObjectDeep=zipObjectDeep;lodash.zipWith=zipWith;// Add aliases.
  lodash.entries=toPairs;lodash.entriesIn=toPairsIn;lodash.extend=assignIn;lodash.extendWith=assignInWith;// Add methods to `lodash.prototype`.
  mixin(lodash,lodash);/*------------------------------------------------------------------------*/ // Add methods that return unwrapped values in chain sequences.
  lodash.add=add;lodash.attempt=attempt;lodash.camelCase=camelCase;lodash.capitalize=capitalize;lodash.ceil=ceil;lodash.clamp=clamp;lodash.clone=clone;lodash.cloneDeep=cloneDeep;lodash.cloneDeepWith=cloneDeepWith;lodash.cloneWith=cloneWith;lodash.conformsTo=conformsTo;lodash.deburr=deburr;lodash.defaultTo=defaultTo;lodash.divide=divide;lodash.endsWith=endsWith;lodash.eq=eq;lodash.escape=escape;lodash.escapeRegExp=escapeRegExp;lodash.every=every;lodash.find=find;lodash.findIndex=findIndex;lodash.findKey=findKey;lodash.findLast=findLast;lodash.findLastIndex=findLastIndex;lodash.findLastKey=findLastKey;lodash.floor=floor;lodash.forEach=forEach;lodash.forEachRight=forEachRight;lodash.forIn=forIn;lodash.forInRight=forInRight;lodash.forOwn=forOwn;lodash.forOwnRight=forOwnRight;lodash.get=get;lodash.gt=gt;lodash.gte=gte;lodash.has=has;lodash.hasIn=hasIn;lodash.head=head;lodash.identity=identity;lodash.includes=includes;lodash.indexOf=indexOf;lodash.inRange=inRange;lodash.invoke=invoke;lodash.isArguments=isArguments;lodash.isArray=isArray;lodash.isArrayBuffer=isArrayBuffer;lodash.isArrayLike=isArrayLike;lodash.isArrayLikeObject=isArrayLikeObject;lodash.isBoolean=isBoolean;lodash.isBuffer=isBuffer;lodash.isDate=isDate;lodash.isElement=isElement;lodash.isEmpty=isEmpty;lodash.isEqual=isEqual;lodash.isEqualWith=isEqualWith;lodash.isError=isError;lodash.isFinite=isFinite;lodash.isFunction=isFunction;lodash.isInteger=isInteger;lodash.isLength=isLength;lodash.isMap=isMap;lodash.isMatch=isMatch;lodash.isMatchWith=isMatchWith;lodash.isNaN=isNaN;lodash.isNative=isNative;lodash.isNil=isNil;lodash.isNull=isNull;lodash.isNumber=isNumber;lodash.isObject=isObject;lodash.isObjectLike=isObjectLike;lodash.isPlainObject=isPlainObject;lodash.isRegExp=isRegExp;lodash.isSafeInteger=isSafeInteger;lodash.isSet=isSet;lodash.isString=isString;lodash.isSymbol=isSymbol;lodash.isTypedArray=isTypedArray;lodash.isUndefined=isUndefined;lodash.isWeakMap=isWeakMap;lodash.isWeakSet=isWeakSet;lodash.join=join;lodash.kebabCase=kebabCase;lodash.last=last;lodash.lastIndexOf=lastIndexOf;lodash.lowerCase=lowerCase;lodash.lowerFirst=lowerFirst;lodash.lt=lt;lodash.lte=lte;lodash.max=max;lodash.maxBy=maxBy;lodash.mean=mean;lodash.meanBy=meanBy;lodash.min=min;lodash.minBy=minBy;lodash.stubArray=stubArray;lodash.stubFalse=stubFalse;lodash.stubObject=stubObject;lodash.stubString=stubString;lodash.stubTrue=stubTrue;lodash.multiply=multiply;lodash.nth=nth;lodash.noConflict=noConflict;lodash.noop=noop;lodash.now=now;lodash.pad=pad;lodash.padEnd=padEnd;lodash.padStart=padStart;lodash.parseInt=parseInt;lodash.random=random;lodash.reduce=reduce;lodash.reduceRight=reduceRight;lodash.repeat=repeat;lodash.replace=replace;lodash.result=result;lodash.round=round;lodash.runInContext=runInContext;lodash.sample=sample;lodash.size=size;lodash.snakeCase=snakeCase;lodash.some=some;lodash.sortedIndex=sortedIndex;lodash.sortedIndexBy=sortedIndexBy;lodash.sortedIndexOf=sortedIndexOf;lodash.sortedLastIndex=sortedLastIndex;lodash.sortedLastIndexBy=sortedLastIndexBy;lodash.sortedLastIndexOf=sortedLastIndexOf;lodash.startCase=startCase;lodash.startsWith=startsWith;lodash.subtract=subtract;lodash.sum=sum;lodash.sumBy=sumBy;lodash.template=template;lodash.times=times;lodash.toFinite=toFinite;lodash.toInteger=toInteger;lodash.toLength=toLength;lodash.toLower=toLower;lodash.toNumber=toNumber;lodash.toSafeInteger=toSafeInteger;lodash.toString=toString;lodash.toUpper=toUpper;lodash.trim=trim;lodash.trimEnd=trimEnd;lodash.trimStart=trimStart;lodash.truncate=truncate;lodash.unescape=unescape;lodash.uniqueId=uniqueId;lodash.upperCase=upperCase;lodash.upperFirst=upperFirst;// Add aliases.
  lodash.each=forEach;lodash.eachRight=forEachRight;lodash.first=head;mixin(lodash,function(){var source={};baseForOwn(lodash,function(func,methodName){if(!hasOwnProperty.call(lodash.prototype,methodName)){source[methodName]=func;}});return source;}(),{'chain':false});/*------------------------------------------------------------------------*/ /**
       * The semantic version number.
       *
       * @static
       * @memberOf _
       * @type {string}
       */lodash.VERSION=VERSION;// Assign default placeholders.
  arrayEach(['bind','bindKey','curry','curryRight','partial','partialRight'],function(methodName){lodash[methodName].placeholder=lodash;});// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
  arrayEach(['drop','take'],function(methodName,index){LazyWrapper.prototype[methodName]=function(n){n=n===undefined$1?1:nativeMax(toInteger(n),0);var result=this.__filtered__&&!index?new LazyWrapper(this):this.clone();if(result.__filtered__){result.__takeCount__=nativeMin(n,result.__takeCount__);}else {result.__views__.push({'size':nativeMin(n,MAX_ARRAY_LENGTH),'type':methodName+(result.__dir__<0?'Right':'')});}return result;};LazyWrapper.prototype[methodName+'Right']=function(n){return this.reverse()[methodName](n).reverse();};});// Add `LazyWrapper` methods that accept an `iteratee` value.
  arrayEach(['filter','map','takeWhile'],function(methodName,index){var type=index+1,isFilter=type==LAZY_FILTER_FLAG||type==LAZY_WHILE_FLAG;LazyWrapper.prototype[methodName]=function(iteratee){var result=this.clone();result.__iteratees__.push({'iteratee':getIteratee(iteratee,3),'type':type});result.__filtered__=result.__filtered__||isFilter;return result;};});// Add `LazyWrapper` methods for `_.head` and `_.last`.
  arrayEach(['head','last'],function(methodName,index){var takeName='take'+(index?'Right':'');LazyWrapper.prototype[methodName]=function(){return this[takeName](1).value()[0];};});// Add `LazyWrapper` methods for `_.initial` and `_.tail`.
  arrayEach(['initial','tail'],function(methodName,index){var dropName='drop'+(index?'':'Right');LazyWrapper.prototype[methodName]=function(){return this.__filtered__?new LazyWrapper(this):this[dropName](1);};});LazyWrapper.prototype.compact=function(){return this.filter(identity);};LazyWrapper.prototype.find=function(predicate){return this.filter(predicate).head();};LazyWrapper.prototype.findLast=function(predicate){return this.reverse().find(predicate);};LazyWrapper.prototype.invokeMap=baseRest(function(path,args){if(typeof path=='function'){return new LazyWrapper(this);}return this.map(function(value){return baseInvoke(value,path,args);});});LazyWrapper.prototype.reject=function(predicate){return this.filter(negate(getIteratee(predicate)));};LazyWrapper.prototype.slice=function(start,end){start=toInteger(start);var result=this;if(result.__filtered__&&(start>0||end<0)){return new LazyWrapper(result);}if(start<0){result=result.takeRight(-start);}else if(start){result=result.drop(start);}if(end!==undefined$1){end=toInteger(end);result=end<0?result.dropRight(-end):result.take(end-start);}return result;};LazyWrapper.prototype.takeRightWhile=function(predicate){return this.reverse().takeWhile(predicate).reverse();};LazyWrapper.prototype.toArray=function(){return this.take(MAX_ARRAY_LENGTH);};// Add `LazyWrapper` methods to `lodash.prototype`.
  baseForOwn(LazyWrapper.prototype,function(func,methodName){var checkIteratee=/^(?:filter|find|map|reject)|While$/.test(methodName),isTaker=/^(?:head|last)$/.test(methodName),lodashFunc=lodash[isTaker?'take'+(methodName=='last'?'Right':''):methodName],retUnwrapped=isTaker||/^find/.test(methodName);if(!lodashFunc){return;}lodash.prototype[methodName]=function(){var value=this.__wrapped__,args=isTaker?[1]:arguments,isLazy=value instanceof LazyWrapper,iteratee=args[0],useLazy=isLazy||isArray(value);var interceptor=function interceptor(value){var result=lodashFunc.apply(lodash,arrayPush([value],args));return isTaker&&chainAll?result[0]:result;};if(useLazy&&checkIteratee&&typeof iteratee=='function'&&iteratee.length!=1){// Avoid lazy use if the iteratee has a "length" value other than `1`.
  isLazy=useLazy=false;}var chainAll=this.__chain__,isHybrid=!!this.__actions__.length,isUnwrapped=retUnwrapped&&!chainAll,onlyLazy=isLazy&&!isHybrid;if(!retUnwrapped&&useLazy){value=onlyLazy?value:new LazyWrapper(this);var result=func.apply(value,args);result.__actions__.push({'func':thru,'args':[interceptor],'thisArg':undefined$1});return new LodashWrapper(result,chainAll);}if(isUnwrapped&&onlyLazy){return func.apply(this,args);}result=this.thru(interceptor);return isUnwrapped?isTaker?result.value()[0]:result.value():result;};});// Add `Array` methods to `lodash.prototype`.
  arrayEach(['pop','push','shift','sort','splice','unshift'],function(methodName){var func=arrayProto[methodName],chainName=/^(?:push|sort|unshift)$/.test(methodName)?'tap':'thru',retUnwrapped=/^(?:pop|shift)$/.test(methodName);lodash.prototype[methodName]=function(){var args=arguments;if(retUnwrapped&&!this.__chain__){var value=this.value();return func.apply(isArray(value)?value:[],args);}return this[chainName](function(value){return func.apply(isArray(value)?value:[],args);});};});// Map minified method names to their real names.
  baseForOwn(LazyWrapper.prototype,function(func,methodName){var lodashFunc=lodash[methodName];if(lodashFunc){var key=lodashFunc.name+'';if(!hasOwnProperty.call(realNames,key)){realNames[key]=[];}realNames[key].push({'name':methodName,'func':lodashFunc});}});realNames[createHybrid(undefined$1,WRAP_BIND_KEY_FLAG).name]=[{'name':'wrapper','func':undefined$1}];// Add methods to `LazyWrapper`.
  LazyWrapper.prototype.clone=lazyClone;LazyWrapper.prototype.reverse=lazyReverse;LazyWrapper.prototype.value=lazyValue;// Add chain sequence methods to the `lodash` wrapper.
  lodash.prototype.at=wrapperAt;lodash.prototype.chain=wrapperChain;lodash.prototype.commit=wrapperCommit;lodash.prototype.next=wrapperNext;lodash.prototype.plant=wrapperPlant;lodash.prototype.reverse=wrapperReverse;lodash.prototype.toJSON=lodash.prototype.valueOf=lodash.prototype.value=wrapperValue;// Add lazy aliases.
  lodash.prototype.first=lodash.prototype.head;if(symIterator){lodash.prototype[symIterator]=wrapperToIterator;}return lodash;};/*--------------------------------------------------------------------------*/ // Export lodash.
  var _=runInContext();// Some AMD build optimizers, like r.js, check for condition patterns like:
  if(freeModule){// Export for Node.js.
  (freeModule.exports=_)._=_;// Export for CommonJS support.
  freeExports._=_;}else {// Export to the global object.
  root._=_;}}).call(commonjsGlobal);});

  function ownKeys$1i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1i(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var SwatchesPanel = VueCompositionAPI.defineComponent({
    name: "SwatchesPanel",
    components: {
      TSelect: Select,
      TOption: Option,
      TButton: Button
    },
    props: _objectSpread$1h(_objectSpread$1h({}, baseProps), {}, {
      colors: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      title: {
        type: String,
        "default": "\u7CFB\u7EDF\u8272\u5F69"
      },
      editable: {
        type: Boolean,
        "default": false
      },
      handleSetColor: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      },
      handleAddColor: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    }),
    setup: function setup(props) {
      var baseClassName = useBaseClassName();

      var _useConfig = useConfig("colorPicker"),
          t = _useConfig.t,
          global = _useConfig.global;

      var _useConfig2 = useConfig("popconfirm"),
          confirmGlobal = _useConfig2.global;

      var classPrefix = usePrefixClass();

      var _useGlobalIcon = useGlobalIcon({
        DeleteIcon: Delete,
        AddIcon: Add
      }),
          DeleteIcon = _useGlobalIcon.DeleteIcon,
          AddIcon = _useGlobalIcon.AddIcon;

      var _useCommonClassName = useCommonClassName(),
          statusClassNames = _useCommonClassName.statusClassNames;

      var visiblePopConfirm = VueCompositionAPI.ref(false);
      var colorInstance = VueCompositionAPI.computed(function () {
        return lodash.cloneDeep(props.color);
      });

      var setVisiblePopConfirm = function setVisiblePopConfirm(visible) {
        visiblePopConfirm.value = visible;
      };

      var handleClick = function handleClick(color) {
        props.handleSetColor(color);
      };

      var isEqualCurrentColor = function isEqualCurrentColor(color) {
        return Color.compare(color, colorInstance.value.css);
      };

      var selectedColorIndex = VueCompositionAPI.computed(function () {
        return props.colors.findIndex(function (color) {
          return isEqualCurrentColor(color);
        });
      });

      var handleRemoveColor = function handleRemoveColor() {
        var _props$handleChange;

        var colors = _toConsumableArray(props.colors);

        var selectedIndex = selectedColorIndex.value;

        if (selectedIndex > -1) {
          colors.splice(selectedIndex, 1);
        } else {
          colors.length = 0;
        }

        (_props$handleChange = props.handleChange) === null || _props$handleChange === void 0 ? void 0 : _props$handleChange.call(props, colors);
        setVisiblePopConfirm(false);
      };

      return {
        t: t,
        global: global,
        confirmGlobal: confirmGlobal,
        classPrefix: classPrefix,
        DeleteIcon: DeleteIcon,
        AddIcon: AddIcon,
        baseClassName: baseClassName,
        statusClassNames: statusClassNames,
        selectedColorIndex: selectedColorIndex,
        visiblePopConfirm: visiblePopConfirm,
        setVisiblePopConfirm: setVisiblePopConfirm,
        handleClick: handleClick,
        isEqualCurrentColor: isEqualCurrentColor,
        handleRemoveColor: handleRemoveColor
      };
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var baseClassName = this.baseClassName,
          statusClassNames = this.statusClassNames,
          title = this.title,
          editable = this.editable,
          DeleteIcon = this.DeleteIcon,
          AddIcon = this.AddIcon;
      var swatchesClass = "".concat(baseClassName, "__swatches");

      var renderActions = function renderActions() {
        if (!editable) {
          return null;
        }

        return h("div", {
          "class": "".concat(swatchesClass, "--actions")
        }, [h("span", {
          "attrs": {
            "role": "button"
          },
          "class": "".concat(baseClassName, "__icon"),
          "on": {
            "click": function click() {
              return _this.handleAddColor();
            }
          }
        }, [h(AddIcon)]), _this.colors.length > 0 ? h("span", {
          "attrs": {
            "role": "button"
          },
          "class": "".concat(baseClassName, "__icon"),
          "on": {
            "click": function click() {
              return _this.handleRemoveColor();
            }
          }
        }, [h(DeleteIcon)]) : null]);
      };

      return h("div", {
        "class": swatchesClass
      }, [h("h3", {
        "class": "".concat(swatchesClass, "--title")
      }, [h("span", [title]), renderActions()]), h("ul", {
        "class": ["".concat(swatchesClass, "--items"), "narrow-scrollbar"]
      }, [this.colors.map(function (color) {
        return h("li", {
          "class": ["".concat(swatchesClass, "--item"), _this.isEqualCurrentColor(color) && editable ? statusClassNames.active : ""],
          "key": color,
          "on": {
            "click": function click() {
              if (_this.disabled) {
                return;
              }

              _this.handleClick(color);
            }
          }
        }, [h("div", {
          "class": ["".concat(swatchesClass, "--color"), "".concat(baseClassName, "--bg-alpha")]
        }, [h("span", {
          "class": "".concat(swatchesClass, "--inner"),
          "style": {
            background: color
          }
        })])]);
      })])]);
    }
  });

  function ownKeys$1h(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1h(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1h(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var ColorPanel = VueCompositionAPI.defineComponent({
    name: "ColorPanel",
    components: {
      PanelHeader: PanelHeader,
      LinearGradient: LinearGradient,
      SaturationPanel: SaturationPanel,
      HueSlider: HueSlider,
      AlphaSlider: AlphaSlider,
      FormatPanel: FormatPanel,
      SwatchesPanel: SwatchesPanel
    },
    props: _objectSpread$1g(_objectSpread$1g({}, props$y), {}, {
      togglePopup: {
        type: Function
      }
    }),
    setup: function setup(props2) {
      var baseClassName = useBaseClassName();

      var _useCommonClassName = useCommonClassName(),
          statusClassNames = _useCommonClassName.statusClassNames;

      var _useConfig = useConfig("colorPicker"),
          t = _useConfig.t,
          global = _useConfig.global;

      var _toRefs = VueCompositionAPI.toRefs(props2),
          inputValue = _toRefs.value,
          recentColors = _toRefs.recentColors;

      var _useVModel = useVModel(inputValue, props2.defaultValue, props2.onChange, "change"),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerValue = _useVModel2[0],
          setInnerValue = _useVModel2[1];

      var color = VueCompositionAPI.ref(new Color(innerValue.value || DEFAULT_COLOR));

      var updateColor = function updateColor() {
        return color.value.update(innerValue.value || DEFAULT_COLOR);
      };

      var mode = VueCompositionAPI.ref(color.value.isGradient ? "linear-gradient" : "monochrome");
      var formatModel = VueCompositionAPI.ref(color.value.isGradient ? "CSS" : "RGB");

      var _useDefaultValue = useDefaultValue(recentColors, props2.defaultRecentColors, props2.onRecentColorsChange, "recentColors", "recentColorsChange"),
          _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
          recentlyUsedColors = _useDefaultValue2[0],
          setRecentlyUsedColors = _useDefaultValue2[1];

      if (props2.colorModes.length === 1) {
        var m = props2.colorModes[0];
        mode.value = m;
      }

      var formatValue = function formatValue() {
        if (mode.value === "linear-gradient") {
          return color.value.linearGradient;
        }

        return color.value.getFormatsColorMap()[props2.format] || color.value.css;
      };

      var addRecentlyUsedColor = function addRecentlyUsedColor() {
        if (recentlyUsedColors.value === null || recentlyUsedColors.value === false) {
          return;
        }

        var colors = recentlyUsedColors.value || [];
        var currentColor = color.value.isGradient ? color.value.linearGradient : color.value.rgba;
        var index = colors.indexOf(currentColor);

        if (index > -1) {
          colors.splice(index, 1);
        }

        colors.unshift(currentColor);

        if (colors.length > TD_COLOR_USED_COLORS_MAX_SIZE) {
          colors.length = TD_COLOR_USED_COLORS_MAX_SIZE;
        }

        handleRecentlyUsedColorsChange(colors);
      };

      var handleRecentlyUsedColorsChange = function handleRecentlyUsedColorsChange(colors) {
        recentlyUsedColors.value = colors;
        setRecentlyUsedColors(colors);
      };

      var emitColorChange = function emitColorChange(trigger) {
        setInnerValue(formatValue(), {
          color: getColorObject(color.value),
          trigger: trigger || "palette-saturation-brightness"
        });
      };

      VueCompositionAPI.watch(function () {
        return [props2.defaultValue, props2.enableAlpha];
      }, updateColor);
      VueCompositionAPI.watch(function () {
        return innerValue.value;
      }, function (newColor) {
        if (newColor !== formatValue()) {
          updateColor();
          mode.value = color.value.isGradient ? "linear-gradient" : "monochrome";
        }
      });

      var handleModeChange = function handleModeChange(value) {
        mode.value = value;

        if (value === "linear-gradient") {
          color.value.update(color.value.gradientColors.length > 0 ? color.value.linearGradient : DEFAULT_LINEAR_GRADIENT);
          return;
        }

        color.value.update(color.value.rgba);
      };

      var handleFormatModeChange = function handleFormatModeChange(format) {
        return formatModel.value = format;
      };

      var handleSatAndValueChange = function handleSatAndValueChange(_ref) {
        var saturation = _ref.saturation,
            value = _ref.value;
        var _color$value = color.value,
            sat = _color$value.saturation,
            val = _color$value.value;
        var changeTrigger = "palette-saturation-brightness";

        if (value !== val && saturation !== sat) {
          color.value.saturation = saturation;
          color.value.value = value;
          changeTrigger = "palette-saturation-brightness";
        } else if (saturation !== sat) {
          color.value.saturation = saturation;
          changeTrigger = "palette-saturation";
        } else if (value !== val) {
          color.value.value = value;
          changeTrigger = "palette-brightness";
        } else {
          return;
        }

        emitColorChange(changeTrigger);
      };

      var handleHueChange = function handleHueChange(hue) {
        var _props2$onPaletteBarC;

        color.value.hue = hue;
        emitColorChange("palette-hue-bar");
        (_props2$onPaletteBarC = props2.onPaletteBarChange) === null || _props2$onPaletteBarC === void 0 ? void 0 : _props2$onPaletteBarC.call(props2, {
          color: getColorObject(color.value)
        });
      };

      var handleAlphaChange = function handleAlphaChange(alpha) {
        color.value.alpha = alpha;
        emitColorChange("palette-alpha-bar");
      };

      var handleInputChange = function handleInputChange(input, alpha) {
        color.value.update(input);
        color.value.alpha = alpha;
        emitColorChange("input");
      };

      var handleGradientChange = function handleGradientChange(_ref2) {
        var key = _ref2.key,
            payload = _ref2.payload;
        var trigger = "palette-saturation-brightness";

        switch (key) {
          case "degree":
            color.value.gradientDegree = payload;
            trigger = "input";
            break;

          case "selectedId":
            color.value.gradientSelectedId = payload;
            break;

          case "colors":
            color.value.gradientColors = payload;
            break;
        }

        emitColorChange(trigger);
      };

      var handleSetColor = function handleSetColor(type, value) {
        var isGradientValue = Color.isGradientColor(value);

        if (isGradientValue) {
          if (props2.colorModes.includes("linear-gradient")) {
            mode.value = "linear-gradient";
            color.value.update(value);
            color.value.updateCurrentGradientColor();
          } else {
            console.warn("\u8BE5\u6A21\u5F0F\u4E0D\u652F\u6301\u6E10\u53D8\u8272");
          }
        } else if (mode.value === "linear-gradient") {
          color.value.updateStates(value);
          color.value.updateCurrentGradientColor();
        } else {
          color.value.update(value);
        }

        emitColorChange();
      };

      var previewColorStyle = VueCompositionAPI.computed(function () {
        return mode.value === "linear-gradient" ? color.value.linearGradient : color.value.rgba;
      });
      return {
        baseClassName: baseClassName,
        statusClassNames: statusClassNames,
        t: t,
        global: global,
        color: color,
        mode: mode,
        formatModel: formatModel,
        recentlyUsedColors: recentlyUsedColors,
        previewColorStyle: previewColorStyle,
        addRecentlyUsedColor: addRecentlyUsedColor,
        handleModeChange: handleModeChange,
        handleSatAndValueChange: handleSatAndValueChange,
        handleHueChange: handleHueChange,
        handleAlphaChange: handleAlphaChange,
        handleGradientChange: handleGradientChange,
        handleSetColor: handleSetColor,
        handleFormatModeChange: handleFormatModeChange,
        handleInputChange: handleInputChange,
        handleRecentlyUsedColorsChange: handleRecentlyUsedColorsChange
      };
    },
    render: function render() {
      var _systemColors,
          _this = this;

      var h = arguments[0];
      var baseClassName = this.baseClassName,
          statusClassNames = this.statusClassNames,
          t = this.t,
          global = this.global,
          recentColors = this.recentColors,
          swatchColors = this.swatchColors,
          previewColorStyle = this.previewColorStyle;
      var showUsedColors = recentColors !== null && recentColors !== false;
      var systemColors = swatchColors;

      if (systemColors === void 0) {
        systemColors = _toConsumableArray(DEFAULT_SYSTEM_SWATCH_COLORS);
      }

      var showSystemColors = ((_systemColors = systemColors) === null || _systemColors === void 0 ? void 0 : _systemColors.length) > 0;

      var renderSwatches = function renderSwatches() {
        if (!showSystemColors && !showUsedColors) {
          return null;
        }

        return h("div", {
          "class": "".concat(baseClassName, "__swatches-wrap")
        }, [showUsedColors ? h("swatches-panel", {
          "attrs": {
            "color": _this.color,
            "disabled": _this.disabled,
            "title": t(global.recentColorTitle),
            "editable": true,
            "colors": _this.recentlyUsedColors,
            "handleAddColor": _this.addRecentlyUsedColor,
            "handleSetColor": function handleSetColor(color) {
              _this.handleSetColor("used", color);
            },
            "handleChange": _this.handleRecentlyUsedColorsChange
          }
        }) : null, showSystemColors ? h("swatches-panel", {
          "attrs": {
            "color": _this.color,
            "disabled": _this.disabled,
            "title": t(global.swatchColorTitle),
            "colors": systemColors,
            "handleSetColor": function handleSetColor(color) {
              return _this.handleSetColor("system", color);
            }
          }
        }) : null]);
      };

      var isGradient = this.mode === "linear-gradient";
      return h("div", {
        "class": ["".concat(baseClassName, "__panel"), this.disabled ? statusClassNames.disabled : false]
      }, [h("panel-header", {
        "props": _objectSpread$1g({}, _objectSpread$1g({}, this.$props)),
        "attrs": {
          "mode": this.mode,
          "handleModeChange": this.handleModeChange
        }
      }), h("div", {
        "class": ["".concat(baseClassName, "__body")]
      }, [isGradient ? h("linear-gradient", {
        "attrs": {
          "color": this.color,
          "disabled": this.disabled,
          "handleChange": this.handleGradientChange
        }
      }) : null, h("saturation-panel", {
        "attrs": {
          "color": this.color,
          "disabled": this.disabled,
          "handleChange": this.handleSatAndValueChange
        }
      }), h("div", {
        "class": ["".concat(baseClassName, "__sliders-wrapper")]
      }, [h("div", {
        "class": ["".concat(baseClassName, "__sliders")]
      }, [h("hue-slider", {
        "attrs": {
          "color": this.color,
          "disabled": this.disabled,
          "handleChange": this.handleHueChange
        }
      }), this.enableAlpha ? h("alpha-slider", {
        "attrs": {
          "color": this.color,
          "disabled": this.disabled,
          "handleChange": this.handleAlphaChange
        }
      }) : null]), h("div", {
        "class": ["".concat(baseClassName, "__sliders-preview"), "".concat(baseClassName, "--bg-alpha")]
      }, [h("span", {
        "class": "".concat(baseClassName, "__sliders-preview-inner"),
        "style": {
          background: previewColorStyle
        }
      })])]), h("format-panel", {
        "props": _objectSpread$1g({}, _objectSpread$1g(_objectSpread$1g({}, this.$props), {}, {
          format: this.formatModel
        })),
        "attrs": {
          "color": this.color,
          "handleFormatModeChange": this.handleFormatModeChange,
          "handleFormatInputChange": this.handleInputChange
        }
      }), renderSwatches()])]);
    }
  });

  function ownKeys$1g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1g(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _ColorPickerPanel = VueCompositionAPI.defineComponent({
    name: "TColorPickerPanel",
    components: {
      ColorPanel: ColorPanel
    },
    inheritAttrs: false,
    props: _objectSpread$1f({}, props$y),
    setup: function setup(props2) {
      var prefix = usePrefixClass$1();

      var _toRefs = VueCompositionAPI.toRefs(props2),
          value = _toRefs.value;

      var _useVModel = useVModel(value, props2.defaultValue, props2.onChange, "change"),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerValue = _useVModel2[0],
          setInnerValue = _useVModel2[1];

      var handleChange = function handleChange(value2, context) {
        setInnerValue(value2, context);
      };

      return {
        prefix: prefix,
        innerValue: innerValue,
        setInnerValue: setInnerValue,
        handleChange: handleChange
      };
    },
    render: function render() {
      var h = arguments[0];
      var prefix = this.prefix,
          innerValue = this.innerValue,
          handleChange = this.handleChange;
      return h("color-panel", helper([{
        "props": _objectSpread$1f({}, _objectSpread$1f(_objectSpread$1f({}, this.$props), {}, {
          closeBtn: false,
          popupProps: null,
          value: innerValue
        }))
      }, {
        "on": {
          change: handleChange
        }
      }, {
        "class": "".concat(prefix, "-is-inline")
      }]));
    }
  });

  function ownKeys$1f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1f(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var DefaultTrigger = VueCompositionAPI.defineComponent({
    name: "DefaultTrigger",
    components: {
      TInput: Input,
      TInputNumber: InputNumber
    },
    inheritAttrs: false,
    props: {
      color: {
        type: String,
        "default": ""
      },
      disabled: {
        type: Boolean,
        "default": false
      },
      inputProps: {
        type: Object,
        "default": function _default() {
          return {
            autoWidth: true
          };
        }
      },
      handleTriggerChange: {
        type: Function,
        "default": function _default() {
          return function () {};
        }
      }
    },
    setup: function setup(props) {
      var baseClassName = useBaseClassName();
      var value = VueCompositionAPI.ref(props.color);
      VueCompositionAPI.watch(function () {
        return [props.color];
      }, function () {
        return value.value = props.color;
      });

      var handleChange = function handleChange(input) {
        if (input === props.color) {
          return;
        }

        if (!Color.isValid(input)) {
          value.value = props.color;
        } else {
          value.value = input;
        }

        props.handleTriggerChange(value.value);
      };

      return {
        baseClassName: baseClassName,
        value: value,
        handleChange: handleChange
      };
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var baseClassName = this.baseClassName;
      var inputSlots = {
        label: function label() {
          return h("div", {
            "class": ["".concat(baseClassName, "__trigger--default__color"), "".concat(baseClassName, "--bg-alpha")]
          }, [h("span", {
            "class": ["color-inner"],
            "style": {
              background: _this.value
            }
          })]);
        }
      };
      return h("div", {
        "class": "".concat(baseClassName, "__trigger--default")
      }, [h("t-input", {
        "props": _objectSpread$1e({}, _objectSpread$1e({}, this.inputProps)),
        "scopedSlots": inputSlots,
        "attrs": {
          "disabled": this.disabled
        },
        "on": {
          "blur": this.handleChange
        },
        "model": {
          value: _this.value,
          callback: function callback($$v) {
            _this.value = $$v;
          }
        }
      })]);
    }
  });

  function ownKeys$1e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1e(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _ColorPicker = VueCompositionAPI.defineComponent({
    name: "TColorPicker",
    components: {
      TPopup: Popup,
      ColorPanel: ColorPanel,
      DefaultTrigger: DefaultTrigger
    },
    props: _objectSpread$1d({}, props$y),
    setup: function setup(props2) {
      var baseClassName = useBaseClassName();
      var visible = VueCompositionAPI.ref(false);

      var setVisible = function setVisible(value2) {
        return visible.value = value2;
      };

      var _toRefs = VueCompositionAPI.toRefs(props2),
          value = _toRefs.value;

      var _useVModel = useVModel(value, props2.defaultValue, props2.onChange, "change"),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerValue = _useVModel2[0],
          setInnerValue = _useVModel2[1];

      var handleChange = function handleChange(value2, context) {
        setInnerValue(value2, context);
      };

      var handlePaletteChange = function handlePaletteChange(context) {
        props2.onPaletteBarChange(context);
      };

      return {
        baseClassName: baseClassName,
        innerValue: innerValue,
        visible: visible,
        setVisible: setVisible,
        setInnerValue: setInnerValue,
        handleChange: handleChange,
        handlePaletteChange: handlePaletteChange
      };
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var popupProps = this.popupProps,
          disabled = this.disabled,
          innerValue = this.innerValue,
          baseClassName = this.baseClassName,
          setVisible = this.setVisible,
          handleChange = this.handleChange,
          handlePaletteChange = this.handlePaletteChange;

      var renderPopupContent = function renderPopupContent() {
        if (disabled) {
          return null;
        }

        return h("color-panel", helper([{
          "props": _objectSpread$1d({}, _objectSpread$1d(_objectSpread$1d({}, _this.$props), {}, {
            value: innerValue
          })),
          "attrs": {
            "togglePopup": setVisible
          }
        }, {
          "on": {
            change: handleChange,
            handlePaletteChange: handlePaletteChange
          }
        }, {
          "ref": "refColorPanel"
        }]));
      };

      var popProps = _objectSpread$1d(_objectSpread$1d({
        placement: "bottom-left"
      }, popupProps || {}), {}, {
        trigger: "click",
        attach: "body",
        overlayClassName: [baseClassName],
        visible: this.visible,
        overlayInnerStyle: {
          padding: 0
        },
        onVisibleChange: function onVisibleChange(visible, context) {
          if (context.trigger === "document") {
            _this.setVisible(false);
          }
        }
      });

      return h("t-popup", {
        "props": _objectSpread$1d({}, _objectSpread$1d({}, popProps)),
        "attrs": {
          "content": renderPopupContent
        }
      }, [h("div", {
        "class": "".concat(baseClassName, "__trigger"),
        "on": {
          "click": function click() {
            return setVisible(!_this.visible);
          }
        }
      }, [renderTNodeJSXDefault(this, "default", h("default-trigger", {
        "attrs": {
          "color": this.innerValue,
          "disabled": disabled,
          "input-props": this.inputProps,
          "handleTriggerChange": this.setInnerValue
        }
      }))])]);
    }
  });

  var ColorPickerPanel = withInstall(_ColorPickerPanel, VueCompositionAPI__default["default"]);
  var ColorPicker = withInstall(_ColorPicker, VueCompositionAPI__default["default"]);

  var dayjs_min = createCommonjsModule(function (module, exports) {
    !function (t, e) {
      module.exports = e() ;
    }(commonjsGlobal, function () {

      var t = 1e3,
          e = 6e4,
          n = 36e5,
          r = "millisecond",
          i = "second",
          s = "minute",
          u = "hour",
          a = "day",
          o = "week",
          f = "month",
          h = "quarter",
          c = "year",
          d = "date",
          $ = "Invalid Date",
          l = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,
          y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,
          M = {
        name: "en",
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_")
      },
          m = function m(t, e, n) {
        var r = String(t);
        return !r || r.length >= e ? t : "" + Array(e + 1 - r.length).join(n) + t;
      },
          g = {
        s: m,
        z: function z(t) {
          var e = -t.utcOffset(),
              n = Math.abs(e),
              r = Math.floor(n / 60),
              i = n % 60;
          return (e <= 0 ? "+" : "-") + m(r, 2, "0") + ":" + m(i, 2, "0");
        },
        m: function t(e, n) {
          if (e.date() < n.date()) return -t(n, e);
          var r = 12 * (n.year() - e.year()) + (n.month() - e.month()),
              i = e.clone().add(r, f),
              s = n - i < 0,
              u = e.clone().add(r + (s ? -1 : 1), f);
          return +(-(r + (n - i) / (s ? i - u : u - i)) || 0);
        },
        a: function a(t) {
          return t < 0 ? Math.ceil(t) || 0 : Math.floor(t);
        },
        p: function p(t) {
          return {
            M: f,
            y: c,
            w: o,
            d: a,
            D: d,
            h: u,
            m: s,
            s: i,
            ms: r,
            Q: h
          }[t] || String(t || "").toLowerCase().replace(/s$/, "");
        },
        u: function u(t) {
          return void 0 === t;
        }
      },
          v = "en",
          D = {};

      D[v] = M;

      var p = function p(t) {
        return t instanceof _;
      },
          S = function t(e, n, r) {
        var i;
        if (!e) return v;

        if ("string" == typeof e) {
          var s = e.toLowerCase();
          D[s] && (i = s), n && (D[s] = n, i = s);
          var u = e.split("-");
          if (!i && u.length > 1) return t(u[0]);
        } else {
          var a = e.name;
          D[a] = e, i = a;
        }

        return !r && i && (v = i), i || !r && v;
      },
          w = function w(t, e) {
        if (p(t)) return t.clone();
        var n = "object" == _typeof$1(e) ? e : {};
        return n.date = t, n.args = arguments, new _(n);
      },
          O = g;

      O.l = S, O.i = p, O.w = function (t, e) {
        return w(t, {
          locale: e.$L,
          utc: e.$u,
          x: e.$x,
          $offset: e.$offset
        });
      };

      var _ = function () {
        function M(t) {
          this.$L = S(t.locale, null, !0), this.parse(t);
        }

        var m = M.prototype;
        return m.parse = function (t) {
          this.$d = function (t) {
            var e = t.date,
                n = t.utc;
            if (null === e) return new Date(NaN);
            if (O.u(e)) return new Date();
            if (e instanceof Date) return new Date(e);

            if ("string" == typeof e && !/Z$/i.test(e)) {
              var r = e.match(l);

              if (r) {
                var i = r[2] - 1 || 0,
                    s = (r[7] || "0").substring(0, 3);
                return n ? new Date(Date.UTC(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s)) : new Date(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s);
              }
            }

            return new Date(e);
          }(t), this.$x = t.x || {}, this.init();
        }, m.init = function () {
          var t = this.$d;
          this.$y = t.getFullYear(), this.$M = t.getMonth(), this.$D = t.getDate(), this.$W = t.getDay(), this.$H = t.getHours(), this.$m = t.getMinutes(), this.$s = t.getSeconds(), this.$ms = t.getMilliseconds();
        }, m.$utils = function () {
          return O;
        }, m.isValid = function () {
          return !(this.$d.toString() === $);
        }, m.isSame = function (t, e) {
          var n = w(t);
          return this.startOf(e) <= n && n <= this.endOf(e);
        }, m.isAfter = function (t, e) {
          return w(t) < this.startOf(e);
        }, m.isBefore = function (t, e) {
          return this.endOf(e) < w(t);
        }, m.$g = function (t, e, n) {
          return O.u(t) ? this[e] : this.set(n, t);
        }, m.unix = function () {
          return Math.floor(this.valueOf() / 1e3);
        }, m.valueOf = function () {
          return this.$d.getTime();
        }, m.startOf = function (t, e) {
          var n = this,
              r = !!O.u(e) || e,
              h = O.p(t),
              $ = function $(t, e) {
            var i = O.w(n.$u ? Date.UTC(n.$y, e, t) : new Date(n.$y, e, t), n);
            return r ? i : i.endOf(a);
          },
              l = function l(t, e) {
            return O.w(n.toDate()[t].apply(n.toDate("s"), (r ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e)), n);
          },
              y = this.$W,
              M = this.$M,
              m = this.$D,
              g = "set" + (this.$u ? "UTC" : "");

          switch (h) {
            case c:
              return r ? $(1, 0) : $(31, 11);

            case f:
              return r ? $(1, M) : $(0, M + 1);

            case o:
              var v = this.$locale().weekStart || 0,
                  D = (y < v ? y + 7 : y) - v;
              return $(r ? m - D : m + (6 - D), M);

            case a:
            case d:
              return l(g + "Hours", 0);

            case u:
              return l(g + "Minutes", 1);

            case s:
              return l(g + "Seconds", 2);

            case i:
              return l(g + "Milliseconds", 3);

            default:
              return this.clone();
          }
        }, m.endOf = function (t) {
          return this.startOf(t, !1);
        }, m.$set = function (t, e) {
          var n,
              o = O.p(t),
              h = "set" + (this.$u ? "UTC" : ""),
              $ = (n = {}, n[a] = h + "Date", n[d] = h + "Date", n[f] = h + "Month", n[c] = h + "FullYear", n[u] = h + "Hours", n[s] = h + "Minutes", n[i] = h + "Seconds", n[r] = h + "Milliseconds", n)[o],
              l = o === a ? this.$D + (e - this.$W) : e;

          if (o === f || o === c) {
            var y = this.clone().set(d, 1);
            y.$d[$](l), y.init(), this.$d = y.set(d, Math.min(this.$D, y.daysInMonth())).$d;
          } else $ && this.$d[$](l);

          return this.init(), this;
        }, m.set = function (t, e) {
          return this.clone().$set(t, e);
        }, m.get = function (t) {
          return this[O.p(t)]();
        }, m.add = function (r, h) {
          var d,
              $ = this;
          r = Number(r);

          var l = O.p(h),
              y = function y(t) {
            var e = w($);
            return O.w(e.date(e.date() + Math.round(t * r)), $);
          };

          if (l === f) return this.set(f, this.$M + r);
          if (l === c) return this.set(c, this.$y + r);
          if (l === a) return y(1);
          if (l === o) return y(7);
          var M = (d = {}, d[s] = e, d[u] = n, d[i] = t, d)[l] || 1,
              m = this.$d.getTime() + r * M;
          return O.w(m, this);
        }, m.subtract = function (t, e) {
          return this.add(-1 * t, e);
        }, m.format = function (t) {
          var e = this,
              n = this.$locale();
          if (!this.isValid()) return n.invalidDate || $;

          var r = t || "YYYY-MM-DDTHH:mm:ssZ",
              i = O.z(this),
              s = this.$H,
              u = this.$m,
              a = this.$M,
              o = n.weekdays,
              f = n.months,
              h = function h(t, n, i, s) {
            return t && (t[n] || t(e, r)) || i[n].slice(0, s);
          },
              c = function c(t) {
            return O.s(s % 12 || 12, t, "0");
          },
              d = n.meridiem || function (t, e, n) {
            var r = t < 12 ? "AM" : "PM";
            return n ? r.toLowerCase() : r;
          },
              l = {
            YY: String(this.$y).slice(-2),
            YYYY: this.$y,
            M: a + 1,
            MM: O.s(a + 1, 2, "0"),
            MMM: h(n.monthsShort, a, f, 3),
            MMMM: h(f, a),
            D: this.$D,
            DD: O.s(this.$D, 2, "0"),
            d: String(this.$W),
            dd: h(n.weekdaysMin, this.$W, o, 2),
            ddd: h(n.weekdaysShort, this.$W, o, 3),
            dddd: o[this.$W],
            H: String(s),
            HH: O.s(s, 2, "0"),
            h: c(1),
            hh: c(2),
            a: d(s, u, !0),
            A: d(s, u, !1),
            m: String(u),
            mm: O.s(u, 2, "0"),
            s: String(this.$s),
            ss: O.s(this.$s, 2, "0"),
            SSS: O.s(this.$ms, 3, "0"),
            Z: i
          };

          return r.replace(y, function (t, e) {
            return e || l[t] || i.replace(":", "");
          });
        }, m.utcOffset = function () {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m.diff = function (r, d, $) {
          var l,
              y = O.p(d),
              M = w(r),
              m = (M.utcOffset() - this.utcOffset()) * e,
              g = this - M,
              v = O.m(this, M);
          return v = (l = {}, l[c] = v / 12, l[f] = v, l[h] = v / 3, l[o] = (g - m) / 6048e5, l[a] = (g - m) / 864e5, l[u] = g / n, l[s] = g / e, l[i] = g / t, l)[y] || g, $ ? v : O.a(v);
        }, m.daysInMonth = function () {
          return this.endOf(f).$D;
        }, m.$locale = function () {
          return D[this.$L];
        }, m.locale = function (t, e) {
          if (!t) return this.$L;
          var n = this.clone(),
              r = S(t, e, !0);
          return r && (n.$L = r), n;
        }, m.clone = function () {
          return O.w(this.$d, this);
        }, m.toDate = function () {
          return new Date(this.valueOf());
        }, m.toJSON = function () {
          return this.isValid() ? this.toISOString() : null;
        }, m.toISOString = function () {
          return this.$d.toISOString();
        }, m.toString = function () {
          return this.$d.toUTCString();
        }, M;
      }(),
          T = _.prototype;

      return w.prototype = T, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", f], ["$y", c], ["$D", d]].forEach(function (t) {
        T[t[1]] = function (e) {
          return this.$g(e, t[0], t[1]);
        };
      }), w.extend = function (t, e) {
        return t.$i || (t(e, _, w), t.$i = !0), w;
      }, w.locale = S, w.isDayjs = p, w.unix = function (t) {
        return w(1e3 * t);
      }, w.en = D[v], w.Ls = D, w.p = {}, w;
    });
  });

  function _extends$1() {
    _extends$1 = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };
    return _extends$1.apply(this, arguments);
  }

  var isBetween = createCommonjsModule(function (module, exports) {
    !function (e, i) {
      module.exports = i() ;
    }(commonjsGlobal, function () {

      return function (e, i, t) {
        i.prototype.isBetween = function (e, i, s, f) {
          var n = t(e),
              o = t(i),
              r = "(" === (f = f || "()")[0],
              u = ")" === f[1];
          return (r ? this.isAfter(n, s) : !this.isBefore(n, s)) && (u ? this.isBefore(o, s) : !this.isAfter(o, s)) || (r ? this.isBefore(n, s) : !this.isAfter(n, s)) && (u ? this.isAfter(o, s) : !this.isBefore(o, s));
        };
      };
    });
  });

  var weekYear = createCommonjsModule(function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      return function (e, t) {
        t.prototype.weekYear = function () {
          var e = this.month(),
              t = this.week(),
              n = this.year();
          return 1 === t && 11 === e ? n + 1 : 0 === e && t >= 52 ? n - 1 : n;
        };
      };
    });
  });

  var localeData = createCommonjsModule(function (module, exports) {
    !function (n, e) {
      module.exports = e() ;
    }(commonjsGlobal, function () {

      return function (n, e, t) {
        var r = e.prototype,
            o = function o(n) {
          return n && (n.indexOf ? n : n.s);
        },
            u = function u(n, e, t, r, _u) {
          var i = n.name ? n : n.$locale(),
              a = o(i[e]),
              s = o(i[t]),
              f = a || s.map(function (n) {
            return n.slice(0, r);
          });
          if (!_u) return f;
          var d = i.weekStart;
          return f.map(function (n, e) {
            return f[(e + (d || 0)) % 7];
          });
        },
            i = function i() {
          return t.Ls[t.locale()];
        },
            a = function a(n, e) {
          return n.formats[e] || function (n) {
            return n.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (n, e, t) {
              return e || t.slice(1);
            });
          }(n.formats[e.toUpperCase()]);
        },
            s = function s() {
          var n = this;
          return {
            months: function months(e) {
              return e ? e.format("MMMM") : u(n, "months");
            },
            monthsShort: function monthsShort(e) {
              return e ? e.format("MMM") : u(n, "monthsShort", "months", 3);
            },
            firstDayOfWeek: function firstDayOfWeek() {
              return n.$locale().weekStart || 0;
            },
            weekdays: function weekdays(e) {
              return e ? e.format("dddd") : u(n, "weekdays");
            },
            weekdaysMin: function weekdaysMin(e) {
              return e ? e.format("dd") : u(n, "weekdaysMin", "weekdays", 2);
            },
            weekdaysShort: function weekdaysShort(e) {
              return e ? e.format("ddd") : u(n, "weekdaysShort", "weekdays", 3);
            },
            longDateFormat: function longDateFormat(e) {
              return a(n.$locale(), e);
            },
            meridiem: this.$locale().meridiem,
            ordinal: this.$locale().ordinal
          };
        };

        r.localeData = function () {
          return s.bind(this)();
        }, t.localeData = function () {
          var n = i();
          return {
            firstDayOfWeek: function firstDayOfWeek() {
              return n.weekStart || 0;
            },
            weekdays: function weekdays() {
              return t.weekdays();
            },
            weekdaysShort: function weekdaysShort() {
              return t.weekdaysShort();
            },
            weekdaysMin: function weekdaysMin() {
              return t.weekdaysMin();
            },
            months: function months() {
              return t.months();
            },
            monthsShort: function monthsShort() {
              return t.monthsShort();
            },
            longDateFormat: function longDateFormat(e) {
              return a(n, e);
            },
            meridiem: n.meridiem,
            ordinal: n.ordinal
          };
        }, t.months = function () {
          return u(i(), "months");
        }, t.monthsShort = function () {
          return u(i(), "monthsShort", "months", 3);
        }, t.weekdays = function (n) {
          return u(i(), "weekdays", null, null, n);
        }, t.weekdaysShort = function (n) {
          return u(i(), "weekdaysShort", "weekdays", 3, n);
        }, t.weekdaysMin = function (n) {
          return u(i(), "weekdaysMin", "weekdays", 2, n);
        };
      };
    });
  });

  var weekOfYear = createCommonjsModule(function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      var e = "week",
          t = "year";
      return function (i, n, r) {
        var f = n.prototype;
        f.week = function (i) {
          if (void 0 === i && (i = null), null !== i) return this.add(7 * (i - this.week()), "day");
          var n = this.$locale().yearStart || 1;

          if (11 === this.month() && this.date() > 25) {
            var f = r(this).startOf(t).add(1, t).date(n),
                s = r(this).endOf(e);
            if (f.isBefore(s)) return 1;
          }

          var a = r(this).startOf(t).date(n).startOf(e).subtract(1, "millisecond"),
              o = this.diff(a, e, !0);
          return o < 0 ? r(this).startOf("week").week() : Math.ceil(o);
        }, f.weeks = function (e) {
          return void 0 === e && (e = null), this.week(e);
        };
      };
    });
  });

  var quarterOfYear = createCommonjsModule(function (module, exports) {
    !function (t, n) {
      module.exports = n() ;
    }(commonjsGlobal, function () {

      var t = "month",
          n = "quarter";
      return function (e, i) {
        var r = i.prototype;

        r.quarter = function (t) {
          return this.$utils().u(t) ? Math.ceil((this.month() + 1) / 3) : this.month(this.month() % 3 + 3 * (t - 1));
        };

        var s = r.add;

        r.add = function (e, i) {
          return e = Number(e), this.$utils().p(i) === n ? this.add(3 * e, t) : s.bind(this)(e, i);
        };

        var u = r.startOf;

        r.startOf = function (e, i) {
          var r = this.$utils(),
              s = !!r.u(i) || i;

          if (r.p(e) === n) {
            var o = this.quarter() - 1;
            return s ? this.month(3 * o).startOf(t).startOf("day") : this.month(3 * o + 2).endOf(t).endOf("day");
          }

          return u.bind(this)(e, i);
        };
      };
    });
  });

  var isoWeek = createCommonjsModule(function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      var e = "day";
      return function (t, i, s) {
        var a = function a(t) {
          return t.add(4 - t.isoWeekday(), e);
        },
            d = i.prototype;

        d.isoWeekYear = function () {
          return a(this).year();
        }, d.isoWeek = function (t) {
          if (!this.$utils().u(t)) return this.add(7 * (t - this.isoWeek()), e);
          var i,
              d,
              n,
              o,
              r = a(this),
              u = (i = this.isoWeekYear(), d = this.$u, n = (d ? s.utc : s)().year(i).startOf("year"), o = 4 - n.isoWeekday(), n.isoWeekday() > 4 && (o += 7), n.add(o, e));
          return r.diff(u, "week") + 1;
        }, d.isoWeekday = function (e) {
          return this.$utils().u(e) ? this.day() || 7 : this.day(this.day() % 7 ? e : e - 7);
        };
        var n = d.startOf;

        d.startOf = function (e, t) {
          var i = this.$utils(),
              s = !!i.u(t) || t;
          return "isoweek" === i.p(e) ? s ? this.date(this.date() - (this.isoWeekday() - 1)).startOf("day") : this.date(this.date() - 1 - (this.isoWeekday() - 1) + 7).endOf("day") : n.bind(this)(e, t);
        };
      };
    });
  });

  var advancedFormat = createCommonjsModule(function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      return function (e, t, r) {
        var n = t.prototype,
            s = n.format;
        r.en.ordinal = function (e) {
          var t = ["th", "st", "nd", "rd"],
              r = e % 100;
          return "[" + e + (t[(r - 20) % 10] || t[r] || t[0]) + "]";
        }, n.format = function (e) {
          var t = this,
              r = this.$locale();
          if (!this.isValid()) return s.bind(this)(e);
          var n = this.$utils(),
              a = (e || "YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g, function (e) {
            switch (e) {
              case "Q":
                return Math.ceil((t.$M + 1) / 3);

              case "Do":
                return r.ordinal(t.$D);

              case "gggg":
                return t.weekYear();

              case "GGGG":
                return t.isoWeekYear();

              case "wo":
                return r.ordinal(t.week(), "W");

              case "w":
              case "ww":
                return n.s(t.week(), "w" === e ? 1 : 2, "0");

              case "W":
              case "WW":
                return n.s(t.isoWeek(), "W" === e ? 1 : 2, "0");

              case "k":
              case "kk":
                return n.s(String(0 === t.$H ? 24 : t.$H), "k" === e ? 1 : 2, "0");

              case "X":
                return Math.floor(t.$d.getTime() / 1e3);

              case "x":
                return t.$d.getTime();

              case "z":
                return "[" + t.offsetName() + "]";

              case "zzz":
                return "[" + t.offsetName("long") + "]";

              default:
                return e;
            }
          });
          return s.bind(this)(a);
        };
      };
    });
  });

  var customParseFormat = createCommonjsModule(function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      var e = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
      },
          t = /(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,
          n = /\d\d/,
          r = /\d\d?/,
          i = /\d*[^-_:/,()\s\d]+/,
          o = {},
          s = function s(e) {
        return (e = +e) + (e > 68 ? 1900 : 2e3);
      };

      var a = function a(e) {
        return function (t) {
          this[e] = +t;
        };
      },
          f = [/[+-]\d\d:?(\d\d)?|Z/, function (e) {
        (this.zone || (this.zone = {})).offset = function (e) {
          if (!e) return 0;
          if ("Z" === e) return 0;
          var t = e.match(/([+-]|\d\d)/g),
              n = 60 * t[1] + (+t[2] || 0);
          return 0 === n ? 0 : "+" === t[0] ? -n : n;
        }(e);
      }],
          h = function h(e) {
        var t = o[e];
        return t && (t.indexOf ? t : t.s.concat(t.f));
      },
          u = function u(e, t) {
        var n,
            r = o.meridiem;

        if (r) {
          for (var i = 1; i <= 24; i += 1) {
            if (e.indexOf(r(i, 0, t)) > -1) {
              n = i > 12;
              break;
            }
          }
        } else n = e === (t ? "pm" : "PM");

        return n;
      },
          d = {
        A: [i, function (e) {
          this.afternoon = u(e, !1);
        }],
        a: [i, function (e) {
          this.afternoon = u(e, !0);
        }],
        S: [/\d/, function (e) {
          this.milliseconds = 100 * +e;
        }],
        SS: [n, function (e) {
          this.milliseconds = 10 * +e;
        }],
        SSS: [/\d{3}/, function (e) {
          this.milliseconds = +e;
        }],
        s: [r, a("seconds")],
        ss: [r, a("seconds")],
        m: [r, a("minutes")],
        mm: [r, a("minutes")],
        H: [r, a("hours")],
        h: [r, a("hours")],
        HH: [r, a("hours")],
        hh: [r, a("hours")],
        D: [r, a("day")],
        DD: [n, a("day")],
        Do: [i, function (e) {
          var t = o.ordinal,
              n = e.match(/\d+/);
          if (this.day = n[0], t) for (var r = 1; r <= 31; r += 1) {
            t(r).replace(/\[|\]/g, "") === e && (this.day = r);
          }
        }],
        M: [r, a("month")],
        MM: [n, a("month")],
        MMM: [i, function (e) {
          var t = h("months"),
              n = (h("monthsShort") || t.map(function (e) {
            return e.slice(0, 3);
          })).indexOf(e) + 1;
          if (n < 1) throw new Error();
          this.month = n % 12 || n;
        }],
        MMMM: [i, function (e) {
          var t = h("months").indexOf(e) + 1;
          if (t < 1) throw new Error();
          this.month = t % 12 || t;
        }],
        Y: [/[+-]?\d+/, a("year")],
        YY: [n, function (e) {
          this.year = s(e);
        }],
        YYYY: [/\d{4}/, a("year")],
        Z: f,
        ZZ: f
      };

      function c(n) {
        var r, i;
        r = n, i = o && o.formats;

        for (var s = (n = r.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function (t, n, r) {
          var o = r && r.toUpperCase();
          return n || i[r] || e[r] || i[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (e, t, n) {
            return t || n.slice(1);
          });
        })).match(t), a = s.length, f = 0; f < a; f += 1) {
          var h = s[f],
              u = d[h],
              c = u && u[0],
              l = u && u[1];
          s[f] = l ? {
            regex: c,
            parser: l
          } : h.replace(/^\[|\]$/g, "");
        }

        return function (e) {
          for (var t = {}, n = 0, r = 0; n < a; n += 1) {
            var i = s[n];
            if ("string" == typeof i) r += i.length;else {
              var o = i.regex,
                  f = i.parser,
                  h = e.slice(r),
                  u = o.exec(h)[0];
              f.call(t, u), e = e.replace(u, "");
            }
          }

          return function (e) {
            var t = e.afternoon;

            if (void 0 !== t) {
              var n = e.hours;
              t ? n < 12 && (e.hours += 12) : 12 === n && (e.hours = 0), delete e.afternoon;
            }
          }(t), t;
        };
      }

      return function (e, t, n) {
        n.p.customParseFormat = !0, e && e.parseTwoDigitYear && (s = e.parseTwoDigitYear);
        var r = t.prototype,
            i = r.parse;

        r.parse = function (e) {
          var t = e.date,
              r = e.utc,
              s = e.args;
          this.$u = r;
          var a = s[1];

          if ("string" == typeof a) {
            var f = !0 === s[2],
                h = !0 === s[3],
                u = f || h,
                d = s[2];
            h && (d = s[2]), o = this.$locale(), !f && d && (o = n.Ls[d]), this.$d = function (e, t, n) {
              try {
                if (["x", "X"].indexOf(t) > -1) return new Date(("X" === t ? 1e3 : 1) * e);
                var r = c(t)(e),
                    i = r.year,
                    o = r.month,
                    s = r.day,
                    a = r.hours,
                    f = r.minutes,
                    h = r.seconds,
                    u = r.milliseconds,
                    d = r.zone,
                    l = new Date(),
                    m = s || (i || o ? 1 : l.getDate()),
                    M = i || l.getFullYear(),
                    Y = 0;
                i && !o || (Y = o > 0 ? o - 1 : l.getMonth());
                var p = a || 0,
                    v = f || 0,
                    D = h || 0,
                    g = u || 0;
                return d ? new Date(Date.UTC(M, Y, m, p, v, D, g + 60 * d.offset * 1e3)) : n ? new Date(Date.UTC(M, Y, m, p, v, D, g)) : new Date(M, Y, m, p, v, D, g);
              } catch (e) {
                return new Date("");
              }
            }(t, a, r), this.init(), d && !0 !== d && (this.$L = this.locale(d).$L), u && t != this.format(a) && (this.$d = new Date("")), o = {};
          } else if (a instanceof Array) for (var l = a.length, m = 1; m <= l; m += 1) {
            s[1] = a[m - 1];
            var M = n.apply(this, s);

            if (M.isValid()) {
              this.$d = M.$d, this.$L = M.$L, this.init();
              break;
            }

            m === l && (this.$d = new Date(""));
          } else i.call(this, e);
        };
      };
    });
  });

  /** Used as references for various `Number` constants. */

  var INFINITY = 1 / 0,
      MAX_INTEGER = 1.7976931348623157e+308;
  /**
   * Converts `value` to a finite number.
   *
   * @static
   * @memberOf _
   * @since 4.12.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted number.
   * @example
   *
   * _.toFinite(3.2);
   * // => 3.2
   *
   * _.toFinite(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toFinite(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toFinite('3.2');
   * // => 3.2
   */

  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }

    value = toNumber_1(value);

    if (value === INFINITY || value === -INFINITY) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }

    return value === value ? value : 0;
  }

  var toFinite_1 = toFinite;

  /**
   * Converts `value` to an integer.
   *
   * **Note:** This method is loosely based on
   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3.2);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3.2');
   * // => 3
   */

  function toInteger(value) {
    var result = toFinite_1(value),
        remainder = result % 1;
    return result === result ? remainder ? result - remainder : result : 0;
  }

  var toInteger_1 = toInteger;

  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeCeil$2 = Math.ceil,
      nativeMax$2 = Math.max;
  /**
   * Creates an array of elements split into groups the length of `size`.
   * If `array` can't be split evenly, the final chunk will be the remaining
   * elements.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to process.
   * @param {number} [size=1] The length of each chunk
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the new array of chunks.
   * @example
   *
   * _.chunk(['a', 'b', 'c', 'd'], 2);
   * // => [['a', 'b'], ['c', 'd']]
   *
   * _.chunk(['a', 'b', 'c', 'd'], 3);
   * // => [['a', 'b', 'c'], ['d']]
   */

  function chunk(array, size, guard) {
    if (guard ? _isIterateeCall(array, size, guard) : size === undefined) {
      size = 1;
    } else {
      size = nativeMax$2(toInteger_1(size), 0);
    }

    var length = array == null ? 0 : array.length;

    if (!length || size < 1) {
      return [];
    }

    var index = 0,
        resIndex = 0,
        result = Array(nativeCeil$2(length / size));

    while (index < length) {
      result[resIndex++] = _baseSlice(array, index, index += size);
    }

    return result;
  }

  var chunk_1 = chunk;

  function ownKeys$1d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1d(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs_min.extend(isoWeek);
  dayjs_min.extend(weekYear);
  dayjs_min.extend(localeData);
  dayjs_min.extend(weekOfYear);
  dayjs_min.extend(quarterOfYear);
  dayjs_min.extend(advancedFormat);
  dayjs_min.extend(customParseFormat);
  dayjs_min.extend(isBetween);
  function firstUpperCase(str) {
    if (!str) return str;
    return str[0].toUpperCase().concat(str.substring(1, str.length));
  }

  function getFirstDayOfMonth(_ref) {
    var year = _ref.year,
        month = _ref.month;
    return new Date(year, month, 1);
  }

  function getDaysInMonth(_ref2) {
    var year = _ref2.year,
        month = _ref2.month;
    return new Date(year, month + 1, 0).getDate();
  }

  function getLastDayOfMonth(_ref3) {
    var year = _ref3.year,
        month = _ref3.month;
    return new Date(year, month, getDaysInMonth({
      year: year,
      month: month
    }));
  }

  function isSameYear(date1, date2) {
    return date1.getFullYear() === date2.getFullYear();
  }

  function isSameQuarter(date1, date2) {
    return isSameYear(date1, date2) && dayjs_min(date1).quarter() === dayjs_min(date2).quarter();
  }

  function isSameMonth(date1, date2) {
    return isSameYear(date1, date2) && date1.getMonth() === date2.getMonth();
  }

  function isSameWeek(date1, date2) {
    return isSameMonth(date1, date2) && dayjs_min(date1).week() === dayjs_min(date2).week();
  }

  function isSameDate(date1, date2) {
    return isSameMonth(date1, date2) && date1.getDate() === date2.getDate();
  }

  function compareAsc(date1, date2) {
    var d1 = date1.getTime();
    var d2 = date2.getTime();
    if (d1 < d2) return -1;
    if (d1 > d2) return 1;
    return 0;
  }

  function isSame(date1, date2) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "date";
    var func = {
      isSameYear: isSameYear,
      isSameQuarter: isSameQuarter,
      isSameMonth: isSameMonth,
      isSameWeek: isSameWeek,
      isSameDate: isSameDate
    };
    return func["isSame".concat(firstUpperCase(type))](date1, date2);
  }
  function outOfRanges(d, min, max) {
    return min && compareAsc(d, min) === -1 || max && compareAsc(d, max) === 1;
  }
  function getToday() {
    var now = new Date();
    return new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
  }
  function subtractMonth(date, num) {
    return dayjs_min(date).subtract(num, "month").toDate();
  }
  function addMonth(date, num) {
    return dayjs_min(date).add(num, "month").toDate();
  }
  function getWeeks(_ref4, _ref5) {
    var year = _ref4.year,
        month = _ref4.month;
    var firstDayOfWeek = _ref5.firstDayOfWeek,
        _ref5$showWeekOfYear = _ref5.showWeekOfYear,
        showWeekOfYear = _ref5$showWeekOfYear === void 0 ? false : _ref5$showWeekOfYear,
        _ref5$disableDate = _ref5.disableDate,
        disableDate = _ref5$disableDate === void 0 ? function () {
      return false;
    } : _ref5$disableDate,
        minDate = _ref5.minDate,
        maxDate = _ref5.maxDate;
    var prependDay = getFirstDayOfMonth({
      year: year,
      month: month
    });
    var appendDay = getLastDayOfMonth({
      year: year,
      month: month
    });
    var maxDays = getDaysInMonth({
      year: year,
      month: month
    });
    var daysArr = [];
    var i = 1;
    var today = getToday();

    for (i; i <= maxDays; i++) {
      var currentDay = new Date(year, month, i);
      daysArr.push({
        text: i,
        active: false,
        value: currentDay,
        disabled: typeof disableDate === "function" && disableDate(currentDay) || outOfRanges(currentDay, minDate, maxDate),
        now: isSame(today, currentDay),
        firstDayOfMonth: i === 1,
        lastDayOfMonth: i === maxDays,
        type: "current-month"
      });
    }

    if (prependDay.getDay() !== firstDayOfWeek) {
      prependDay.setDate(0);

      while (true) {
        daysArr.unshift({
          text: prependDay.getDate().toString(),
          active: false,
          value: new Date(prependDay),
          disabled: typeof disableDate === "function" && disableDate(prependDay) || outOfRanges(prependDay, minDate, maxDate),
          additional: true,
          type: "prev-month"
        });
        prependDay.setDate(prependDay.getDate() - 1);
        if (prependDay.getDay() === Math.abs(firstDayOfWeek + 6) % 7) break;
      }
    }

    var LEN = 42;

    while (daysArr.length < LEN) {
      appendDay.setDate(appendDay.getDate() + 1);
      daysArr.push({
        text: appendDay.getDate(),
        active: false,
        value: new Date(appendDay),
        disabled: typeof disableDate === "function" && disableDate(appendDay) || outOfRanges(appendDay, minDate, maxDate),
        additional: true,
        type: "next-month"
      });
    }

    var dataList = chunk_1(daysArr, 7);

    if (showWeekOfYear) {
      dataList.forEach(function (d) {
        d.unshift(_objectSpread$1c(_objectSpread$1c({}, d[0]), {}, {
          active: false,
          value: d[0].value,
          text: dayjs_min(d[0].value).week()
        }));
      });
    }

    return dataList;
  }
  function getQuarters(year, _ref6) {
    var _ref6$disableDate = _ref6.disableDate,
        disableDate = _ref6$disableDate === void 0 ? function () {
      return false;
    } : _ref6$disableDate,
        minDate = _ref6.minDate,
        maxDate = _ref6.maxDate,
        quarterLocal = _ref6.quarterLocal;
    var quarterArr = [];
    var today = getToday();

    for (var i = 1; i <= 4; i++) {
      var date = dayjs_min(new Date(year, 0)).quarter(i).toDate();
      quarterArr.push({
        value: date,
        now: isSame(date, today, "quarter"),
        disabled: typeof disableDate === "function" && disableDate(date) || outOfRanges(date, minDate, maxDate),
        active: false,
        text: quarterLocal[i - 1]
      });
    }

    return chunk_1(quarterArr, 4);
  }
  function getYears(year, _ref7) {
    var _ref7$disableDate = _ref7.disableDate,
        disableDate = _ref7$disableDate === void 0 ? function () {
      return false;
    } : _ref7$disableDate,
        minDate = _ref7.minDate,
        maxDate = _ref7.maxDate;
    var startYear = parseInt((year / 10).toString(), 10) * 10;
    var endYear = startYear + 9;
    var yearArr = [];
    var today = getToday();

    for (var i = startYear; i <= endYear; i++) {
      var date = new Date(i, 1);
      var disabledMonth = 0;
      var outOfRangeMonth = 0;

      for (var j = 0; j < 12; j++) {
        var d = new Date(i, j);
        if (typeof disableDate === "function" && disableDate(d)) disabledMonth += 1;
        if (outOfRanges(d, minDate, maxDate)) outOfRangeMonth += 1;
      }

      yearArr.push({
        value: date,
        now: isSame(date, today, "year"),
        disabled: disabledMonth === 12 || outOfRangeMonth === 12,
        active: false,
        text: "".concat(date.getFullYear())
      });
    }

    return chunk_1(yearArr, 3);
  }
  function getMonths(year, params) {
    var _params$disableDate = params.disableDate,
        disableDate = _params$disableDate === void 0 ? function () {
      return false;
    } : _params$disableDate,
        minDate = params.minDate,
        maxDate = params.maxDate,
        monthLocal = params.monthLocal;
    var MonthArr = [];
    var today = getToday();

    for (var i = 0; i <= 11; i++) {
      var date = new Date(year, i);
      var disabledDay = 0;
      var outOfRangeDay = 0;
      var daysInMonth = getDaysInMonth({
        year: year,
        month: i
      });

      for (var j = 1; j <= daysInMonth; j++) {
        var d = new Date(year, i, j);
        if (typeof disableDate === "function" && disableDate(d)) disabledDay += 1;
        if (outOfRanges(d, minDate, maxDate)) outOfRangeDay += 1;
      }

      MonthArr.push({
        value: date,
        now: isSame(date, today, "month"),
        disabled: disabledDay === daysInMonth || outOfRangeDay === daysInMonth,
        active: false,
        text: monthLocal[date.getMonth()]
      });
    }

    return chunk_1(MonthArr, 3);
  }
  function flagActive(data, _ref8) {
    var args = _extends$1({}, _ref8);

    var start = args.start,
        end = args.end,
        hoverStart = args.hoverStart,
        hoverEnd = args.hoverEnd,
        _args$type = args.type,
        type = _args$type === void 0 ? "date" : _args$type,
        _args$isRange = args.isRange,
        isRange = _args$isRange === void 0 ? false : _args$isRange;
    if (type === "week") return data;

    if (!isRange) {
      return data.map(function (row) {
        return row.map(function (item) {
          var _item = item;
          _item.active = start && isSame(item.value, start, type) && !_item.additional;
          return _item;
        });
      });
    }

    return data.map(function (row) {
      return row.map(function (item) {
        var _item = item;
        var date = item.value;
        var isStart = start && isSame(start, date, type);
        var isHoverStart = hoverStart && isSame(hoverStart, date, type);
        var isEnd = end && isSame(end, date, type);
        var isHoverEnd = hoverEnd && isSame(hoverEnd, date, type);
        _item.active = (isStart || isEnd) && !_item.additional;

        if (start && end) {
          _item.highlight = dayjs_min(date).isBetween(start, end, type, "[]") && !_item.additional;
          _item.startOfRange = isStart;
          _item.endOfRange = isEnd;
        }

        if (hoverStart && hoverEnd) {
          _item.hoverHighlight = dayjs_min(date).isBetween(hoverStart, hoverEnd, type, "[]") && !_item.additional;
          _item.hoverStartOfRange = isHoverStart;
          _item.hoverEndOfRange = isHoverEnd;
        }

        return _item;
      });
    });
  }
  function extractTimeFormat() {
    var dateFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var res = dateFormat.match(/(a\s)?h{1,2}:m{1,2}(:s{1,2})?(\sa)?/i);
    if (!res) return null;
    return res[0];
  }
  function extractTimeObj() {
    var timeFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var matchedMeridiem = timeFormat.match(/[ap]m/i) || [""];
    var timeReg = /\d{1,2}:\d{1,2}(:\d{1,2})?(:\d{1,3})?/;
    var matchedTimeStr = timeFormat.match(timeReg) || ["0:0:0:0"];

    var _matchedTimeStr$0$spl = matchedTimeStr[0].split(":"),
        _matchedTimeStr$0$spl2 = _slicedToArray(_matchedTimeStr$0$spl, 4),
        _matchedTimeStr$0$spl3 = _matchedTimeStr$0$spl2[0],
        hours = _matchedTimeStr$0$spl3 === void 0 ? 0 : _matchedTimeStr$0$spl3,
        _matchedTimeStr$0$spl4 = _matchedTimeStr$0$spl2[1],
        minutes = _matchedTimeStr$0$spl4 === void 0 ? 0 : _matchedTimeStr$0$spl4,
        _matchedTimeStr$0$spl5 = _matchedTimeStr$0$spl2[2],
        seconds = _matchedTimeStr$0$spl5 === void 0 ? 0 : _matchedTimeStr$0$spl5,
        _matchedTimeStr$0$spl6 = _matchedTimeStr$0$spl2[3],
        milliseconds = _matchedTimeStr$0$spl6 === void 0 ? 0 : _matchedTimeStr$0$spl6;

    return {
      hours: +hours,
      minutes: +minutes,
      seconds: +seconds,
      milliseconds: +milliseconds,
      meridiem: matchedMeridiem[0]
    };
  }

  var TIME_FORMAT$1 = "HH:mm:ss";

  function formatRange(_ref) {
    var newDate = _ref.newDate,
        format = _ref.format,
        targetFormat = _ref.targetFormat;
    if (!newDate || !Array.isArray(newDate)) return [];
    var dayjsDateList = newDate.map(function (d) {
      return d && parseToDayjs(d, format);
    });

    if (dayjsDateList[0] && dayjsDateList[1] && dayjsDateList[0].toDate().getTime() > dayjsDateList[1].toDate().getTime()) {
      dayjsDateList = [dayjsDateList[1], dayjsDateList[0]];
    }

    if (dayjsDateList.some(function (r) {
      return r && !r.isValid();
    })) {
      log.error("DatePicker", "\u8BF7\u68C0\u67E5 format\u3001valueType\u3001value \u683C\u5F0F\u662F\u5426\u6709\u6548.\nformat: '".concat(format, "' valueType: '").concat(targetFormat, "' value: '").concat(newDate, "'"));
      return [];
    }

    if (targetFormat === "time-stamp") {
      return dayjsDateList.map(function (da) {
        return da && da.toDate().getTime();
      });
    }

    return dayjsDateList.map(function (da) {
      return da && da.format(targetFormat);
    });
  }

  function formatSingle(_ref2) {
    var newDate = _ref2.newDate,
        format = _ref2.format,
        targetFormat = _ref2.targetFormat;
    if (!newDate) return "";
    var dayJsDate = parseToDayjs(newDate, format);

    if (!dayJsDate.isValid()) {
      log.error("DatePicker", "\u8BF7\u68C0\u67E5 format\u3001valueType\u3001value \u683C\u5F0F\u662F\u5426\u6709\u6548.\nformat: '".concat(format, "' valueType: '").concat(targetFormat, "' value: '").concat(newDate, "'"));
      return "";
    }

    if (targetFormat === "time-stamp") return dayJsDate.toDate().getTime();
    return dayJsDate.format(targetFormat);
  }

  function isValidDate(value, format) {
    if (Array.isArray(value)) {
      if (format === "time-stamp") return value.every(function (v) {
        return dayjs_min(v).isValid();
      });
      return value.every(function (v) {
        return dayjs_min(v, format).isValid() || dayjs_min(v).isValid();
      });
    }

    if (format === "time-stamp") return dayjs_min(value).isValid();
    return dayjs_min(value, format).isValid() || dayjs_min(value).isValid();
  }
  function formatDate(newDate, _ref3) {
    var format = _ref3.format,
        targetFormat = _ref3.targetFormat;
    var result;

    if (Array.isArray(newDate)) {
      result = formatRange({
        newDate: newDate,
        format: format,
        targetFormat: targetFormat
      });
    } else {
      result = formatSingle({
        newDate: newDate,
        format: format,
        targetFormat: targetFormat
      });
    }

    return result;
  }
  function formatTime(value, timeFormat) {
    var result;

    if (Array.isArray(value)) {
      result = value.map(function (v) {
        return dayjs_min(v).format(timeFormat);
      });
    } else {
      result = dayjs_min(value || new Date()).format(timeFormat);
    }

    return result;
  }
  function parseToDayjs(value, format, timeOfDay) {
    var dateText = value;

    if (/[w|W]/g.test(format)) {
      if (typeof dateText !== "string") {
        dateText = dayjs_min(dateText).format(format);
      }

      var yearStr = dateText.split(/[-/.]/)[0];
      var weekStr = dateText.split(/[-/.]/)[1];
      var weekFormatStr = format.split(/[-/.]/)[1];
      var firstWeek = dayjs_min(yearStr, "YYYY").startOf("year");

      for (var i = 0; i <= 52; i += 1) {
        var nextWeek = firstWeek.add(i, "week");
        if (timeOfDay === "start") nextWeek = nextWeek.subtract(5, "day");

        if (nextWeek.format(weekFormatStr) === weekStr) {
          return nextWeek;
        }
      }
    }

    if (/Q/g.test(format)) {
      if (typeof dateText !== "string") {
        dateText = dayjs_min(dateText).format(format);
      }

      var _yearStr = dateText.split(/[-/.]/)[0];
      var quarterStr = dateText.split(/[-/.]/)[1];
      var quarterFormatStr = format.split(/[-/.]/)[1];

      var _firstWeek = dayjs_min(_yearStr, "YYYY").startOf("year");

      for (var _i = 0; _i <= 52; _i += 1) {
        var nextQuarter = _firstWeek.add(_i, "quarter");

        if (nextQuarter.format(quarterFormatStr) === quarterStr) {
          return nextQuarter;
        }
      }
    }

    return dayjs_min(dateText, format).isValid() ? dayjs_min(dateText, format) : dayjs_min(dateText);
  }
  function getDefaultFormat(_ref4) {
    var _ref4$mode = _ref4.mode,
        mode = _ref4$mode === void 0 ? "date" : _ref4$mode,
        format = _ref4.format,
        valueType = _ref4.valueType,
        enableTimePicker = _ref4.enableTimePicker;

    if (mode === "year") {
      return {
        format: format || "YYYY",
        valueType: valueType || "YYYY",
        timeFormat: TIME_FORMAT$1
      };
    }

    if (mode === "month") {
      return {
        format: format || "YYYY-MM",
        valueType: valueType || "YYYY-MM",
        timeFormat: TIME_FORMAT$1
      };
    }

    if (mode === "quarter") {
      return {
        format: format || "YYYY-[Q]Q",
        valueType: valueType || "YYYY-[Q]Q",
        timeFormat: TIME_FORMAT$1
      };
    }

    if (mode === "week") {
      return {
        format: format || "YYYY-wo",
        valueType: valueType || "YYYY-wo",
        timeFormat: TIME_FORMAT$1
      };
    }

    if (mode === "date") {
      return {
        format: format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : ""),
        valueType: valueType || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : ""),
        timeFormat: extractTimeFormat(format || "YYYY-MM-DD".concat(enableTimePicker ? " HH:mm:ss" : "")) || TIME_FORMAT$1
      };
    }
  }

  function useSingleValue(props) {
    var _toRefs = VueCompositionAPI.toRefs(props),
        valueFromProps = _toRefs.value;

    var _useVModel = useVModel(valueFromProps, props.defaultValue, props.onChange, "change"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        value = _useVModel2[0],
        onChange = _useVModel2[1];

    var formatRef = VueCompositionAPI.computed(function () {
      return getDefaultFormat({
        mode: props.mode,
        format: props.format,
        valueType: props.valueType,
        enableTimePicker: props.enableTimePicker
      });
    });

    if (props.enableTimePicker) {
      if (!extractTimeFormat(formatRef.value.format)) console.error("format: ".concat(formatRef.value.format, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
      if (!extractTimeFormat(formatRef.value.valueType) && formatRef.value.valueType !== "time-stamp") console.error("valueType: ".concat(formatRef.value.valueType, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
    }

    var time = VueCompositionAPI.ref(formatTime(value.value, formatRef.value.timeFormat));
    var month = VueCompositionAPI.ref(dayjs_min(value.value).month() || new Date().getMonth());
    var year = VueCompositionAPI.ref(dayjs_min(value.value).year() || new Date().getFullYear());
    var cacheValue = VueCompositionAPI.ref(formatDate(value.value, {
      format: formatRef.value.format,
      targetFormat: formatRef.value.format
    }));
    VueCompositionAPI.watchEffect(function () {
      if (!value.value) {
        cacheValue.value = "";
        return;
      }

      if (!isValidDate(value.value, formatRef.value.valueType)) return;
      cacheValue.value = formatDate(value.value, {
        format: formatRef.value.format,
        targetFormat: formatRef.value.format
      });
      time.value = formatTime(value.value, formatRef.value.timeFormat);
    });
    return {
      year: year,
      month: month,
      value: value,
      time: time,
      cacheValue: cacheValue,
      onChange: onChange
    };
  }

  function ownKeys$1c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1c(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useSingle(props, _ref) {
    var emit = _ref.emit;
    var COMPONENT_NAME = usePrefixClass("date-picker");

    var _useConfig = useConfig("datePicker"),
        global = _useConfig.global;

    var inputRef = VueCompositionAPI.ref();

    var _useSingleValue = useSingleValue(props),
        value = _useSingleValue.value,
        onChange = _useSingleValue.onChange,
        time = _useSingleValue.time,
        month = _useSingleValue.month,
        year = _useSingleValue.year,
        cacheValue = _useSingleValue.cacheValue;

    var formatRef = VueCompositionAPI.computed(function () {
      return getDefaultFormat({
        mode: props.mode,
        format: props.format,
        valueType: props.valueType,
        enableTimePicker: props.enableTimePicker
      });
    });
    var popupVisible = VueCompositionAPI.ref(false);
    var isHoverCell = VueCompositionAPI.ref(false);
    var inputValue = VueCompositionAPI.ref(formatDate(value.value, {
      format: formatRef.value.format,
      targetFormat: formatRef.value.format
    }));
    var inputProps = VueCompositionAPI.computed(function () {
      return _objectSpread$1b(_objectSpread$1b({}, props.inputProps), {}, {
        ref: inputRef,
        prefixIcon: props.prefixIcon,
        placeholder: props.placeholder || global.value.placeholder[props.mode],
        "class": [_defineProperty$3({}, "".concat(COMPONENT_NAME.value, "__input--placeholder"), isHoverCell.value)],
        onClear: function onClear(context) {
          var _context$e;

          context === null || context === void 0 ? void 0 : (_context$e = context.e) === null || _context$e === void 0 ? void 0 : _context$e.stopPropagation();
          popupVisible.value = false;
          onChange === null || onChange === void 0 ? void 0 : onChange("", {
            dayjsValue: dayjs_min(""),
            trigger: "clear"
          });
          emit("clear", "", {
            dayjsValue: dayjs_min(""),
            trigger: "clear"
          });
        },
        onBlur: function onBlur(val, context) {
          var _props$onBlur;

          (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, {
            value: val,
            e: context.e
          });
          emit("blur", {
            value: val,
            e: context.e
          });
        },
        onFocus: function onFocus(_, _ref3) {
          var _props$onFocus;

          var e = _ref3.e;
          (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, {
            value: value.value,
            e: e
          });
          emit("focus", {
            value: value.value,
            e: e
          });
        },
        onChange: function onChange(val) {
          inputValue.value = val;
          if (!isValidDate(val, formatRef.value.format)) return;
          var newMonth = dayjs_min(val).month();
          var newYear = dayjs_min(val).year();
          var newTime = formatTime(val, formatRef.value.timeFormat);
          !Number.isNaN(newYear) && (year.value = newYear);
          !Number.isNaN(newMonth) && (month.value = newMonth);
          !Number.isNaN(newTime) && (time.value = newTime);
        },
        onEnter: function onEnter(val) {
          if (!isValidDate(val, formatRef.value.format) && !isValidDate(value.value, formatRef.value.format)) return;
          popupVisible.value = false;

          if (isValidDate(val, formatRef.value.format)) {
            onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(val, {
              format: formatRef.value.format,
              targetFormat: formatRef.value.valueType
            }), {
              dayjsValue: dayjs_min(val),
              trigger: "enter"
            });
          } else if (isValidDate(value.value, formatRef.value.format)) {
            inputValue.value = formatDate(value.value, {
              format: formatRef.value.format,
              targetFormat: formatRef.value.format
            });
          } else {
            inputValue.value = "";
          }
        }
      });
    });
    var popupProps = VueCompositionAPI.computed(function () {
      var _props$popupProps$ove, _props$popupProps, _props$popupProps2;

      return _objectSpread$1b(_objectSpread$1b({
        expandAnimation: true
      }, props.popupProps), {}, {
        overlayInnerStyle: (_props$popupProps$ove = (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayInnerStyle) !== null && _props$popupProps$ove !== void 0 ? _props$popupProps$ove : {
          width: "auto"
        },
        overlayClassName: [(_props$popupProps2 = props.popupProps) === null || _props$popupProps2 === void 0 ? void 0 : _props$popupProps2.overlayClassName, "".concat(COMPONENT_NAME.value, "__panel-container")],
        onVisibleChange: function onVisibleChange(visible, context) {
          if (context.trigger === "trigger-element-click") {
            popupVisible.value = true;
            return;
          }

          if (!visible) {
            isHoverCell.value = false;
            inputValue.value = formatDate(value.value, {
              format: formatRef.value.format,
              targetFormat: formatRef.value.format
            });
          }

          popupVisible.value = visible;
        }
      });
    });
    VueCompositionAPI.watchEffect(function () {
      if (!value.value) {
        inputValue.value = "";
        return;
      }

      if (!isValidDate(value.value, formatRef.value.valueType)) return;
      inputValue.value = formatDate(value.value, {
        format: formatRef.value.format,
        targetFormat: formatRef.value.format
      });
    });
    return {
      year: year,
      month: month,
      value: value,
      time: time,
      inputValue: inputValue,
      popupVisible: popupVisible,
      inputProps: inputProps,
      popupProps: popupProps,
      inputRef: inputRef,
      cacheValue: cacheValue,
      isHoverCell: isHoverCell,
      onChange: onChange
    };
  }

  var datePickerProps = {
    allowInput: Boolean,
    clearable: Boolean,
    disableDate: {
      type: [Object, Array, Function]
    },
    disabled: Boolean,
    enableTimePicker: Boolean,
    firstDayOfWeek: {
      type: Number,
      validator: function validator(val) {
        if (!val) return true;
        return [1, 2, 3, 4, 5, 6, 7].includes(val);
      }
    },
    format: {
      type: String,
      "default": void 0
    },
    inputProps: {
      type: Object
    },
    mode: {
      type: String,
      "default": "date",
      validator: function validator(val) {
        if (!val) return true;
        return ["year", "quarter", "month", "week", "date"].includes(val);
      }
    },
    placeholder: {
      type: [String, Array],
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    prefixIcon: {
      type: Function
    },
    presets: {
      type: Object
    },
    presetsPlacement: {
      type: String,
      "default": "bottom",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "top", "right", "bottom"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    suffixIcon: {
      type: Function
    },
    timePickerProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number, Array, Date],
      "default": void 0
    },
    defaultValue: {
      type: [String, Number, Array, Date],
      "default": ""
    },
    valueType: {
      type: String,
      "default": ""
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onPick: Function
  };

  function ownKeys$1b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1b(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TDateHeader = VueCompositionAPI.defineComponent({
    name: "TDatePickerHeader",
    props: {
      mode: {
        type: String,
        "default": "date"
      },
      year: Number,
      month: Number,
      onMonthChange: Function,
      onYearChange: Function,
      onJumperClick: Function
    },
    setup: function setup(props) {
      var _useConfig = useConfig("classPrefix"),
          classPrefix = _useConfig.classPrefix;

      var COMPONENT_NAME = usePrefixClass("date-picker__header");

      var _useConfig2 = useConfig("datePicker"),
          global = _useConfig2.global;

      var yearOptions = VueCompositionAPI.ref(initOptions(props.year));
      var showMonthPicker = props.mode === "date" || props.mode === "week";
      var nearestYear = VueCompositionAPI.computed(function () {
        var _yearOptions$value$fi;

        return ((_yearOptions$value$fi = yearOptions.value.find(function (option) {
          return option.value - props.year <= 9 && option.value - props.year >= 0;
        })) === null || _yearOptions$value$fi === void 0 ? void 0 : _yearOptions$value$fi.value) || props.year;
      });
      var monthOptions = VueCompositionAPI.computed(function () {
        return global.value.months.map(function (item, index) {
          return {
            label: item,
            value: index
          };
        });
      });

      function initOptions(year) {
        var options = [];

        if (props.mode === "year") {
          var extraYear = year % 10;
          var minYear = year - extraYear - 100;
          var maxYear = year - extraYear + 100;

          for (var i = minYear; i <= maxYear; i += 10) {
            options.push({
              label: "".concat(i, " - ").concat(i + 9),
              value: i + extraYear
            });
          }
        } else {
          options.push({
            label: "".concat(year),
            value: year
          });

          for (var _i = 1; _i <= 10; _i++) {
            options.push({
              label: "".concat(year + _i),
              value: year + _i
            });
            options.unshift({
              label: "".concat(year - _i),
              value: year - _i
            });
          }
        }

        return options;
      }

      function loadMoreYear(year, type) {
        var options = [];

        if (props.mode === "year") {
          var extraYear = year % 10;

          if (type === "add") {
            for (var i = year - extraYear + 10; i <= year - extraYear + 50; i += 10) {
              options.push({
                label: "".concat(i, " - ").concat(i + 9),
                value: i
              });
            }
          } else {
            for (var _i2 = year - extraYear - 1; _i2 > year - extraYear - 50; _i2 -= 10) {
              options.unshift({
                label: "".concat(_i2 - 9, " - ").concat(_i2),
                value: _i2
              });
            }
          }
        } else if (type === "add") {
          for (var _i3 = year + 1; _i3 <= year + 10; _i3++) {
            options.push({
              label: "".concat(_i3),
              value: _i3
            });
          }
        } else {
          for (var _i4 = year - 1; _i4 > year - 10; _i4--) {
            options.unshift({
              label: "".concat(_i4),
              value: _i4
            });
          }
        }

        return options;
      }

      var labelMap = {
        year: {
          prev: global.value.preDecade,
          current: global.value.now,
          next: global.value.nextDecade
        },
        month: {
          prev: global.value.preYear,
          current: global.value.now,
          next: global.value.nextYear
        },
        date: {
          prev: global.value.preMonth,
          current: global.value.now,
          next: global.value.nextMonth
        }
      };

      function handlePanelTopClick(e) {
        var _e$stopPropagation;

        e === null || e === void 0 ? void 0 : (_e$stopPropagation = e.stopPropagation) === null || _e$stopPropagation === void 0 ? void 0 : _e$stopPropagation.call(e);
        var firstYear = yearOptions.value[0].value;
        var options = loadMoreYear(firstYear, "reduce");
        yearOptions.value = [].concat(_toConsumableArray(options), _toConsumableArray(yearOptions.value));
      }

      function handlePanelBottomClick(e) {
        var _e$stopPropagation2;

        e === null || e === void 0 ? void 0 : (_e$stopPropagation2 = e.stopPropagation) === null || _e$stopPropagation2 === void 0 ? void 0 : _e$stopPropagation2.call(e);
        var lastYear = yearOptions.value.slice(-1)[0].value;
        var options = loadMoreYear(lastYear, "add");
        yearOptions.value = [].concat(_toConsumableArray(yearOptions.value), _toConsumableArray(options));
      }

      function handleScroll(_ref) {
        var e = _ref.e;

        if (e.target.scrollTop === 0) {
          handlePanelTopClick(e);
        } else if (e.target.scrollTop === e.target.scrollHeight - e.target.clientHeight) {
          handlePanelBottomClick(e);
        }
      }

      return {
        COMPONENT_NAME: COMPONENT_NAME,
        labelMap: labelMap,
        nearestYear: nearestYear,
        classPrefix: classPrefix,
        monthOptions: monthOptions,
        yearOptions: yearOptions,
        showMonthPicker: showMonthPicker,
        handleScroll: handleScroll,
        handlePanelTopClick: handlePanelTopClick,
        handlePanelBottomClick: handlePanelBottomClick
      };
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var COMPONENT_NAME = this.COMPONENT_NAME,
          labelMap = this.labelMap,
          nearestYear = this.nearestYear,
          classPrefix = this.classPrefix,
          monthOptions = this.monthOptions,
          yearOptions = this.yearOptions,
          showMonthPicker = this.showMonthPicker,
          handlePanelTopClick = this.handlePanelTopClick,
          handlePanelBottomClick = this.handlePanelBottomClick;
      return h("div", {
        "class": COMPONENT_NAME
      }, [h("div", {
        "class": "".concat(COMPONENT_NAME, "-controller")
      }, [showMonthPicker && h(TSelect, {
        "class": "".concat(COMPONENT_NAME, "-controller-month"),
        "props": _objectSpread$1a({}, {
          value: this.month,
          options: monthOptions,
          onChange: function onChange(val) {
            var _this$onMonthChange;

            return (_this$onMonthChange = _this.onMonthChange) === null || _this$onMonthChange === void 0 ? void 0 : _this$onMonthChange.call(_this, val);
          },
          popupProps: {
            overlayClassName: "".concat(COMPONENT_NAME, "-controller-month-popup")
          }
        })
      }), h(TSelect, {
        "class": "".concat(COMPONENT_NAME, "-controller-year"),
        "props": _objectSpread$1a({}, {
          value: this.mode === "year" ? nearestYear : this.year,
          options: yearOptions,
          onChange: function onChange(val) {
            var _this$onYearChange;

            return (_this$onYearChange = _this.onYearChange) === null || _this$onYearChange === void 0 ? void 0 : _this$onYearChange.call(_this, val);
          },
          popupProps: {
            onScroll: this.handleScroll,
            overlayClassName: "".concat(COMPONENT_NAME, "-controller-year-popup")
          },
          panelTopContent: function panelTopContent() {
            return h("div", {
              "class": "".concat(classPrefix, "-select-option"),
              "on": {
                "click": handlePanelTopClick
              }
            }, ["..."]);
          },
          panelBottomContent: function panelBottomContent() {
            return h("div", {
              "class": "".concat(classPrefix, "-select-option"),
              "on": {
                "click": handlePanelBottomClick
              }
            }, ["..."]);
          }
        })
      })]), h(TJumper, {
        "props": _objectSpread$1a({}, {
          tips: labelMap[this.mode],
          onChange: this.onJumperClick,
          size: "small"
        })
      })]);
    }
  });

  var TDatePickerCell = VueCompositionAPI.defineComponent({
    name: "TDatePickerCell",
    props: {
      time: String,
      text: [String, Number],
      value: Date,
      active: Boolean,
      highlight: Boolean,
      disabled: Boolean,
      startOfRange: Boolean,
      endOfRange: Boolean,
      hoverHighlight: Boolean,
      hoverStartOfRange: Boolean,
      hoverEndOfRange: Boolean,
      additional: Boolean,
      now: Boolean,
      firstDayOfMonth: Boolean,
      lastDayOfMonth: Boolean,
      onClick: Function,
      onMouseEnter: Function
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("date-picker__cell");
      var cellClass = VueCompositionAPI.computed(function () {
        var _ref;

        return [COMPONENT_NAME.value, (_ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--now"), props.now), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--active"), props.active), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--disabled"), props.disabled), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--highlight"), props.highlight), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--hover-highlight"), props.hoverHighlight), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--active-start"), props.startOfRange), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--active-end"), props.endOfRange), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--hover-start"), props.hoverStartOfRange), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--hover-end"), props.hoverEndOfRange), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--additional"), props.additional), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--first-day-of-month"), props.firstDayOfMonth), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "--last-day-of-month"), props.lastDayOfMonth), _ref)];
      });

      function handleClick(e) {
        var _props$onClick;

        if (props.disabled) return;

        if (props.time) {
          var _extractTimeObj = extractTimeObj(props.time),
              hours = _extractTimeObj.hours,
              minutes = _extractTimeObj.minutes,
              seconds = _extractTimeObj.seconds,
              milliseconds = _extractTimeObj.milliseconds,
              meridiem = _extractTimeObj.meridiem;

          var nextHours = hours;
          if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
          if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
          props.value.setHours(nextHours);
          props.value.setMinutes(minutes);
          props.value.setSeconds(seconds);
          props.value.setMilliseconds(milliseconds);
        }

        (_props$onClick = props.onClick) === null || _props$onClick === void 0 ? void 0 : _props$onClick.call(props, props.value, {
          e: e
        });
      }

      function handleMouseEnter() {
        var _props$onMouseEnter;

        if (props.disabled) return;

        if (props.time) {
          var _extractTimeObj2 = extractTimeObj(props.time),
              hours = _extractTimeObj2.hours,
              minutes = _extractTimeObj2.minutes,
              seconds = _extractTimeObj2.seconds,
              milliseconds = _extractTimeObj2.milliseconds,
              meridiem = _extractTimeObj2.meridiem;

          var nextHours = hours;
          if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
          if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
          props.value.setHours(nextHours);
          props.value.setMinutes(minutes);
          props.value.setSeconds(seconds);
          props.value.setMilliseconds(milliseconds);
        }

        (_props$onMouseEnter = props.onMouseEnter) === null || _props$onMouseEnter === void 0 ? void 0 : _props$onMouseEnter.call(props, props.value);
      }

      return {
        cellClass: cellClass,
        COMPONENT_NAME: COMPONENT_NAME,
        handleClick: handleClick,
        handleMouseEnter: handleMouseEnter
      };
    },
    render: function render() {
      var h = arguments[0];
      var cellClass = this.cellClass,
          COMPONENT_NAME = this.COMPONENT_NAME,
          handleClick = this.handleClick,
          handleMouseEnter = this.handleMouseEnter;
      return h("td", {
        "class": cellClass,
        "on": {
          "click": handleClick,
          "mouseenter": handleMouseEnter
        }
      }, [h("div", {
        "class": "".concat(COMPONENT_NAME, "-inner")
      }, [this.text])]);
    }
  });

  function ownKeys$1a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$19(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1a(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TDateTable = VueCompositionAPI.defineComponent({
    name: "TDatePickerTable",
    props: {
      mode: {
        type: String,
        "default": "date"
      },
      firstDayOfWeek: Number,
      data: Array,
      time: String,
      value: [String, Number, Array, Date],
      format: String,
      onCellClick: Function,
      onCellMouseEnter: Function,
      onCellMouseLeave: Function
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("date-picker__table");

      var _useConfig = useConfig("datePicker"),
          global = _useConfig.global;

      var _global$value = global.value,
          weekdays = _global$value.weekdays,
          weekAbbreviation = _global$value.weekAbbreviation;
      var weekArr = VueCompositionAPI.computed(function () {
        var _weekArr = [];
        var wi = props.firstDayOfWeek - 1;
        var len = weekdays.length;

        while (_weekArr.length < len) {
          _weekArr.push(weekdays[wi]);

          wi = (wi + len + 1) % len;
        }

        if (props.mode === "week") _weekArr.unshift(weekAbbreviation);
        return _weekArr;
      });
      var showThead = VueCompositionAPI.computed(function () {
        return props.mode === "date" || props.mode === "week";
      });

      var weekRowClass = function weekRowClass(value, format, targetValue) {
        if (props.mode !== "week") return {};

        if (Array.isArray(value)) {
          var _ref;

          if (!value.length) return {};

          var _value$map = value.map(function (v) {
            return parseToDayjs(v, format);
          }),
              _value$map2 = _slicedToArray(_value$map, 2),
              startObj = _value$map2[0],
              endObj = _value$map2[1];

          var startYear = startObj.year();
          var startWeek = startObj.week();
          var endYear = endObj && endObj.year();
          var endWeek = endObj && endObj.week();
          var targetObj = parseToDayjs(targetValue, format);
          var targetYear = targetObj.year();
          var targetWeek = targetObj.week();
          var isActive = targetYear === startYear && targetWeek === startWeek || targetYear === endYear && targetWeek === endWeek;
          var isRange = targetYear >= startYear && targetYear <= endYear && targetWeek > startWeek && targetWeek < endWeek;
          return _ref = {}, _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "-").concat(props.mode, "-row--active"), isActive), _defineProperty$3(_ref, "".concat(COMPONENT_NAME.value, "-").concat(props.mode, "-row--range"), isRange), _ref;
        }

        return _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "-").concat(props.mode, "-row--active"), parseToDayjs(value, format).week() === parseToDayjs(targetValue, format).week());
      };

      return {
        COMPONENT_NAME: COMPONENT_NAME,
        weekArr: weekArr,
        showThead: showThead,
        weekRowClass: weekRowClass
      };
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var COMPONENT_NAME = this.COMPONENT_NAME,
          weekArr = this.weekArr,
          showThead = this.showThead,
          weekRowClass = this.weekRowClass;
      return h("div", {
        "class": COMPONENT_NAME,
        "on": {
          "mouseleave": function mouseleave(e) {
            var _this$onCellMouseLeav;

            return (_this$onCellMouseLeav = _this.onCellMouseLeave) === null || _this$onCellMouseLeav === void 0 ? void 0 : _this$onCellMouseLeav.call(_this, {
              e: e
            });
          }
        }
      }, [h("table", [showThead && h("thead", [h("tr", [weekArr.map(function (value, i) {
        return h("th", {
          "key": i
        }, [value]);
      })])]), h("tbody", [this.data.map(function (row, i) {
        return h("tr", {
          "key": i,
          "class": _objectSpread$19(_defineProperty$3({}, "".concat(COMPONENT_NAME, "-").concat(_this.mode, "-row"), true), weekRowClass(_this.value, _this.format, row[0].value))
        }, [row.map(function (col, j) {
          return h(TDatePickerCell, {
            "key": j,
            "props": _objectSpread$19({}, _objectSpread$19({
              time: _this.time,
              onClick: _this.onCellClick,
              onMouseEnter: _this.onCellMouseEnter
            }, col))
          });
        })]);
      })])])]);
    }
  });

  var AM = "am";
  var PM = "pm";
  var MERIDIEM_LIST = [AM, PM];
  var TIME_PICKER_EMPTY = [void 0, void 0];
  var DEFAULT_STEPS = [1, 1, 1];
  var DEFAULT_FORMAT = "HH:mm:ss";
  var EPickerCols$1 = /* @__PURE__ */function (EPickerCols2) {
    EPickerCols2["hour"] = "hour";
    EPickerCols2["minute"] = "minute";
    EPickerCols2["second"] = "second";
    EPickerCols2["milliSecond"] = "millisecond";
    EPickerCols2["meridiem"] = "meridiem";
    return EPickerCols2;
  }(EPickerCols$1 || {});
  var TIME_FORMAT = /(a\s+|A\s+)?(h+|H+)?:?(m+)?:?(s+)?:?(S+)?(\s+a|\s+A)?/;
  var TWELVE_HOUR_FORMAT = /[h]{1}/;

  var props$v = {
    allowInput: Boolean,
    clearable: Boolean,
    disabled: Boolean,
    disableTime: {
      type: Function
    },
    format: {
      type: String,
      "default": "HH:mm:ss"
    },
    hideDisabledTime: {
      type: Boolean,
      "default": true
    },
    inputProps: {
      type: Object
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    steps: {
      type: Array,
      "default": function _default() {
        return [1, 1, 1];
      }
    },
    value: {
      type: String
    },
    defaultValue: {
      type: String
    },
    onBlur: Function,
    onChange: Function,
    onClose: Function,
    onFocus: Function,
    onInput: Function,
    onOpen: Function
  };

  function ownKeys$19(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$18(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$19(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$19(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var panelProps = function panelProps() {
    return {
      disabled: {
        type: Boolean,
        "default": false
      },
      isFocus: {
        type: Boolean,
        "default": false
      },
      value: {
        type: String,
        "default": ""
      },
      format: {
        type: String,
        "default": "HH:mm:ss"
      },
      steps: {
        type: Array,
        "default": function _default() {
          return [1, 1, 1];
        }
      },
      isShowPanel: {
        type: Boolean,
        "default": false
      },
      hideDisabledTime: _objectSpread$18({}, props$v.hideDisabledTime),
      isFooterDisplay: {
        type: Boolean,
        "default": false
      }
    };
  };
  var panelColProps = function panelColProps() {
    return {
      format: {
        type: String,
        "default": "HH:mm:ss"
      },
      value: {
        type: String,
        "default": ""
      },
      steps: {
        type: Array,
        "default": function _default() {
          return [1, 1, 1];
        }
      },
      hideDisabledTime: _objectSpread$18({}, props$v.hideDisabledTime)
    };
  };

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil$1 = Math.ceil,
      nativeMax$1 = Math.max;
  /**
   * The base implementation of `_.range` and `_.rangeRight` which doesn't
   * coerce arguments.
   *
   * @private
   * @param {number} start The start of the range.
   * @param {number} end The end of the range.
   * @param {number} step The value to increment or decrement by.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Array} Returns the range of numbers.
   */

  function baseRange(start, end, step, fromRight) {
    var index = -1,
        length = nativeMax$1(nativeCeil$1((end - start) / (step || 1)), 0),
        result = Array(length);

    while (length--) {
      result[fromRight ? length : ++index] = start;
      start += step;
    }

    return result;
  }

  var _baseRange = baseRange;

  /**
   * Creates a `_.range` or `_.rangeRight` function.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new range function.
   */

  function createRange(fromRight) {
    return function (start, end, step) {
      if (step && typeof step != 'number' && _isIterateeCall(start, end, step)) {
        end = step = undefined;
      } // Ensure the sign of `-0` is preserved.


      start = toFinite_1(start);

      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite_1(end);
      }

      step = step === undefined ? start < end ? 1 : -1 : toFinite_1(step);
      return _baseRange(start, end, step, fromRight);
    };
  }

  var _createRange = createRange;

  /**
   * Creates an array of numbers (positive and/or negative) progressing from
   * `start` up to, but not including, `end`. A step of `-1` is used if a negative
   * `start` is specified without an `end` or `step`. If `end` is not specified,
   * it's set to `start` with `start` then set to `0`.
   *
   * **Note:** JavaScript follows the IEEE-754 standard for resolving
   * floating-point values which can produce unexpected results.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {number} [start=0] The start of the range.
   * @param {number} end The end of the range.
   * @param {number} [step=1] The value to increment or decrement by.
   * @returns {Array} Returns the range of numbers.
   * @see _.inRange, _.rangeRight
   * @example
   *
   * _.range(4);
   * // => [0, 1, 2, 3]
   *
   * _.range(-4);
   * // => [0, -1, -2, -3]
   *
   * _.range(1, 5);
   * // => [1, 2, 3, 4]
   *
   * _.range(0, 20, 5);
   * // => [0, 5, 10, 15]
   *
   * _.range(0, -4, -1);
   * // => [0, -1, -2, -3]
   *
   * _.range(1, 4, 0);
   * // => [1, 1, 1]
   *
   * _.range(0);
   * // => []
   */

  var range = _createRange();
  var range_1 = range;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;
  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeFloor = Math.floor;
  /**
   * The base implementation of `_.repeat` which doesn't coerce arguments.
   *
   * @private
   * @param {string} string The string to repeat.
   * @param {number} n The number of times to repeat the string.
   * @returns {string} Returns the repeated string.
   */

  function baseRepeat(string, n) {
    var result = '';

    if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
      return result;
    } // Leverage the exponentiation by squaring algorithm for a faster repeat.
    // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.


    do {
      if (n % 2) {
        result += string;
      }

      n = nativeFloor(n / 2);

      if (n) {
        string += string;
      }
    } while (n);

    return result;
  }

  var _baseRepeat = baseRepeat;

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  var _baseProperty = baseProperty;

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */

  var asciiSize = _baseProperty('length');
  var _asciiSize = asciiSize;

  /** Used to compose unicode character classes. */
  var rsAstralRange = "\\ud800-\\udfff",
      rsComboMarksRange = "\\u0300-\\u036f",
      reComboHalfMarksRange = "\\ufe20-\\ufe2f",
      rsComboSymbolsRange = "\\u20d0-\\u20ff",
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsVarRange = "\\ufe0e\\ufe0f";
  /** Used to compose unicode capture groups. */

  var rsAstral = '[' + rsAstralRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsFitz = "\\ud83c[\\udffb-\\udfff]",
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}",
      rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]",
      rsZWJ = "\\u200d";
  /** Used to compose unicode regexes. */

  var reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */

  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;

    while (reUnicode.test(string)) {
      ++result;
    }

    return result;
  }

  var _unicodeSize = unicodeSize;

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */

  function stringSize(string) {
    return _hasUnicode(string) ? _unicodeSize(string) : _asciiSize(string);
  }

  var _stringSize = stringSize;

  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeCeil = Math.ceil;
  /**
   * Creates the padding for `string` based on `length`. The `chars` string
   * is truncated if the number of characters exceeds `length`.
   *
   * @private
   * @param {number} length The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padding for `string`.
   */

  function createPadding(length, chars) {
    chars = chars === undefined ? ' ' : _baseToString(chars);
    var charsLength = chars.length;

    if (charsLength < 2) {
      return charsLength ? _baseRepeat(chars, length) : chars;
    }

    var result = _baseRepeat(chars, nativeCeil(length / _stringSize(chars)));
    return _hasUnicode(chars) ? _castSlice(_stringToArray(result), 0, length).join('') : result.slice(0, length);
  }

  var _createPadding = createPadding;

  /**
   * Pads `string` on the left side if it's shorter than `length`. Padding
   * characters are truncated if they exceed `length`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to pad.
   * @param {number} [length=0] The padding length.
   * @param {string} [chars=' '] The string used as padding.
   * @returns {string} Returns the padded string.
   * @example
   *
   * _.padStart('abc', 6);
   * // => '   abc'
   *
   * _.padStart('abc', 6, '_-');
   * // => '_-_abc'
   *
   * _.padStart('abc', 3);
   * // => 'abc'
   */

  function padStart(string, length, chars) {
    string = toString_1(string);
    length = toInteger_1(length);
    var strLength = length ? _stringSize(string) : 0;
    return length && strLength < length ? _createPadding(length - strLength, chars) + string : string;
  }

  var padStart_1 = padStart;

  function validateInputValue(value, format) {
    return dayjs_min(value, format).format(format) === value;
  }
  function formatInputValue(value, format) {
    return dayjs_min(value, format).format(format);
  }
  function closestLookup(availableArr, calcVal, step) {
    if (step <= 1) return calcVal;
    return availableArr.sort(function (a, b) {
      return Math.abs(calcVal + 1 - a) - Math.abs(calcVal + 1 - b);
    })[0];
  }

  function ownKeys$18(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$17(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$18(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$18(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs_min.extend(customParseFormat);
  var timeArr = [EPickerCols$1.hour, EPickerCols$1.minute, EPickerCols$1.second, EPickerCols$1.milliSecond];
  var SinglePanel = VueCompositionAPI.defineComponent({
    name: "TTimePickerPanelCol",
    props: _objectSpread$17(_objectSpread$17({}, panelColProps()), {}, {
      position: String,
      triggerScroll: Boolean,
      onChange: Function,
      resetTriggerScroll: Function,
      disableTime: Function
    }),
    setup: function setup(props, ctx) {
      var _toRefs = VueCompositionAPI.toRefs(props),
          steps = _toRefs.steps,
          value = _toRefs.value,
          format = _toRefs.format,
          position = _toRefs.position,
          triggerScroll = _toRefs.triggerScroll;

      var _useConfig = useConfig("timePicker"),
          global = _useConfig.global;

      var _useConfig2 = useConfig(),
          classPrefix = _useConfig2.classPrefix;

      var cols = VueCompositionAPI.ref([]);
      var bodyRef = VueCompositionAPI.ref();
      var maskRef = VueCompositionAPI.ref(null);
      var dayjsValue = VueCompositionAPI.computed(function () {
        var isStepsSet = !!steps.value.filter(function (v) {
          return v > 1;
        }).length;
        if (value.value) return dayjs_min(value.value, format.value);
        if (isStepsSet) return dayjs_min().hour(0).minute(0).second(0);
        return dayjs_min();
      });
      var panelClassName = VueCompositionAPI.computed(function () {
        return "".concat(classPrefix.value, "-time-picker__panel");
      });
      VueCompositionAPI.watch(function () {
        return dayjsValue.value;
      }, function () {
        if (dayjsValue.value) updateTimeScrollPos(true);
      });
      VueCompositionAPI.watch(function () {
        return triggerScroll.value;
      }, function () {
        if (triggerScroll.value) {
          updateTimeScrollPos(true);
        }
      });
      VueCompositionAPI.onMounted(function () {
        var match = format.value.match(TIME_FORMAT);

        var _match = _slicedToArray(match, 7),
            startCol = _match[1],
            hourCol = _match[2],
            minuteCol = _match[3],
            secondCol = _match[4],
            milliSecondCol = _match[5],
            endCol = _match[6];

        var meridiem = EPickerCols$1.meridiem,
            hour = EPickerCols$1.hour,
            minute = EPickerCols$1.minute,
            second = EPickerCols$1.second,
            milliSecond = EPickerCols$1.milliSecond;
        var renderCol = [startCol && meridiem, hourCol && hour, minuteCol && minute, secondCol && second, milliSecondCol && milliSecond, endCol && meridiem].filter(function (v) {
          return !!v;
        });
        cols.value = renderCol;
      });

      var getItemHeight = function getItemHeight() {
        var _maskRef$value;

        var maskDom = (_maskRef$value = maskRef.value) === null || _maskRef$value === void 0 ? void 0 : _maskRef$value.querySelector("div");
        var timeItemTotalHeight = maskDom.offsetHeight + parseInt(getComputedStyle(maskDom).marginTop, 10);
        return timeItemTotalHeight;
      };

      var timeItemCanUsed = function timeItemCanUsed(col, el) {
        var colIdx = timeArr.indexOf(col);

        if (colIdx !== -1) {
          var _props$disableTime, _props$disableTime$ca, _props$disableTime$ca2;

          var params = [dayjsValue.value.hour(), dayjsValue.value.minute(), dayjsValue.value.second()];
          params[colIdx] = Number(el);
          return !((_props$disableTime = props.disableTime) !== null && _props$disableTime !== void 0 && (_props$disableTime$ca = _props$disableTime.call.apply(_props$disableTime, [props].concat(params, [{
            partial: position.value || "start"
          }]))) !== null && _props$disableTime$ca !== void 0 && (_props$disableTime$ca2 = _props$disableTime$ca[col]) !== null && _props$disableTime$ca2 !== void 0 && _props$disableTime$ca2.includes(Number(el)));
        }

        return true;
      };

      var getColList = function getColList(col) {
        var count = 0;

        if (timeArr.includes(col)) {
          var colIdx = timeArr.indexOf(col);
          var colStep = steps.value[colIdx] || 1;
          if (col === EPickerCols$1.hour) count = TWELVE_HOUR_FORMAT.test(format.value) ? 11 : 23;else if (col === EPickerCols$1.milliSecond) count = 999;else count = 59;
          var colList = range_1(0, count + 1, Number(colStep)).map(function (v) {
            return padStart_1(String(v), 2, "0");
          }) || [];
          return props.hideDisabledTime && !!props.disableTime ? colList.filter(function (t) {
            var _props$disableTime2, _props$disableTime2$c, _props$disableTime2$c2;

            var params = [dayjsValue.value.hour(), dayjsValue.value.minute(), dayjsValue.value.second()];
            params[colIdx] = Number(t);
            return !((_props$disableTime2 = props.disableTime) !== null && _props$disableTime2 !== void 0 && (_props$disableTime2$c = _props$disableTime2.call.apply(_props$disableTime2, [props].concat(params, [{
              partial: position.value || "start"
            }]))) !== null && _props$disableTime2$c !== void 0 && (_props$disableTime2$c2 = _props$disableTime2$c[col]) !== null && _props$disableTime2$c2 !== void 0 && _props$disableTime2$c2.includes(Number(t)));
          }) : colList;
        }

        return MERIDIEM_LIST;
      };

      var getScrollDistance = function getScrollDistance(col, time) {
        if (col === EPickerCols$1.hour && /[h]{1}/.test(format.value)) {
          time %= 12;
        }

        var itemIdx = getColList(col).indexOf(padStart_1(String(time), 2, "0"));
        var timeItemTotalHeight = getItemHeight();
        var distance = Math.abs(itemIdx * timeItemTotalHeight + timeItemTotalHeight / 2);
        return distance;
      };

      var handleScroll = function handleScroll(col) {
        var _ctx$refs;

        var val;
        var formattedVal;
        var scrollTop = (_ctx$refs = ctx.refs["".concat(col, "Col")]) === null || _ctx$refs === void 0 ? void 0 : _ctx$refs.scrollTop;
        var colStep = Math.abs(Math.round(scrollTop / getItemHeight() + 0.5));
        var meridiem = MERIDIEM_LIST[Math.min(colStep - 1, 1)].toLowerCase();
        if (Number.isNaN(colStep)) colStep = 1;

        if (timeArr.includes(col)) {
          var max = 59;
          if (col === EPickerCols$1.hour) max = /[h]{1}/.test(format.value) ? 11 : 23;else if (col === EPickerCols$1.milliSecond) max = 999;
          var colIdx = timeArr.indexOf(col);
          var availableArr = range_1(0, max + 1, Number(steps.value[colIdx]) || 1);
          val = closestLookup(availableArr, Number(getColList(col)[Math.min(colStep - 1, max + 1, availableArr.length - 1)]), Number(steps.value[colIdx]) || 1);
          if (Number.isNaN(val)) val = availableArr[availableArr.length - 1];

          if (col === EPickerCols$1.hour && cols.value.includes(EPickerCols$1.meridiem) && dayjsValue.value.hour() >= 12) {
            val = Number(val) + 12;
          }
        } else val = meridiem;

        var distance = getScrollDistance(col, val);
        if (!dayjs_min(dayjsValue.value).isValid()) return;

        if (distance !== scrollTop) {
          var _props$onChange, _scrollCtrl$scrollTo;

          if (timeArr.includes(col)) {
            var _dayjsValue$value$col, _dayjsValue$value;

            if (timeItemCanUsed(col, val)) formattedVal = (_dayjsValue$value$col = (_dayjsValue$value = dayjsValue.value)[col]) === null || _dayjsValue$value$col === void 0 ? void 0 : _dayjsValue$value$col.call(_dayjsValue$value, val).format(format.value);
          } else {
            var currentHour = dayjsValue.value.hour();

            if (meridiem === AM && currentHour >= 12) {
              formattedVal = dayjsValue.value.hour(currentHour - 12).format(format.value);
            } else if (meridiem === PM && currentHour < 12) {
              formattedVal = dayjsValue.value.hour(currentHour + 12).format(format.value);
            }
          }

          (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, formattedVal);
          var scrollCtrl = ctx.refs["".concat(col, "Col")];
          if (!distance || !scrollCtrl || scrollCtrl.scrollTop === distance) return;
          (_scrollCtrl$scrollTo = scrollCtrl.scrollTo) === null || _scrollCtrl$scrollTo === void 0 ? void 0 : _scrollCtrl$scrollTo.call(scrollCtrl, {
            top: distance,
            behavior: "smooth"
          });
        }
      };

      var scrollToTime = function scrollToTime(col, time, idx) {
        var _scrollCtrl$scrollTo2;

        var behavior = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "auto";
        var distance = getScrollDistance(col, time);
        var scrollCtrl = ctx.refs["".concat(col, "Col")];
        if (!distance || !scrollCtrl || scrollCtrl.scrollTop === distance || !timeItemCanUsed(col, time)) return;
        (_scrollCtrl$scrollTo2 = scrollCtrl.scrollTo) === null || _scrollCtrl$scrollTo2 === void 0 ? void 0 : _scrollCtrl$scrollTo2.call(scrollCtrl, {
          top: distance,
          behavior: behavior
        });
      };

      var handleTimeItemClick = function handleTimeItemClick(col, el, idx) {
        if (!timeItemCanUsed(col, el)) return;

        if (timeArr.includes(col)) {
          if (col === EPickerCols$1.hour && dayjsValue.value.format("a") === PM && cols.value.includes(EPickerCols$1.meridiem)) {
            el = Number(el) + 12;
          }

          scrollToTime(col, el, idx, "smooth");
          setTimeout(function () {
            var _dayjsValue$value$col2, _dayjsValue$value2;

            props.onChange((_dayjsValue$value$col2 = (_dayjsValue$value2 = dayjsValue.value)[col]) === null || _dayjsValue$value$col2 === void 0 ? void 0 : _dayjsValue$value$col2.call(_dayjsValue$value2, el).format(format.value));
          }, 100);
        } else {
          var currentHour = dayjsValue.value.hour();

          if (el === AM && currentHour >= 12) {
            var _props$onChange2;

            (_props$onChange2 = props.onChange) === null || _props$onChange2 === void 0 ? void 0 : _props$onChange2.call(props, dayjsValue.value.hour(currentHour - 12).format(format.value));
          } else if (el === PM && currentHour < 12) {
            var _props$onChange3;

            (_props$onChange3 = props.onChange) === null || _props$onChange3 === void 0 ? void 0 : _props$onChange3.call(props, dayjsValue.value.hour(currentHour + 12).format(format.value));
          }
        }
      };

      var updateTimeScrollPos = function updateTimeScrollPos() {
        var isAutoScroll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var behavior = value.value && !isAutoScroll ? "smooth" : "auto";
        var isStepsSet = !!steps.value.filter(function (v) {
          return v > 1;
        }).length;
        VueCompositionAPI.nextTick(function () {
          cols.value.forEach(function (col, idx) {
            if (!isStepsSet || isStepsSet && value.value) {
              var _dayjsValue$value$col3, _dayjsValue$value3;

              scrollToTime(col, timeArr.includes(col) ? (_dayjsValue$value$col3 = (_dayjsValue$value3 = dayjsValue.value)[col]) === null || _dayjsValue$value$col3 === void 0 ? void 0 : _dayjsValue$value$col3.call(_dayjsValue$value3) : dayjsValue.value.format("a"), idx, behavior);
            } else {
              var _getColList;

              scrollToTime(col, (_getColList = getColList(col)) === null || _getColList === void 0 ? void 0 : _getColList[0], idx, behavior);
            }
          });
        });
        props.resetTriggerScroll();
      };

      var isCurrent = function isCurrent(col, colItem) {
        var _dayjsValue$value$col4, _dayjsValue$value4;

        var colVal;

        if (col === EPickerCols$1.meridiem) {
          var currentMeridiem = dayjsValue.value.format("a");
          return currentMeridiem === colItem;
        }

        colVal = (_dayjsValue$value$col4 = (_dayjsValue$value4 = dayjsValue.value)[col]) === null || _dayjsValue$value$col4 === void 0 ? void 0 : _dayjsValue$value$col4.call(_dayjsValue$value4);

        if (col === EPickerCols$1.hour && /[h]{1}/.test(format.value)) {
          colVal %= 12;
        }

        return colVal === Number(colItem);
      };

      return {
        getColList: getColList,
        isCurrent: isCurrent,
        bodyRef: bodyRef,
        maskRef: maskRef,
        global: global,
        classPrefix: classPrefix,
        panelClassName: panelClassName,
        cols: cols,
        timeItemCanUsed: timeItemCanUsed,
        handleScroll: handleScroll,
        handleTimeItemClick: handleTimeItemClick
      };
    },
    render: function render() {
      var _this$cols$map,
          _this$cols,
          _this$cols$map2,
          _this$cols2,
          _this = this;

      var h = arguments[0];
      return h("div", {
        "class": "".concat(this.panelClassName, "-body"),
        "ref": "bodyRef"
      }, [h("div", {
        "class": "".concat(this.panelClassName, "-body-active-mask"),
        "ref": "maskRef"
      }, [(_this$cols$map = (_this$cols = this.cols).map) === null || _this$cols$map === void 0 ? void 0 : _this$cols$map.call(_this$cols, function (col, idx) {
        return h("div", {
          "key": "".concat(col, "_").concat(idx)
        });
      })]), (_this$cols$map2 = (_this$cols2 = this.cols).map) === null || _this$cols$map2 === void 0 ? void 0 : _this$cols$map2.call(_this$cols2, function (col, idx) {
        return h("ul", {
          "key": "".concat(col, "_").concat(idx),
          "ref": "".concat(col, "Col"),
          "class": "".concat(_this.panelClassName, "-body-scroll"),
          "on": {
            "scroll": debounce_1(function () {
              return _this.handleScroll(col);
            }, 50)
          }
        }, [_this.getColList(col).map(function (el) {
          var _ref;

          return h("li", {
            "key": el,
            "class": ["".concat(_this.panelClassName, "-body-scroll-item"), (_ref = {}, _defineProperty$3(_ref, "".concat(_this.classPrefix, "-is-disabled"), !_this.timeItemCanUsed(col, el)), _defineProperty$3(_ref, "".concat(_this.classPrefix, "-is-current"), _this.isCurrent(col, el)), _ref)],
            "on": {
              "click": function click() {
                return _this.handleTimeItemClick(col, el, idx);
              }
            }
          }, [timeArr.includes(col) ? TWELVE_HOUR_FORMAT.test(_this.format) && el === "00" ? "12" : el : _this.global[el === AM ? "anteMeridiem" : "postMeridiem"]]);
        })]);
      })]);
    }
  });

  function ownKeys$17(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$16(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$17(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$17(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs_min.extend(customParseFormat);
  var _TimePickerPanel = VueCompositionAPI.defineComponent({
    name: "TimePickerPanel",
    props: _objectSpread$16(_objectSpread$16({}, panelProps()), {}, {
      handleConfirmClick: Function,
      onChange: Function,
      disableTime: Function
    }),
    setup: function setup(props, ctx) {
      var panelClassName = usePrefixClass("time-picker__panel");
      var triggerScroll = VueCompositionAPI.ref(false);

      var _useConfig = useConfig("timePicker"),
          global = _useConfig.global;

      var showNowTimeBtn = VueCompositionAPI.computed(function () {
        return !!props.steps.filter(function (v) {
          return v > 1;
        }).length;
      });
      var defaultValue = VueCompositionAPI.computed(function () {
        var isStepsSet = showNowTimeBtn.value;

        if (props.value) {
          return dayjs_min(props.value, props.format);
        }

        if (isStepsSet) {
          return dayjs_min().hour(0).minute(0).second(0);
        }

        return dayjs_min();
      });

      var panelColUpdate = function panelColUpdate() {
        VueCompositionAPI.nextTick(function () {
          triggerScroll.value = true;
        });
      };

      var resetTriggerScroll = function resetTriggerScroll() {
        triggerScroll.value = false;
      };

      var handleChange = function handleChange(v) {
        var _props$onChange;

        (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, v);
        ctx.emit("change", v);
      };

      VueCompositionAPI.onMounted(function () {
        panelColUpdate();
      });
      VueCompositionAPI.watch(function () {
        return props.isShowPanel;
      }, function () {
        panelColUpdate();
      });
      return {
        showNowTimeBtn: showNowTimeBtn,
        panelClassName: panelClassName,
        triggerScroll: triggerScroll,
        resetTriggerScroll: resetTriggerScroll,
        defaultValue: defaultValue,
        global: global,
        handleChange: handleChange
      };
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      return h("div", {
        "class": this.panelClassName
      }, [h("div", {
        "class": "".concat(this.panelClassName, "-section-body")
      }, [h(SinglePanel, {
        "props": _objectSpread$16({}, {
          value: this.value,
          onChange: this.handleChange,
          format: this.format || DEFAULT_FORMAT,
          steps: this.steps || DEFAULT_STEPS,
          triggerScroll: this.triggerScroll,
          disableTime: this.disableTime,
          resetTriggerScroll: this.resetTriggerScroll
        })
      })]), this.isFooterDisplay ? h("div", {
        "class": "".concat(this.panelClassName, "-section-footer")
      }, [h(TButton, {
        "attrs": {
          "theme": "primary",
          "variant": "base",
          "size": "small"
        },
        "on": {
          "click": function click() {
            return _this.handleConfirmClick(_this.defaultValue);
          }
        }
      }, [this.global.confirm]), !this.showNowTimeBtn ? h(TButton, {
        "attrs": {
          "theme": "primary",
          "variant": "text",
          "size": "small"
        },
        "on": {
          "click": function click() {
            return _this.onChange(dayjs_min().format(_this.format));
          }
        }
      }, [this.global.now]) : null]) : null]);
    }
  });

  function ownKeys$16(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$15(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$16(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$16(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TPanelContent = VueCompositionAPI.defineComponent({
    name: "TPanelContent",
    props: {
      mode: String,
      format: String,
      enableTimePicker: Boolean,
      timePickerProps: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      value: [String, Number, Array, Date],
      year: Number,
      month: Number,
      tableData: Array,
      time: String,
      popupVisible: Boolean,
      firstDayOfWeek: Number,
      partial: String,
      onYearChange: Function,
      onMonthChange: Function,
      onJumperClick: Function,
      onCellMouseEnter: Function,
      onCellClick: Function,
      onCellMouseLeave: Function,
      onTimePickerChange: Function
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("date-picker__panel");

      var _getDefaultFormat = getDefaultFormat({
        mode: props.mode,
        format: props.format,
        enableTimePicker: props.enableTimePicker
      }),
          timeFormat = _getDefaultFormat.timeFormat;

      var defaultTimeValue = "00:00:00";
      return {
        COMPONENT_NAME: COMPONENT_NAME,
        defaultTimeValue: defaultTimeValue,
        timeFormat: timeFormat
      };
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var COMPONENT_NAME = this.COMPONENT_NAME,
          defaultTimeValue = this.defaultTimeValue,
          timeFormat = this.timeFormat;
      return h("div", {
        "class": "".concat(COMPONENT_NAME, "-content")
      }, [h("div", {
        "class": "".concat(COMPONENT_NAME, "-").concat(this.mode)
      }, [h(TDateHeader, {
        "props": _objectSpread$15({}, {
          mode: this.mode,
          year: this.year,
          month: this.month,
          onMonthChange: function onMonthChange(val) {
            var _this$onMonthChange;

            return (_this$onMonthChange = _this.onMonthChange) === null || _this$onMonthChange === void 0 ? void 0 : _this$onMonthChange.call(_this, val, {
              partial: _this.partial
            });
          },
          onYearChange: function onYearChange(val) {
            var _this$onYearChange;

            return (_this$onYearChange = _this.onYearChange) === null || _this$onYearChange === void 0 ? void 0 : _this$onYearChange.call(_this, val, {
              partial: _this.partial
            });
          },
          onJumperClick: function onJumperClick(_ref) {
            var _this$onJumperClick;

            var trigger = _ref.trigger;
            return (_this$onJumperClick = _this.onJumperClick) === null || _this$onJumperClick === void 0 ? void 0 : _this$onJumperClick.call(_this, {
              trigger: trigger,
              partial: _this.partial
            });
          }
        })
      }), h(TDateTable, {
        "props": _objectSpread$15({}, {
          mode: this.mode,
          data: this.tableData,
          time: this.time,
          value: this.value,
          format: this.format,
          firstDayOfWeek: this.firstDayOfWeek,
          onCellClick: function onCellClick(date, _ref2) {
            var _this$onCellClick;

            var e = _ref2.e;
            return (_this$onCellClick = _this.onCellClick) === null || _this$onCellClick === void 0 ? void 0 : _this$onCellClick.call(_this, date, {
              e: e,
              partial: _this.partial
            });
          },
          onCellMouseEnter: function onCellMouseEnter(date) {
            var _this$onCellMouseEnte;

            return (_this$onCellMouseEnte = _this.onCellMouseEnter) === null || _this$onCellMouseEnte === void 0 ? void 0 : _this$onCellMouseEnte.call(_this, date, {
              partial: _this.partial
            });
          },
          onCellMouseLeave: this.onCellMouseLeave
        })
      })]), this.enableTimePicker && h("div", {
        "class": "".concat(COMPONENT_NAME, "-time")
      }, [h("div", {
        "class": "".concat(COMPONENT_NAME, "-time-viewer")
      }, [this.time || defaultTimeValue]), h(_TimePickerPanel, helper([{}, {
        key: this.partial,
        props: _objectSpread$15({
          format: timeFormat,
          value: this.time || defaultTimeValue,
          onChange: this.onTimePickerChange,
          isShowPanel: this.popupVisible
        }, this.timePickerProps)
      }]))])]);
    }
  });

  function ownKeys$15(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$14(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$15(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$15(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TDateFooter = VueCompositionAPI.defineComponent({
    name: "TDatePickerTable",
    props: {
      enableTimePicker: Boolean,
      presetsPlacement: String,
      presets: Object,
      selectedValue: [Date, String, Number],
      onPresetClick: Function,
      onConfirmClick: Function
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("date-picker__footer");
      var presetsClass = usePrefixClass("date-picker__presets");

      var _useConfig = useConfig("datePicker"),
          t = _useConfig.t,
          global = _useConfig.global;

      var footerClass = VueCompositionAPI.computed(function () {
        return [COMPONENT_NAME.value, "".concat(COMPONENT_NAME.value, "--").concat(props.presetsPlacement)];
      });
      return {
        footerClass: footerClass,
        presetsClass: presetsClass,
        global: global,
        t: t
      };
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var footerClass = this.footerClass,
          presetsClass = this.presetsClass,
          global = this.global,
          t = this.t;
      return h("div", {
        "class": footerClass
      }, [h("div", {
        "class": presetsClass
      }, [this.presets && Object.keys(this.presets).map(function (key) {
        return h(Button, {
          "key": key,
          "attrs": {
            "size": "small",
            "variant": "text"
          },
          "on": {
            "click": function click(e) {
              var _this$onPresetClick;

              return (_this$onPresetClick = _this.onPresetClick) === null || _this$onPresetClick === void 0 ? void 0 : _this$onPresetClick.call(_this, _this.presets[key], {
                e: e
              });
            }
          }
        }, [key]);
      })]), this.enableTimePicker && h(Button, {
        "props": _objectSpread$14({}, {
          size: "small",
          theme: "primary",
          disabled: !this.selectedValue,
          onClick: function onClick(e) {
            var _this$onConfirmClick;

            return (_this$onConfirmClick = _this.onConfirmClick) === null || _this$onConfirmClick === void 0 ? void 0 : _this$onConfirmClick.call(_this, {
              e: e
            });
          }
        })
      }, [t(global.confirm)])]);
    }
  });

  function ownKeys$14(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$13(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$14(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$14(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TExtraContent = VueCompositionAPI.defineComponent({
    name: "TExtraContent",
    props: {
      presets: Object,
      enableTimePicker: Boolean,
      presetsPlacement: String,
      onPresetClick: Function,
      onConfirmClick: Function,
      selectedValue: String
    },
    setup: function setup(props) {
      var showPanelFooter = VueCompositionAPI.computed(function () {
        return props.enableTimePicker || props.presets;
      });
      return {
        showPanelFooter: showPanelFooter
      };
    },
    render: function render() {
      var h = arguments[0];
      var showPanelFooter = this.showPanelFooter;
      return showPanelFooter ? h(TDateFooter, {
        "props": _objectSpread$13({}, {
          presets: this.presets,
          onPresetClick: this.onPresetClick,
          enableTimePicker: this.enableTimePicker,
          onConfirmClick: this.onConfirmClick,
          presetsPlacement: this.presetsPlacement,
          selectedValue: this.selectedValue
        })
      }) : null;
    }
  });

  function useTableData(props) {
    var _props$firstDayOfWeek;

    var _useConfig = useConfig("datePicker"),
        global = _useConfig.global;

    var options = {
      minDate: props.minDate,
      maxDate: props.maxDate,
      disableDate: props.disableDate,
      firstDayOfWeek: (_props$firstDayOfWeek = props.firstDayOfWeek) !== null && _props$firstDayOfWeek !== void 0 ? _props$firstDayOfWeek : global.value.firstDayOfWeek,
      monthLocal: global.value.months,
      quarterLocal: global.value.quarters,
      showWeekOfYear: props.mode === "week"
    };
    var data = [];

    if (props.mode === "date") {
      data = getWeeks({
        year: props.year,
        month: props.month
      }, options);
    } else if (props.mode === "week") {
      data = getWeeks({
        year: props.year,
        month: props.month
      }, options);
    } else if (props.mode === "quarter") {
      data = getQuarters(props.year, options);
    } else if (props.mode === "month") {
      data = getMonths(props.year, options);
    } else if (props.mode === "year") {
      data = getYears(props.year, options);
    }

    return flagActive(data, {
      start: props.start,
      end: props.end,
      hoverStart: props.hoverStart,
      hoverEnd: props.hoverEnd,
      type: props.mode,
      isRange: props.isRange
    });
  }

  function useDisableDate(props) {
    return {
      disableDate: function disableDate(value) {
        return !isEnabled({
          disableDate: props.disableDate,
          format: props.format,
          mode: props.mode,
          value: value
        });
      },
      minDate: isObject_1(props.disableDate) && "before" in props.disableDate ? new Date(props.disableDate.before) : props.start,
      maxDate: isObject_1(props.disableDate) && "after" in props.disableDate ? new Date(props.disableDate.after) : props.end
    };
  }

  function isEnabled(props) {
    if (!props.disableDate) return true;
    var isEnabled2 = true;

    if (typeof props.disableDate === "function") {
      return !props.disableDate(props.value);
    }

    if (Array.isArray(props.disableDate)) {
      var isIncludes = false;
      var formattedDisabledDate = props.disableDate.map(function (item) {
        return dayjs_min(item, props.format);
      });
      formattedDisabledDate.forEach(function (item) {
        if (item.isSame(dayjs_min(props.value))) {
          isIncludes = true;
        }
      });
      return !isIncludes;
    }

    if (props.disableDate.from && props.disableDate.to) {
      var compareMin = dayjs_min(new Date(props.disableDate.from));
      var compareMax = dayjs_min(new Date(props.disableDate.to));
      return !dayjs_min(props.value).isBetween(compareMin, compareMax, props.mode, "[]");
    }

    var min = props.disableDate.before ? new Date(props.disableDate.before) : null;
    var max = props.disableDate.after ? new Date(props.disableDate.after) : null;

    if (max && min) {
      var _compareMin = dayjs_min(new Date(min));

      var _compareMax = dayjs_min(new Date(max));

      isEnabled2 = dayjs_min(props.value).isBetween(_compareMin, _compareMax, props.mode, "[]");
    } else if (min) {
      var _compareMin2 = dayjs_min(new Date(min));

      isEnabled2 = !dayjs_min(props.value).isBefore(_compareMin2, props.mode);
    } else if (max) {
      var _compareMax2 = dayjs_min(new Date(max));

      isEnabled2 = !dayjs_min(props.value).isAfter(_compareMax2, props.mode);
    }

    return isEnabled2;
  }

  function ownKeys$13(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$12(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$13(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$13(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TSinglePanel = VueCompositionAPI.defineComponent({
    name: "TSinglePanel",
    props: {
      disableDate: [Object, Array, Function],
      mode: {
        type: String,
        "default": "date"
      },
      format: String,
      presetsPlacement: {
        type: String,
        "default": "bottom"
      },
      value: [String, Number, Array, Date],
      timePickerProps: Object,
      presets: Object,
      enableTimePicker: Boolean,
      firstDayOfWeek: Number,
      year: Number,
      month: Number,
      time: String,
      popupVisible: Boolean,
      onPanelClick: Function,
      onCellClick: Function,
      onCellMouseEnter: Function,
      onCellMouseLeave: Function,
      onJumperClick: Function,
      onConfirmClick: Function,
      onPresetClick: Function,
      onYearChange: Function,
      onMonthChange: Function,
      onTimePickerChange: Function
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("date-picker__panel");

      var _useConfig = useConfig("datePicker"),
          global = _useConfig.global;

      var _getDefaultFormat = getDefaultFormat({
        mode: props.mode,
        format: props.format,
        enableTimePicker: props.enableTimePicker
      }),
          format = _getDefaultFormat.format;

      var disableDateOptions = VueCompositionAPI.computed(function () {
        return useDisableDate({
          format: format,
          mode: props.mode,
          disableDate: props.disableDate
        });
      });
      var tableData = VueCompositionAPI.computed(function () {
        return useTableData(_objectSpread$12({
          year: props.year,
          month: props.month,
          mode: props.mode,
          start: props.value ? parseToDayjs(props.value, format).toDate() : void 0,
          firstDayOfWeek: props.firstDayOfWeek || global.value.firstDayOfWeek
        }, disableDateOptions.value));
      });
      var panelContentProps = VueCompositionAPI.computed(function () {
        return {
          format: format,
          value: props.value,
          mode: props.mode,
          year: props.year,
          month: props.month,
          firstDayOfWeek: props.firstDayOfWeek || global.value.firstDayOfWeek,
          tableData: tableData.value,
          popupVisible: props.popupVisible,
          enableTimePicker: props.enableTimePicker,
          timePickerProps: props.timePickerProps,
          time: props.time,
          onMonthChange: props.onMonthChange,
          onYearChange: props.onYearChange,
          onJumperClick: props.onJumperClick,
          onCellClick: props.onCellClick,
          onCellMouseEnter: props.onCellMouseEnter,
          onCellMouseLeave: props.onCellMouseLeave,
          onTimePickerChange: props.onTimePickerChange
        };
      });
      var extraProps = VueCompositionAPI.computed(function () {
        return {
          presets: props.presets,
          enableTimePicker: props.enableTimePicker,
          presetsPlacement: props.presetsPlacement,
          onPresetClick: props.onPresetClick,
          onConfirmClick: props.onConfirmClick,
          selectedValue: props.value
        };
      });
      return {
        COMPONENT_NAME: COMPONENT_NAME,
        panelContentProps: panelContentProps,
        extraProps: extraProps
      };
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var COMPONENT_NAME = this.COMPONENT_NAME,
          panelContentProps = this.panelContentProps,
          extraProps = this.extraProps;
      return h("div", {
        "class": [COMPONENT_NAME, _defineProperty$3({}, "".concat(COMPONENT_NAME, "--direction-row"), ["left", "right"].includes(this.presetsPlacement))],
        "on": {
          "click": function click(e) {
            var _this$onPanelClick;

            return (_this$onPanelClick = _this.onPanelClick) === null || _this$onPanelClick === void 0 ? void 0 : _this$onPanelClick.call(_this, {
              e: e
            });
          }
        }
      }, [["top", "left"].includes(this.presetsPlacement) ? h(TExtraContent, {
        "props": _objectSpread$12({}, extraProps)
      }) : null, h(TPanelContent, {
        "props": _objectSpread$12({}, panelContentProps)
      }), ["bottom", "right"].includes(this.presetsPlacement) ? h(TExtraContent, {
        "props": _objectSpread$12({}, extraProps)
      }) : null]);
    }
  });

  function ownKeys$12(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$11(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$12(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$12(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _DatePicker = VueCompositionAPI.defineComponent({
    name: "TDatePicker",
    props: datePickerProps,
    setup: function setup(props2, _ref) {
      var emit = _ref.emit;
      var COMPONENT_NAME = usePrefixClass("date-picker");

      var _useGlobalIcon = useGlobalIcon({
        CalendarIcon: Calendar$1
      }),
          CalendarIcon = _useGlobalIcon.CalendarIcon;

      var _useSingle = useSingle(props2, {
        emit: emit
      }),
          inputValue = _useSingle.inputValue,
          popupVisible = _useSingle.popupVisible,
          datePickerInputProps = _useSingle.inputProps,
          datePickerPopupProps = _useSingle.popupProps,
          isHoverCell = _useSingle.isHoverCell,
          cacheValue = _useSingle.cacheValue,
          value = _useSingle.value,
          year = _useSingle.year,
          month = _useSingle.month,
          time = _useSingle.time,
          inputRef = _useSingle.inputRef,
          onChange = _useSingle.onChange;

      var formatRef = VueCompositionAPI.computed(function () {
        return getDefaultFormat({
          mode: props2.mode,
          format: props2.format,
          valueType: props2.valueType,
          enableTimePicker: props2.enableTimePicker
        });
      });
      VueCompositionAPI.watch(popupVisible, function (visible) {
        if (visible) {
          year.value = parseToDayjs(value.value || new Date(), formatRef.value.format).year();
          month.value = parseToDayjs(value.value || new Date(), formatRef.value.format).month();
          time.value = formatTime(value.value || new Date(), formatRef.value.timeFormat);

          if (value.value) {
            cacheValue.value = formatDate(value.value, {
              format: formatRef.value.format,
              targetFormat: formatRef.value.format
            });
          }
        }
      });

      function onCellMouseEnter(date) {
        isHoverCell.value = true;
        inputValue.value = formatDate(date, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.format
        });
      }

      function onCellMouseLeave() {
        isHoverCell.value = false;
        inputValue.value = formatDate(cacheValue.value, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.format
        });
      }

      function onCellClick(date) {
        var _props2$onPick;

        isHoverCell.value = false;

        if (props2.mode === "date") {
          year.value = date.getFullYear();
          month.value = date.getMonth();
        }

        if (props2.enableTimePicker) {
          cacheValue.value = formatDate(date, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.format
          });
        } else {
          onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(date, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }), {
            dayjsValue: dayjs_min(date),
            trigger: "pick"
          });
          popupVisible.value = false;
        }

        (_props2$onPick = props2.onPick) === null || _props2$onPick === void 0 ? void 0 : _props2$onPick.call(props2, date);
        emit("pick", date);
      }

      function onJumperClick(_ref2) {
        var trigger = _ref2.trigger;
        var monthCountMap = {
          date: 1,
          week: 1,
          month: 12,
          quarter: 12,
          year: 120
        };
        var monthCount = monthCountMap[props2.mode] || 0;
        var current = new Date(year.value, month.value);
        var next = null;

        if (trigger === "prev") {
          next = subtractMonth(current, monthCount);
        } else if (trigger === "current") {
          next = new Date();
        } else if (trigger === "next") {
          next = addMonth(current, monthCount);
        }

        var nextYear = next.getFullYear();
        var nextMonth = next.getMonth();
        year.value = nextYear;
        month.value = nextMonth;
      }

      function onTimePickerChange(val) {
        var _props2$onPick2;

        time.value = val;

        var _extractTimeObj = extractTimeObj(val),
            hours = _extractTimeObj.hours,
            minutes = _extractTimeObj.minutes,
            seconds = _extractTimeObj.seconds,
            milliseconds = _extractTimeObj.milliseconds,
            meridiem = _extractTimeObj.meridiem;

        var nextHours = hours;
        if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
        if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
        var currentDate = !dayjs_min(inputValue.value, formatRef.value.format).isValid() ? dayjs_min() : dayjs_min(inputValue.value, formatRef.value.format);
        var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
        inputValue.value = formatDate(nextDate, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.format
        });
        (_props2$onPick2 = props2.onPick) === null || _props2$onPick2 === void 0 ? void 0 : _props2$onPick2.call(props2, nextDate);
      }

      function onConfirmClick() {
        var nextValue = formatDate(inputValue.value, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.format
        });

        if (nextValue) {
          onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(inputValue.value, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }), {
            dayjsValue: dayjs_min(inputValue.value),
            trigger: "confirm"
          });
        } else {
          inputValue.value = formatDate(value.value, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.format
          });
        }

        popupVisible.value = false;
      }

      function onPresetClick(presetValue) {
        var presetVal = typeof presetValue === "function" ? presetValue() : presetValue;
        onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(presetVal, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.valueType
        }), {
          dayjsValue: dayjs_min(presetVal),
          trigger: "preset"
        });
        popupVisible.value = false;
      }

      function onYearChange(nextYear) {
        year.value = nextYear;
      }

      function onMonthChange(nextMonth) {
        month.value = nextMonth;
      }

      var panelProps = VueCompositionAPI.computed(function () {
        return {
          value: cacheValue.value,
          year: year.value,
          month: month.value,
          format: formatRef.value.format,
          mode: props2.mode,
          presets: props2.presets,
          time: time.value,
          disableDate: props2.disableDate,
          firstDayOfWeek: props2.firstDayOfWeek,
          timePickerProps: props2.timePickerProps,
          enableTimePicker: props2.enableTimePicker,
          presetsPlacement: props2.presetsPlacement,
          popupVisible: popupVisible.value,
          onCellClick: onCellClick,
          onCellMouseEnter: onCellMouseEnter,
          onCellMouseLeave: onCellMouseLeave,
          onJumperClick: onJumperClick,
          onConfirmClick: onConfirmClick,
          onPresetClick: onPresetClick,
          onYearChange: onYearChange,
          onMonthChange: onMonthChange,
          onTimePickerChange: onTimePickerChange,
          onPanelClick: function onPanelClick() {
            var _inputRef$value, _inputRef$value$focus;

            return (_inputRef$value = inputRef.value) === null || _inputRef$value === void 0 ? void 0 : (_inputRef$value$focus = _inputRef$value.focus) === null || _inputRef$value$focus === void 0 ? void 0 : _inputRef$value$focus.call(_inputRef$value);
          }
        };
      });
      return {
        COMPONENT_NAME: COMPONENT_NAME,
        inputValue: inputValue,
        datePickerPopupProps: datePickerPopupProps,
        datePickerInputProps: datePickerInputProps,
        popupVisible: popupVisible,
        panelProps: panelProps,
        CalendarIcon: CalendarIcon
      };
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var COMPONENT_NAME = this.COMPONENT_NAME,
          inputValue = this.inputValue,
          datePickerPopupProps = this.datePickerPopupProps,
          datePickerInputProps = this.datePickerInputProps,
          popupVisible = this.popupVisible,
          panelProps = this.panelProps,
          CalendarIcon = this.CalendarIcon;

      var renderSuffixIcon = function renderSuffixIcon() {
        if (_this.suffixIcon) return _this.suffixIcon;
        if (_this.$scopedSlots.suffixIcon) return _this.$scopedSlots.suffixIcon;
        if (_this.$scopedSlots["suffix-icon"]) return _this.$scopedSlots["suffix-icon"];
        return function () {
          return h(CalendarIcon);
        };
      };

      return h("div", {
        "class": COMPONENT_NAME
      }, [h(SelectInput, {
        "attrs": {
          "disabled": this.disabled,
          "value": inputValue,
          "status": this.status,
          "tips": this.tips,
          "popupProps": datePickerPopupProps,
          "inputProps": _objectSpread$11({
            suffixIcon: renderSuffixIcon()
          }, datePickerInputProps),
          "popupVisible": popupVisible,
          "clearable": this.clearable,
          "allowInput": this.allowInput,
          "panel": function panel() {
            return h(TSinglePanel, {
              "props": _objectSpread$11({}, panelProps)
            });
          }
        }
      })]);
    }
  });

  var datePickerPanelProps = {
    onCellClick: Function,
    onChange: Function,
    onConfirm: Function,
    onMonthChange: Function,
    onPanelClick: Function,
    onPresetClick: Function,
    onTimeChange: Function,
    onYearChange: Function
  };

  function ownKeys$11(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$10(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$11(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$11(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _DatePickerPanel = VueCompositionAPI.defineComponent({
    name: "TDatePickerPanel",
    props: _objectSpread$10({
      value: datePickerProps.value,
      defaultValue: datePickerProps.defaultValue,
      valueType: datePickerProps.valueType,
      disabled: datePickerProps.disabled,
      disableDate: datePickerProps.disableDate,
      enableTimePicker: datePickerProps.enableTimePicker,
      firstDayOfWeek: datePickerProps.firstDayOfWeek,
      format: datePickerProps.format,
      mode: datePickerProps.mode,
      presets: datePickerProps.presets,
      presetsPlacement: datePickerProps.presetsPlacement,
      timePickerProps: datePickerProps.timePickerProps
    }, datePickerPanelProps),
    setup: function setup(props, _ref) {
      var emit = _ref.emit;

      var _useSingleValue = useSingleValue(props),
          cacheValue = _useSingleValue.cacheValue,
          value = _useSingleValue.value,
          year = _useSingleValue.year,
          month = _useSingleValue.month,
          time = _useSingleValue.time,
          onChange = _useSingleValue.onChange;

      var formatRef = VueCompositionAPI.computed(function () {
        return getDefaultFormat({
          mode: props.mode,
          format: props.format,
          valueType: props.valueType,
          enableTimePicker: props.enableTimePicker
        });
      });

      function onCellClick(date, _ref2) {
        var _props$onCellClick;

        var e = _ref2.e;
        (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 ? void 0 : _props$onCellClick.call(props, {
          date: date,
          e: e
        });
        emit("cell-click", {
          date: date,
          e: e
        });

        if (props.mode === "date") {
          year.value = date.getFullYear();
          month.value = date.getMonth();
        }

        if (props.enableTimePicker) {
          cacheValue.value = formatDate(date, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.format
          });
        } else {
          onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(date, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }), {
            dayjsValue: dayjs_min(date),
            trigger: "pick"
          });
        }
      }

      function onJumperClick(_ref3) {
        var trigger = _ref3.trigger;
        var triggerMap = {
          prev: "arrow-previous",
          next: "arrow-next"
        };
        var monthCountMap = {
          date: 1,
          week: 1,
          month: 12,
          quarter: 12,
          year: 120
        };
        var monthCount = monthCountMap[props.mode] || 0;
        var current = new Date(year.value, month.value);
        var next = null;

        if (trigger === "prev") {
          next = subtractMonth(current, monthCount);
        } else if (trigger === "current") {
          next = new Date();
        } else if (trigger === "next") {
          next = addMonth(current, monthCount);
        }

        var nextYear = next.getFullYear();
        var nextMonth = next.getMonth();

        if (year.value !== nextYear) {
          var _props$onYearChange;

          (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 ? void 0 : _props$onYearChange.call(props, {
            year: nextYear,
            date: dayjs_min(value.value).toDate(),
            trigger: trigger === "current" ? "today" : "year-".concat(triggerMap[trigger])
          });
          emit("year-change", {
            year: nextYear,
            date: dayjs_min(value.value).toDate(),
            trigger: trigger === "current" ? "today" : "year-".concat(triggerMap[trigger])
          });
        }

        if (month.value !== nextMonth) {
          var _props$onMonthChange;

          (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 ? void 0 : _props$onMonthChange.call(props, {
            month: nextMonth,
            date: dayjs_min(value.value).toDate(),
            trigger: trigger === "current" ? "today" : "month-".concat(triggerMap[trigger])
          });
          emit("month-change", {
            month: nextMonth,
            date: dayjs_min(value.value).toDate(),
            trigger: trigger === "current" ? "today" : "month-".concat(triggerMap[trigger])
          });
        }

        year.value = nextYear;
        month.value = nextMonth;
      }

      function onTimePickerChange(val) {
        var _props$onTimeChange;

        time.value = val;

        var _extractTimeObj = extractTimeObj(val),
            hours = _extractTimeObj.hours,
            minutes = _extractTimeObj.minutes,
            seconds = _extractTimeObj.seconds,
            milliseconds = _extractTimeObj.milliseconds,
            meridiem = _extractTimeObj.meridiem;

        var nextHours = hours;
        if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
        if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
        var currentDate = !dayjs_min(cacheValue.value, formatRef.value.format).isValid() ? dayjs_min() : dayjs_min(cacheValue.value, formatRef.value.format);
        var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
        cacheValue.value = formatDate(nextDate, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.format
        });
        (_props$onTimeChange = props.onTimeChange) === null || _props$onTimeChange === void 0 ? void 0 : _props$onTimeChange.call(props, {
          time: val,
          date: dayjs_min(value.value).toDate(),
          trigger: "time-hour"
        });
        emit("time-change", {
          time: val,
          date: dayjs_min(value.value).toDate(),
          trigger: "time-hour"
        });
      }

      function onConfirmClick(_ref4) {
        var _props$onConfirm;

        var e = _ref4.e;
        onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(cacheValue.value, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.valueType
        }), {
          dayjsValue: dayjs_min(cacheValue.value),
          trigger: "confirm"
        });
        (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 ? void 0 : _props$onConfirm.call(props, {
          date: dayjs_min(cacheValue.value).toDate(),
          e: e
        });
        emit("confirm", {
          date: dayjs_min(cacheValue.value).toDate(),
          e: e
        });
      }

      function onPresetClick(presetValue, _ref5) {
        var _props$onPresetClick;

        var e = _ref5.e,
            preset = _ref5.preset;
        var presetVal = typeof presetValue === "function" ? presetValue() : presetValue;
        onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(presetVal, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.valueType
        }), {
          dayjsValue: dayjs_min(presetVal),
          trigger: "preset"
        });
        (_props$onPresetClick = props.onPresetClick) === null || _props$onPresetClick === void 0 ? void 0 : _props$onPresetClick.call(props, {
          e: e,
          preset: preset
        });
        emit("preset-click", {
          e: e,
          preset: preset
        });
      }

      function onYearChange(nextYear) {
        var _props$onYearChange2;

        year.value = nextYear;
        (_props$onYearChange2 = props.onYearChange) === null || _props$onYearChange2 === void 0 ? void 0 : _props$onYearChange2.call(props, {
          year: year.value,
          date: dayjs_min(value.value).toDate(),
          trigger: "year-select"
        });
        emit("year-change", {
          year: year.value,
          date: dayjs_min(value.value).toDate(),
          trigger: "year-select"
        });
      }

      function onMonthChange(nextMonth) {
        var _props$onMonthChange2;

        month.value = nextMonth;
        (_props$onMonthChange2 = props.onMonthChange) === null || _props$onMonthChange2 === void 0 ? void 0 : _props$onMonthChange2.call(props, {
          month: month.value,
          date: dayjs_min(value.value).toDate(),
          trigger: "month-select"
        });
        emit("month-change", {
          month: month.value,
          date: dayjs_min(value.value).toDate(),
          trigger: "month-select"
        });
      }

      var panelProps = VueCompositionAPI.computed(function () {
        return {
          value: cacheValue.value,
          year: year.value,
          month: month.value,
          mode: props.mode,
          format: formatRef.value.format,
          presets: props.presets,
          time: time.value,
          disableDate: props.disableDate,
          firstDayOfWeek: props.firstDayOfWeek,
          timePickerProps: props.timePickerProps,
          enableTimePicker: props.enableTimePicker,
          presetsPlacement: props.presetsPlacement,
          onCellClick: onCellClick,
          onJumperClick: onJumperClick,
          onConfirmClick: onConfirmClick,
          onPresetClick: onPresetClick,
          onYearChange: onYearChange,
          onMonthChange: onMonthChange,
          onTimePickerChange: onTimePickerChange
        };
      });
      return {
        panelProps: panelProps
      };
    },
    render: function render() {
      var h = arguments[0];
      var panelProps = this.panelProps;
      return h(TSinglePanel, {
        "props": _objectSpread$10({}, panelProps)
      });
    }
  });

  var dateRangePickerProps = {
    allowInput: Boolean,
    clearable: Boolean,
    disableDate: {
      type: [Object, Array, Function]
    },
    disabled: Boolean,
    enableTimePicker: Boolean,
    firstDayOfWeek: {
      type: Number,
      validator: function validator(val) {
        if (!val) return true;
        return [1, 2, 3, 4, 5, 6, 7].includes(val);
      }
    },
    format: {
      type: String,
      "default": ""
    },
    mode: {
      type: String,
      "default": "date",
      validator: function validator(val) {
        if (!val) return true;
        return ["year", "quarter", "month", "week", "date"].includes(val);
      }
    },
    panelPreselection: {
      type: Boolean,
      "default": true
    },
    placeholder: {
      type: [String, Array]
    },
    popupProps: {
      type: Object
    },
    prefixIcon: {
      type: Function
    },
    presets: {
      type: Object
    },
    presetsPlacement: {
      type: String,
      "default": "bottom",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "top", "right", "bottom"].includes(val);
      }
    },
    rangeInputProps: {
      type: Object
    },
    separator: {
      type: String,
      "default": "-"
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "success", "warning", "error"].includes(val);
      }
    },
    suffixIcon: {
      type: Function
    },
    timePickerProps: {
      type: Object
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    valueType: {
      type: String,
      "default": ""
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onInput: Function,
    onPick: Function
  };

  var props$u = {
    activeIndex: {
      type: Number
    },
    clearable: Boolean,
    disabled: Boolean,
    format: {
      type: [Array, Function]
    },
    inputProps: {
      type: [Object, Array]
    },
    label: {
      type: [String, Function]
    },
    placeholder: {
      type: [String, Array]
    },
    prefixIcon: {
      type: Function
    },
    readonly: Boolean,
    separator: {
      type: [String, Function],
      "default": "-"
    },
    showClearIconOnEmpty: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["success", "warning", "error"].includes(val);
      }
    },
    suffix: {
      type: [String, Function]
    },
    suffixIcon: {
      type: Function
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onClick: Function,
    onEnter: Function,
    onFocus: Function,
    onMouseenter: Function,
    onMouseleave: Function
  };

  function ownKeys$10(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$$(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$10(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$10(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function calcArrayValue(value) {
    if (Array.isArray(value)) {
      return value;
    }

    return [value, value];
  }

  var _RangeInput = VueCompositionAPI.defineComponent({
    name: "TRangeInput",
    props: props$u,
    setup: function setup(props2) {
      var instance = VueCompositionAPI.getCurrentInstance();

      var _toRefs = VueCompositionAPI.toRefs(props2),
          value = _toRefs.value;

      var _useCommonClassName = useCommonClassName$1(),
          STATUS = _useCommonClassName.STATUS,
          SIZE = _useCommonClassName.SIZE;

      var classPrefix = usePrefixClass();

      var _useGlobalIcon = useGlobalIcon({
        CloseCircleFilledIcon: CloseCircleFilled
      }),
          CloseCircleFilledIcon = _useGlobalIcon.CloseCircleFilledIcon;

      var COMPONENT_NAME = usePrefixClass("range-input");
      var renderTNodeJSX = useTNodeJSX();
      var focused = VueCompositionAPI.ref(false);
      var isHover = VueCompositionAPI.ref(false);
      var calcFormat = VueCompositionAPI.computed(function () {
        return calcArrayValue(props2.format);
      });
      var calcInputProps = VueCompositionAPI.computed(function () {
        return calcArrayValue(props2.inputProps);
      });
      var calcPlaceholder = VueCompositionAPI.computed(function () {
        return calcArrayValue(props2.placeholder);
      });

      var _useVModel = useVModel(value, props2.defaultValue, props2.onChange, "change"),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerValue = _useVModel2[0],
          setInnerValue = _useVModel2[1];

      var isShowClearIcon = VueCompositionAPI.computed(function () {
        var _props2$value;

        return (props2.clearable && ((_props2$value = props2.value) === null || _props2$value === void 0 ? void 0 : _props2$value.length) && !props2.disabled || props2.showClearIconOnEmpty) && isHover.value;
      });
      var inputRefs = {
        firstInputRef: VueCompositionAPI.ref(),
        secondInputRef: VueCompositionAPI.ref()
      };

      function handleClear(context) {
        var _props2$onClear;

        (_props2$onClear = props2.onClear) === null || _props2$onClear === void 0 ? void 0 : _props2$onClear.call(props2, context);
        setInnerValue(["", ""], _objectSpread$$(_objectSpread$$({}, context), {}, {
          trigger: "clear",
          position: "all"
        }));
      }

      function handleEnter(rangeValue, context) {
        var _props2$onEnter;

        (_props2$onEnter = props2.onEnter) === null || _props2$onEnter === void 0 ? void 0 : _props2$onEnter.call(props2, rangeValue, context);
        instance.emit("enter", rangeValue, context);
      }

      function handleFocus(rangeValue, context) {
        var _props2$onFocus;

        focused.value = true;
        (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 ? void 0 : _props2$onFocus.call(props2, rangeValue, context);
        instance.emit("focus", rangeValue, context);
      }

      function handleBlur(rangeValue, context) {
        var _props2$onBlur;

        focused.value = false;
        (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 ? void 0 : _props2$onBlur.call(props2, rangeValue, context);
        instance.emit("blur", rangeValue, context);
      }

      function handleMouseEnter(e) {
        var _props2$onMouseenter;

        isHover.value = true;
        props2 === null || props2 === void 0 ? void 0 : (_props2$onMouseenter = props2.onMouseenter) === null || _props2$onMouseenter === void 0 ? void 0 : _props2$onMouseenter.call(props2, {
          e: e
        });
        instance.emit("monseenter", {
          e: e
        });
      }

      function handleMouseLeave(e) {
        var _props2$onMouseleave;

        isHover.value = false;
        props2 === null || props2 === void 0 ? void 0 : (_props2$onMouseleave = props2.onMouseleave) === null || _props2$onMouseleave === void 0 ? void 0 : _props2$onMouseleave.call(props2, {
          e: e
        });
        instance.emit("monseleave", {
          e: e
        });
      }

      var exposeObj = {
        firstInputElement: inputRefs.firstInputRef.value,
        secondInputElement: inputRefs.secondInputRef.value,
        focus: function focus(options) {
          var _inputRefs$value;

          var _ref = options || {},
              _ref$position = _ref.position,
              position = _ref$position === void 0 ? "first" : _ref$position;

          (_inputRefs$value = inputRefs["".concat(position, "InputRef")].value) === null || _inputRefs$value === void 0 ? void 0 : _inputRefs$value.focus();
        },
        blur: function blur(options) {
          var _inputRefs$value2;

          var _ref2 = options || {},
              _ref2$position = _ref2.position,
              position = _ref2$position === void 0 ? "first" : _ref2$position;

          (_inputRefs$value2 = inputRefs["".concat(position, "InputRef")].value) === null || _inputRefs$value2 === void 0 ? void 0 : _inputRefs$value2.blur();
        },
        select: function select(options) {
          var _inputRefs$value3;

          var _ref3 = options || {},
              _ref3$position = _ref3.position,
              position = _ref3$position === void 0 ? "first" : _ref3$position;

          (_inputRefs$value3 = inputRefs["".concat(position, "InputRef")].value) === null || _inputRefs$value3 === void 0 ? void 0 : _inputRefs$value3.select();
        }
      };
      return _objectSpread$$(_objectSpread$$({}, exposeObj), {}, {
        COMPONENT_NAME: COMPONENT_NAME,
        SIZE: SIZE,
        STATUS: STATUS,
        focused: focused,
        classPrefix: classPrefix,
        inputRefs: inputRefs,
        calcInputProps: calcInputProps,
        calcFormat: calcFormat,
        calcPlaceholder: calcPlaceholder,
        innerValue: innerValue,
        isShowClearIcon: isShowClearIcon,
        handleMouseEnter: handleMouseEnter,
        handleMouseLeave: handleMouseLeave,
        handleEnter: handleEnter,
        handleFocus: handleFocus,
        handleBlur: handleBlur,
        setInnerValue: setInnerValue,
        renderTNodeJSX: renderTNodeJSX,
        handleClear: handleClear,
        CloseCircleFilledIcon: CloseCircleFilledIcon
      });
    },
    render: function render() {
      var _ref4,
          _this = this;

      var h = arguments[0];
      var COMPONENT_NAME = this.COMPONENT_NAME,
          SIZE = this.SIZE,
          STATUS = this.STATUS,
          focused = this.focused,
          handleMouseEnter = this.handleMouseEnter,
          handleMouseLeave = this.handleMouseLeave,
          handleEnter = this.handleEnter,
          handleFocus = this.handleFocus,
          handleBlur = this.handleBlur,
          setInnerValue = this.setInnerValue,
          renderTNodeJSX = this.renderTNodeJSX,
          handleClear = this.handleClear,
          classPrefix = this.classPrefix,
          inputRefs = this.inputRefs,
          calcInputProps = this.calcInputProps,
          calcFormat = this.calcFormat,
          calcPlaceholder = this.calcPlaceholder,
          innerValue = this.innerValue,
          isShowClearIcon = this.isShowClearIcon,
          CloseCircleFilledIcon = this.CloseCircleFilledIcon;
      var labelContent = renderTNodeJSX("label");
      var prefixIconContent = renderTNodeJSX("prefixIcon");
      var suffixContent = renderTNodeJSX("suffix");
      var suffixIconContent = renderTNodeJSX("suffixIcon");
      return h("div", {
        "class": [COMPONENT_NAME, (_ref4 = {}, _defineProperty$3(_ref4, SIZE[this.size], this.size !== "medium"), _defineProperty$3(_ref4, STATUS.disabled, this.disabled), _defineProperty$3(_ref4, STATUS.focused, focused), _ref4)],
        "on": {
          "mouseenter": handleMouseEnter,
          "mouseleave": handleMouseLeave
        }
      }, [h("div", {
        "class": "".concat(COMPONENT_NAME, "__inner")
      }, [prefixIconContent, labelContent ? h("div", {
        "class": "".concat(classPrefix, "-input__prefix")
      }, [labelContent]) : null, h(Input, {
        "ref": inputRefs.firstInputRef,
        "class": "".concat(COMPONENT_NAME, "__inner-left"),
        "attrs": {
          "inputClass": _defineProperty$3({}, "".concat(classPrefix, "-is-focused"), this.activeIndex === 0),
          "placeholder": calcPlaceholder[0],
          "disabled": this.disabled,
          "readonly": this.readonly,
          "format": calcFormat[0],
          "value": innerValue === null || innerValue === void 0 ? void 0 : innerValue[0]
        },
        "on": {
          "click": function click(_ref6) {
            var _this$onClick;

            var e = _ref6.e;
            return (_this$onClick = _this.onClick) === null || _this$onClick === void 0 ? void 0 : _this$onClick.call(_this, {
              e: e,
              position: "first"
            });
          },
          "clear": function clear() {
            return setInnerValue([], {
              position: "first",
              trigger: "input"
            });
          },
          "enter": function enter(val, _ref7) {
            var e = _ref7.e;
            return handleEnter([val, innerValue === null || innerValue === void 0 ? void 0 : innerValue[1]], {
              e: e,
              position: "first"
            });
          },
          "focus": function focus(val, _ref8) {
            var e = _ref8.e;
            return handleFocus([val, innerValue === null || innerValue === void 0 ? void 0 : innerValue[1]], {
              e: e,
              position: "first"
            });
          },
          "blur": function blur(val, _ref9) {
            var e = _ref9.e;
            return handleBlur([val, innerValue === null || innerValue === void 0 ? void 0 : innerValue[1]], {
              e: e,
              position: "first"
            });
          },
          "change": function change(val, _ref10) {
            var e = _ref10.e;
            return setInnerValue([val, innerValue === null || innerValue === void 0 ? void 0 : innerValue[1]], {
              e: e,
              position: "first",
              trigger: "input"
            });
          }
        },
        "props": _objectSpread$$({}, calcInputProps[0])
      }), h("div", {
        "class": "".concat(COMPONENT_NAME, "__inner-separator")
      }, [this.separator]), h(Input, {
        "ref": inputRefs.secondInputRef,
        "class": "".concat(COMPONENT_NAME, "__inner-right"),
        "attrs": {
          "inputClass": _defineProperty$3({}, "".concat(classPrefix, "-is-focused"), this.activeIndex === 1),
          "placeholder": calcPlaceholder[1],
          "disabled": this.disabled,
          "readonly": this.readonly,
          "format": calcFormat[1],
          "value": innerValue === null || innerValue === void 0 ? void 0 : innerValue[1]
        },
        "on": {
          "click": function click(_ref12) {
            var _this$onClick2;

            var e = _ref12.e;
            return (_this$onClick2 = _this.onClick) === null || _this$onClick2 === void 0 ? void 0 : _this$onClick2.call(_this, {
              e: e,
              position: "second"
            });
          },
          "clear": function clear() {
            return setInnerValue([], {
              position: "second",
              trigger: "input"
            });
          },
          "enter": function enter(val, _ref13) {
            var e = _ref13.e;
            return handleEnter([innerValue === null || innerValue === void 0 ? void 0 : innerValue[0], val], {
              e: e,
              position: "second"
            });
          },
          "focus": function focus(val, _ref14) {
            var e = _ref14.e;
            return handleFocus([innerValue === null || innerValue === void 0 ? void 0 : innerValue[0], val], {
              e: e,
              position: "second"
            });
          },
          "blur": function blur(val, _ref15) {
            var e = _ref15.e;
            return handleBlur([innerValue === null || innerValue === void 0 ? void 0 : innerValue[0], val], {
              e: e,
              position: "second"
            });
          },
          "change": function change(val, _ref16) {
            var e = _ref16.e;
            return setInnerValue([innerValue === null || innerValue === void 0 ? void 0 : innerValue[0], val], {
              e: e,
              position: "second",
              trigger: "input"
            });
          }
        },
        "props": _objectSpread$$({}, calcInputProps[1])
      }), suffixContent ? h("div", {
        "class": "".concat(COMPONENT_NAME, "__suffix")
      }, [suffixContent]) : null, suffixIconContent && h("span", {
        "class": "".concat(COMPONENT_NAME, "__suffix ").concat(COMPONENT_NAME, "__suffix-icon")
      }, [isShowClearIcon ? h(CloseCircleFilledIcon, {
        "class": "".concat(COMPONENT_NAME, "__suffix-clear"),
        "on": {
          "click": handleClear
        }
      }) : suffixIconContent])]), this.tips && h("div", {
        "class": "".concat(COMPONENT_NAME, "__tips")
      }, [this.tips])]);
    }
  });

  var props$t = {
    autoWidth: Boolean,
    disabled: Boolean,
    inputValue: {
      type: Array,
      "default": void 0
    },
    defaultInputValue: {
      type: Array
    },
    panel: {
      type: Function
    },
    popupProps: {
      type: Object
    },
    popupVisible: Boolean,
    rangeInputProps: {
      type: Object
    },
    readonly: Boolean,
    status: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["success", "warning", "error"].includes(val);
      }
    },
    tips: {
      type: [String, Function]
    },
    onInputChange: Function,
    onPopupVisibleChange: Function
  };

  function ownKeys$$(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$_(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$$(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$$(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _RangeInputPopup = VueCompositionAPI.defineComponent({
    name: "TRangeInputPopup",
    props: props$t,
    setup: function setup(props2) {
      var COMPONENT_NAME = usePrefixClass("range-input-popup");

      var _useOverlayInnerStyle = useOverlayInnerStyle(props2),
          tOverlayInnerStyle = _useOverlayInnerStyle.tOverlayInnerStyle,
          innerPopupVisible = _useOverlayInnerStyle.innerPopupVisible,
          onInnerPopupVisibleChange = _useOverlayInnerStyle.onInnerPopupVisibleChange;

      var popupClasses = VueCompositionAPI.computed(function () {
        return [COMPONENT_NAME.value, _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "--visible"), props2.popupVisible || innerPopupVisible.value)];
      });
      return {
        COMPONENT_NAME: COMPONENT_NAME,
        tOverlayInnerStyle: tOverlayInnerStyle,
        innerPopupVisible: innerPopupVisible,
        onInnerPopupVisibleChange: onInnerPopupVisibleChange,
        popupClasses: popupClasses
      };
    },
    render: function render() {
      var h = arguments[0];
      var tOverlayInnerStyle = this.tOverlayInnerStyle,
          innerPopupVisible = this.innerPopupVisible,
          onInnerPopupVisibleChange = this.onInnerPopupVisibleChange,
          popupClasses = this.popupClasses;
      return h("div", {
        "class": popupClasses
      }, [h(Popup, {
        "attrs": {
          "hideEmptyPopup": true,
          "content": this.panel,
          "trigger": "click",
          "placement": "bottom-left",
          "visible": this.popupVisible || innerPopupVisible
        },
        "props": _objectSpread$_({}, _objectSpread$_({
          disabled: this.disabled,
          overlayInnerStyle: tOverlayInnerStyle,
          onVisibleChange: onInnerPopupVisibleChange
        }, this.popupProps))
      }, [h(_RangeInput, {
        "props": _objectSpread$_({}, _objectSpread$_({
          value: this.inputValue,
          onChange: this.onInputChange,
          disabled: this.disabled,
          status: this.status,
          tips: this.tips
        }, this.rangeInputProps))
      })])]);
    }
  });

  var RangeInput = withInstall(_RangeInput);
  var RangeInputPopup = withInstall(_RangeInputPopup);

  function ownKeys$_(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$Z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$_(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$_(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TRangePanel = VueCompositionAPI.defineComponent({
    name: "TRangePanel",
    props: {
      hoverValue: Array,
      activeIndex: Number,
      isFirstValueSelected: Boolean,
      disableDate: [Object, Array, Function],
      mode: {
        type: String,
        "default": "date"
      },
      format: String,
      presetsPlacement: {
        type: String,
        "default": "bottom"
      },
      value: Array,
      timePickerProps: Object,
      presets: Object,
      enableTimePicker: Boolean,
      firstDayOfWeek: Number,
      panelPreselection: Boolean,
      hidePreselection: {
        type: Boolean,
        defaultValue: true
      },
      popupVisible: Boolean,
      year: Array,
      month: Array,
      time: Array,
      onClick: Function,
      onCellClick: Function,
      onCellMouseEnter: Function,
      onCellMouseLeave: Function,
      onJumperClick: Function,
      onConfirmClick: Function,
      onPresetClick: Function,
      onYearChange: Function,
      onMonthChange: Function,
      onTimePickerChange: Function
    },
    setup: function setup(props) {
      var COMPONENT_NAME = usePrefixClass("date-range-picker__panel");

      var _useConfig = useConfig("datePicker"),
          global = _useConfig.global;

      var _getDefaultFormat = getDefaultFormat({
        mode: props.mode,
        format: props.format,
        enableTimePicker: props.enableTimePicker
      }),
          format = _getDefaultFormat.format;

      var hidePreselection = !props.panelPreselection && props.value.length === 2;
      var disableDateOptions = VueCompositionAPI.computed(function () {
        return useDisableDate({
          format: format,
          mode: props.mode,
          disableDate: props.disableDate,
          start: props.isFirstValueSelected && props.activeIndex === 1 ? new Date(parseToDayjs(props.value[0], format, "start").toDate().setHours(0, 0, 0)) : void 0,
          end: props.isFirstValueSelected && props.activeIndex === 0 ? new Date(parseToDayjs(props.value[1], format).toDate().setHours(23, 59, 59)) : void 0
        });
      });
      var startTableData = VueCompositionAPI.computed(function () {
        return useTableData(_objectSpread$Z({
          isRange: true,
          start: props.value[0] ? parseToDayjs(props.value[0], format).toDate() : void 0,
          end: props.value[1] ? parseToDayjs(props.value[1], format).toDate() : void 0,
          hoverStart: !hidePreselection && props.hoverValue[0] ? parseToDayjs(props.hoverValue[0], format).toDate() : void 0,
          hoverEnd: !hidePreselection && props.hoverValue[1] ? parseToDayjs(props.hoverValue[1], format).toDate() : void 0,
          year: props.year[0],
          month: props.month[0],
          mode: props.mode,
          firstDayOfWeek: props.firstDayOfWeek || global.value.firstDayOfWeek
        }, disableDateOptions.value));
      });
      var endTableData = VueCompositionAPI.computed(function () {
        return useTableData(_objectSpread$Z({
          isRange: true,
          start: props.value[0] ? parseToDayjs(props.value[0], format).toDate() : void 0,
          end: props.value[1] ? parseToDayjs(props.value[1], format).toDate() : void 0,
          hoverStart: !hidePreselection && props.hoverValue[0] ? parseToDayjs(props.hoverValue[0], format).toDate() : void 0,
          hoverEnd: !hidePreselection && props.hoverValue[1] ? parseToDayjs(props.hoverValue[1], format).toDate() : void 0,
          year: props.year[1],
          month: props.month[1],
          mode: props.mode,
          firstDayOfWeek: props.firstDayOfWeek || global.value.firstDayOfWeek
        }, disableDateOptions.value));
      });
      var panelContentProps = VueCompositionAPI.computed(function () {
        return {
          format: format,
          mode: props.mode,
          firstDayOfWeek: props.firstDayOfWeek || global.value.firstDayOfWeek,
          popupVisible: props.popupVisible,
          enableTimePicker: props.enableTimePicker,
          timePickerProps: props.timePickerProps,
          onMonthChange: props.onMonthChange,
          onYearChange: props.onYearChange,
          onJumperClick: props.onJumperClick,
          onCellClick: props.onCellClick,
          onCellMouseEnter: props.onCellMouseEnter,
          onCellMouseLeave: props.onCellMouseLeave,
          onTimePickerChange: props.onTimePickerChange
        };
      });
      return {
        COMPONENT_NAME: COMPONENT_NAME,
        startTableData: startTableData,
        endTableData: endTableData,
        panelContentProps: panelContentProps
      };
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var COMPONENT_NAME = this.COMPONENT_NAME,
          startTableData = this.startTableData,
          endTableData = this.endTableData,
          panelContentProps = this.panelContentProps;
      return h("div", {
        "class": [COMPONENT_NAME, _defineProperty$3({}, "".concat(COMPONENT_NAME, "--direction-row"), ["left", "right"].includes(this.presetsPlacement))],
        "on": {
          "click": function click(e) {
            var _this$onClick;

            return (_this$onClick = _this.onClick) === null || _this$onClick === void 0 ? void 0 : _this$onClick.call(_this, {
              e: e
            });
          }
        }
      }, [["top", "left"].includes(this.presetsPlacement) ? h(TExtraContent, {
        "props": _objectSpread$Z({}, {
          presets: this.presets,
          selectedValue: this.value[this.activeIndex],
          enableTimePicker: this.enableTimePicker,
          onPresetClick: this.onPresetClick,
          onConfirmClick: this.onConfirmClick,
          presetsPlacement: this.presetsPlacement
        })
      }) : null, h("div", {
        "class": "".concat(COMPONENT_NAME, "-content-wrapper")
      }, [!this.enableTimePicker ? [h(TPanelContent, {
        "key": "startPanel",
        "props": _objectSpread$Z({}, _objectSpread$Z({
          partial: this.activeIndex ? "end" : "start",
          year: this.year[0],
          month: this.month[0],
          time: this.time[0],
          value: this.value,
          tableData: startTableData
        }, panelContentProps))
      }), h(TPanelContent, {
        "key": "endPanel",
        "props": _objectSpread$Z({}, _objectSpread$Z({
          partial: this.activeIndex ? "end" : "start",
          year: this.year[1],
          month: this.month[1],
          time: this.time[1],
          value: this.value,
          tableData: endTableData
        }, panelContentProps))
      })] : h(TPanelContent, {
        "key": "start",
        "props": _objectSpread$Z({}, _objectSpread$Z({
          partial: this.activeIndex ? "end" : "start",
          year: this.activeIndex ? this.year[1] : this.year[0],
          month: this.activeIndex ? this.month[1] : this.month[0],
          time: this.activeIndex ? this.time[1] : this.time[0],
          value: this.value,
          tableData: this.activeIndex ? endTableData : startTableData
        }, panelContentProps))
      })]), ["bottom", "right"].includes(this.presetsPlacement) ? h(TExtraContent, {
        "props": _objectSpread$Z({}, {
          presets: this.presets,
          selectedValue: this.value[this.activeIndex],
          enableTimePicker: this.enableTimePicker,
          onPresetClick: this.onPresetClick,
          onConfirmClick: this.onConfirmClick,
          presetsPlacement: this.presetsPlacement
        })
      }) : null]);
    }
  });

  function initYearMonthTime(_ref) {
    var value = _ref.value,
        _ref$mode = _ref.mode,
        mode = _ref$mode === void 0 ? "date" : _ref$mode,
        format = _ref.format,
        _ref$timeFormat = _ref.timeFormat,
        timeFormat = _ref$timeFormat === void 0 ? "HH:mm:ss" : _ref$timeFormat,
        enableTimePicker = _ref.enableTimePicker;
    var defaultYearMonthTime = {
      year: [dayjs_min().year(), dayjs_min().year()],
      month: [dayjs_min().month(), dayjs_min().month()],
      time: [dayjs_min().format(timeFormat), dayjs_min().format(timeFormat)]
    };

    if (mode === "year") {
      defaultYearMonthTime.year[1] += 10;
    } else if (mode === "month" || mode === "quarter") {
      defaultYearMonthTime.year[1] += 1;
    } else if ((mode === "date" || mode === "week") && !enableTimePicker) {
      defaultYearMonthTime.month[1] += 1;
    }

    if (!value || !Array.isArray(value) || !value.length) {
      return defaultYearMonthTime;
    }

    return {
      year: value.map(function (v) {
        return parseToDayjs(v, format).year();
      }),
      month: value.map(function (v) {
        return parseToDayjs(v, format).month();
      }),
      time: value.map(function (v) {
        return parseToDayjs(v, format).format(timeFormat);
      })
    };
  }
  function useRangeValue(props) {
    var _toRefs = VueCompositionAPI.toRefs(props),
        valueFromProps = _toRefs.value;

    var _useVModel = useVModel(valueFromProps, props.defaultValue, props.onChange, "change"),
        _useVModel2 = _slicedToArray(_useVModel, 2),
        value = _useVModel2[0],
        onChange = _useVModel2[1];

    var formatRef = VueCompositionAPI.computed(function () {
      return getDefaultFormat({
        mode: props.mode,
        format: props.format,
        valueType: props.valueType,
        enableTimePicker: props.enableTimePicker
      });
    });

    if (props.enableTimePicker) {
      if (!extractTimeFormat(formatRef.value.format)) console.error("format: ".concat(formatRef.value.format, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
      if (!extractTimeFormat(formatRef.value.valueType) && formatRef.value.valueType !== "time-stamp") console.error("valueType: ".concat(formatRef.value.valueType, " \u4E0D\u89C4\u8303\uFF0C\u5305\u542B\u65F6\u95F4\u9009\u62E9\u5FC5\u987B\u8981\u6709\u65F6\u95F4\u683C\u5F0F\u5316 HH:mm:ss"));
    }

    if (!Array.isArray(value.value)) {
      console.error("typeof value: ".concat(value.value, " must be Array!"));
    } else if (!isValidDate(value.value, formatRef.value.valueType)) {
      console.error("value: ".concat(value.value, " is invalid dateTime! Check whether the value is consistent with format: ").concat(formatRef.value.format));
    }

    var isFirstValueSelected = VueCompositionAPI.ref(false);
    var time = VueCompositionAPI.ref(initYearMonthTime({
      value: value.value,
      mode: props.mode,
      format: formatRef.value.format,
      timeFormat: formatRef.value.timeFormat
    }).time);
    var month = VueCompositionAPI.ref(initYearMonthTime({
      value: value.value,
      mode: props.mode,
      format: formatRef.value.format,
      enableTimePicker: props.enableTimePicker
    }).month);
    var year = VueCompositionAPI.ref(initYearMonthTime({
      value: value.value,
      mode: props.mode,
      format: formatRef.value.format
    }).year);
    var cacheValue = VueCompositionAPI.ref(formatDate(value.value, {
      format: formatRef.value.format,
      targetFormat: formatRef.value.format
    }));
    VueCompositionAPI.watchEffect(function () {
      if (!value.value) {
        cacheValue.value = [];
        return;
      }

      if (!isValidDate(value.value, formatRef.value.valueType)) return;
      cacheValue.value = formatDate(value.value, {
        format: formatRef.value.format,
        targetFormat: formatRef.value.format
      });
      time.value = formatTime(value.value, formatRef.value.timeFormat);
    });
    return {
      year: year,
      month: month,
      value: value,
      time: time,
      isFirstValueSelected: isFirstValueSelected,
      cacheValue: cacheValue,
      onChange: onChange
    };
  }

  function ownKeys$Z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$Y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Z(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var PARTIAL_MAP = {
    first: "start",
    second: "end"
  };
  function useRange(props, _ref) {
    var emit = _ref.emit;
    var COMPONENT_NAME = usePrefixClass("date-range-picker");

    var _useConfig = useConfig("datePicker"),
        global = _useConfig.global;

    var isMountedRef = VueCompositionAPI.ref(false);
    var inputRef = VueCompositionAPI.ref();

    var _useRangeValue = useRangeValue(props),
        value = _useRangeValue.value,
        onChange = _useRangeValue.onChange,
        time = _useRangeValue.time,
        month = _useRangeValue.month,
        year = _useRangeValue.year,
        cacheValue = _useRangeValue.cacheValue,
        isFirstValueSelected = _useRangeValue.isFirstValueSelected;

    var formatRef = VueCompositionAPI.computed(function () {
      return getDefaultFormat({
        mode: props.mode,
        format: props.format,
        valueType: props.valueType,
        enableTimePicker: props.enableTimePicker
      });
    });
    var popupVisible = VueCompositionAPI.ref(false);
    var isHoverCell = VueCompositionAPI.ref(false);
    var activeIndex = VueCompositionAPI.ref(0);
    var inputValue = VueCompositionAPI.ref(formatDate(props.value, {
      format: formatRef.value.format,
      targetFormat: formatRef.value.format
    }));
    var rangeInputProps = VueCompositionAPI.computed(function () {
      return _objectSpread$Y(_objectSpread$Y({}, props.rangeInputProps), {}, {
        ref: inputRef,
        clearable: props.clearable,
        prefixIcon: props.prefixIcon,
        readonly: !props.allowInput,
        separator: props.separator,
        placeholder: props.placeholder || global.value.placeholder[props.mode],
        activeIndex: popupVisible.value ? activeIndex.value : void 0,
        "class": _defineProperty$3({}, "".concat(COMPONENT_NAME.value, "__input--placeholder"), isHoverCell.value),
        onClick: function onClick(_ref2) {
          var position = _ref2.position;
          activeIndex.value = position === "first" ? 0 : 1;
        },
        onClear: function onClear(_ref3) {
          var e = _ref3.e;
          e.stopPropagation();
          popupVisible.value = false;
          onChange === null || onChange === void 0 ? void 0 : onChange([], {
            dayjsValue: [],
            trigger: "clear"
          });
          emit("clear", [], {
            dayjsValue: [],
            trigger: "clear"
          });
        },
        onBlur: function onBlur(newVal, _ref4) {
          var _props$onBlur;

          var e = _ref4.e,
              position = _ref4.position;
          (_props$onBlur = props.onBlur) === null || _props$onBlur === void 0 ? void 0 : _props$onBlur.call(props, {
            value: newVal,
            partial: PARTIAL_MAP[position],
            e: e
          });
          emit("blur", {
            value: newVal,
            partial: PARTIAL_MAP[position],
            e: e
          });
        },
        onFocus: function onFocus(newVal, _ref5) {
          var _props$onFocus;

          var e = _ref5.e,
              position = _ref5.position;
          (_props$onFocus = props.onFocus) === null || _props$onFocus === void 0 ? void 0 : _props$onFocus.call(props, {
            value: newVal,
            partial: PARTIAL_MAP[position],
            e: e
          });
          emit("focus", {
            value: newVal,
            partial: PARTIAL_MAP[position],
            e: e
          });
          activeIndex.value = position === "first" ? 0 : 1;
        },
        onChange: function onChange(newVal) {
          inputValue.value = newVal;
          if (!isValidDate(newVal, formatRef.value.format)) return;
          var newYear = [];
          var newMonth = [];
          var newTime = [];
          newVal.forEach(function (v, i) {
            newYear.push(dayjs_min(v).year() || year.value[i]);
            newMonth.push(dayjs_min(v).month() || month.value[i]);
            newTime.push(dayjs_min(v).format(formatRef.value.timeFormat) || time.value[i]);
          });
          year.value = newYear;
          month.value = newMonth;
          time.value = newTime;
        },
        onEnter: function onEnter(newVal) {
          if (!isValidDate(newVal, formatRef.value.format) && !isValidDate(value.value, formatRef.value.format)) return;
          popupVisible.value = false;

          if (isValidDate(newVal, formatRef.value.format)) {
            onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(newVal, {
              format: formatRef.value.format,
              targetFormat: formatRef.value.valueType
            }), {
              dayjsValue: newVal.map(function (v) {
                return dayjs_min(v);
              }),
              trigger: "enter"
            });
          } else if (isValidDate(value.value, formatRef.value.format)) {
            inputValue.value = formatDate(value.value, {
              format: formatRef.value.format,
              targetFormat: formatRef.value.format
            });
          } else {
            inputValue.value = [];
          }
        }
      });
    });
    var popupProps = VueCompositionAPI.computed(function () {
      var _props$popupProps$ove, _props$popupProps, _props$popupProps2;

      return _objectSpread$Y(_objectSpread$Y({
        expandAnimation: true
      }, props.popupProps), {}, {
        overlayInnerStyle: (_props$popupProps$ove = (_props$popupProps = props.popupProps) === null || _props$popupProps === void 0 ? void 0 : _props$popupProps.overlayInnerStyle) !== null && _props$popupProps$ove !== void 0 ? _props$popupProps$ove : {
          width: "auto"
        },
        overlayClassName: [(_props$popupProps2 = props.popupProps) === null || _props$popupProps2 === void 0 ? void 0 : _props$popupProps2.overlayClassName, "".concat(COMPONENT_NAME.value, "__panel-container")],
        onVisibleChange: function onVisibleChange(visible, context) {
          if (context.trigger === "trigger-element-click") {
            var _inputRef$value, _inputRef$value$focus;

            var indexMap = {
              0: "first",
              1: "second"
            };
            (_inputRef$value = inputRef.value) === null || _inputRef$value === void 0 ? void 0 : (_inputRef$value$focus = _inputRef$value.focus) === null || _inputRef$value$focus === void 0 ? void 0 : _inputRef$value$focus.call(_inputRef$value, {
              position: indexMap[activeIndex.value]
            });
            popupVisible.value = true;
            return;
          }

          if (!visible) {
            isHoverCell.value = false;
            inputValue.value = formatDate(value.value, {
              format: formatRef.value.format,
              targetFormat: formatRef.value.format
            });
          }

          popupVisible.value = visible;
        }
      });
    });
    VueCompositionAPI.watchEffect(function () {
      if (!value.value) {
        inputValue.value = [];
        return;
      }

      if (!isValidDate(value.value, "valueType")) return;
      inputValue.value = formatDate(value.value, {
        format: formatRef.value.format,
        targetFormat: formatRef.value.format
      });
    });
    VueCompositionAPI.watchEffect(function () {
      var _inputRef$value2, _inputRef$value2$focu;

      if (!isMountedRef.value) {
        isMountedRef.value = true;
        return;
      }

      var indexMap = {
        0: "first",
        1: "second"
      };
      (_inputRef$value2 = inputRef.value) === null || _inputRef$value2 === void 0 ? void 0 : (_inputRef$value2$focu = _inputRef$value2.focus) === null || _inputRef$value2$focu === void 0 ? void 0 : _inputRef$value2$focu.call(_inputRef$value2, {
        position: indexMap[activeIndex.value]
      });
    });
    return {
      year: year,
      month: month,
      value: value,
      time: time,
      inputValue: inputValue,
      popupVisible: popupVisible,
      rangeInputProps: rangeInputProps,
      popupProps: popupProps,
      isHoverCell: isHoverCell,
      activeIndex: activeIndex,
      isFirstValueSelected: isFirstValueSelected,
      cacheValue: cacheValue,
      onChange: onChange
    };
  }

  function ownKeys$Y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$X(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Y(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _DateRangePicker = VueCompositionAPI.defineComponent({
    name: "TDateRangePicker",
    props: dateRangePickerProps,
    setup: function setup(props2, _ref) {
      var emit = _ref.emit;
      var COMPONENT_NAME = usePrefixClass("date-range-picker");

      var _useGlobalIcon = useGlobalIcon({
        CalendarIcon: Calendar$1
      }),
          CalendarIcon = _useGlobalIcon.CalendarIcon;

      var _useRange = useRange(props2, {
        emit: emit
      }),
          inputValue = _useRange.inputValue,
          popupVisible = _useRange.popupVisible,
          dateRangePickerRangeInputProps = _useRange.rangeInputProps,
          dateRangePickerPopupProps = _useRange.popupProps,
          value = _useRange.value,
          year = _useRange.year,
          month = _useRange.month,
          time = _useRange.time,
          cacheValue = _useRange.cacheValue,
          activeIndex = _useRange.activeIndex,
          isHoverCell = _useRange.isHoverCell,
          isFirstValueSelected = _useRange.isFirstValueSelected,
          onChange = _useRange.onChange;

      var formatRef = VueCompositionAPI.computed(function () {
        return getDefaultFormat({
          mode: props2.mode,
          enableTimePicker: props2.enableTimePicker,
          format: props2.format,
          valueType: props2.valueType
        });
      });
      var isSelected = VueCompositionAPI.ref(false);
      VueCompositionAPI.watch(popupVisible, function (visible) {
        if (visible) {
          isSelected.value = false;
          isFirstValueSelected.value = false;
          cacheValue.value = formatDate(value.value || [], {
            format: formatRef.value.format,
            targetFormat: formatRef.value.format
          });
          time.value = formatTime(value.value || [dayjs_min().format(formatRef.value.timeFormat), dayjs_min().format(formatRef.value.timeFormat)], formatRef.value.timeFormat);

          if (!value.value.length) {
            year.value = initYearMonthTime({
              value: value.value,
              mode: props2.mode,
              format: formatRef.value.format
            }).year;
            month.value = initYearMonthTime({
              value: value.value,
              mode: props2.mode,
              format: formatRef.value.format,
              enableTimePicker: props2.enableTimePicker
            }).month;
          } else if (value.value.length === 2 && !props2.enableTimePicker) {
            var nextMonth = value.value.map(function (v) {
              return parseToDayjs(v || new Date(), formatRef.value.format).month();
            });

            if (year.value[0] === year.value[1] && nextMonth[0] === nextMonth[1]) {
              nextMonth[0] === 11 ? nextMonth[0] -= 1 : nextMonth[1] += 1;
            }

            month.value = nextMonth;
          } else {
            year.value = value.value.map(function (v) {
              return parseToDayjs(v || new Date(), formatRef.value.format).year();
            });
            month.value = value.value.map(function (v) {
              return parseToDayjs(v || new Date(), formatRef.value.format).month();
            });
          }
        }
      });

      function onCellMouseEnter(nextDate) {
        var date = nextDate;
        if (activeIndex.value && !props2.enableTimePicker) date.setHours(23, 59, 59);
        isHoverCell.value = true;

        var nextValue = _toConsumableArray(inputValue.value);

        nextValue[activeIndex.value] = formatDate(date, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.format
        });
        inputValue.value = nextValue;
      }

      function onCellMouseLeave() {
        isHoverCell.value = false;
        inputValue.value = cacheValue.value;
      }

      function onCellClick(nextDate, _ref2) {
        var _props2$onPick;

        var e = _ref2.e,
            partial = _ref2.partial;
        var date = nextDate;
        if (activeIndex.value && !props2.enableTimePicker) date.setHours(23, 59, 59);
        (_props2$onPick = props2.onPick) === null || _props2$onPick === void 0 ? void 0 : _props2$onPick.call(props2, date, {
          e: e,
          partial: activeIndex.value ? "end" : "start"
        });
        emit("pick", date, {
          e: e,
          partial: activeIndex.value ? "end" : "start"
        });
        isHoverCell.value = false;
        isSelected.value = true;

        var nextValue = _toConsumableArray(inputValue.value);

        nextValue[activeIndex.value] = formatDate(date, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.format
        });
        cacheValue.value = nextValue;
        inputValue.value = nextValue;

        if (props2.mode === "date") {
          var partialIndex = partial === "start" ? 0 : 1;
          var isAdditional = dayjs_min(date).month() !== month.value[partialIndex];

          if (isAdditional) {
            if (activeIndex.value === 0) month.value = [dayjs_min(date).month(), Math.min(dayjs_min(date).month() + 1, 11)];
            if (activeIndex.value === 1) month.value = [Math.max(dayjs_min(date).month() - 1, 0), dayjs_min(date).month()];
          }
        }

        if (props2.enableTimePicker) return;
        var notValidIndex = nextValue.findIndex(function (v) {
          return !v || !isValidDate(v, formatRef.value.format);
        });

        if (notValidIndex === -1 && nextValue.length === 2 && !props2.enableTimePicker && isFirstValueSelected.value) {
          onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(nextValue, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }), {
            dayjsValue: nextValue.map(function (v) {
              return dayjs_min(v);
            }),
            trigger: "pick"
          });
          isFirstValueSelected.value = false;
          popupVisible.value = false;
        } else if (notValidIndex !== -1) {
          activeIndex.value = notValidIndex;
          isFirstValueSelected.value = true;
        } else {
          activeIndex.value = activeIndex.value ? 0 : 1;
          isFirstValueSelected.value = true;
        }
      }

      function onJumperClick(_ref3) {
        var trigger = _ref3.trigger,
            partial = _ref3.partial;
        var partialIndex = partial === "start" ? 0 : 1;
        var monthCountMap = {
          date: 1,
          week: 1,
          month: 12,
          quarter: 12,
          year: 120
        };
        var monthCount = monthCountMap[props2.mode] || 0;
        var current = new Date(year.value[partialIndex], month.value[partialIndex]);
        var next = null;

        if (trigger === "prev") {
          next = subtractMonth(current, monthCount);
        } else if (trigger === "current") {
          next = new Date();
        } else if (trigger === "next") {
          next = addMonth(current, monthCount);
        }

        var nextYear = _toConsumableArray(year.value);

        nextYear[partialIndex] = next.getFullYear();

        var nextMonth = _toConsumableArray(month.value);

        nextMonth[partialIndex] = next.getMonth();

        if (partialIndex === 0) {
          nextYear[1] = Math.max(nextYear[0], nextYear[1]);

          if (nextYear[0] === nextYear[1]) {
            nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
          }
        }

        if (partialIndex === 1) {
          nextYear[0] = Math.min(nextYear[0], nextYear[1]);

          if (nextYear[0] === nextYear[1]) {
            nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
          }
        }

        year.value = nextYear;
        month.value = nextMonth;
      }

      function onTimePickerChange(val) {
        var _extractTimeObj = extractTimeObj(val),
            hours = _extractTimeObj.hours,
            minutes = _extractTimeObj.minutes,
            seconds = _extractTimeObj.seconds,
            milliseconds = _extractTimeObj.milliseconds,
            meridiem = _extractTimeObj.meridiem;

        var nextInputValue = _toConsumableArray(inputValue.value);

        var changedInputValue = inputValue.value[activeIndex.value];
        var currentDate = !dayjs_min(changedInputValue, formatRef.value.format).isValid() ? dayjs_min().year(year.value[activeIndex.value]).month(month.value[activeIndex.value]) : dayjs_min(changedInputValue, formatRef.value.format);
        var nextHours = hours;
        if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
        if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
        var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
        nextInputValue[activeIndex.value] = nextDate;

        var nextTime = _toConsumableArray(time.value);

        nextTime[activeIndex.value] = val;
        time.value = nextTime;
        isSelected.value = true;
        inputValue.value = formatDate(nextInputValue, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.format
        });
        cacheValue.value = formatDate(nextInputValue, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.format
        });
      }

      function onConfirmClick() {
        var nextValue = _toConsumableArray(inputValue.value);

        var notValidIndex = nextValue.findIndex(function (v) {
          return !v || !isValidDate(v, formatRef.value.format);
        });

        if (notValidIndex === -1 && nextValue.length === 2 && isFirstValueSelected.value) {
          onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(nextValue, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }), {
            dayjsValue: nextValue.map(function (v) {
              return dayjs_min(v);
            }),
            trigger: "confirm"
          });
          year.value = nextValue.map(function (v) {
            return dayjs_min(v, formatRef.value.format).year();
          });
          month.value = nextValue.map(function (v) {
            return dayjs_min(v, formatRef.value.format).month();
          });
          popupVisible.value = false;
          isFirstValueSelected.value = false;
        } else if (notValidIndex !== -1) {
          activeIndex.value = notValidIndex;
          isFirstValueSelected.value = true;
        } else {
          activeIndex.value = activeIndex.value ? 0 : 1;
          isFirstValueSelected.value = true;
        }
      }

      function onPresetClick(preset) {
        var presetValue = preset;

        if (typeof preset === "function") {
          presetValue = preset();
        }

        if (!Array.isArray(presetValue)) {
          console.error("preset: ".concat(preset, " \u9884\u8BBE\u503C\u5FC5\u987B\u662F\u6570\u7EC4!"));
        } else {
          onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(presetValue, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }), {
            dayjsValue: presetValue.map(function (p) {
              return dayjs_min(p);
            }),
            trigger: "preset"
          });
          popupVisible.value = false;
        }
      }

      function onYearChange(nextVal, _ref4) {
        var partial = _ref4.partial;
        var partialIndex = partial === "start" ? 0 : 1;
        if (props2.enableTimePicker) partialIndex = activeIndex.value;

        var nextYear = _toConsumableArray(year.value);

        nextYear[partialIndex] = nextVal;
        if (partialIndex === 0) nextYear[1] = Math.max(nextYear[0], nextYear[1]);
        if (partialIndex === 1) nextYear[0] = Math.min(nextYear[0], nextYear[1]);
        year.value = nextYear;
      }

      function onMonthChange(nextVal, _ref5) {
        var partial = _ref5.partial;
        var partialIndex = partial === "start" ? 0 : 1;
        if (props2.enableTimePicker) partialIndex = activeIndex.value;

        var nextMonth = _toConsumableArray(month.value);

        nextMonth[partialIndex] = nextVal;

        if (year[0] === year[1]) {
          if (partialIndex === 0) nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
          if (partialIndex === 1) nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
        }

        month.value = nextMonth;
      }

      var panelProps = VueCompositionAPI.computed(function () {
        return {
          hoverValue: isHoverCell.value ? inputValue.value : [],
          value: isSelected.value ? cacheValue.value : value.value,
          isFirstValueSelected: isFirstValueSelected.value,
          activeIndex: activeIndex.value,
          year: year.value,
          month: month.value,
          format: formatRef.value.format,
          mode: props2.mode,
          presets: props2.presets,
          time: time.value,
          disableDate: props2.disableDate,
          firstDayOfWeek: props2.firstDayOfWeek,
          timePickerProps: props2.timePickerProps,
          enableTimePicker: props2.enableTimePicker,
          presetsPlacement: props2.presetsPlacement,
          panelPreselection: props2.panelPreselection,
          popupVisible: popupVisible.value,
          onCellClick: onCellClick,
          onCellMouseEnter: onCellMouseEnter,
          onCellMouseLeave: onCellMouseLeave,
          onJumperClick: onJumperClick,
          onConfirmClick: onConfirmClick,
          onPresetClick: onPresetClick,
          onYearChange: onYearChange,
          onMonthChange: onMonthChange,
          onTimePickerChange: onTimePickerChange
        };
      });
      return {
        COMPONENT_NAME: COMPONENT_NAME,
        inputValue: inputValue,
        dateRangePickerPopupProps: dateRangePickerPopupProps,
        dateRangePickerRangeInputProps: dateRangePickerRangeInputProps,
        popupVisible: popupVisible,
        panelProps: panelProps,
        CalendarIcon: CalendarIcon
      };
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var COMPONENT_NAME = this.COMPONENT_NAME,
          inputValue = this.inputValue,
          dateRangePickerPopupProps = this.dateRangePickerPopupProps,
          dateRangePickerRangeInputProps = this.dateRangePickerRangeInputProps,
          popupVisible = this.popupVisible,
          panelProps = this.panelProps,
          CalendarIcon = this.CalendarIcon;

      var renderSuffixIcon = function renderSuffixIcon() {
        if (_this.suffixIcon) return _this.suffixIcon;
        if (_this.$scopedSlots.suffixIcon) return _this.$scopedSlots.suffixIcon;
        if (_this.$scopedSlots["suffix-icon"]) return _this.$scopedSlots["suffix-icon"];
        return function () {
          return h(CalendarIcon);
        };
      };

      return h("div", {
        "class": COMPONENT_NAME
      }, [h(RangeInputPopup, {
        "attrs": {
          "disabled": this.disabled,
          "status": this.status,
          "tips": this.tips,
          "inputValue": inputValue,
          "popupProps": dateRangePickerPopupProps,
          "rangeInputProps": _objectSpread$X({
            suffixIcon: renderSuffixIcon()
          }, dateRangePickerRangeInputProps),
          "popupVisible": popupVisible,
          "panel": function panel() {
            return h(TRangePanel, {
              "props": _objectSpread$X({}, panelProps)
            });
          }
        }
      })]);
    }
  });

  var dateRangePickerPanelProps = {
    onCellClick: Function,
    onChange: Function,
    onConfirm: Function,
    onMonthChange: Function,
    onPanelClick: Function,
    onPresetClick: Function,
    onTimeChange: Function,
    onYearChange: Function
  };

  function ownKeys$X(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$W(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$X(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$X(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _DateRangePickerPanel = VueCompositionAPI.defineComponent({
    name: "TDateRangePickerPanel",
    props: _objectSpread$W({
      value: dateRangePickerProps.value,
      defaultValue: dateRangePickerProps.defaultValue,
      valueType: dateRangePickerProps.valueType,
      disabled: dateRangePickerProps.disabled,
      disableDate: dateRangePickerProps.disableDate,
      enableTimePicker: dateRangePickerProps.enableTimePicker,
      firstDayOfWeek: dateRangePickerProps.firstDayOfWeek,
      format: dateRangePickerProps.format,
      mode: dateRangePickerProps.mode,
      presets: dateRangePickerProps.presets,
      presetsPlacement: dateRangePickerProps.presetsPlacement,
      timePickerProps: dateRangePickerProps.timePickerProps,
      panelPreselection: dateRangePickerProps.panelPreselection
    }, dateRangePickerPanelProps),
    setup: function setup(props, _ref) {
      var emit = _ref.emit;

      var _useRangeValue = useRangeValue(props),
          value = _useRangeValue.value,
          year = _useRangeValue.year,
          month = _useRangeValue.month,
          time = _useRangeValue.time,
          cacheValue = _useRangeValue.cacheValue,
          isFirstValueSelected = _useRangeValue.isFirstValueSelected,
          onChange = _useRangeValue.onChange;

      var formatRef = VueCompositionAPI.computed(function () {
        return getDefaultFormat({
          mode: props.mode,
          enableTimePicker: props.enableTimePicker,
          format: props.format,
          valueType: props.valueType
        });
      });
      var isSelected = VueCompositionAPI.ref(false);
      var isHoverCell = VueCompositionAPI.ref(false);
      var hoverValue = VueCompositionAPI.ref([]);
      var activeIndex = VueCompositionAPI.computed(function () {
        return isFirstValueSelected.value ? 1 : 0;
      });

      function onCellMouseEnter(date) {
        isHoverCell.value = true;

        var nextValue = _toConsumableArray(hoverValue.value);

        nextValue[activeIndex.value] = formatDate(date, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.format
        });
        hoverValue.value = nextValue;
      }

      function onCellMouseLeave() {
        isHoverCell.value = false;
        hoverValue.value = cacheValue.value;
      }

      function onCellClick(date, _ref2) {
        var _props$onCellClick;

        var e = _ref2.e,
            partial = _ref2.partial;
        isHoverCell.value = false;
        isSelected.value = true;

        var nextValue = _toConsumableArray(cacheValue.value);

        nextValue[activeIndex.value] = formatDate(date, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.format
        });
        cacheValue.value = nextValue;
        if (props.enableTimePicker) return;

        if (nextValue.length === 2 && !props.enableTimePicker && isFirstValueSelected.value) {
          onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(nextValue, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }), {
            dayjsValue: nextValue.map(function (v) {
              return dayjs_min(v);
            }),
            trigger: "pick"
          });
          isFirstValueSelected.value = false;
        } else {
          isFirstValueSelected.value = true;
        }

        (_props$onCellClick = props.onCellClick) === null || _props$onCellClick === void 0 ? void 0 : _props$onCellClick.call(props, {
          e: e,
          partial: partial,
          date: value.value.map(function (v) {
            return dayjs_min(v).toDate();
          })
        });
        emit("cell-click", {
          e: e,
          partial: partial,
          date: value.value.map(function (v) {
            return dayjs_min(v).toDate();
          })
        });
      }

      function onJumperClick(_ref3) {
        var trigger = _ref3.trigger,
            partial = _ref3.partial;
        var partialIndex = partial === "start" ? 0 : 1;
        var triggerMap = {
          prev: "arrow-previous",
          next: "arrow-next"
        };
        var monthCountMap = {
          date: 1,
          month: 12,
          year: 120
        };
        var monthCount = monthCountMap[props.mode] || 0;
        var current = new Date(year.value[partialIndex], month.value[partialIndex]);
        var next = null;

        if (trigger === "prev") {
          next = subtractMonth(current, monthCount);
        } else if (trigger === "current") {
          next = new Date();
        } else if (trigger === "next") {
          next = addMonth(current, monthCount);
        }

        var nextYear = _toConsumableArray(year.value);

        nextYear[partialIndex] = next.getFullYear();

        var nextMonth = _toConsumableArray(month.value);

        nextMonth[partialIndex] = next.getMonth();

        if (partialIndex === 0) {
          nextYear[1] = Math.max(nextYear[0], nextYear[1]);

          if (nextYear[0] === nextYear[1]) {
            nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
          }
        }

        if (partialIndex === 1) {
          nextYear[0] = Math.min(nextYear[0], nextYear[1]);

          if (nextYear[0] === nextYear[1]) {
            nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
          }
        }

        if (year.value.some(function (y) {
          return !nextYear.includes(y);
        })) {
          var _props$onYearChange;

          (_props$onYearChange = props.onYearChange) === null || _props$onYearChange === void 0 ? void 0 : _props$onYearChange.call(props, {
            partial: partial,
            year: nextYear[partialIndex],
            date: value.value.map(function (v) {
              return dayjs_min(v).toDate();
            }),
            trigger: trigger === "current" ? "today" : "year-".concat(triggerMap[trigger])
          });
          emit("year-change", {
            partial: partial,
            year: nextYear[partialIndex],
            date: value.value.map(function (v) {
              return dayjs_min(v).toDate();
            }),
            trigger: trigger === "current" ? "today" : "year-".concat(triggerMap[trigger])
          });
        }

        if (month.value.some(function (m) {
          return !nextMonth.includes(m);
        })) {
          var _props$onMonthChange;

          (_props$onMonthChange = props.onMonthChange) === null || _props$onMonthChange === void 0 ? void 0 : _props$onMonthChange.call(props, {
            partial: partial,
            month: nextMonth[partialIndex],
            date: value.value.map(function (v) {
              return dayjs_min(v).toDate();
            }),
            trigger: trigger === "current" ? "today" : "month-".concat(triggerMap[trigger])
          });
          emit("month-change", {
            partial: partial,
            month: nextMonth[partialIndex],
            date: value.value.map(function (v) {
              return dayjs_min(v).toDate();
            }),
            trigger: trigger === "current" ? "today" : "month-".concat(triggerMap[trigger])
          });
        }

        year.value = nextYear;
        month.value = nextMonth;
      }

      function onTimePickerChange(val) {
        var _props$onTimeChange;

        var _extractTimeObj = extractTimeObj(val),
            hours = _extractTimeObj.hours,
            minutes = _extractTimeObj.minutes,
            seconds = _extractTimeObj.seconds,
            milliseconds = _extractTimeObj.milliseconds,
            meridiem = _extractTimeObj.meridiem;

        var nextInputValue = _toConsumableArray(cacheValue.value);

        var changedInputValue = cacheValue.value[activeIndex.value];
        var currentDate = !dayjs_min(changedInputValue, formatRef.value.format).isValid() ? dayjs_min().year(year.value[activeIndex.value]).month(month.value[activeIndex.value]) : dayjs_min(changedInputValue, formatRef.value.format);
        var nextHours = hours;
        if (/am/i.test(meridiem) && nextHours === 12) nextHours -= 12;
        if (/pm/i.test(meridiem) && nextHours < 12) nextHours += 12;
        var nextDate = currentDate.hour(nextHours).minute(minutes).second(seconds).millisecond(milliseconds).toDate();
        nextInputValue[activeIndex.value] = nextDate;

        var nextTime = _toConsumableArray(time.value);

        nextTime[activeIndex.value] = val;
        time.value = nextTime;
        isSelected.value = true;
        cacheValue.value = formatDate(nextInputValue, {
          format: formatRef.value.format,
          targetFormat: formatRef.value.format
        });
        (_props$onTimeChange = props.onTimeChange) === null || _props$onTimeChange === void 0 ? void 0 : _props$onTimeChange.call(props, {
          time: val,
          date: value.value.map(function (v) {
            return dayjs_min(v).toDate();
          }),
          partial: activeIndex.value ? "end" : "start",
          trigger: "time-hour"
        });
        emit("time-change", {
          time: val,
          date: value.value.map(function (v) {
            return dayjs_min(v).toDate();
          }),
          partial: activeIndex.value ? "end" : "start",
          trigger: "time-hour"
        });
      }

      function onConfirmClick(_ref4) {
        var _props$onConfirm;

        var e = _ref4.e;

        var nextValue = _toConsumableArray(cacheValue.value);

        if (nextValue.length === 2 && isFirstValueSelected.value) {
          onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(nextValue, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }), {
            dayjsValue: nextValue.map(function (v) {
              return dayjs_min(v);
            }),
            trigger: "confirm"
          });
          year.value = nextValue.map(function (v) {
            return dayjs_min(v, formatRef.value.format).year();
          });
          month.value = nextValue.map(function (v) {
            return dayjs_min(v, formatRef.value.format).month();
          });
          isFirstValueSelected.value = false;
        } else {
          isFirstValueSelected.value = true;
        }

        (_props$onConfirm = props.onConfirm) === null || _props$onConfirm === void 0 ? void 0 : _props$onConfirm.call(props, {
          date: value.value.map(function (v) {
            return dayjs_min(v).toDate();
          }),
          e: e
        });
        emit("confirm", {
          date: value.value.map(function (v) {
            return dayjs_min(v).toDate();
          }),
          e: e
        });
      }

      function onPresetClick(preset) {
        var presetValue = preset;

        if (typeof preset === "function") {
          presetValue = preset();
        }

        if (!Array.isArray(presetValue)) {
          console.error("preset: ".concat(preset, " \u9884\u8BBE\u503C\u5FC5\u987B\u662F\u6570\u7EC4!"));
        } else {
          onChange === null || onChange === void 0 ? void 0 : onChange(formatDate(presetValue, {
            format: formatRef.value.format,
            targetFormat: formatRef.value.valueType
          }), {
            dayjsValue: presetValue.map(function (p) {
              return dayjs_min(p);
            }),
            trigger: "preset"
          });
        }
      }

      function onYearChange(nextVal, _ref5) {
        var _props$onYearChange2;

        var partial = _ref5.partial;
        var partialIndex = partial === "start" ? 0 : 1;
        if (props.enableTimePicker) partialIndex = activeIndex.value;

        var nextYear = _toConsumableArray(year.value);

        nextYear[partialIndex] = nextVal;
        if (partialIndex === 0) nextYear[1] = Math.max(nextYear[0], nextYear[1]);
        if (partialIndex === 1) nextYear[0] = Math.min(nextYear[0], nextYear[1]);
        year.value = nextYear;
        (_props$onYearChange2 = props.onYearChange) === null || _props$onYearChange2 === void 0 ? void 0 : _props$onYearChange2.call(props, {
          partial: partial,
          year: nextYear[partialIndex],
          date: value.value.map(function (v) {
            return dayjs_min(v).toDate();
          }),
          trigger: "year-select"
        });
        emit("year-change", {
          partial: partial,
          year: nextYear[partialIndex],
          date: value.value.map(function (v) {
            return dayjs_min(v).toDate();
          }),
          trigger: "year-select"
        });
      }

      function onMonthChange(nextVal, _ref6) {
        var _props$onMonthChange2;

        var partial = _ref6.partial;
        var partialIndex = partial === "start" ? 0 : 1;
        if (props.enableTimePicker) partialIndex = activeIndex.value;

        var nextMonth = _toConsumableArray(month.value);

        nextMonth[partialIndex] = nextVal;

        if (year[0] === year[1]) {
          if (partialIndex === 0) nextMonth[1] = Math.max(nextMonth[0], nextMonth[1]);
          if (partialIndex === 1) nextMonth[0] = Math.min(nextMonth[0], nextMonth[1]);
        }

        month.value = nextMonth;
        (_props$onMonthChange2 = props.onMonthChange) === null || _props$onMonthChange2 === void 0 ? void 0 : _props$onMonthChange2.call(props, {
          partial: partial,
          month: nextMonth[partialIndex],
          date: value.value.map(function (v) {
            return dayjs_min(v).toDate();
          }),
          trigger: "month-select"
        });
        emit("month-change", {
          partial: partial,
          month: nextMonth[partialIndex],
          date: value.value.map(function (v) {
            return dayjs_min(v).toDate();
          }),
          trigger: "month-select"
        });
      }

      var panelProps = VueCompositionAPI.computed(function () {
        return {
          hoverValue: isHoverCell.value ? hoverValue.value : [],
          value: isSelected.value ? cacheValue.value : value.value,
          activeIndex: activeIndex.value,
          year: year.value,
          month: month.value,
          mode: props.mode,
          format: formatRef.value.format,
          presets: props.presets,
          time: time.value,
          disableDate: props.disableDate,
          firstDayOfWeek: props.firstDayOfWeek,
          timePickerProps: props.timePickerProps,
          enableTimePicker: props.enableTimePicker,
          presetsPlacement: props.presetsPlacement,
          panelPreselection: props.panelPreselection,
          onCellClick: onCellClick,
          onCellMouseEnter: onCellMouseEnter,
          onCellMouseLeave: onCellMouseLeave,
          onJumperClick: onJumperClick,
          onConfirmClick: onConfirmClick,
          onPresetClick: onPresetClick,
          onYearChange: onYearChange,
          onMonthChange: onMonthChange,
          onTimePickerChange: onTimePickerChange
        };
      });
      return {
        panelProps: panelProps
      };
    },
    render: function render() {
      var h = arguments[0];
      var panelProps = this.panelProps;
      return h(TRangePanel, {
        "props": _objectSpread$W({}, panelProps)
      });
    }
  });

  var DatePicker = withInstall(_DatePicker, VueCompositionAPI__default["default"]);
  var DatePickerPanel = withInstall(_DatePickerPanel, VueCompositionAPI__default["default"]);
  var DateRangePicker = withInstall(_DateRangePicker, VueCompositionAPI__default["default"]);
  var DateRangePickerPanel = withInstall(_DateRangePickerPanel, VueCompositionAPI__default["default"]);

  var props$s = {
    colon: Boolean,
    data: {
      type: Object,
      "default": function _default() {
        return {};
      }
    },
    disabled: {
      type: Boolean,
      "default": void 0
    },
    errorMessage: {
      type: Object
    },
    formControlledComponents: {
      type: Array
    },
    labelAlign: {
      type: String,
      "default": "right",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "top"].includes(val);
      }
    },
    labelWidth: {
      type: [String, Number],
      "default": "100px"
    },
    layout: {
      type: String,
      "default": "vertical",
      validator: function validator(val) {
        if (!val) return true;
        return ["vertical", "inline"].includes(val);
      }
    },
    preventSubmitDefault: {
      type: Boolean,
      "default": true
    },
    requiredMark: {
      type: Boolean,
      "default": void 0
    },
    resetType: {
      type: String,
      "default": "empty",
      validator: function validator(val) {
        if (!val) return true;
        return ["empty", "initial"].includes(val);
      }
    },
    rules: {
      type: Object
    },
    scrollToFirstError: {
      type: String,
      "default": "",
      validator: function validator(val) {
        if (!val) return true;
        return ["", "smooth", "auto"].includes(val);
      }
    },
    showErrorMessage: {
      type: Boolean,
      "default": true
    },
    statusIcon: {
      type: [Boolean, Function],
      "default": void 0
    },
    submitWithWarningMessage: Boolean,
    onReset: Function,
    onSubmit: Function,
    onValidate: Function
  };

  var FORM_CONTROL_COMPONENTS = ["TInput", "TTextarea", "TCascader", "TSelect", "TOption", "TSwitch", "TCheckbox", "TCheckboxGroup", "TRadio", "TRadioGroup", "TTreeSelect", "TDatePicker", "TTimePicker", "TUpload", "TTransfer", "TSlider"];

  function ownKeys$W(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$V(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$W(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$W(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$l = getClassPrefixMixins("form");
  var _Form = mixins(classPrefixMixins$l).extend({
    name: "TForm",
    props: _objectSpread$V({}, props$s),
    provide: function provide() {
      return {
        form: this
      };
    },
    data: function data() {
      return {
        children: []
      };
    },
    computed: {
      formClass: function formClass() {
        return [this.componentName, _defineProperty$3({}, "".concat(this.componentName, "-inline"), this.layout === "inline")];
      },
      controlledComponents: function controlledComponents() {
        var _this$formControlledC;

        var fields = FORM_CONTROL_COMPONENTS;

        if ((_this$formControlledC = this.formControlledComponents) !== null && _this$formControlledC !== void 0 && _this$formControlledC.length) {
          fields = fields.concat(this.formControlledComponents);
        }

        return fields;
      }
    },
    created: function created() {
      var _this = this;

      this.$on("form-item-created", function (formItem) {
        _this.children.push(formItem);
      });
      this.$on("form-item-destroyed", function (formItem) {
        var index = _this.children.findIndex(function (item) {
          return item === formItem;
        });

        _this.children.splice(index, 1);
      });
    },
    methods: {
      getFirstError: function getFirstError(r) {
        if (r === true) return;

        var _Object$keys = Object.keys(r),
            _Object$keys2 = _slicedToArray(_Object$keys, 1),
            firstKey = _Object$keys2[0];

        if (this.scrollToFirstError) {
          this.scrollTo(".".concat(this.componentName, "-item__").concat(firstKey));
        }

        return r[firstKey][0].message;
      },
      scrollTo: function scrollTo(selector) {
        var dom = this.$el.querySelector(selector);
        var behavior = this.scrollToFirstError;
        dom && dom.scrollIntoView({
          behavior: behavior
        });
      },
      isFunction: function isFunction(val) {
        return typeof val === "function";
      },
      needValidate: function needValidate(name, fields) {
        if (!fields || !Array.isArray(fields)) return true;
        return fields.indexOf(name) !== -1;
      },
      formatValidateResult: function formatValidateResult(arr) {
        var r = arr.reduce(function (r2, err) {
          return Object.assign(r2 || {}, err);
        });
        Object.keys(r).forEach(function (key) {
          if (r[key] === true) {
            delete r[key];
          } else {
            r[key] = r[key].filter(function (fr) {
              return fr.result === false;
            });
          }
        });
        return isEmpty_1(r) ? true : r;
      },
      validate: function validate() {
        var _arguments = arguments,
            _this2 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var param, source, _ref2, fields, _ref2$trigger, trigger, list, arr, result;

          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  param = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : {
                    showErrorMessage: true
                  };
                  source = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : "submit-function";
                  _ref2 = param || {}, fields = _ref2.fields, _ref2$trigger = _ref2.trigger, trigger = _ref2$trigger === void 0 ? "all" : _ref2$trigger;
                  list = _this2.children.filter(function (child) {
                    return _this2.isFunction(child.validate) && _this2.needValidate(String(child.name), fields);
                  }).map(function (child) {
                    return child.validate(trigger, param.showErrorMessage, source);
                  });
                  _context.next = 6;
                  return Promise.all(list);

                case 6:
                  arr = _context.sent;
                  result = _this2.formatValidateResult(arr);
                  emitEvent(_this2, "validate", {
                    validateResult: result,
                    firstError: _this2.getFirstError(result)
                  });
                  return _context.abrupt("return", result);

                case 10:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      validateOnly: function validateOnly(param) {
        var _this3 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
          var _ref3, fields, _ref3$trigger, trigger, list, arr, result;

          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _ref3 = param || {}, fields = _ref3.fields, _ref3$trigger = _ref3.trigger, trigger = _ref3$trigger === void 0 ? "all" : _ref3$trigger;
                  list = _this3.children.filter(function (child) {
                    return _this3.isFunction(child.validate) && _this3.needValidate(String(child.name), fields);
                  }).map(function (child) {
                    return child.validateOnly(trigger);
                  });
                  _context2.next = 4;
                  return Promise.all(list);

                case 4:
                  arr = _context2.sent;
                  result = _this3.formatValidateResult(arr);
                  return _context2.abrupt("return", result);

                case 7:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }))();
      },
      setValidateMessage: function setValidateMessage(validateMessage) {
        var _this4 = this;

        var keys = Object.keys(validateMessage || {});
        if (!keys.length) return;
        var list = this.children.filter(function (child) {
          return _this4.isFunction(child.setValidateMessage) && keys.includes(String(child.name));
        }).map(function (child) {
          return child.setValidateMessage(validateMessage[child.name]);
        });
        Promise.all(list);
      },
      submitHandler: function submitHandler(e) {
        var _this5 = this;

        if (this.preventSubmitDefault) {
          e === null || e === void 0 ? void 0 : e.preventDefault();
          e === null || e === void 0 ? void 0 : e.stopPropagation();
        }

        this.validate({
          showErrorMessage: true
        }, "submit-event").then(function (r) {
          emitEvent(_this5, "submit", {
            validateResult: r,
            firstError: _this5.getFirstError(r),
            e: e
          });
        });
      },
      resetHandler: function resetHandler(e) {
        var _this6 = this;

        if (this.preventSubmitDefault) {
          e === null || e === void 0 ? void 0 : e.preventDefault();
          e === null || e === void 0 ? void 0 : e.stopPropagation();
        }

        this.children.filter(function (child) {
          return _this6.isFunction(child.resetField);
        }).forEach(function (child) {
          return child.resetField(_this6.resetType || "initial");
        });
        emitEvent(this, "reset", {
          e: e
        });
      },
      clearValidate: function clearValidate(fields) {
        var _this7 = this;

        this.children.forEach(function (child) {
          if (_this7.isFunction(child.resetHandler) && _this7.needValidate(String(child.name), fields)) {
            child.resetHandler();
          }
        });
      },
      reset: function reset() {
        var _this8 = this;

        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this.children.filter(function (child) {
          return _this8.isFunction(child.resetField);
        }).forEach(function (child) {
          var resetType = params.type || _this8.resetType || "initial";

          if (!params.fields || params.fields && params.fields.includes(child.name)) {
            child.resetField(resetType);
          }
        });
        emitEvent(this, "reset", {
          e: void 0
        });
      },
      submit: function submit(params) {
        var _this9 = this;

        this.validate({
          showErrorMessage: params === null || params === void 0 ? void 0 : params.showErrorMessage
        }, "submit-function").then(function (r) {
          emitEvent(_this9, "submit", {
            validateResult: r,
            firstError: _this9.getFirstError(r)
          });
        });
      }
    },
    render: function render() {
      var h = arguments[0];
      var on = {
        submit: this.submitHandler,
        reset: this.resetHandler
      };
      return h("form", {
        "ref": "form",
        "class": this.formClass,
        "on": _objectSpread$V({}, on)
      }, [this.$slots["default"]]);
    }
  });

  /**
   * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
   * it's created. Arrays are created for missing index properties while objects
   * are created for all other missing properties. Use `_.setWith` to customize
   * `path` creation.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to modify.
   * @param {Array|string} path The path of the property to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.set(object, 'a[0].b.c', 4);
   * console.log(object.a[0].b.c);
   * // => 4
   *
   * _.set(object, ['x', '0', 'y', 'z'], 5);
   * console.log(object.x[0].y.z);
   * // => 5
   */

  function set(object, path, value) {
    return object == null ? object : _baseSet(object, path, value);
  }

  var set_1 = set;

  /**
   * This method is like `_.assignIn` except that it accepts `customizer`
   * which is invoked to produce the assigned values. If `customizer` returns
   * `undefined`, assignment is handled by the method instead. The `customizer`
   * is invoked with five arguments: (objValue, srcValue, key, object, source).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @alias extendWith
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} [customizer] The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @see _.assignWith
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   return _.isUndefined(objValue) ? srcValue : objValue;
   * }
   *
   * var defaults = _.partialRight(_.assignInWith, customizer);
   *
   * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
   * // => { 'a': 1, 'b': 2 }
   */

  var assignInWith = _createAssigner(function (object, source, srcIndex, customizer) {
    _copyObject(source, keysIn_1(source), object, customizer);
  });
  var assignInWith_1 = assignInWith;

  /** `Object#toString` result references. */

  var domExcTag = '[object DOMException]',
      errorTag = '[object Error]';
  /**
   * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
   * `SyntaxError`, `TypeError`, or `URIError` object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
   * @example
   *
   * _.isError(new Error);
   * // => true
   *
   * _.isError(Error);
   * // => false
   */

  function isError(value) {
    if (!isObjectLike_1(value)) {
      return false;
    }

    var tag = _baseGetTag(value);
    return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject_1(value);
  }

  var isError_1 = isError;

  /**
   * Attempts to invoke `func`, returning either the result or the caught error
   * object. Any additional arguments are provided to `func` when it's invoked.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Util
   * @param {Function} func The function to attempt.
   * @param {...*} [args] The arguments to invoke `func` with.
   * @returns {*} Returns the `func` result or error object.
   * @example
   *
   * // Avoid throwing errors for invalid selectors.
   * var elements = _.attempt(function(selector) {
   *   return document.querySelectorAll(selector);
   * }, '>_>');
   *
   * if (_.isError(elements)) {
   *   elements = [];
   * }
   */

  var attempt = _baseRest(function (func, args) {
    try {
      return _apply(func, undefined, args);
    } catch (e) {
      return isError_1(e) ? e : new Error(e);
    }
  });
  var attempt_1 = attempt;

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */

  function baseValues(object, props) {
    return _arrayMap(props, function (key) {
      return object[key];
    });
  }

  var _baseValues = baseValues;

  /** Used for built-in method references. */

  var objectProto$1 = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty$1 = objectProto$1.hasOwnProperty;
  /**
   * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
   * of source objects to the destination object for all destination properties
   * that resolve to `undefined`.
   *
   * @private
   * @param {*} objValue The destination value.
   * @param {*} srcValue The source value.
   * @param {string} key The key of the property to assign.
   * @param {Object} object The parent object of `objValue`.
   * @returns {*} Returns the value to assign.
   */

  function customDefaultsAssignIn(objValue, srcValue, key, object) {
    if (objValue === undefined || eq_1(objValue, objectProto$1[key]) && !hasOwnProperty$1.call(object, key)) {
      return srcValue;
    }

    return objValue;
  }

  var _customDefaultsAssignIn = customDefaultsAssignIn;

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    "\u2028": 'u2028',
    "\u2029": 'u2029'
  };
  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */

  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  var _escapeStringChar = escapeStringChar;

  /** Used to match template delimiters. */
  var reInterpolate = /<%=([\s\S]+?)%>/g;
  var _reInterpolate = reInterpolate;

  /** Used to map characters to HTML entities. */

  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };
  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */

  var escapeHtmlChar = _basePropertyOf(htmlEscapes);
  var _escapeHtmlChar = escapeHtmlChar;

  /** Used to match HTML entities and HTML characters. */

  var reUnescapedHtml = /[&<>"']/g,
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
  /**
   * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
   * corresponding HTML entities.
   *
   * **Note:** No other characters are escaped. To escape additional
   * characters use a third-party library like [_he_](https://mths.be/he).
   *
   * Though the ">" character is escaped for symmetry, characters like
   * ">" and "/" don't need escaping in HTML and have no special meaning
   * unless they're part of a tag or unquoted attribute value. See
   * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
   * (under "semi-related fun fact") for more details.
   *
   * When working with HTML you should always
   * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
   * XSS vectors.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to escape.
   * @returns {string} Returns the escaped string.
   * @example
   *
   * _.escape('fred, barney, & pebbles');
   * // => 'fred, barney, &amp; pebbles'
   */

  function escape$1(string) {
    string = toString_1(string);
    return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, _escapeHtmlChar) : string;
  }

  var _escape = escape$1;

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g;
  var _reEscape = reEscape;

  /** Used to match template delimiters. */
  var reEvaluate = /<%([\s\S]+?)%>/g;
  var _reEvaluate = reEvaluate;

  /**
   * By default, the template delimiters used by lodash are like those in
   * embedded Ruby (ERB) as well as ES2015 template strings. Change the
   * following template settings to use alternative delimiters.
   *
   * @static
   * @memberOf _
   * @type {Object}
   */

  var templateSettings = {
    /**
     * Used to detect `data` property values to be HTML-escaped.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'escape': _reEscape,

    /**
     * Used to detect code to be evaluated.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'evaluate': _reEvaluate,

    /**
     * Used to detect `data` property values to inject.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'interpolate': _reInterpolate,

    /**
     * Used to reference the data object in the template text.
     *
     * @memberOf _.templateSettings
     * @type {string}
     */
    'variable': '',

    /**
     * Used to import variables into the compiled template.
     *
     * @memberOf _.templateSettings
     * @type {Object}
     */
    'imports': {
      /**
       * A reference to the `lodash` function.
       *
       * @memberOf _.templateSettings.imports
       * @type {Function}
       */
      '_': {
        'escape': _escape
      }
    }
  };
  var templateSettings_1 = templateSettings;

  /** Error message constants. */

  var INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';
  /** Used to match empty string literals in compiled template source. */

  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */

  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */

  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
  /** Used to ensure capturing order of template delimiters. */

  var reNoMatch = /($^)/;
  /** Used to match unescaped characters in compiled string literals. */

  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
  /** Used for built-in method references. */

  var objectProto = Object.prototype;
  /** Used to check objects for own properties. */

  var hasOwnProperty = objectProto.hasOwnProperty;
  /**
   * Creates a compiled template function that can interpolate data properties
   * in "interpolate" delimiters, HTML-escape interpolated data properties in
   * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
   * properties may be accessed as free variables in the template. If a setting
   * object is given, it takes precedence over `_.templateSettings` values.
   *
   * **Note:** In the development build `_.template` utilizes
   * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
   * for easier debugging.
   *
   * For more information on precompiling templates see
   * [lodash's custom builds documentation](https://lodash.com/custom-builds).
   *
   * For more information on Chrome extension sandboxes see
   * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category String
   * @param {string} [string=''] The template string.
   * @param {Object} [options={}] The options object.
   * @param {RegExp} [options.escape=_.templateSettings.escape]
   *  The HTML "escape" delimiter.
   * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
   *  The "evaluate" delimiter.
   * @param {Object} [options.imports=_.templateSettings.imports]
   *  An object to import into the template as free variables.
   * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
   *  The "interpolate" delimiter.
   * @param {string} [options.sourceURL='templateSources[n]']
   *  The sourceURL of the compiled template.
   * @param {string} [options.variable='obj']
   *  The data object variable name.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Function} Returns the compiled template function.
   * @example
   *
   * // Use the "interpolate" delimiter to create a compiled template.
   * var compiled = _.template('hello <%= user %>!');
   * compiled({ 'user': 'fred' });
   * // => 'hello fred!'
   *
   * // Use the HTML "escape" delimiter to escape data property values.
   * var compiled = _.template('<b><%- value %></b>');
   * compiled({ 'value': '<script>' });
   * // => '<b>&lt;script&gt;</b>'
   *
   * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
   * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
   * compiled({ 'users': ['fred', 'barney'] });
   * // => '<li>fred</li><li>barney</li>'
   *
   * // Use the internal `print` function in "evaluate" delimiters.
   * var compiled = _.template('<% print("hello " + user); %>!');
   * compiled({ 'user': 'barney' });
   * // => 'hello barney!'
   *
   * // Use the ES template literal delimiter as an "interpolate" delimiter.
   * // Disable support by replacing the "interpolate" delimiter.
   * var compiled = _.template('hello ${ user }!');
   * compiled({ 'user': 'pebbles' });
   * // => 'hello pebbles!'
   *
   * // Use backslashes to treat delimiters as plain text.
   * var compiled = _.template('<%= "\\<%- value %\\>" %>');
   * compiled({ 'value': 'ignored' });
   * // => '<%- value %>'
   *
   * // Use the `imports` option to import `jQuery` as `jq`.
   * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
   * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
   * compiled({ 'users': ['fred', 'barney'] });
   * // => '<li>fred</li><li>barney</li>'
   *
   * // Use the `sourceURL` option to specify a custom sourceURL for the template.
   * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
   * compiled(data);
   * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
   *
   * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
   * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
   * compiled.source;
   * // => function(data) {
   * //   var __t, __p = '';
   * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
   * //   return __p;
   * // }
   *
   * // Use custom template delimiters.
   * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
   * var compiled = _.template('hello {{ user }}!');
   * compiled({ 'user': 'mustache' });
   * // => 'hello mustache!'
   *
   * // Use the `source` property to inline compiled templates for meaningful
   * // line numbers in error messages and stack traces.
   * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
   *   var JST = {\
   *     "main": ' + _.template(mainText).source + '\
   *   };\
   * ');
   */

  function template(string, options, guard) {
    // Based on John Resig's `tmpl` implementation
    // (http://ejohn.org/blog/javascript-micro-templating/)
    // and Laura Doktorova's doT.js (https://github.com/olado/doT).
    var settings = templateSettings_1.imports._.templateSettings || templateSettings_1;

    if (guard && _isIterateeCall(string, options, guard)) {
      options = undefined;
    }

    string = toString_1(string);
    options = assignInWith_1({}, options, settings, _customDefaultsAssignIn);
    var imports = assignInWith_1({}, options.imports, settings.imports, _customDefaultsAssignIn),
        importsKeys = keys_1(imports),
        importsValues = _baseValues(imports, importsKeys);
    var isEscaping,
        isEvaluating,
        index = 0,
        interpolate = options.interpolate || reNoMatch,
        source = "__p += '"; // Compile the regexp to match each delimiter.

    var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === _reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g'); // Use a sourceURL for easier debugging.
    // The sourceURL gets injected into the source that's eval-ed, so be careful
    // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
    // and escape the comment, thus injecting code that gets evaled.

    var sourceURL = hasOwnProperty.call(options, 'sourceURL') ? '//# sourceURL=' + (options.sourceURL + '').replace(/\s/g, ' ') + '\n' : '';
    string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
      interpolateValue || (interpolateValue = esTemplateValue); // Escape characters that can't be included in string literals.

      source += string.slice(index, offset).replace(reUnescapedString, _escapeStringChar); // Replace delimiters with snippets.

      if (escapeValue) {
        isEscaping = true;
        source += "' +\n__e(" + escapeValue + ") +\n'";
      }

      if (evaluateValue) {
        isEvaluating = true;
        source += "';\n" + evaluateValue + ";\n__p += '";
      }

      if (interpolateValue) {
        source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
      }

      index = offset + match.length; // The JS engine embedded in Adobe products needs `match` returned in
      // order to produce the correct `offset` value.

      return match;
    });
    source += "';\n"; // If `variable` is not specified wrap a with-statement around the generated
    // code to add the data object to the top of the scope chain.

    var variable = hasOwnProperty.call(options, 'variable') && options.variable;

    if (!variable) {
      source = 'with (obj) {\n' + source + '\n}\n';
    } // Throw an error if a forbidden character was found in `variable`, to prevent
    // potential command injection attacks.
    else if (reForbiddenIdentifierChars.test(variable)) {
      throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
    } // Cleanup code by stripping empty strings.


    source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;'); // Frame code as the function body.

    source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + "function print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
    var result = attempt_1(function () {
      return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
    }); // Provide the compiled function's source by its `toString` method or
    // the `source` property as a convenience for inlining compiled templates.

    result.source = source;

    if (isError_1(result)) {
      throw result;
    }

    return result;
  }

  var template_1 = template;

  var merge_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = merge;

    function merge() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var defaults = arguments.length > 1 ? arguments[1] : undefined;

      for (var key in defaults) {
        if (typeof obj[key] === 'undefined') {
          obj[key] = defaults[key];
        }
      }

      return obj;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  });

  var require$$3 = merge_1;

  var isDate_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isDate;

    var _merge = _interopRequireDefault(require$$3);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it;

      if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
          if (it) o = it;
          var i = 0;

          var F = function F() {};

          return {
            s: F,
            n: function n() {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            },
            e: function e(_e2) {
              throw _e2;
            },
            f: F
          };
        }

        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }

      var normalCompletion = true,
          didErr = false,
          err;
      return {
        s: function s() {
          it = o[Symbol.iterator]();
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e3) {
          didErr = true;
          err = _e3;
        },
        f: function f() {
          try {
            if (!normalCompletion && it["return"] != null) it["return"]();
          } finally {
            if (didErr) throw err;
          }
        }
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    var default_date_options = {
      format: 'YYYY/MM/DD',
      delimiters: ['/', '-'],
      strictMode: false
    };

    function isValidFormat(format) {
      return /(^(y{4}|y{2})[.\/-](m{1,2})[.\/-](d{1,2})$)|(^(m{1,2})[.\/-](d{1,2})[.\/-]((y{4}|y{2})$))|(^(d{1,2})[.\/-](m{1,2})[.\/-]((y{4}|y{2})$))/gi.test(format);
    }

    function zip(date, format) {
      var zippedArr = [],
          len = Math.min(date.length, format.length);

      for (var i = 0; i < len; i++) {
        zippedArr.push([date[i], format[i]]);
      }

      return zippedArr;
    }

    function isDate(input, options) {
      if (typeof options === 'string') {
        // Allow backward compatbility for old format isDate(input [, format])
        options = (0, _merge["default"])({
          format: options
        }, default_date_options);
      } else {
        options = (0, _merge["default"])(options, default_date_options);
      }

      if (typeof input === 'string' && isValidFormat(options.format)) {
        var formatDelimiter = options.delimiters.find(function (delimiter) {
          return options.format.indexOf(delimiter) !== -1;
        });
        var dateDelimiter = options.strictMode ? formatDelimiter : options.delimiters.find(function (delimiter) {
          return input.indexOf(delimiter) !== -1;
        });
        var dateAndFormat = zip(input.split(dateDelimiter), options.format.toLowerCase().split(formatDelimiter));
        var dateObj = {};

        var _iterator = _createForOfIteratorHelper(dateAndFormat),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _slicedToArray(_step.value, 2),
                dateWord = _step$value[0],
                formatWord = _step$value[1];

            if (dateWord.length !== formatWord.length) {
              return false;
            }

            dateObj[formatWord.charAt(0)] = dateWord;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return new Date("".concat(dateObj.m, "/").concat(dateObj.d, "/").concat(dateObj.y)).getDate() === +dateObj.d;
      }

      if (!options.strictMode) {
        return Object.prototype.toString.call(input) === '[object Date]' && isFinite(input);
      }

      return false;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  });
  var isDate = /*@__PURE__*/getDefaultExportFromCjs(isDate_1);

  var assertString_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = assertString;

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }

    function assertString(input) {
      var isString = typeof input === 'string' || input instanceof String;

      if (!isString) {
        var invalidType = _typeof(input);

        if (input === null) invalidType = 'null';else if (invalidType === 'object') invalidType = input.constructor.name;
        throw new TypeError("Expected a string but received a ".concat(invalidType));
      }
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  });

  var require$$0 = assertString_1;

  var isByteLength_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isByteLength;

    var _assertString = _interopRequireDefault(require$$0);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function _typeof(obj) {
      "@babel/helpers - typeof";

      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
          return typeof obj;
        };
      } else {
        _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
      }

      return _typeof(obj);
    }
    /* eslint-disable prefer-rest-params */


    function isByteLength(str, options) {
      (0, _assertString["default"])(str);
      var min;
      var max;

      if (_typeof(options) === 'object') {
        min = options.min || 0;
        max = options.max;
      } else {
        // backwards compatibility: isByteLength(str, min [, max])
        min = arguments[1];
        max = arguments[2];
      }

      var len = encodeURI(str).split(/%..|./).length - 1;
      return len >= min && (typeof max === 'undefined' || len <= max);
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  });

  var isFQDN_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isFQDN;

    var _assertString = _interopRequireDefault(require$$0);

    var _merge = _interopRequireDefault(require$$3);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    var default_fqdn_options = {
      require_tld: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_numeric_tld: false,
      allow_wildcard: false
    };

    function isFQDN(str, options) {
      (0, _assertString["default"])(str);
      options = (0, _merge["default"])(options, default_fqdn_options);
      /* Remove the optional trailing dot before checking validity */

      if (options.allow_trailing_dot && str[str.length - 1] === '.') {
        str = str.substring(0, str.length - 1);
      }
      /* Remove the optional wildcard before checking validity */


      if (options.allow_wildcard === true && str.indexOf('*.') === 0) {
        str = str.substring(2);
      }

      var parts = str.split('.');
      var tld = parts[parts.length - 1];

      if (options.require_tld) {
        // disallow fqdns without tld
        if (parts.length < 2) {
          return false;
        }

        if (!/^([a-z\u00A1-\u00A8\u00AA-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
          return false;
        } // disallow spaces


        if (/\s/.test(tld)) {
          return false;
        }
      } // reject numeric TLDs


      if (!options.allow_numeric_tld && /^\d+$/.test(tld)) {
        return false;
      }

      return parts.every(function (part) {
        if (part.length > 63) {
          return false;
        }

        if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
          return false;
        } // disallow full-width chars


        if (/[\uff01-\uff5e]/.test(part)) {
          return false;
        } // disallow parts starting or ending with hyphen


        if (/^-|-$/.test(part)) {
          return false;
        }

        if (!options.allow_underscores && /_/.test(part)) {
          return false;
        }

        return true;
      });
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  });

  var isIP_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isIP;

    var _assertString = _interopRequireDefault(require$$0);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    /**
    11.3.  Examples
    
       The following addresses
    
                 fe80::1234 (on the 1st link of the node)
                 ff02::5678 (on the 5th link of the node)
                 ff08::9abc (on the 10th organization of the node)
    
       would be represented as follows:
    
                 fe80::1234%1
                 ff02::5678%5
                 ff08::9abc%10
    
       (Here we assume a natural translation from a zone index to the
       <zone_id> part, where the Nth zone of any scope is translated into
       "N".)
    
       If we use interface names as <zone_id>, those addresses could also be
       represented as follows:
    
                fe80::1234%ne0
                ff02::5678%pvc1.3
                ff08::9abc%interface10
    
       where the interface "ne0" belongs to the 1st link, "pvc1.3" belongs
       to the 5th link, and "interface10" belongs to the 10th organization.
     * * */


    var IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';
    var IPv4AddressFormat = "(".concat(IPv4SegmentFormat, "[.]){3}").concat(IPv4SegmentFormat);
    var IPv4AddressRegExp = new RegExp("^".concat(IPv4AddressFormat, "$"));
    var IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';
    var IPv6AddressRegExp = new RegExp('^(' + "(?:".concat(IPv6SegmentFormat, ":){7}(?:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){6}(?:").concat(IPv4AddressFormat, "|:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){5}(?::").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,2}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){4}(?:(:").concat(IPv6SegmentFormat, "){0,1}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,3}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){3}(?:(:").concat(IPv6SegmentFormat, "){0,2}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,4}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){2}(?:(:").concat(IPv6SegmentFormat, "){0,3}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,5}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){1}(?:(:").concat(IPv6SegmentFormat, "){0,4}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,6}|:)|") + "(?::((?::".concat(IPv6SegmentFormat, "){0,5}:").concat(IPv4AddressFormat, "|(?::").concat(IPv6SegmentFormat, "){1,7}|:))") + ')(%[0-9a-zA-Z-.:]{1,})?$');

    function isIP(str) {
      var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      (0, _assertString["default"])(str);
      version = String(version);

      if (!version) {
        return isIP(str, 4) || isIP(str, 6);
      }

      if (version === '4') {
        if (!IPv4AddressRegExp.test(str)) {
          return false;
        }

        var parts = str.split('.').sort(function (a, b) {
          return a - b;
        });
        return parts[3] <= 255;
      }

      if (version === '6') {
        return !!IPv6AddressRegExp.test(str);
      }

      return false;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  });

  var require$$2$1 = isByteLength_1;

  var require$$1 = isFQDN_1;

  var require$$2 = isIP_1;

  var isEmail_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isEmail;

    var _assertString = _interopRequireDefault(require$$0);

    var _merge = _interopRequireDefault(require$$3);

    var _isByteLength = _interopRequireDefault(require$$2$1);

    var _isFQDN = _interopRequireDefault(require$$1);

    var _isIP = _interopRequireDefault(require$$2);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    var default_email_options = {
      allow_display_name: false,
      require_display_name: false,
      allow_utf8_local_part: true,
      require_tld: true,
      blacklisted_chars: '',
      ignore_max_length: false,
      host_blacklist: []
    };
    /* eslint-disable max-len */

    /* eslint-disable no-control-regex */

    var splitNameAddress = /^([^\x00-\x1F\x7F-\x9F\cX]+)</i;
    var emailUserPart = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~]+$/i;
    var gmailUserPart = /^[a-z\d]+$/;
    var quotedEmailUser = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f]))*$/i;
    var emailUserUtf8Part = /^[a-z\d!#\$%&'\*\+\-\/=\?\^_`{\|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+$/i;
    var quotedEmailUserUtf8 = /^([\s\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*$/i;
    var defaultMaxEmailLength = 254;
    /* eslint-enable max-len */

    /* eslint-enable no-control-regex */

    /**
     * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2
     * @param {String} display_name
     */

    function validateDisplayName(display_name) {
      var display_name_without_quotes = display_name.replace(/^"(.+)"$/, '$1'); // display name with only spaces is not valid

      if (!display_name_without_quotes.trim()) {
        return false;
      } // check whether display name contains illegal character


      var contains_illegal = /[\.";<>]/.test(display_name_without_quotes);

      if (contains_illegal) {
        // if contains illegal characters,
        // must to be enclosed in double-quotes, otherwise it's not a valid display name
        if (display_name_without_quotes === display_name) {
          return false;
        } // the quotes in display name must start with character symbol \


        var all_start_with_back_slash = display_name_without_quotes.split('"').length === display_name_without_quotes.split('\\"').length;

        if (!all_start_with_back_slash) {
          return false;
        }
      }

      return true;
    }

    function isEmail(str, options) {
      (0, _assertString["default"])(str);
      options = (0, _merge["default"])(options, default_email_options);

      if (options.require_display_name || options.allow_display_name) {
        var display_email = str.match(splitNameAddress);

        if (display_email) {
          var display_name = display_email[1]; // Remove display name and angle brackets to get email address
          // Can be done in the regex but will introduce a ReDOS (See  #1597 for more info)

          str = str.replace(display_name, '').replace(/(^<|>$)/g, ''); // sometimes need to trim the last space to get the display name
          // because there may be a space between display name and email address
          // eg. myname <address@gmail.com>
          // the display name is `myname` instead of `myname `, so need to trim the last space

          if (display_name.endsWith(' ')) {
            display_name = display_name.substr(0, display_name.length - 1);
          }

          if (!validateDisplayName(display_name)) {
            return false;
          }
        } else if (options.require_display_name) {
          return false;
        }
      }

      if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {
        return false;
      }

      var parts = str.split('@');
      var domain = parts.pop();
      var lower_domain = domain.toLowerCase();

      if (options.host_blacklist.includes(lower_domain)) {
        return false;
      }

      var user = parts.join('@');

      if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {
        /*
          Previously we removed dots for gmail addresses before validating.
          This was removed because it allows `multiple..dots@gmail.com`
          to be reported as valid, but it is not.
          Gmail only normalizes single dots, removing them from here is pointless,
          should be done in normalizeEmail
        */
        user = user.toLowerCase(); // Removing sub-address from username before gmail validation

        var username = user.split('+')[0]; // Dots are not included in gmail length restriction

        if (!(0, _isByteLength["default"])(username.replace(/\./g, ''), {
          min: 6,
          max: 30
        })) {
          return false;
        }

        var _user_parts = username.split('.');

        for (var i = 0; i < _user_parts.length; i++) {
          if (!gmailUserPart.test(_user_parts[i])) {
            return false;
          }
        }
      }

      if (options.ignore_max_length === false && (!(0, _isByteLength["default"])(user, {
        max: 64
      }) || !(0, _isByteLength["default"])(domain, {
        max: 254
      }))) {
        return false;
      }

      if (!(0, _isFQDN["default"])(domain, {
        require_tld: options.require_tld
      })) {
        if (!options.allow_ip_domain) {
          return false;
        }

        if (!(0, _isIP["default"])(domain)) {
          if (!domain.startsWith('[') || !domain.endsWith(']')) {
            return false;
          }

          var noBracketdomain = domain.substr(1, domain.length - 2);

          if (noBracketdomain.length === 0 || !(0, _isIP["default"])(noBracketdomain)) {
            return false;
          }
        }
      }

      if (user[0] === '"') {
        user = user.slice(1, user.length - 1);
        return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);
      }

      var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;
      var user_parts = user.split('.');

      for (var _i = 0; _i < user_parts.length; _i++) {
        if (!pattern.test(user_parts[_i])) {
          return false;
        }
      }

      if (options.blacklisted_chars) {
        if (user.search(new RegExp("[".concat(options.blacklisted_chars, "]+"), 'g')) !== -1) return false;
      }

      return true;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  });
  var isEmail = /*@__PURE__*/getDefaultExportFromCjs(isEmail_1);

  var isURL_1 = createCommonjsModule(function (module, exports) {

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = isURL;

    var _assertString = _interopRequireDefault(require$$0);

    var _isFQDN = _interopRequireDefault(require$$1);

    var _isIP = _interopRequireDefault(require$$2);

    var _merge = _interopRequireDefault(require$$3);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }

    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }

    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;

      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }

    function _iterableToArrayLimit(arr, i) {
      if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = undefined;

      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);

          if (i && _arr.length === i) break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"] != null) _i["return"]();
        } finally {
          if (_d) throw _e;
        }
      }

      return _arr;
    }

    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    /*
    options for isURL method
    
    require_protocol - if set as true isURL will return false if protocol is not present in the URL
    require_valid_protocol - isURL will check if the URL's protocol is present in the protocols option
    protocols - valid protocols can be modified with this option
    require_host - if set as false isURL will not check if host is present in the URL
    require_port - if set as true isURL will check if port is present in the URL
    allow_protocol_relative_urls - if set as true protocol relative URLs will be allowed
    validate_length - if set as false isURL will skip string length validation (IE maximum is 2083)
    
    */


    var default_url_options = {
      protocols: ['http', 'https', 'ftp'],
      require_tld: true,
      require_protocol: false,
      require_host: true,
      require_port: false,
      require_valid_protocol: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_protocol_relative_urls: false,
      allow_fragments: true,
      allow_query_components: true,
      validate_length: true
    };
    var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;

    function isRegExp(obj) {
      return Object.prototype.toString.call(obj) === '[object RegExp]';
    }

    function checkHost(host, matches) {
      for (var i = 0; i < matches.length; i++) {
        var match = matches[i];

        if (host === match || isRegExp(match) && match.test(host)) {
          return true;
        }
      }

      return false;
    }

    function isURL(url, options) {
      (0, _assertString["default"])(url);

      if (!url || /[\s<>]/.test(url)) {
        return false;
      }

      if (url.indexOf('mailto:') === 0) {
        return false;
      }

      options = (0, _merge["default"])(options, default_url_options);

      if (options.validate_length && url.length >= 2083) {
        return false;
      }

      if (!options.allow_fragments && url.includes('#')) {
        return false;
      }

      if (!options.allow_query_components && (url.includes('?') || url.includes('&'))) {
        return false;
      }

      var protocol, auth, host, hostname, port, port_str, split, ipv6;
      split = url.split('#');
      url = split.shift();
      split = url.split('?');
      url = split.shift();
      split = url.split('://');

      if (split.length > 1) {
        protocol = split.shift().toLowerCase();

        if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
          return false;
        }
      } else if (options.require_protocol) {
        return false;
      } else if (url.substr(0, 2) === '//') {
        if (!options.allow_protocol_relative_urls) {
          return false;
        }

        split[0] = url.substr(2);
      }

      url = split.join('://');

      if (url === '') {
        return false;
      }

      split = url.split('/');
      url = split.shift();

      if (url === '' && !options.require_host) {
        return true;
      }

      split = url.split('@');

      if (split.length > 1) {
        if (options.disallow_auth) {
          return false;
        }

        if (split[0] === '') {
          return false;
        }

        auth = split.shift();

        if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {
          return false;
        }

        var _auth$split = auth.split(':'),
            _auth$split2 = _slicedToArray(_auth$split, 2),
            user = _auth$split2[0],
            password = _auth$split2[1];

        if (user === '' && password === '') {
          return false;
        }
      }

      hostname = split.join('@');
      port_str = null;
      ipv6 = null;
      var ipv6_match = hostname.match(wrapped_ipv6);

      if (ipv6_match) {
        host = '';
        ipv6 = ipv6_match[1];
        port_str = ipv6_match[2] || null;
      } else {
        split = hostname.split(':');
        host = split.shift();

        if (split.length) {
          port_str = split.join(':');
        }
      }

      if (port_str !== null && port_str.length > 0) {
        port = parseInt(port_str, 10);

        if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
          return false;
        }
      } else if (options.require_port) {
        return false;
      }

      if (options.host_whitelist) {
        return checkHost(host, options.host_whitelist);
      }

      if (!(0, _isIP["default"])(host) && !(0, _isFQDN["default"])(host, options) && (!ipv6 || !(0, _isIP["default"])(ipv6, 6))) {
        return false;
      }

      host = host || ipv6;

      if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
        return false;
      }

      return true;
    }

    module.exports = exports["default"];
    module.exports["default"] = exports["default"];
  });
  var isURL = /*@__PURE__*/getDefaultExportFromCjs(isURL_1);

  function ownKeys$V(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$U(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$V(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$V(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function isValueEmpty(val) {
    var type = Object.prototype.toString.call(val);
    var typeMap = {
      Date: "[object Date]"
    };

    if (type === typeMap.Date) {
      return false;
    }

    return _typeof$1(val) === "object" ? isEmpty_1(val) : ["", void 0, null].includes(val);
  }

  var compareValue = function compareValue(val, num, isMax) {
    var compare = function compare(a, b) {
      return isMax ? a <= b : a >= b;
    };

    if (isNumber_1(val)) return compare(val, num);
    if (Array.isArray(val)) return compare(val.length, num);
    return compare(getCharacterLength(val), num);
  };

  var VALIDATE_MAP = {
    date: isDate,
    url: isURL,
    email: isEmail,
    required: function required(val) {
      return !isValueEmpty(val);
    },
    whitespace: function whitespace(val) {
      return !(/^\s+$/.test(val) || val === "");
    },
    "boolean": function boolean(val) {
      return typeof val === "boolean";
    },
    max: function max(val, num) {
      return compareValue(val, num, true);
    },
    min: function min(val, num) {
      return compareValue(val, num, false);
    },
    len: function len(val, num) {
      return getCharacterLength(val) === num;
    },
    number: function number(val) {
      return isNumber_1(val);
    },
    "enum": function _enum(val, strs) {
      return strs.includes(val);
    },
    idcard: function idcard(val) {
      return /^(\d{18,18}|\d{15,15}|\d{17,17}x)$/i.test(val);
    },
    telnumber: function telnumber(val) {
      return /^1[3-9]\d{9}$/.test(val);
    },
    pattern: function pattern(val, regexp) {
      return regexp.test(val);
    },
    validator: function validator(val, validate2) {
      return validate2(val);
    }
  };
  function validateOneRule(_x, _x2) {
    return _validateOneRule.apply(this, arguments);
  }

  function _validateOneRule() {
    _validateOneRule = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(value, rule) {
      var validateResult, keys, vOptions, vValidateFun, i, key, validateRule;
      return regenerator.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              validateResult = {
                result: true
              };
              keys = Object.keys(rule);
              i = 0;

            case 3:
              if (!(i < keys.length)) {
                _context.next = 15;
                break;
              }

              key = keys[i];

              if (!(!rule.required && isValueEmpty(value) && !rule.validator)) {
                _context.next = 7;
                break;
              }

              return _context.abrupt("return", validateResult);

            case 7:
              validateRule = VALIDATE_MAP[key];

              if (!(validateRule && rule[key])) {
                _context.next = 12;
                break;
              }

              vOptions = rule[key] === true ? void 0 : rule[key];
              vValidateFun = validateRule;
              return _context.abrupt("break", 15);

            case 12:
              i++;
              _context.next = 3;
              break;

            case 15:
              if (!vValidateFun) {
                _context.next = 23;
                break;
              }

              _context.next = 18;
              return vValidateFun(value, vOptions);

            case 18:
              validateResult = _context.sent;

              if (!(typeof validateResult === "boolean")) {
                _context.next = 21;
                break;
              }

              return _context.abrupt("return", _objectSpread$U(_objectSpread$U({}, rule), {}, {
                result: validateResult
              }));

            case 21:
              if (!(_typeof$1(validateResult) === "object")) {
                _context.next = 23;
                break;
              }

              return _context.abrupt("return", validateResult);

            case 23:
              return _context.abrupt("return", validateResult);

            case 24:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _validateOneRule.apply(this, arguments);
  }

  function validate(_x3, _x4) {
    return _validate.apply(this, arguments);
  }

  function _validate() {
    _validate = _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(value, rules) {
      var all, r;
      return regenerator.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              all = rules.map(function (rule) {
                return validateOneRule(value, rule);
              });
              _context2.next = 3;
              return Promise.all(all);

            case 3:
              r = _context2.sent;
              return _context2.abrupt("return", r);

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _validate.apply(this, arguments);
  }

  var props$r = {
    "for": {
      type: String,
      "default": ""
    },
    help: {
      type: [String, Function]
    },
    label: {
      type: [String, Function],
      "default": ""
    },
    labelAlign: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "top"].includes(val);
      }
    },
    labelWidth: {
      type: [String, Number]
    },
    name: {
      type: [String, Number]
    },
    requiredMark: {
      type: Boolean,
      "default": void 0
    },
    rules: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    showErrorMessage: {
      type: Boolean,
      "default": void 0
    },
    statusIcon: {
      type: [Boolean, Function],
      "default": void 0
    },
    successBorder: Boolean
  };

  function ownKeys$U(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$T(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$U(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$U(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _FormItem = mixins(getConfigReceiverMixins("form"), getGlobalIconMixins()).extend({
    name: "TFormItem",
    props: _objectSpread$T({}, props$r),
    inject: {
      form: {
        "default": void 0
      }
    },
    provide: function provide() {
      return {
        tFormItem: this
      };
    },
    data: function data() {
      return {
        errorList: [],
        successList: [],
        verifyStatus: "not"
        /* TO_BE_VALIDATED */
        ,
        resetValidating: false,
        needResetField: false,
        initialValue: void 0,
        freeShowErrorMessage: void 0
      };
    },
    computed: {
      needErrorMessage: function needErrorMessage() {
        if (this.freeShowErrorMessage !== void 0) return this.freeShowErrorMessage;
        if (typeof this.showErrorMessage === "boolean") return this.showErrorMessage;
        var parent = this.form;
        return parent === null || parent === void 0 ? void 0 : parent.showErrorMessage;
      },
      classes: function classes() {
        var _ref;

        return ["".concat(this.componentName, "__item"), "".concat(this.componentName, "-item__").concat(this.name || ""), (_ref = {}, _defineProperty$3(_ref, "".concat(this.componentName, "__item-with-help"), this.help), _defineProperty$3(_ref, "".concat(this.componentName, "__item-with-extra"), this.extraNode), _ref)];
      },
      extraNode: function extraNode() {
        var h = this.$createElement;
        var list = this.errorList;

        if (this.needErrorMessage && list && list[0] && list[0].message) {
          return h("div", {
            "class": "".concat(this.classPrefix, "-input__extra")
          }, [list[0].message]);
        }

        if (this.successList.length) {
          return h("div", {
            "class": "".concat(this.classPrefix, "-input__extra")
          }, [this.successList[0].message]);
        }

        return null;
      },
      labelClasses: function labelClasses() {
        var _ref2;

        var parent = this.form;
        var labelAlign = isNil_1(this.labelAlign) ? parent === null || parent === void 0 ? void 0 : parent.labelAlign : this.labelAlign;
        var labelWidth = isNil_1(this.labelWidth) ? parent === null || parent === void 0 ? void 0 : parent.labelWidth : this.labelWidth;
        return ["".concat(this.componentName, "__label"), (_ref2 = {}, _defineProperty$3(_ref2, "".concat(this.componentName, "__label--required"), this.needRequiredMark), _defineProperty$3(_ref2, "".concat(this.componentName, "__label--colon"), this.hasColon), _defineProperty$3(_ref2, "".concat(this.componentName, "__label--top"), labelAlign === "top" || !labelWidth), _defineProperty$3(_ref2, "".concat(this.componentName, "__label--left"), labelAlign === "left" && labelWidth), _defineProperty$3(_ref2, "".concat(this.componentName, "__label--right"), labelAlign === "right" && labelWidth), _ref2)];
      },
      errorClasses: function errorClasses() {
        if (!this.needErrorMessage) return "";

        if (this.verifyStatus === "success"
        /* SUCCESS */
        ) {
          return this.successBorder ? [this.commonStatusClassName.success, "".concat(this.componentName, "--success-border")].join(" ") : this.commonStatusClassName.success;
        }

        var list = this.errorList;
        if (!list.length) return;
        var type = list[0].type || "error";
        return type === "error" ? this.commonStatusClassName.error : this.commonStatusClassName.warning;
      },
      disabled: function disabled() {
        return this.form.disabled;
      },
      contentClasses: function contentClasses() {
        var getErrorClass = this.errorClasses;
        return ["".concat(this.componentName, "__controls"), getErrorClass];
      },
      contentStyle: function contentStyle() {
        var parent = this.form;
        var labelAlign = isNil_1(this.labelAlign) ? parent === null || parent === void 0 ? void 0 : parent.labelAlign : this.labelAlign;
        var labelWidth = isNil_1(this.labelWidth) ? parent === null || parent === void 0 ? void 0 : parent.labelWidth : this.labelWidth;
        var contentStyle = {};

        if (this.getLabelContent() && labelWidth && labelAlign !== "top") {
          if (typeof labelWidth === "number") {
            contentStyle = {
              marginLeft: "".concat(labelWidth, "px")
            };
          } else {
            contentStyle = {
              marginLeft: labelWidth
            };
          }
        }

        return contentStyle;
      },
      value: function value() {
        var parent = this.form;
        return parent && parent.data && get_1(parent.data, this.name);
      },
      hasColon: function hasColon() {
        var parent = this.form;
        return !!(parent && parent.colon && this.getLabelContent());
      },
      needRequiredMark: function needRequiredMark() {
        var requiredMark = this.$props.requiredMark;
        if (typeof requiredMark === "boolean") return requiredMark;
        var parent = this.form;
        var parentRequiredMark = (parent === null || parent === void 0 ? void 0 : parent.requiredMark) === void 0 ? this.global.requiredMark : parent.requiredMark;
        var isRequired = this.innerRules.filter(function (rule) {
          return rule.required;
        }).length > 0;
        return Boolean(parentRequiredMark && isRequired);
      },
      innerRules: function innerRules() {
        var _this$rules;

        var parent = this.form;
        if ((_this$rules = this.rules) !== null && _this$rules !== void 0 && _this$rules.length) return this.rules || [];
        if (!this.name) return [];
        var index = String(this.name || "").lastIndexOf(".") || -1;
        var pRuleName = String(this.name || "").slice(index + 1);
        return get_1(parent === null || parent === void 0 ? void 0 : parent.rules, this.name) || get_1(parent === null || parent === void 0 ? void 0 : parent.rules, pRuleName) || [];
      },
      errorMessages: function errorMessages() {
        var _this$form$errorMessa;

        return (_this$form$errorMessa = this.form.errorMessage) !== null && _this$form$errorMessa !== void 0 ? _this$form$errorMessa : this.global.errorMessage;
      }
    },
    watch: {
      value: function value() {
        this.validate("change");
      }
    },
    created: function created() {
      this.addWatch();
    },
    mounted: function mounted() {
      this.initialValue = cloneDeep_1(this.value);
      this.form.$emit("form-item-created", this);
    },
    beforeDestroy: function beforeDestroy() {
      this.form.$emit("form-item-destroyed", this);
    },
    methods: {
      addWatch: function addWatch() {
        var _this = this;

        if (this.disabled === void 0) return;
        this.$watch("disabled", function (val) {
          _this.$nextTick(function () {
            _this.setChildrenDisabled(val, _this.$children);
          });
        }, {
          immediate: true
        });
      },
      setChildrenDisabled: function setChildrenDisabled(disabled, children) {
        var _this2 = this;

        children.forEach(function (item) {
          var _this2$form$controlle, _item$$children;

          if ((_this2$form$controlle = _this2.form.controlledComponents) !== null && _this2$form$controlle !== void 0 && _this2$form$controlle.includes(item.$options.name)) {
            item.$data.formDisabled = disabled;
          }

          if ((_item$$children = item.$children) !== null && _item$$children !== void 0 && _item$$children.length) {
            _this2.setChildrenDisabled(disabled, item.$children);
          }
        });
      },
      setValidateMessage: function setValidateMessage(validateMessage) {
        if (!validateMessage || !Array.isArray(validateMessage)) return;

        if (validateMessage.length === 0) {
          this.errorList = [];
          this.verifyStatus = "success"
          /* SUCCESS */
          ;
          return;
        }

        this.errorList = validateMessage;
        this.verifyStatus = "fail"
        /* FAIL */
        ;
      },
      validate: function validate(trigger) {
        var _arguments = arguments,
            _this3 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var showErrorMessage, source, _yield$_this3$analysi, errorList, resultList, successList, rules, allowSetValue;

          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  showErrorMessage = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : true;
                  source = _arguments.length > 2 && _arguments[2] !== undefined ? _arguments[2] : "submit-event";
                  _this3.freeShowErrorMessage = source === "submit-function" ? showErrorMessage : void 0;
                  _this3.resetValidating = true;
                  _context.next = 6;
                  return _this3.analysisValidateResult(trigger);

                case 6:
                  _yield$_this3$analysi = _context.sent;
                  errorList = _yield$_this3$analysi.errorList;
                  resultList = _yield$_this3$analysi.resultList;
                  successList = _yield$_this3$analysi.successList;
                  rules = _yield$_this3$analysi.rules;
                  allowSetValue = _yield$_this3$analysi.allowSetValue;

                  if (allowSetValue) {
                    _this3.errorList = errorList;
                    _this3.successList = successList;
                  }

                  if (rules.length) {
                    _this3.verifyStatus = errorList.length ? "fail"
                    /* FAIL */
                    : "success"
                    /* SUCCESS */
                    ;
                  } else {
                    _this3.verifyStatus = "not"
                    /* TO_BE_VALIDATED */
                    ;
                  }

                  if (_this3.needResetField) {
                    _this3.resetHandler();
                  }

                  _this3.resetValidating = false;
                  return _context.abrupt("return", _defineProperty$3({}, _this3.name, errorList.length === 0 ? true : resultList));

                case 17:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      validateOnly: function validateOnly(trigger) {
        var _this4 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
          var _yield$_this4$analysi, errorList, resultList;

          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _this4.analysisValidateResult(trigger);

                case 2:
                  _yield$_this4$analysi = _context2.sent;
                  errorList = _yield$_this4$analysi.errorList;
                  resultList = _yield$_this4$analysi.resultList;
                  return _context2.abrupt("return", _defineProperty$3({}, _this4.name, errorList.length === 0 ? true : resultList));

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }))();
      },
      analysisValidateResult: function analysisValidateResult(trigger) {
        var _this5 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
          var result;
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  result = {
                    successList: [],
                    errorList: [],
                    rules: [],
                    resultList: [],
                    allowSetValue: false
                  };
                  result.rules = trigger === "all" ? _this5.innerRules : _this5.innerRules.filter(function (item) {
                    return (item.trigger || "change") === trigger;
                  });

                  if (!(_this5.innerRules.length && !result.rules.length)) {
                    _context3.next = 4;
                    break;
                  }

                  return _context3.abrupt("return", result);

                case 4:
                  result.allowSetValue = true;
                  _context3.next = 7;
                  return validate(_this5.value, result.rules);

                case 7:
                  result.resultList = _context3.sent;
                  result.errorList = result.resultList.filter(function (item) {
                    return item.result !== true;
                  }).map(function (item) {
                    Object.keys(item).forEach(function (key) {
                      if (typeof item.message === "undefined" && _this5.errorMessages[key]) {
                        var compiled = template_1(_this5.errorMessages[key]);
                        var name = typeof _this5.label === "string" ? _this5.label : _this5.name;
                        item.message = compiled({
                          name: name,
                          validate: item[key]
                        });
                      }
                    });
                    return item;
                  });
                  result.successList = result.resultList.filter(function (item) {
                    return item.result === true && item.message && item.type === "success";
                  });
                  return _context3.abrupt("return", result);

                case 11:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }))();
      },
      getLabelContent: function getLabelContent() {
        if (typeof this.label === "function") {
          return this.label(this.$createElement);
        }

        if (typeof this.$scopedSlots.label === "function") {
          return this.$scopedSlots.label(null);
        }

        return this.label;
      },
      getLabel: function getLabel() {
        var h = this.$createElement;
        var parent = this.form;
        var labelWidth = isNil_1(this.labelWidth) ? parent === null || parent === void 0 ? void 0 : parent.labelWidth : this.labelWidth;
        var labelAlign = isNil_1(this.labelAlign) ? parent === null || parent === void 0 ? void 0 : parent.labelAlign : this.labelAlign;
        if (Number(labelWidth) === 0) return;
        var labelStyle = {};

        if (labelWidth && labelAlign !== "top") {
          if (typeof labelWidth === "number") {
            labelStyle = {
              width: "".concat(labelWidth, "px")
            };
          } else {
            labelStyle = {
              width: labelWidth
            };
          }
        }

        return h("div", {
          "class": this.labelClasses,
          "style": labelStyle
        }, [h("label", {
          "attrs": {
            "for": this["for"]
          }
        }, [this.getLabelContent()])]);
      },
      getDefaultIcon: function getDefaultIcon() {
        var _this6 = this;

        var h = this.$createElement;

        var resultIcon = function resultIcon(Icon) {
          return h("span", {
            "class": "".concat(_this6.componentName, "__status")
          }, [h(Icon)]);
        };

        var list = this.errorList;

        var _this$useGlobalIcon = this.useGlobalIcon({
          CheckCircleFilledIcon: CheckCircleFilled,
          CloseCircleFilledIcon: CloseCircleFilled,
          ErrorCircleFilledIcon: ErrorCircleFilled
        }),
            CheckCircleFilledIcon = _this$useGlobalIcon.CheckCircleFilledIcon,
            CloseCircleFilledIcon = _this$useGlobalIcon.CloseCircleFilledIcon,
            ErrorCircleFilledIcon = _this$useGlobalIcon.ErrorCircleFilledIcon;

        if (this.verifyStatus === "success"
        /* SUCCESS */
        ) {
          return resultIcon(CheckCircleFilledIcon);
        }

        if (list && list[0]) {
          var type = list[0].type || "error";
          var icon = {
            error: CloseCircleFilledIcon,
            warning: ErrorCircleFilledIcon
          }[type] || CheckCircleFilledIcon;
          return resultIcon(icon);
        }

        return null;
      },
      getIcon: function getIcon(statusIcon, slotStatusIcon, props2) {
        var _this7 = this;

        var h = this.$createElement;

        var resultIcon = function resultIcon(otherContent) {
          return h("span", {
            "class": "".concat(_this7.componentName, "__status")
          }, [otherContent]);
        };

        if (statusIcon === true) {
          return this.getDefaultIcon();
        }

        if (typeof statusIcon === "function") {
          return resultIcon(statusIcon(this.$createElement, props2));
        }

        if (typeof slotStatusIcon === "function") {
          return resultIcon(slotStatusIcon(null));
        }

        return null;
      },
      getSuffixIcon: function getSuffixIcon() {
        var parent = this.form;
        var statusIcon = this.statusIcon;
        var slotStatusIcon = this.$scopedSlots.statusIcon;
        var parentStatusIcon = parent.statusIcon;
        var parentSlotStatusIcon = parent.$scopedSlots.statusIcon;
        if (statusIcon === false) return;
        var resultIcon = this.getIcon(statusIcon, slotStatusIcon);
        if (resultIcon) return resultIcon;
        if (resultIcon === false) return;
        resultIcon = this.getIcon(parentStatusIcon, parentSlotStatusIcon, this.$props);
        if (resultIcon) return resultIcon;
      },
      getEmptyValue: function getEmptyValue() {
        var parent = this.form;
        var type = Object.prototype.toString.call(get_1(parent.data, this.name));
        var emptyValue;

        if (type === "[object String]") {
          emptyValue = "";
        }

        if (type === "[object Array]") {
          emptyValue = [];
        }

        if (type === "[object Object]") {
          emptyValue = {};
        }

        return emptyValue;
      },
      resetField: function resetField() {
        var _this8 = this;

        var resetType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "initial";
        var parent = this.form;

        if (!this.name && this.label) {
          log.warn("Form", "name is required for validating.");
          return;
        }

        var tResetType = resetType || parent.resetType;

        if (tResetType === "empty") {
          set_1(parent.data, this.name, this.getEmptyValue());
        }

        if (tResetType === "initial") {
          set_1(parent.data, this.name, this.initialValue);
        }

        Vue__default["default"].nextTick(function () {
          if (_this8.resetValidating) {
            _this8.needResetField = true;
          } else {
            _this8.resetHandler();
          }
        });
      },
      resetHandler: function resetHandler() {
        this.needResetField = false;
        this.errorList = [];
        this.successList = [];
        this.verifyStatus = "not"
        /* TO_BE_VALIDATED */
        ;
      }
    },
    render: function render() {
      var h = arguments[0];
      var helpNode = renderTNodeJSX(this, "help");
      return h("div", {
        "class": this.classes
      }, [this.getLabel(), h("div", {
        "class": this.contentClasses,
        "style": this.contentStyle
      }, [h("div", {
        "class": "".concat(this.componentName, "__controls-content")
      }, [this.$slots["default"], this.getSuffixIcon()]), helpNode && h("div", {
        "class": "".concat(this.classPrefix, "-input__help")
      }, [helpNode]), this.extraNode])]);
    }
  });

  var Form = withInstall(_Form);
  var FormItem = withInstall(_FormItem);

  var props$q = {
    disabled: Boolean,
    inputNumberProps: {
      type: [Boolean, Object],
      "default": false
    },
    label: {
      type: [String, Boolean, Function],
      "default": true
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["vertical", "horizontal"].includes(val);
      }
    },
    marks: {
      type: [Object, Array]
    },
    max: {
      type: Number,
      "default": 100
    },
    min: {
      type: Number,
      "default": 0
    },
    range: Boolean,
    step: {
      type: Number,
      "default": 1
    },
    tooltipProps: {
      type: Object
    },
    value: {
      type: [Number, Array]
    },
    defaultValue: {
      type: [Number, Array]
    },
    onChange: Function
  };

  var classPrefixMixins$k = getClassPrefixMixins("slider");
  var TSliderMark = mixins(classPrefixMixins$k).extend({
    name: "TSliderMark",
    props: {
      mark: {
        type: [Object, Array, String]
      },
      point: {
        type: Number
      }
    },
    methods: {
      changeValue: function changeValue(event) {
        event.stopPropagation();
        this.$emit("change-value", this.point);
      }
    },
    render: function render() {
      var h = arguments[0];
      var label = this.mark;
      return h("div", {
        "class": "".concat(this.componentName, "__mark-text"),
        "on": {
          "click": this.changeValue
        }
      }, [label]);
    }
  });

  var classPrefixMixins$j = getClassPrefixMixins("slider__button");
  var TSliderButton = mixins(classPrefixMixins$j, Vue__default["default"]).extend({
    name: "TSliderButton",
    props: {
      value: {
        type: [Number, String],
        "default": 0
      },
      vertical: {
        type: Boolean,
        "default": false
      },
      popupClass: {
        type: String,
        "default": ""
      },
      tooltipProps: {
        type: [Boolean, Object],
        "default": true
      },
      label: {
        type: [String, Function, Boolean],
        "default": true
      },
      range: {
        type: Boolean,
        "default": false
      },
      position: {
        type: String
      }
    },
    inject: {
      slider: {
        "default": void 0
      }
    },
    computed: {
      placement: function placement() {
        if (this.tooltipProps instanceof Object) {
          var placement = this.tooltipProps.placement;
          if (placement) return placement;
        }

        return this.vertical ? "right" : "top";
      },
      rangeDiff: function rangeDiff() {
        return this.max - this.min;
      },
      disabled: function disabled() {
        return this.slider.disabled;
      },
      max: function max() {
        return this.slider.max;
      },
      min: function min() {
        return this.slider.min;
      },
      step: function step() {
        return this.slider.step;
      },
      precision: function precision() {
        return this.slider.precision;
      },
      currentPos: function currentPos() {
        return "".concat((this.value - this.min) / this.rangeDiff * 100, "%");
      },
      wrapperStyle: function wrapperStyle() {
        return this.vertical ? {
          bottom: this.currentPos
        } : {
          left: this.currentPos
        };
      }
    },
    data: function data() {
      return {
        visible: false,
        hovering: false,
        dragging: false,
        isClick: false,
        clientX: 0,
        clientY: 0,
        startX: 0,
        startY: 0,
        currentX: 0,
        currentY: 0,
        startPos: 0,
        newPos: null,
        prevValue: this.value,
        showTooltip: true,
        trigger: "hover",
        showArrow: true,
        overlayInnerStyle: void 0,
        overlayClassName: void 0,
        attach: "body",
        destroyOnClose: null
      };
    },
    watch: {
      disabled: function disabled() {
        this.handleIE();
      }
    },
    mounted: function mounted() {
      this.showTooltip = !this.tooltipProps === false;
      this.setTooltipProps();
      this.handleIE();
    },
    methods: {
      getTooltipContent: function getTooltipContent() {
        if (typeof this.label === "boolean") return String(this.value);
        return renderTNodeJSXDefault(this, "label", {
          params: this.range ? {
            value: this.value,
            position: this.position
          } : {
            value: this.value
          }
        });
      },
      setTooltipProps: function setTooltipProps() {
        if (this.tooltipProps instanceof Object) {
          var _this$tooltipProps = this.tooltipProps,
              trigger = _this$tooltipProps.trigger,
              destroyOnClose = _this$tooltipProps.destroyOnClose,
              showArrow = _this$tooltipProps.showArrow,
              overlayInnerStyle = _this$tooltipProps.overlayInnerStyle,
              overlayClassName = _this$tooltipProps.overlayClassName,
              attach = _this$tooltipProps.attach;

          if (!this.empty(trigger)) {
            this.trigger = trigger;
          }

          this.destroyOnClose = destroyOnClose;

          if (!this.empty(showArrow)) {
            this.showArrow = showArrow;
          }

          this.overlayInnerStyle = overlayInnerStyle;
          this.overlayClassName = overlayClassName;

          if (!this.empty(attach)) {
            this.attach = attach;
          }
        }
      },
      getTooltipProps: function getTooltipProps() {
        if (this.tooltipProps instanceof Object) {
          return this.tooltipProps;
        }

        return {};
      },
      handleIE: function handleIE() {
        var _this = this;

        if (getIEVersion$1() <= 11) {
          this.$nextTick(function () {
            _this.$el.removeAttribute("disabled");
          });
        }
      },
      showTooltipComponent: function showTooltipComponent() {
        this.visible = true;
      },
      hideTooltipComponent: function hideTooltipComponent() {
        this.visible = false;
      },
      handleMouseEnter: function handleMouseEnter() {
        this.hovering = true;
        this.showTooltipComponent();
        this.$refs.button.focus();
      },
      handleMouseLeave: function handleMouseLeave() {
        this.hovering = false;

        if (!this.dragging) {
          this.hideTooltipComponent();
        }
      },
      onButtonDown: function onButtonDown(event) {
        if (this.disabled) {
          return;
        }

        event.preventDefault();
        this.onDragStart(event);
        window.addEventListener("mousemove", this.onDragging);
        window.addEventListener("mouseup", this.onDragEnd);
        window.addEventListener("touchmove", this.onDragging);
        window.addEventListener("touchend", this.onDragEnd);
        window.addEventListener("contextmenu", this.onDragEnd);
      },
      onNativeKeyDown: function onNativeKeyDown(e) {
        var code = e.code;
        e.preventDefault();

        if (code === "ArrowDown" || code === "ArrowLeft") {
          this.onKeyDown("sub");
        }

        if (code === "ArrowUp" || code === "ArrowRight") {
          this.onKeyDown("add");
        }
      },
      onLeftKeyDown: function onLeftKeyDown() {
        this.onKeyDown("sub");
      },
      onRightKeyDown: function onRightKeyDown() {
        this.onKeyDown("add");
      },
      onKeyDown: function onKeyDown(state) {
        if (this.disabled) {
          return;
        }

        var stepLength = this.step / this.rangeDiff * 100;

        if (state === "sub") {
          stepLength = -stepLength;
        }

        this.newPos = parseFloat(this.currentPos) + stepLength;
        this.setPosition(this.newPos);
      },
      onDragStart: function onDragStart(event) {
        this.dragging = true;
        this.isClick = true;
        var type = event.type;
        var clientY = event.clientY,
            clientX = event.clientX;

        if (type === "touchstart") {
          var touch = event.touches;
          var _ref = [touch[0].clientY, touch[0].clientX];
          clientY = _ref[0];
          clientX = _ref[1];
        }

        if (this.vertical) {
          this.startY = clientY;
        } else {
          this.startX = clientX;
        }

        this.startPos = parseFloat(this.currentPos);
        this.newPos = this.startPos;
      },
      onDragging: function onDragging(e) {
        var event = e;

        if (!this.dragging) {
          return;
        }

        this.isClick = false;
        this.showTooltipComponent();
        this.slider.resetSize();
        var diff = 0;
        var parentSliderSize = this.slider.sliderSize;

        if (this.vertical) {
          this.currentY = event.clientY;
          diff = this.startY - this.currentY;
        } else {
          this.currentX = event.clientX;
          diff = this.currentX - this.startX;
        }

        if (event.type === "touchmove") {
          var touch = event.touches;
          var _ref2 = [touch[0].clientY, touch[0].clientX],
              clientY = _ref2[0],
              clientX = _ref2[1];
          this.clientY = clientY;
          this.clientX = clientX;
        }

        diff = diff / parentSliderSize * 100;
        this.newPos = this.startPos + diff;
        this.setPosition(this.newPos);
      },
      onDragEnd: function onDragEnd() {
        var _this2 = this;

        if (this.dragging) {
          setTimeout(function () {
            _this2.dragging = false;

            _this2.hideTooltipComponent();
          }, 0);
          window.removeEventListener("mousemove", this.onDragging);
          window.removeEventListener("touchmove", this.onDragging);
          window.removeEventListener("mouseup", this.onDragEnd);
          window.removeEventListener("touchend", this.onDragEnd);
          window.removeEventListener("contextmenu", this.onDragEnd);
        }
      },
      setPosition: function setPosition(pos) {
        var _this3 = this;

        var newPos = pos;

        if (newPos === null || isNaN(newPos)) {
          return;
        }

        if (newPos > 100) {
          newPos = 100;
        } else if (newPos < 0) {
          newPos = 0;
        }

        var perStepLen = 100 * this.step / this.rangeDiff;
        var steps = Math.round(newPos / perStepLen);
        var value = steps * perStepLen * this.rangeDiff * 0.01;
        value += this.min;
        value = Number(parseFloat("".concat(value)).toFixed(this.precision));
        this.$emit("input", value);
        this.$nextTick(function () {
          _this3.showTooltipComponent();

          _this3.$refs.tooltip && _this3.$refs.tooltip.updatedTooltip();
        });

        if (!this.dragging && this.value !== this.prevValue) {
          this.prevValue = this.value;
        }
      },
      empty: function empty(str) {
        return str === void 0 || str === null;
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "ref": "button",
        "class": "".concat(this.componentName, "-wrapper"),
        "style": this.wrapperStyle,
        "attrs": {
          "tabindex": "0",
          "show-tooltip": this.showTooltip
        },
        "on": {
          "mouseenter": this.handleMouseEnter,
          "mouseleave": this.handleMouseLeave,
          "mousedown": this.onButtonDown,
          "touchstart": this.onButtonDown,
          "focus": this.handleMouseEnter,
          "blur": this.handleMouseLeave,
          "keydown": this.onNativeKeyDown
        }
      }, [h(Tooltip, helper([{
        "ref": "tooltip"
      }, {
        "props": this.getTooltipProps()
      }, {
        "attrs": {
          "visible": this.label && this.visible,
          "content": this.getTooltipContent
        }
      }]), [h("div", {
        "class": [this.componentName, _defineProperty$3({}, "".concat(this.componentName, "--dragging"), this.dragging)]
      })])]);
    }
  });

  function ownKeys$T(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$S(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$T(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$T(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$i = getClassPrefixMixins("slider");
  var _Slider = mixins(classPrefixMixins$i).extend({
    name: "TSlider",
    model: {
      prop: "value",
      event: "change"
    },
    props: _objectSpread$S({}, props$q),
    components: {
      TSliderMark: TSliderMark,
      TInputNumber: InputNumber
    },
    provide: function provide() {
      return {
        slider: this
      };
    },
    data: function data() {
      return {
        firstValue: 0,
        secondValue: 0,
        prevValue: 0,
        dragging: false,
        sliderSize: 1,
        inputDecimalPlaces: 0,
        inputFormat: null,
        inputPlaceholder: "",
        inputTheme: "column",
        showSteps: false,
        formDisabled: void 0
      };
    },
    computed: {
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      containerClass: function containerClass() {
        return ["".concat(this.componentName, "__container"), {
          "is-vertical": this.vertical
        }];
      },
      sliderClass: function sliderClass() {
        var _ref;

        return ["".concat(this.componentName), (_ref = {
          "is-vertical": this.vertical
        }, _defineProperty$3(_ref, "".concat(this.componentName, "--with-input"), this.inputNumberProps), _defineProperty$3(_ref, "".concat(this.componentName, "--vertical"), this.vertical), _defineProperty$3(_ref, "".concat(this.classPrefix, "-is-disabled"), this.tDisabled), _ref)];
      },
      sliderRailClass: function sliderRailClass() {
        return ["".concat(this.componentName, "__rail"), _defineProperty$3({
          "show-input": this.inputNumberProps
        }, "".concat(this.classPrefix, "-is-disabled"), this.tDisabled)];
      },
      sliderNumberClass: function sliderNumberClass() {
        return ["".concat(this.componentName, "__input"), {
          "is-vertical": this.vertical
        }];
      },
      vertical: function vertical() {
        return this.layout === "vertical";
      },
      rangeDiff: function rangeDiff() {
        return this.max - this.min;
      },
      steps: function steps() {
        var _this = this;

        var min = this.min,
            max = this.max,
            rangeDiff = this.rangeDiff,
            step = this.step;
        if (!this.showSteps || min > max) return [];

        if (this.step === 0) {
          console.warn("[Element Warn][Slider]step should not be 0.");
          return [];
        }

        var stepCount = rangeDiff / step;
        var stepWidth = 100 * step / rangeDiff;
        var result = [];

        for (var i = 1; i < stepCount; i++) {
          result.push(i * stepWidth);
        }

        if (this.range) {
          return result.filter(function (step2) {
            return step2 < 100 * (_this.minValue - min) / rangeDiff || step2 > 100 * (_this.maxValue - min) / rangeDiff;
          });
        }

        return result.filter(function (step2) {
          return step2 > 100 * (_this.firstValue - min) / rangeDiff;
        });
      },
      markList: function markList() {
        var _this2 = this;

        if (!this.marks) {
          return [];
        }

        var legalMarks = [];
        Object.keys(this.marks).map(parseFloat).sort(function (a, b) {
          return a - b;
        }).filter(function (point) {
          return point <= _this2.max && point >= _this2.min;
        }).forEach(function (point) {
          var item = {
            point: point,
            position: (point - _this2.min) * 100 / _this2.rangeDiff,
            mark: _this2.marks[point]
          };
          legalMarks.push(item);
        });
        return legalMarks;
      },
      minValue: function minValue() {
        return Math.min(this.firstValue, this.secondValue);
      },
      maxValue: function maxValue() {
        return Math.max(this.firstValue, this.secondValue);
      },
      barSize: function barSize() {
        var diff = this.range ? this.maxValue - this.minValue : this.prevValue - this.min;
        return "".concat(100 * diff / this.rangeDiff, "%");
      },
      barStart: function barStart() {
        return this.range ? "".concat(100 * (this.minValue - this.min) / this.rangeDiff, "%") : "0%";
      },
      precision: function precision() {
        var precisions = [this.min, this.max, this.step].map(function (item) {
          var decimalArr = "".concat(item).split(".");
          return decimalArr[1] ? decimalArr[1].length : 0;
        });
        return Math.max.apply(null, precisions);
      },
      runwayStyle: function runwayStyle() {
        return this.vertical ? {
          height: "100%"
        } : {};
      },
      barStyle: function barStyle() {
        return this.vertical ? {
          height: this.barSize,
          bottom: this.barStart
        } : {
          width: this.barSize,
          left: this.barStart
        };
      },
      calcInputNumberProps: function calcInputNumberProps() {
        var defaultInputNumberProps = {
          decimalPlaces: 0,
          placeholder: "",
          theme: "column"
        };

        if (_typeof$1(this.inputNumberProps) === "object") {
          return _objectSpread$S(_objectSpread$S({}, defaultInputNumberProps), this.inputNumberProps);
        }

        return defaultInputNumberProps;
      }
    },
    watch: {
      value: function value(newVal) {
        if (this.dragging === true) return;

        if (Array.isArray(newVal) && this.range) {
          var _newVal = _slicedToArray(newVal, 2);

          this.firstValue = _newVal[0];
          this.secondValue = _newVal[1];
        } else {
          this.prevValue = newVal;
        }
      },
      firstValue: function firstValue(val) {
        if (this.range) {
          this.emitChange([this.minValue, this.maxValue]);
        } else {
          this.emitChange(val);
        }
      },
      secondValue: function secondValue() {
        if (this.range) {
          this.emitChange([this.minValue, this.maxValue]);
        }
      },
      prevValue: function prevValue(val) {
        this.emitChange(val);
      },
      dragging: function dragging(newVal) {
        if (newVal === false) {
          this.init();
        }
      }
    },
    mounted: function mounted() {
      this.init();
    },
    beforeDestroy: function beforeDestroy() {
      window.removeEventListener("resize", this.resetSize);
    },
    methods: {
      init: function init() {
        var valuetext;
        var min = this.min,
            max = this.max,
            value = this.value;

        if (this.range) {
          if (Array.isArray(value)) {
            this.firstValue = Math.max(min || 0, value[0]);
            this.secondValue = Math.min(max || 100, value[1]);
          } else {
            this.firstValue = min || 0;
            this.secondValue = max || 100;
          }

          valuetext = "".concat(this.firstValue, "-").concat(this.secondValue);
        } else {
          if (typeof this.value !== "number") {
            this.prevValue = min;
          } else {
            this.prevValue = Math.min(max, Math.max(min, value));
          }

          valuetext = String(this.prevValue);
        }

        this.$el.setAttribute("aria-valuetext", valuetext);
        this.resetSize();
        window.addEventListener("resize", this.resetSize);
      },
      valueChanged: function valueChanged() {
        var _this3 = this;

        if (this.range) {
          return ![this.minValue, this.maxValue].every(function (item, index) {
            return item === _this3.prevValue[index];
          });
        }

        return this.value !== this.prevValue;
      },
      setValues: function setValues(value) {
        var _ref3 = [this.min, this.max],
            min = _ref3[0],
            max = _ref3[1];

        if (min > max) {
          console.warn("[Slider] max should be greater than min.");
          return;
        }

        if (this.range && Array.isArray(value)) {
          var _ref4 = [Math.min.apply(Math, _toConsumableArray(value)), Math.max.apply(Math, _toConsumableArray(value))],
              firstValue = _ref4[0],
              secondValue = _ref4[1];
          if (firstValue > max) firstValue = this.firstValue;
          if (firstValue < min) firstValue = min;
          if (secondValue < min) secondValue = this.secondValue;
          if (secondValue > max) secondValue = max;
          var _ref5 = [firstValue, secondValue];
          this.firstValue = _ref5[0];
          this.secondValue = _ref5[1];
          return [firstValue, secondValue];
        }

        var prevValue = value;
        if (prevValue < min) prevValue = min;
        if (prevValue > max) prevValue = max;
        this.prevValue = prevValue;
        return prevValue;
      },
      setPosition: function setPosition(percent) {
        var targetValue = percent * this.rangeDiff / 100;
        targetValue = this.min + targetValue;

        if (!this.range) {
          this.$refs.button1.setPosition(percent);
          return;
        }

        var button;

        if (Math.abs(this.minValue - targetValue) < Math.abs(this.maxValue - targetValue)) {
          button = this.firstValue < this.secondValue ? "button1" : "button2";
        } else {
          button = this.firstValue > this.secondValue ? "button1" : "button2";
        }

        this.$refs[button].setPosition(percent);
      },
      onSliderClick: function onSliderClick(event) {
        if (this.tDisabled || this.dragging) {
          return;
        }

        this.resetSize();
        var value = 0;

        if (this.vertical) {
          var sliderOffsetBottom = this.$refs.slider.getBoundingClientRect().bottom;
          value = (sliderOffsetBottom - event.clientY) / this.sliderSize * 100;
          this.setPosition(value);
        } else {
          var sliderOffsetLeft = this.$refs.slider.getBoundingClientRect().left;
          value = (event.clientX - sliderOffsetLeft) / this.sliderSize * 100;
          this.setPosition(value);
        }
      },
      resetSize: function resetSize() {
        if (this.$refs.slider) {
          this.sliderSize = this.$refs.slider["client".concat(this.vertical ? "Height" : "Width")];
        }
      },
      emitChange: function emitChange(value) {
        var changeValue = value;

        if (changeValue === void 0) {
          if (this.range) {
            changeValue = [this.firstValue, this.secondValue];
          } else {
            changeValue = this.prevValue;
          }
        }

        var fixValue = this.setValues(changeValue);
        emitEvent(this, "change", fixValue);
      },
      getStopStyle: function getStopStyle(position) {
        return this.vertical ? {
          top: "calc(".concat(100 - position, "% - 1px)")
        } : {
          left: "".concat(position, "%")
        };
      },
      changeValue: function changeValue(point) {
        if (this.tDisabled || this.dragging) {
          return;
        }

        this.resetSize();
        var value = Number(point / this.rangeDiff * 100);
        this.setPosition(value);
        this.emitChange(point);
      },
      renderMask: function renderMask() {
        var _this4 = this;

        var h = this.$createElement;

        if (this.markList.length) {
          return h("div", [h("div", [this.markList.map(function (item, index) {
            return h("div", {
              "class": ["".concat(_this4.componentName, "__stop"), "".concat(_this4.componentName, "__mark-stop")],
              "style": _this4.getStopStyle(item.position),
              "key": index
            });
          })]), h("div", {
            "class": "".concat(this.componentName, "__mark")
          }, [this.markList.map(function (item, key) {
            return h("t-slider-mark", {
              "attrs": {
                "mark": item.mark,
                "point": item.point
              },
              "key": key,
              "style": _this4.getStopStyle(item.position),
              "on": {
                "change-value": _this4.changeValue
              }
            });
          })])]);
        }
      },
      renderInputButton: function renderInputButton() {
        var _this5 = this;

        var h = this.$createElement;
        var max = this.max,
            min = this.min,
            sliderNumberClass = this.sliderNumberClass,
            range = this.range;
        return h("div", {
          "class": ["".concat(this.componentName, "__input-container"), {
            "is-vertical": this.vertical
          }]
        }, [h("t-input-number", helper([{
          "class": sliderNumberClass,
          "attrs": {
            "value": range ? this.firstValue : this.prevValue,
            "step": this.step,
            "disabled": this.tDisabled,
            "min": min,
            "max": max
          },
          "ref": "input",
          "on": {
            "change": function change(v) {
              _this5.range ? _this5.firstValue = v : _this5.prevValue = v;
            }
          }
        }, {
          "props": this.calcInputNumberProps
        }])), range && h("div", {
          "class": "".concat(this.componentName, "__center-line")
        }), range && h("t-input-number", helper([{
          "class": this.sliderNumberClass,
          "ref": "input",
          "attrs": {
            "step": this.step,
            "disabled": this.tDisabled,
            "min": min,
            "max": max
          }
        }, {
          "props": this.calcInputNumberProps
        }, {
          "model": {
            value: _this5.secondValue,
            callback: function callback($$v) {
              _this5.secondValue = $$v;
            }
          }
        }]))]);
      }
    },
    render: function render() {
      var _this6 = this;

      var h = arguments[0];
      var min = this.min,
          max = this.max,
          layout = this.layout,
          disabled = this.disabled,
          vertical = this.vertical,
          range = this.range;
      var buttonGroup = this.inputNumberProps && this.renderInputButton();
      var masks = this.renderMask();
      return h("div", {
        "class": this.containerClass
      }, [h("div", {
        "class": this.sliderClass,
        "attrs": {
          "role": "slider",
          "aria-valuemin": min,
          "aria-valuemax": max,
          "aria-orientation": layout,
          "aria-disabled": disabled,
          "tooltip-props": this.tooltipProps
        }
      }, [h("div", {
        "class": this.sliderRailClass,
        "style": this.runwayStyle,
        "on": {
          "click": this.onSliderClick
        },
        "ref": "slider"
      }, [h("div", {
        "class": "".concat(this.componentName, "__track"),
        "style": this.barStyle
      }), h(TSliderButton, {
        "attrs": {
          "vertical": vertical,
          "value": range ? this.firstValue : this.prevValue,
          "disabled": this.tDisabled,
          "label": this.label,
          "range": this.range,
          "position": "start",
          "tooltip-props": this.tooltipProps
        },
        "ref": "button1",
        "on": {
          "input": function input(v) {
            _this6.range ? _this6.firstValue = v : _this6.prevValue = v;
          }
        }
      }), this.range && h(TSliderButton, {
        "attrs": {
          "vertical": vertical,
          "disabled": this.tDisabled,
          "range": this.range,
          "position": "end",
          "label": this.label,
          "tooltip-props": this.tooltipProps
        },
        "ref": "button2",
        "model": {
          value: _this6.secondValue,
          callback: function callback($$v) {
            _this6.secondValue = $$v;
          }
        }
      }), this.showSteps && h("div", [this.steps.map(function (item, key) {
        return h("div", {
          "class": "".concat(_this6.componentName, "__stop"),
          "key": key,
          "style": _this6.getStopStyle(item)
        });
      })]), masks])]), buttonGroup]);
    }
  });

  var Slider = withInstall(_Slider);

  var props$p = {
    customValue: {
      type: Array
    },
    disabled: Boolean,
    label: {
      type: [Array, Function],
      "default": function _default() {
        return [];
      }
    },
    loading: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    value: {
      type: [String, Number, Boolean],
      "default": false
    },
    defaultValue: {
      type: [String, Number, Boolean],
      "default": false
    },
    onChange: Function
  };

  function ownKeys$S(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$R(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$S(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$S(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$h = getClassPrefixMixins("switch");
  var _Switch = mixins(classPrefixMixins$h).extend({
    name: "TSwitch",
    props: _objectSpread$R({}, props$p),
    model: {
      prop: "value",
      event: "change"
    },
    data: function data() {
      return {
        formDisabled: void 0
      };
    },
    computed: {
      classes: function classes() {
        var _ref;

        return ["".concat(this.componentName), this.commonSizeClassName[this.size], (_ref = {}, _defineProperty$3(_ref, this.commonStatusClassName.disabled, this.tDisabled), _defineProperty$3(_ref, this.commonStatusClassName.loading, this.loading), _defineProperty$3(_ref, this.commonStatusClassName.checked, this.value === this.activeValue), _ref)];
      },
      nodeClasses: function nodeClasses() {
        var _ref2;

        return ["".concat(this.componentName, "__handle"), (_ref2 = {}, _defineProperty$3(_ref2, this.commonStatusClassName.disabled, this.tDisabled), _defineProperty$3(_ref2, this.commonStatusClassName.loading, this.loading), _ref2)];
      },
      contentClasses: function contentClasses() {
        return ["".concat(this.componentName, "__content"), this.commonSizeClassName[this.size], _defineProperty$3({}, this.commonStatusClassName.disabled, this.tDisabled)];
      },
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      activeValue: function activeValue() {
        if (this.customValue && this.customValue.length > 0) {
          return this.customValue[0];
        }

        return true;
      },
      inactiveValue: function inactiveValue() {
        if (this.customValue && this.customValue.length > 1) {
          return this.customValue[1];
        }

        return false;
      },
      content: function content() {
        if (typeof this.label === "function") {
          return this.label(this.$createElement, {
            value: this.value
          });
        }

        if (typeof this.label === "string") {
          return this.label;
        }

        if (Array.isArray(this.label)) {
          var label = this.value === this.activeValue ? this.label[0] : this.label[1];
          if (!label) return;

          if (typeof label === "string") {
            return label;
          }

          if (typeof label === "function") {
            return label(this.$createElement);
          }
        }

        if (this.$scopedSlots.label) {
          return this.$scopedSlots.label({
            value: this.value
          });
        }

        return null;
      }
    },
    watch: {
      value: {
        handler: function handler(val) {
          if (this.customValue && this.customValue.length && !this.customValue.includes(val)) {
            throw "value is not in ".concat(JSON.stringify(this.customValue));
          }
        },
        immediate: true
      }
    },
    methods: {
      handleToggle: function handleToggle() {
        var checked = this.value === this.activeValue ? this.inactiveValue : this.activeValue;
        typeof this.onChange === "function" && this.onChange(checked);
        this.$emit("change", checked);
      },
      toggle: function toggle() {
        if (this.tDisabled || this.loading) {
          return;
        }

        this.handleToggle();
      }
    },
    render: function render() {
      var h = arguments[0];
      var loading = this.loading,
          disabled = this.disabled,
          content = this.content,
          nodeClasses = this.nodeClasses,
          classes = this.classes,
          toggle = this.toggle,
          contentClasses = this.contentClasses;
      var switchContent;
      var loadingContent;

      if (loading) {
        loadingContent = h(Loading, {
          "attrs": {
            "size": "small"
          }
        });
      } else if (content) {
        switchContent = content;
      }

      return h("div", {
        "class": classes,
        "attrs": {
          "disabled": disabled
        },
        "on": {
          "click": toggle
        }
      }, [h("span", {
        "class": nodeClasses
      }, [loadingContent]), h("div", {
        "class": contentClasses
      }, [switchContent])]);
    }
  });

  var Switch = withInstall(mapProps(["value"], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_Switch));

  var props$o = {
    autofocus: Boolean,
    autosize: {
      type: [Boolean, Object],
      "default": false
    },
    disabled: Boolean,
    maxcharacter: {
      type: Number
    },
    maxlength: {
      type: Number
    },
    name: {
      type: String,
      "default": ""
    },
    placeholder: {
      type: String,
      "default": void 0
    },
    readonly: Boolean,
    status: {
      type: String,
      validator: function validator(val) {
        return ["success", "warning", "error"].includes(val);
      }
    },
    tips: {
      type: [String, Function]
    },
    value: {
      type: [String, Number]
    },
    defaultValue: {
      type: [String, Number]
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onKeydown: Function,
    onKeypress: Function,
    onKeyup: Function
  };

  var hiddenTextarea;
  var HIDDEN_TEXTAREA_STYLE = "\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
  var SIZING_PROPS = ["letter-spacing", "line-height", "padding-top", "padding-bottom", "font-family", "font-weight", "font-size", "font-variant", "text-rendering", "text-transform", "width", "text-indent", "padding-left", "padding-right", "border-width", "box-sizing"];

  function calculateNodeStyling(targetElement) {
    var style = window.getComputedStyle(targetElement);
    var boxSizing = style.getPropertyValue("box-sizing") || style.getPropertyValue("-moz-box-sizing") || style.getPropertyValue("-webkit-box-sizing");
    var paddingSize = parseFloat(style.getPropertyValue("padding-bottom")) + parseFloat(style.getPropertyValue("padding-top"));
    var borderSize = parseFloat(style.getPropertyValue("border-bottom-width")) + parseFloat(style.getPropertyValue("border-top-width"));
    var sizingStyle = SIZING_PROPS.map(function (name) {
      return "".concat(name, ":").concat(style.getPropertyValue(name));
    }).join(";");
    return {
      sizingStyle: sizingStyle,
      paddingSize: paddingSize,
      borderSize: borderSize,
      boxSizing: boxSizing
    };
  }

  function calcTextareaHeight(targetElement) {
    var minRows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var maxRows = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    if (!hiddenTextarea) {
      hiddenTextarea = document.createElement("textarea");
      document.body.appendChild(hiddenTextarea);
    }

    var _calculateNodeStyling = calculateNodeStyling(targetElement),
        paddingSize = _calculateNodeStyling.paddingSize,
        borderSize = _calculateNodeStyling.borderSize,
        boxSizing = _calculateNodeStyling.boxSizing,
        sizingStyle = _calculateNodeStyling.sizingStyle;

    hiddenTextarea.setAttribute("style", "".concat(sizingStyle, ";").concat(HIDDEN_TEXTAREA_STYLE));
    hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
    var height = hiddenTextarea.scrollHeight;
    var result = {};

    if (boxSizing === "border-box") {
      height += borderSize;
    } else if (boxSizing === "content-box") {
      height -= paddingSize;
    }

    hiddenTextarea.value = "";
    var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;

    if (minRows !== null) {
      var minHeight = singleRowHeight * minRows;

      if (boxSizing === "border-box") {
        minHeight = minHeight + paddingSize + borderSize;
      }

      height = Math.max(minHeight, height);
      result.minHeight = "".concat(minHeight, "px");
    }

    if (maxRows !== null) {
      var maxHeight = singleRowHeight * maxRows;

      if (boxSizing === "border-box") {
        maxHeight = maxHeight + paddingSize + borderSize;
      }

      height = Math.min(maxHeight, height);
    }

    result.height = "".concat(height, "px");
    hiddenTextarea.parentNode && hiddenTextarea.parentNode.removeChild(hiddenTextarea);
    hiddenTextarea = null;
    return result;
  }

  function ownKeys$R(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$Q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$R(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$R(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$g = getClassPrefixMixins("textarea");

  function getValidAttrs(obj) {
    var newObj = {};
    Object.keys(obj).forEach(function (key) {
      if (typeof obj[key] !== "undefined") {
        newObj[key] = obj[key];
      }
    });
    return newObj;
  }

  var _Textarea = mixins(Vue__default["default"], classPrefixMixins$g).extend({
    name: "TTextarea",
    props: _objectSpread$Q({}, props$o),
    inject: {
      tFormItem: {
        "default": void 0
      }
    },
    data: function data() {
      return {
        formDisabled: void 0,
        focused: false,
        mouseHover: false,
        textareaStyle: {}
      };
    },
    computed: {
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      textareaClasses: function textareaClasses() {
        var _ref;

        return [this.componentName, (_ref = {}, _defineProperty$3(_ref, "".concat(this.classPrefix, "-is-disabled"), this.tDisabled), _defineProperty$3(_ref, "".concat(this.classPrefix, "-is-readonly"), this.readonly), _ref)];
      },
      inputAttrs: function inputAttrs() {
        return getValidAttrs({
          autofocus: this.autofocus,
          disabled: this.tDisabled,
          readonly: this.readonly,
          placeholder: this.placeholder,
          maxlength: this.maxlength || void 0,
          name: this.name || void 0,
          unselectable: this.readonly ? "on" : "off"
        });
      },
      characterNumber: function characterNumber() {
        var characterInfo = getCharacterLength(String(this.value || ""));

        if (_typeof$1(characterInfo) === "object") {
          return characterInfo.length;
        }

        return characterInfo;
      }
    },
    mounted: function mounted() {
      this.adjustTextareaHeight();
    },
    methods: {
      adjustTextareaHeight: function adjustTextareaHeight() {
        if (this.autosize === true) {
          this.textareaStyle = calcTextareaHeight(this.$refs.refTextareaElem);
        } else if (_typeof$1(this.autosize) === "object") {
          var _this$autosize, _this$autosize2;

          this.textareaStyle = calcTextareaHeight(this.$refs.refTextareaElem, (_this$autosize = this.autosize) === null || _this$autosize === void 0 ? void 0 : _this$autosize.minRows, (_this$autosize2 = this.autosize) === null || _this$autosize2 === void 0 ? void 0 : _this$autosize2.maxRows);
        } else if (this.$attrs.rows) {
          this.textareaStyle = {
            height: "auto",
            minHeight: "auto"
          };
        }
      },
      emitEvent: function emitEvent(name, value, context) {
        this.$emit(name, value, context);
        var handleName = getPropsApiByEvent(name);
        isFunction_1(this[handleName]) && this[handleName](value, context);
      },
      focus: function focus() {
        var input = this.$refs.refTextareaElem;
        input === null || input === void 0 ? void 0 : input.focus();
      },
      blur: function blur() {
        var input = this.$refs.refTextareaElem;
        input === null || input === void 0 ? void 0 : input.blur();
      },
      handleInput: function handleInput(e) {
        if (e.isComposing || e.inputType === "insertCompositionText") return;
        this.inputValueChangeHandle(e);
      },
      onCompositionend: function onCompositionend(e) {
        this.inputValueChangeHandle(e);
      },
      inputValueChangeHandle: function inputValueChangeHandle(e) {
        var _this = this;

        var target = e.target;
        var val = target.value;

        if (this.maxcharacter && this.maxcharacter >= 0) {
          var stringInfo = getCharacterLength(val, this.maxcharacter);
          val = _typeof$1(stringInfo) === "object" && stringInfo.characters;
        }

        this.$emit("input", val);
        this.emitEvent("change", val, {
          e: e
        });
        this.$nextTick(function () {
          return _this.setInputValue(val);
        });
        this.adjustTextareaHeight();
      },
      setInputValue: function setInputValue() {
        var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
        var textareaElem = this.$refs.refTextareaElem;
        var sV = String(v);

        if (!textareaElem) {
          return;
        }

        if (textareaElem.value !== sV) {
          textareaElem.value = sV;
        }
      },
      emitKeyDown: function emitKeyDown(e) {
        if (this.tDisabled) return;
        this.emitEvent("keydown", this.value, {
          e: e
        });
      },
      emitKeyUp: function emitKeyUp(e) {
        if (this.tDisabled) return;
        this.emitEvent("keyup", this.value, {
          e: e
        });
      },
      emitKeypress: function emitKeypress(e) {
        if (this.tDisabled) return;
        this.emitEvent("keypress", this.value, {
          e: e
        });
      },
      emitFocus: function emitFocus(e) {
        if (this.tDisabled) return;
        this.focused = true;
        this.emitEvent("focus", this.value, {
          e: e
        });
      },
      emitBlur: function emitBlur(e) {
        var _this$tFormItem;

        this.focused = false;
        (_this$tFormItem = this.tFormItem) === null || _this$tFormItem === void 0 ? void 0 : _this$tFormItem.validate("blur");
        this.emitEvent("blur", this.value, {
          e: e
        });
      }
    },
    render: function render() {
      var _ref2, _String;

      var h = arguments[0];
      var inputEvents = getValidAttrs({
        focus: this.emitFocus,
        blur: this.emitBlur,
        keydown: this.emitKeyDown,
        keyup: this.emitKeyUp,
        keypress: this.emitKeypress
      });
      var classes = ["".concat(this.componentName, "__inner"), (_ref2 = {}, _defineProperty$3(_ref2, "".concat(this.classPrefix, "-is-").concat(this.status), this.status), _defineProperty$3(_ref2, this.commonStatusClassName.disabled, this.tDisabled), _defineProperty$3(_ref2, this.commonStatusClassName.focused, this.focused), _defineProperty$3(_ref2, "".concat(this.classPrefix, "-resize-none"), _typeof$1(this.autosize) === "object"), _ref2)];
      var tips = renderTNodeJSX(this, "tips");
      return h("div", {
        "class": this.textareaClasses
      }, [h("textarea", {
        "on": _objectSpread$Q({
          "input": this.handleInput,
          "compositionend": this.onCompositionend
        }, inputEvents),
        "attrs": _objectSpread$Q({}, _objectSpread$Q(_objectSpread$Q({}, this.$attrs), this.inputAttrs)),
        "domProps": {
          "value": this.value
        },
        "class": classes,
        "style": this.textareaStyle,
        "ref": "refTextareaElem"
      }), this.maxcharacter ? h("span", {
        "class": "".concat(this.componentName, "__limit")
      }, ["".concat(this.characterNumber, "/").concat(this.maxcharacter)]) : null, !this.maxcharacter && this.maxlength ? h("span", {
        "class": "".concat(this.componentName, "__limit")
      }, ["".concat(this.value ? (_String = String(this.value)) === null || _String === void 0 ? void 0 : _String.length : 0, "/").concat(this.maxlength)]) : null, tips && h("div", {
        "class": ["".concat(this.componentName, "__tips"), "".concat(this.componentName, "__tips--").concat(this.status || "normal")]
      }, [tips])]);
    }
  });

  var Textarea = withInstall(mapProps(["value"])(_Textarea));

  function ownKeys$Q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$P(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$Q(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$Q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TRANSFER_NAME = "TTransfer";

  function findTopNode(vm) {
    if (vm.$options.name === TRANSFER_NAME) {
      return vm;
    }

    if (vm.$parent) {
      return findTopNode(vm.$parent);
    }

    return vm;
  }

  function getTransferListOption(prop) {
    if (Array.isArray(prop)) {
      return {
        source: prop[0],
        target: prop[1]
      };
    }

    return {
      source: prop,
      target: prop
    };
  }

  function getDataValues(data, filterValues) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        _ref$isTreeMode = _ref.isTreeMode,
        isTreeMode = _ref$isTreeMode === void 0 ? false : _ref$isTreeMode,
        _ref$include = _ref.include,
        include = _ref$include === void 0 ? true : _ref$include;

    if (isTreeMode) {
      var result = [];

      if (data) {
        for (var i = 0; i < data.length; i++) {
          var _item$children;

          var item = data[i];
          var isInclude = filterValues.includes(item.value);

          if (!include && isInclude) {
            continue;
          }

          if (item !== null && item !== void 0 && item.children && ((_item$children = item.children) === null || _item$children === void 0 ? void 0 : _item$children.length) > 0) {
            var childResult = getDataValues(item.children, filterValues, {
              isTreeMode: isTreeMode,
              include: include
            });
            result = result.concat(childResult);
          } else if (include && isInclude || !include && !isInclude) {
            result.push(item.value);
          }
        }
      }

      return result;
    }

    return data.filter(function (item) {
      var isInclude = filterValues.includes(item.value);
      return (include && isInclude || !include && !isInclude) && !item.disabled;
    }).map(function (item) {
      return item.value;
    });
  }

  function getTransferData(data, keys) {
    var isTreeMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var list = data.map(function (transferDataItem, index) {
      var _transferDataItem$dis;

      var labelKey = (keys === null || keys === void 0 ? void 0 : keys.label) || "label";
      var valueKey = (keys === null || keys === void 0 ? void 0 : keys.value) || "value";

      if (transferDataItem[labelKey] === void 0) {
        throw "".concat(labelKey, " is not in DataOption ").concat(JSON.stringify(transferDataItem));
      }

      if (transferDataItem[valueKey] === void 0) {
        throw "".concat(valueKey, " is not in DataOption ").concat(JSON.stringify(transferDataItem));
      }

      var result = {
        label: transferDataItem[labelKey],
        value: transferDataItem[valueKey],
        key: "key__value_".concat(transferDataItem[valueKey], "_index_").concat(index),
        disabled: (_transferDataItem$dis = transferDataItem.disabled) !== null && _transferDataItem$dis !== void 0 ? _transferDataItem$dis : false,
        data: transferDataItem
      };

      if (isTreeMode && transferDataItem.children) {
        result.children = getTransferData(transferDataItem.children, keys, true);
      }

      return result;
    });
    return list;
  }

  function isAllNodeValid(data, filterValues, needMatch) {
    if (filterValues.includes(data.value)) {
      return needMatch;
    }

    return false;
  }

  function isTreeNodeValid(data, filterValues, needMatch) {
    if (filterValues.includes(data.value)) {
      return needMatch;
    }

    if (data !== null && data !== void 0 && data.children) {
      return data === null || data === void 0 ? void 0 : data.children.some(function (item) {
        return isTreeNodeValid(item, filterValues, needMatch);
      });
    }

    return !needMatch;
  }

  function cloneTreeWithFilter(sourceTree, targetTree, filterValues, needMatch) {
    sourceTree.forEach(function (item) {
      var newNode;

      if (isAllNodeValid(item, filterValues, needMatch)) {
        newNode = cloneDeep_1(item);
        targetTree.push(newNode);
      } else if (isTreeNodeValid(item, filterValues, needMatch)) {
        newNode = _objectSpread$P({}, item);
        delete newNode.children;
        targetTree.push(newNode);

        if (item.children) {
          newNode.children = [];
          cloneTreeWithFilter(item.children, newNode.children, filterValues, needMatch);

          if (newNode.children.length === 0) {
            delete newNode.children;
          }
        }
      }
    });
  }

  function filterTransferData(data, filterValues) {
    var needMatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var isTreeMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    if (!isTreeMode) {
      if (needMatch) {
        return filterValues.map(function (value) {
          return data.find(function (item) {
            return item.value === value;
          });
        });
      }

      return data.filter(function (item) {
        var isMatch = filterValues.includes(item.value);
        return !isMatch;
      });
    }

    var result = [];
    cloneTreeWithFilter(data, result, filterValues, needMatch);
    return result;
  }

  function getLeafCount(nodes) {
    var total = 0;
    nodes.forEach(function (child) {
      if (child.children && child.children.length > 0) {
        total += getLeafCount(child.children);
      } else {
        total += 1;
      }
    });
    return total;
  }

  function ownKeys$P(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$O(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$P(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$P(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Search = mixins(getGlobalIconMixins()).extend({
    name: "TTransferSearch",
    model: {
      prop: "searchValue",
      event: "change"
    },
    props: {
      searchValue: {
        type: String,
        "default": ""
      },
      search: {
        type: [Boolean, Object]
      },
      placeholder: String,
      classPrefix: String
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];

      var _this$useGlobalIcon = this.useGlobalIcon({
        SearchIcon: Search$1
      }),
          SearchIcon = _this$useGlobalIcon.SearchIcon;
      var searchValue = this.searchValue,
          search = this.search,
          placeholder = this.placeholder,
          classPrefix = this.classPrefix;
      var inputProps = _typeof$1(search) === "object" ? search : {
        clearable: true
      };

      var handleChange = function handleChange(value, changeCtx) {
        _this.$emit("change", value);

        _this.$emit("search", {
          value: value,
          trigger: "input",
          e: changeCtx.e
        });
      };

      var handleEnter = function handleEnter(value, changeCtx) {
        _this.$emit("search", {
          value: value,
          trigger: "input",
          e: changeCtx.e
        });
      };

      return h("div", {
        "class": "".concat(classPrefix, "-transfer__search-wrapper")
      }, [h(Input, helper([{}, {
        "props": _objectSpread$O({}, inputProps)
      }, {
        "attrs": {
          "value": searchValue,
          "placeholder": placeholder
        },
        "on": {
          "change": handleChange,
          "enter": handleEnter
        }
      }]), [h(SearchIcon, {
        "slot": "suffix-icon"
      })])]);
    }
  });

  function ownKeys$O(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$N(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$O(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$O(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$f = getClassPrefixMixins("transfer");
  var keepAnimationMixins$1 = getKeepAnimationMixins();
  var TransferList = mixins(keepAnimationMixins$1, classPrefixMixins$f).extend({
    name: "TTransferList",
    components: {
      Search: Search,
      TCheckbox: Checkbox,
      TCheckboxGroup: CheckboxGroup
    },
    directives: {
      ripple: Ripple
    },
    props: {
      checkboxProps: {
        type: Object,
        "default": function _default() {
          return {};
        }
      },
      dataSource: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      listType: {
        type: String,
        "default": "target"
      },
      title: {
        type: [String, Function]
      },
      checkedValue: {
        type: Array,
        "default": function _default() {
          return [];
        }
      },
      disabled: {
        type: Boolean,
        "default": false
      },
      search: {
        type: [Boolean, Object],
        "default": false
      },
      transferItem: Function,
      empty: {
        type: [Function, String]
      },
      pagination: [Boolean, Object],
      footer: [Function, String],
      checkAll: Boolean,
      t: Function,
      global: Object,
      isTreeMode: {
        type: Boolean,
        "default": false
      }
    },
    data: function data() {
      return {
        filterValue: "",
        defaultCurrent: 1,
        defaultPageSize: 0
      };
    },
    computed: {
      currentPage: function currentPage() {
        var _ref, _this$pagination$curr, _this$pagination, _this$pagination2;

        return (_ref = (_this$pagination$curr = (_this$pagination = this.pagination) === null || _this$pagination === void 0 ? void 0 : _this$pagination.current) !== null && _this$pagination$curr !== void 0 ? _this$pagination$curr : this.defaultCurrent) !== null && _ref !== void 0 ? _ref : (_this$pagination2 = this.pagination) === null || _this$pagination2 === void 0 ? void 0 : _this$pagination2.defaultCurrent;
      },
      pageSize: function pageSize() {
        var _ref2, _this$pagination$page, _this$pagination3, _this$pagination4;

        return (_ref2 = (_this$pagination$page = (_this$pagination3 = this.pagination) === null || _this$pagination3 === void 0 ? void 0 : _this$pagination3.pageSize) !== null && _this$pagination$page !== void 0 ? _this$pagination$page : this.defaultPageSize) !== null && _ref2 !== void 0 ? _ref2 : (_this$pagination4 = this.pagination) === null || _this$pagination4 === void 0 ? void 0 : _this$pagination4.defaultPageSize;
      },
      pageTotal: function pageTotal() {
        return this.filteredData && this.filteredData.length || 0;
      },
      filteredData: function filteredData() {
        var _this = this;

        return this.dataSource.filter(function (item) {
          var label = item && item.label.toString();
          return label.toLowerCase().indexOf(_this.filterValue.toLowerCase()) > -1;
        });
      },
      curPageData: function curPageData() {
        var pageData = this.filteredData;
        if (!this.pagination) return pageData;
        if (this.pageSize === 0) return pageData;
        var startIndex = (this.currentPage - 1) * this.pageSize;
        var endIndex = this.currentPage * this.pageSize;
        pageData = pageData.slice(startIndex, endIndex);
        return pageData;
      },
      paginationProps: function paginationProps() {
        var defaultPaginationProps = {
          size: "small",
          theme: "simple",
          totalContent: false,
          pageSizeOptions: []
        };
        return _typeof$1(this.pagination) === "object" ? _objectSpread$N(_objectSpread$N(_objectSpread$N({}, defaultPaginationProps), this.pagination), {}, {
          current: this.currentPage,
          total: this.pageTotal,
          pageSize: this.pageSize
        }) : {};
      },
      hasFooter: function hasFooter() {
        return !!this.$slots["default"];
      },
      indeterminate: function indeterminate() {
        return !this.isAllChecked && this.checkedValue.length > 0;
      },
      isAllChecked: function isAllChecked() {
        var _this2 = this;

        return this.checkedValue.length > 0 && this.dataSource.every(function (item) {
          return item.disabled || _this2.checkedValue.includes(item.value);
        });
      },
      totalCount: function totalCount() {
        return getLeafCount(this.dataSource);
      }
    },
    watch: {
      totalCount: function totalCount(val) {
        if (val <= (this.currentPage - 1) * this.pageSize) {
          var lastPage = Math.ceil(val / this.pageSize);
          this.defaultCurrent = lastPage;
        }
      }
    },
    methods: {
      handlePaginationChange: function handlePaginationChange(pageInfo) {
        this.$emit("pageChange", pageInfo);
        this.defaultCurrent = pageInfo.current;
        this.defaultPageSize = pageInfo.pageSize;
      },
      handleCheckedChange: function handleCheckedChange(val) {
        this.$emit("checkedChange", val);
      },
      handleCheckedAllChange: function handleCheckedAllChange(checked) {
        if (checked) {
          var allValue = getDataValues(this.dataSource, [], {
            isTreeMode: this.isTreeMode,
            include: false
          });
          this.handleCheckedChange(allValue);
        } else {
          this.handleCheckedChange([]);
        }
      },
      scroll: function scroll(e) {
        this.$emit("scroll", e);
      },
      handleSearch: function handleSearch(e) {
        var event = {
          query: e.value,
          type: this.listType,
          e: e.e,
          trigger: e.trigger
        };
        this.$emit("search", event);
      },
      renderTitle: function renderTitle() {
        var h = this.$createElement;
        var defaultNode = this.title && typeof this.title === "string" ? h("template", [this.title]) : null;
        var titleNode = renderTNodeJSXDefault(this, "title", {
          defaultNode: defaultNode,
          params: {
            type: this.listType
          }
        });
        return h("span", [titleNode]);
      },
      renderContent: function renderContent() {
        var _this3 = this;

        var h = this.$createElement;
        var rootNode = findTopNode(this);
        var defaultNode = h(CheckboxGroup, {
          "attrs": {
            "value": this.checkedValue
          },
          "on": {
            "change": this.handleCheckedChange
          }
        }, [this.curPageData.map(function (item, index) {
          return h(Checkbox, {
            "attrs": {
              "disabled": _this3.disabled || item.disabled,
              "value": item.value
            },
            "class": ["".concat(_this3.componentName, "__list-item")],
            "key": item.key,
            "directives": [{
              name: "ripple",
              value: _this3.keepAnimation.ripple
            }],
            "props": _objectSpread$N({}, _this3.checkboxProps)
          }, [renderTNodeJSXDefault(_this3, "transferItem", {
            defaultNode: h("span", [item.label]),
            params: {
              data: item.data,
              index: index,
              type: _this3.listType
            }
          })]);
        })]);
        return h("div", {
          "class": "".concat(this.componentName, "__list-content narrow-scrollbar"),
          "on": {
            "scroll": this.scroll
          }
        }, [renderTNodeJSXDefault(rootNode, "tree", {
          defaultNode: defaultNode,
          params: {
            data: this.curPageData,
            value: this.checkedValue,
            onChange: this.handleCheckedChange
          }
        })]);
      },
      renderEmpty: function renderEmpty() {
        var h = this.$createElement;
        var empty = this.empty || this.t(this.global.empty);
        var defaultNode = typeof empty === "string" ? h("span", [empty]) : null;
        return h("div", {
          "class": "".concat(this.componentName, "__empty")
        }, [renderTNodeJSXDefault(this, "empty", {
          defaultNode: defaultNode,
          params: {
            type: this.listType
          }
        })]);
      },
      renderFooter: function renderFooter() {
        var h = this.$createElement;
        var defaultNode = typeof this.footer === "string" ? h("div", {
          "class": "".concat(this.componentName, "__footer")
        }, [this.footer]) : null;
        return renderTNodeJSXDefault(this, "footer", {
          defaultNode: defaultNode,
          params: {
            type: this.listType
          }
        });
      }
    },
    render: function render() {
      var _this4 = this;

      var h = arguments[0];
      return h("div", {
        "class": "".concat(this.componentName, "__list ").concat(this.componentName, "__list-").concat(this.listType)
      }, [h("div", {
        "class": "".concat(this.componentName, "__list-header")
      }, [h("div", [this.checkAll && h(Checkbox, {
        "attrs": {
          "disabled": this.disabled || !this.dataSource.length,
          "checked": this.isAllChecked,
          "indeterminate": this.indeterminate
        },
        "on": {
          "change": this.handleCheckedAllChange
        }
      }), h("span", [this.t(this.global.title, {
        checked: this.checkedValue.length,
        total: this.totalCount
      })])]), this.renderTitle()]), h("div", {
        "class": ["".concat(this.componentName, "__list-body"), this.search ? "".concat(this.componentName, "__list--with-search") : ""]
      }, [this.search && h("search", {
        "attrs": {
          "searchValue": this.filterValue,
          "placeholder": this.t(this.global.placeholder),
          "disabled": this.disabled,
          "search": this.search,
          "classPrefix": this.classPrefix
        },
        "on": {
          "change": function change(e) {
            return _this4.filterValue = e;
          },
          "search": this.handleSearch
        }
      }), this.curPageData.length > 0 ? this.renderContent() : this.renderEmpty()]), this.pagination && this.pageSize > 0 && this.pageTotal > 0 && h("div", {
        "class": "".concat(this.componentName, "__list-pagination")
      }, [h(Pagination, helper([{}, {
        "props": this.paginationProps
      }, {
        "on": {
          "change": this.handlePaginationChange
        }
      }]))]), this.renderFooter()]);
    }
  });

  var classPrefixMixins$e = getClassPrefixMixins("transfer");
  var TransferOperations = mixins(classPrefixMixins$e, getGlobalIconMixins()).extend({
    name: "TTransferOperations",
    props: {
      leftDisabled: {
        type: Boolean,
        required: true
      },
      rightDisabled: {
        type: Boolean,
        required: true
      },
      operation: {
        type: [String, Array, Function, Boolean]
      }
    },
    methods: {
      moveToRight: function moveToRight() {
        this.$emit("moveToRight");
      },
      moveToLeft: function moveToLeft() {
        this.$emit("moveToLeft");
      },
      getIconRight: function getIconRight() {
        var h = this.$createElement;

        var _this$useGlobalIcon = this.useGlobalIcon({
          ChevronRightIcon: ChevronRight
        }),
            ChevronRightIcon = _this$useGlobalIcon.ChevronRightIcon;

        return h(ChevronRightIcon);
      },
      getIconLeft: function getIconLeft() {
        var h = this.$createElement;

        var _this$useGlobalIcon2 = this.useGlobalIcon({
          ChevronLeftIcon: ChevronLeft
        }),
            ChevronLeftIcon = _this$useGlobalIcon2.ChevronLeftIcon;

        return h(ChevronLeftIcon);
      },
      getIcon: function getIcon(direction) {
        if (typeof this.operation === "function") {
          return null;
        }

        if (direction === "right" && this.operation && typeof this.operation[0] === "function") {
          return null;
        }

        if (direction === "left" && this.operation && typeof this.operation[1] === "function") {
          return null;
        }

        if (this.$scopedSlots.operation) {
          return null;
        }

        return direction === "left" ? this.getIconLeft : this.getIconRight;
      },
      _renderButton: function _renderButton(h, direction) {
        if (typeof this.$scopedSlots.operation === "function") {
          return this.$scopedSlots.operation({
            direction: direction
          });
        }

        if (typeof this.operation === "function") {
          var renderContent2 = this.operation;
          return renderContent2(h, {
            direction: direction
          });
        }

        var renderContent;

        if (Array.isArray(this.operation)) {
          var _this$operation = _slicedToArray(this.operation, 2),
              left = _this$operation[0],
              right = _this$operation[1];

          renderContent = direction === "right" ? right : left;
        } else {
          renderContent = "";
        }

        return renderContent;
      }
    },
    render: function render(h) {
      var _this$$props = this.$props,
          leftDisabled = _this$$props.leftDisabled,
          rightDisabled = _this$$props.rightDisabled;
      return h("div", {
        "class": "".concat(this.componentName, "__operations")
      }, [h(Button, {
        "attrs": {
          "variant": "outline",
          "disabled": rightDisabled,
          "icon": this.getIcon("right")
        },
        "key": rightDisabled ? "right-outline" : "right-base",
        "on": {
          "click": this.moveToRight
        }
      }, [this._renderButton(h, "right")]), h(Button, {
        "attrs": {
          "variant": "outline",
          "disabled": leftDisabled,
          "icon": this.getIcon("left")
        },
        "key": leftDisabled ? "left-outline" : "left-base",
        "on": {
          "click": this.moveToLeft
        }
      }, [this._renderButton(h, "left")])]);
    }
  });

  var props$n = {
    checkboxProps: {
      type: Object
    },
    checked: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    defaultChecked: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    direction: {
      type: String,
      "default": "both",
      validator: function validator(val) {
        return ["left", "right", "both"].includes(val);
      }
    },
    disabled: {
      type: [Boolean, Array],
      "default": false
    },
    empty: {
      type: [String, Array, Function],
      "default": ""
    },
    footer: {
      type: [Array, Function]
    },
    keys: {
      type: Object
    },
    operation: {
      type: [Array, Function]
    },
    pagination: {
      type: [Object, Array]
    },
    search: {
      type: [Boolean, Object, Array],
      "default": false
    },
    showCheckAll: {
      type: [Boolean, Array],
      "default": true
    },
    targetSort: {
      type: String,
      "default": "original",
      validator: function validator(val) {
        return ["original", "push", "unshift"].includes(val);
      }
    },
    title: {
      type: [Array, Function],
      "default": function _default() {
        return [];
      }
    },
    transferItem: {
      type: Function
    },
    value: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    onChange: Function,
    onCheckedChange: Function,
    onPageChange: Function,
    onScroll: Function,
    onSearch: Function
  };

  var SOURCE = "source";
  var TARGET = "target";
  var _Transfer = mixins(getConfigReceiverMixins("transfer")).extend({
    name: TRANSFER_NAME,
    components: {
      TransferList: TransferList,
      TransferOperations: TransferOperations
    },
    model: {
      prop: "value",
      event: "change"
    },
    props: props$n,
    data: function data() {
      return {
        SOURCE: SOURCE,
        TARGET: TARGET,
        formDisabled: void 0
      };
    },
    computed: {
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      isTreeMode: function isTreeMode() {
        var treeSlot = this.$scopedSlots.tree;
        return typeof treeSlot === "function";
      },
      leftButtonDisabled: function leftButtonDisabled() {
        return this.direction === "right";
      },
      rightButtonDisabled: function rightButtonDisabled() {
        return this.direction === "left";
      },
      transferData: function transferData() {
        return getTransferData(this.data, this.keys, this.isTreeMode);
      },
      sourceList: function sourceList() {
        return filterTransferData(this.transferData, this.value, false, this.isTreeMode);
      },
      targetList: function targetList() {
        return filterTransferData(this.transferData, this.value, true, this.isTreeMode);
      },
      checkedValue: function checkedValue() {
        var _ref;

        return _ref = {}, _defineProperty$3(_ref, SOURCE, getDataValues(this.sourceList, this.checked, {
          isTreeMode: this.isTreeMode
        })), _defineProperty$3(_ref, TARGET, getDataValues(this.targetList, this.checked, {
          isTreeMode: this.isTreeMode
        })), _ref;
      },
      hasFooter: function hasFooter() {
        return !!this.$scopedSlots.footer || !!this.footer;
      },
      showPagination: function showPagination() {
        return !!this.pagination && !this.$scopedSlots.content;
      },
      showSearch: function showSearch() {
        return !!this.search;
      },
      footerOption: function footerOption() {
        var footer = this.footer || "";
        return getTransferListOption(footer);
      },
      emptyOption: function emptyOption() {
        return getTransferListOption(this.empty);
      },
      searchOption: function searchOption() {
        return getTransferListOption(this.search);
      },
      checkAllOption: function checkAllOption() {
        return getTransferListOption(this.showCheckAll);
      },
      disabledOption: function disabledOption() {
        return getTransferListOption(this.tDisabled);
      },
      titleOption: function titleOption() {
        return getTransferListOption(this.title);
      },
      paginationOption: function paginationOption() {
        return getTransferListOption(this.pagination);
      }
    },
    methods: {
      transferTo: function transferTo(toDirection) {
        var oldTargetValue = JSON.parse(JSON.stringify(this.value));
        var newTargetValue;
        var checkedValue = toDirection === TARGET ? this.checkedValue[SOURCE] : this.checkedValue[TARGET];

        if (toDirection === SOURCE) {
          newTargetValue = oldTargetValue.filter(function (v) {
            return !checkedValue.includes(v);
          });
        } else if (this.targetSort === "original") {
          newTargetValue = getDataValues(this.transferData, oldTargetValue.concat(checkedValue), {
            isTreeMode: this.isTreeMode
          });
        } else if (this.targetSort === "unshift") {
          newTargetValue = checkedValue.concat(oldTargetValue);
        } else {
          newTargetValue = oldTargetValue.concat(checkedValue);
        }

        this.handleCheckedChange([], toDirection === SOURCE ? TARGET : SOURCE);
        var params = {
          type: toDirection,
          movedValue: checkedValue
        };
        emitEvent(this, "change", newTargetValue, params);
      },
      transferToRight: function transferToRight() {
        this.transferTo(TARGET);
      },
      transferToLeft: function transferToLeft() {
        this.transferTo(SOURCE);
      },
      handleCheckedChange: function handleCheckedChange(val, listType) {
        var sourceChecked = listType === SOURCE ? val : this.checkedValue[SOURCE];
        var targetChecked = listType === TARGET ? val : this.checkedValue[TARGET];
        var checked = [].concat(_toConsumableArray(sourceChecked), _toConsumableArray(targetChecked));
        var event = {
          checked: checked,
          sourceChecked: sourceChecked,
          targetChecked: targetChecked,
          type: listType
        };
        this.$emit("update:checked", checked);
        emitEvent(this, "checked-change", event);
      },
      filterMethod: function filterMethod(transferList, targetValueList, needMatch) {
        return transferList.filter(function (item) {
          var isMatch = targetValueList.indexOf(item.value) > -1;
          return needMatch ? isMatch : !isMatch;
        });
      },
      handleScroll: function handleScroll(e, listType) {
        var target = e.target;
        var bottomDistance = target.scrollHeight - target.scrollTop - target.clientHeight;
        var event = {
          e: e,
          bottomDistance: bottomDistance,
          type: listType
        };
        emitEvent(this, "scroll", event);
      },
      handleSearch: function handleSearch(e) {
        emitEvent(this, "search", e);
      },
      handlePageChange: function handlePageChange(pageInfo, listType) {
        emitEvent(this, "page-change", pageInfo, {
          type: listType
        });
      },
      renderTransferList: function renderTransferList(listType) {
        var _this = this;

        var h = this.$createElement;
        var scopedSlots = pick_1(this.$scopedSlots, ["title", "empty", "footer", "operation", "transferItem", "default"]);
        return h("transfer-list", {
          "attrs": {
            "checkboxProps": this.checkboxProps,
            "transferItem": this.transferItem,
            "list-type": listType,
            "title": this.titleOption[listType],
            "data-source": listType === SOURCE ? this.sourceList : this.targetList,
            "checked-value": this.checkedValue[listType],
            "disabled": this.disabledOption[listType],
            "search": this.searchOption[listType],
            "pagination": this.paginationOption[listType],
            "check-all": this.checkAllOption[listType],
            "footer": this.footerOption[listType],
            "empty": this.emptyOption[listType],
            "t": this.t,
            "global": this.global,
            "isTreeMode": this.isTreeMode
          },
          "on": {
            "checkedChange": function checkedChange(val) {
              return _this.handleCheckedChange(val, listType);
            },
            "scroll": function scroll($event) {
              return _this.handleScroll($event, listType);
            },
            "search": this.handleSearch,
            "pageChange": function pageChange(pageInfo) {
              return _this.handlePageChange(pageInfo, listType);
            }
          },
          "scopedSlots": scopedSlots
        });
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "class": [this.componentName, this.showSearch ? "".concat(this.componentName, "__search") : "", this.hasFooter ? "".concat(this.componentName, "__footer") : "", this.showPagination ? "".concat(this.componentName, "__pagination") : "", this.isTreeMode ? "".concat(this.componentName, "--with-tree") : ""]
      }, [this.renderTransferList(SOURCE), h("transfer-operations", {
        "attrs": {
          "left-disabled": this.disabledOption[TARGET] || this.leftButtonDisabled || this.checkedValue[TARGET].length === 0,
          "right-disabled": this.disabledOption[SOURCE] || this.rightButtonDisabled || this.checkedValue[SOURCE].length === 0,
          "operation": this.operation
        },
        "on": {
          "moveToRight": this.transferToRight,
          "moveToLeft": this.transferToLeft
        },
        "scopedSlots": {
          operation: this.$scopedSlots.operation
        }
      }), this.renderTransferList(TARGET)]);
    }
  });

  var Transfer = withInstall(mapProps([{
    name: "value"
  }, {
    name: "checked",
    event: "update:checked"
  }], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_Transfer));

  function ownKeys$N(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$M(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$N(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$N(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs_min.extend(customParseFormat);
  var _TimePicker = VueCompositionAPI.defineComponent({
    name: "TTimePicker",
    props: _objectSpread$M({}, props$v),
    setup: function setup(props2, ctx) {
      var _useConfig = useConfig("classPrefix"),
          classPrefix = _useConfig.classPrefix;

      var componentName = usePrefixClass("time-picker");

      var _useGlobalIcon = useGlobalIcon({
        TimeIcon: Time
      }),
          TimeIcon = _useGlobalIcon.TimeIcon;

      var currentValue = VueCompositionAPI.ref("");
      var isShowPanel = VueCompositionAPI.ref(false);

      var _useConfig2 = useConfig("timePicker"),
          global = _useConfig2.global;

      var _toRefs = VueCompositionAPI.toRefs(props2),
          value = _toRefs.value;

      var _useVModel = useVModel(value, props2.defaultValue, props2.onChange, "change"),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerValue = _useVModel2[0],
          setInnerValue = _useVModel2[1];

      var inputClasses = VueCompositionAPI.computed(function () {
        return ["".concat(componentName.value, "__group"), _defineProperty$3({}, "".concat(classPrefix.value, "-is-focused"), isShowPanel.value)];
      });

      var handleShowPopup = function handleShowPopup(visible, context) {
        isShowPanel.value = visible;

        if (visible) {
          var _props2$onOpen;

          (_props2$onOpen = props2.onOpen) === null || _props2$onOpen === void 0 ? void 0 : _props2$onOpen.call(props2, context);
          ctx.emit("open", context);
        } else {
          var _props2$onClose;

          (_props2$onClose = props2.onClose) === null || _props2$onClose === void 0 ? void 0 : _props2$onClose.call(props2, context);
          ctx.emit("close", context);
        }
      };

      var handleClear = function handleClear(context) {
        var e = context.e;
        e.stopPropagation();
        currentValue.value = null;
        setInnerValue(null);
      };

      var handleInputChange = function handleInputChange(value2) {
        currentValue.value = value2;
      };

      var handleInputBlur = function handleInputBlur(value2, _ref2) {
        var _props2$onBlur;

        var e = _ref2.e;

        if (props2.allowInput) {
          var isValidTime = validateInputValue(currentValue.value, props2.format);

          if (isValidTime) {
            setInnerValue(formatInputValue(currentValue.value, props2.format));
          }
        }

        (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 ? void 0 : _props2$onBlur.call(props2, {
          value: value2,
          e: e
        });
        ctx.emit("blur", {
          value: value2,
          e: e
        });
      };

      var handleClickConfirm = function handleClickConfirm() {
        var isValidTime = validateInputValue(currentValue.value, props2.format);
        if (isValidTime) setInnerValue(currentValue.value);
        isShowPanel.value = false;
      };

      var handlePanelChange = function handlePanelChange(v) {
        currentValue.value = v;
      };

      var handleOnFocus = function handleOnFocus(context) {
        var _props2$onFocus;

        (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 ? void 0 : _props2$onFocus.call(props2, context);
        ctx.emit("focus", context);
      };

      VueCompositionAPI.watch(function () {
        return isShowPanel.value;
      }, function () {
        var _innerValue$value;

        currentValue.value = isShowPanel.value ? (_innerValue$value = innerValue.value) !== null && _innerValue$value !== void 0 ? _innerValue$value : "" : "";
      });
      return {
        handleClickConfirm: handleClickConfirm,
        handlePanelChange: handlePanelChange,
        handleInputBlur: handleInputBlur,
        handleInputChange: handleInputChange,
        handleClear: handleClear,
        handleShowPopup: handleShowPopup,
        handleOnFocus: handleOnFocus,
        inputClasses: inputClasses,
        componentName: componentName,
        innerValue: innerValue,
        isShowPanel: isShowPanel,
        global: global,
        currentValue: currentValue,
        TimeIcon: TimeIcon
      };
    },
    render: function render() {
      var _this$innerValue,
          _this$innerValue2,
          _this = this;

      var h = arguments[0];
      var TimeIcon = this.TimeIcon;
      return h("div", {
        "class": this.componentName
      }, [h(SelectInput, {
        "props": _objectSpread$M({}, {
          onFocus: this.handleOnFocus,
          onClear: this.handleClear,
          onBlur: this.handleInputBlur,
          onInputChange: this.handleInputChange,
          disabled: this.disabled,
          clearable: this.clearable,
          allowInput: this.allowInput,
          "class": this.inputClasses,
          suffixIcon: function suffixIcon() {
            return h(TimeIcon);
          },
          popupVisible: this.isShowPanel,
          placeholder: !this.innerValue ? this.placeholder || this.global.placeholder : void 0,
          value: this.isShowPanel ? this.currentValue : (_this$innerValue = this.innerValue) !== null && _this$innerValue !== void 0 ? _this$innerValue : void 0,
          inputValue: this.isShowPanel ? this.currentValue : (_this$innerValue2 = this.innerValue) !== null && _this$innerValue2 !== void 0 ? _this$innerValue2 : void 0,
          inputProps: this.inputProps,
          panel: function panel() {
            return h(_TimePickerPanel, {
              "props": _objectSpread$M({}, {
                steps: _this.steps,
                format: _this.format,
                value: _this.currentValue,
                isFooterDisplay: true,
                isShowPanel: _this.isShowPanel,
                disableTime: _this.disableTime,
                onChange: _this.handlePanelChange,
                hideDisabledTime: _this.hideDisabledTime,
                handleConfirmClick: _this.handleClickConfirm
              })
            });
          },
          popupProps: _objectSpread$M({
            overlayInnerStyle: {
              width: "auto"
            },
            onVisibleChange: this.handleShowPopup
          }, this.popupProps)
        })
      })]);
    }
  });

  var props$m = {
    allowInput: Boolean,
    clearable: Boolean,
    disabled: {
      type: [Boolean, Array],
      "default": false
    },
    disableTime: {
      type: Function
    },
    format: {
      type: String,
      "default": "HH:mm:ss"
    },
    hideDisabledTime: {
      type: Boolean,
      "default": true
    },
    placeholder: {
      type: [String, Array],
      "default": void 0
    },
    popupProps: {
      type: Object
    },
    rangeInputProps: {
      type: Object
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    steps: {
      type: Array,
      "default": function _default() {
        return [1, 1, 1];
      }
    },
    value: {
      type: Array
    },
    defaultValue: {
      type: Array
    },
    onBlur: Function,
    onChange: Function,
    onFocus: Function,
    onInput: Function
  };

  function ownKeys$M(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$L(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$M(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$M(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs_min.extend(customParseFormat);
  var _TimeRangePicker = VueCompositionAPI.defineComponent({
    name: "TTimeRangePicker",
    props: _objectSpread$L(_objectSpread$L({}, props$m), {}, {
      rangeInputProps: Object,
      popupProps: Object
    }),
    setup: function setup(props2) {
      var componentName = usePrefixClass("time-range-picker");

      var _useConfig = useConfig("timePicker"),
          global = _useConfig.global;

      var _useConfig2 = useConfig("classPrefix"),
          classPrefix = _useConfig2.classPrefix;

      var _useGlobalIcon = useGlobalIcon({
        TimeIcon: Time
      }),
          TimeIcon = _useGlobalIcon.TimeIcon;

      var currentPanelIdx = VueCompositionAPI.ref(void 0);
      var currentValue = VueCompositionAPI.ref(TIME_PICKER_EMPTY);
      var isShowPanel = VueCompositionAPI.ref(false);
      var inputClasses = VueCompositionAPI.computed(function () {
        return ["".concat(componentName.value, "__group"), _defineProperty$3({}, "".concat(classPrefix.value, "-is-focused"), isShowPanel.value)];
      });

      var _toRefs = VueCompositionAPI.toRefs(props2),
          value = _toRefs.value,
          format = _toRefs.format;

      var _useVModel = useVModel(value, props2.defaultValue, props2.onChange, "change"),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          innerValue = _useVModel2[0],
          setInnerValue = _useVModel2[1];

      var handleShowPopup = function handleShowPopup(visible, context) {
        if (context.trigger === "trigger-element-click") {
          isShowPanel.value = true;
          return;
        }

        isShowPanel.value = visible;
      };

      var handleClear = function handleClear(context) {
        var e = context.e;
        e.stopPropagation();
        currentValue.value = TIME_PICKER_EMPTY;
        setInnerValue(null);
      };

      var handleClick = function handleClick(_ref2) {
        var position = _ref2.position;
        currentPanelIdx.value = position === "first" ? 0 : 1;
      };

      var handleTimeChange = function handleTimeChange(newValue) {
        if (currentPanelIdx.value === 0) {
          var _currentValue$value$;

          currentValue.value = [newValue, (_currentValue$value$ = currentValue.value[1]) !== null && _currentValue$value$ !== void 0 ? _currentValue$value$ : newValue];
        } else {
          var _currentValue$value$2;

          currentValue.value = [(_currentValue$value$2 = currentValue.value[0]) !== null && _currentValue$value$2 !== void 0 ? _currentValue$value$2 : newValue, newValue];
        }
      };

      var handleInputBlur = function handleInputBlur(value2, _ref3) {
        var _props2$onBlur;

        var e = _ref3.e;

        if (props2.allowInput) {
          var isValidTime = validateInputValue(currentValue.value[currentPanelIdx.value], format.value);

          if (isValidTime) {
            var _currentValue$value$3, _currentValue$value$4;

            var formattedVal = formatInputValue(currentValue.value[currentPanelIdx.value], format.value);
            currentPanelIdx.value === 0 ? currentValue.value = [formattedVal, (_currentValue$value$3 = currentValue.value[1]) !== null && _currentValue$value$3 !== void 0 ? _currentValue$value$3 : formattedVal] : currentValue.value = [(_currentValue$value$4 = currentValue.value[0]) !== null && _currentValue$value$4 !== void 0 ? _currentValue$value$4 : formattedVal, formattedVal];
          }
        }

        (_props2$onBlur = props2.onBlur) === null || _props2$onBlur === void 0 ? void 0 : _props2$onBlur.call(props2, {
          value: value2,
          e: e
        });
      };

      var handleInputChange = function handleInputChange(inputVal, _ref4) {
        var _props2$onInput;

        var e = _ref4.e,
            position = _ref4.position;
        currentValue.value = inputVal;
        (_props2$onInput = props2.onInput) === null || _props2$onInput === void 0 ? void 0 : _props2$onInput.call(props2, {
          value: innerValue.value,
          e: e,
          position: position === "first" ? "start" : "end"
        });
      };

      var handleClickConfirm = function handleClickConfirm() {
        var isValidTime = !currentValue.value.find(function (v) {
          return !validateInputValue(v, format.value);
        });
        if (isValidTime) setInnerValue(currentValue.value);
        isShowPanel.value = false;
      };

      var handleFocus = function handleFocus(value2, _ref5) {
        var _props2$onFocus;

        var e = _ref5.e,
            position = _ref5.position;
        (_props2$onFocus = props2.onFocus) === null || _props2$onFocus === void 0 ? void 0 : _props2$onFocus.call(props2, {
          value: value2,
          e: e,
          position: position === "first" ? "start" : "end"
        });
      };

      VueCompositionAPI.watch(function () {
        return isShowPanel.value;
      }, function () {
        var _innerValue$value;

        currentValue.value = isShowPanel.value ? (_innerValue$value = innerValue.value) !== null && _innerValue$value !== void 0 ? _innerValue$value : TIME_PICKER_EMPTY : TIME_PICKER_EMPTY;
        if (!isShowPanel.value) currentPanelIdx.value = void 0;
      });
      return {
        global: global,
        componentName: componentName,
        currentValue: currentValue,
        currentPanelIdx: currentPanelIdx,
        inputClasses: inputClasses,
        innerValue: innerValue,
        isShowPanel: isShowPanel,
        handleInputChange: handleInputChange,
        handleShowPopup: handleShowPopup,
        handleClear: handleClear,
        handleFocus: handleFocus,
        handleClickConfirm: handleClickConfirm,
        handleClick: handleClick,
        handleInputBlur: handleInputBlur,
        handleTimeChange: handleTimeChange,
        TimeIcon: TimeIcon
      };
    },
    render: function render() {
      var _this$innerValue,
          _this = this;

      var h = arguments[0];
      var TimeIcon = this.TimeIcon;
      return h("div", {
        "class": this.componentName
      }, [h(RangeInputPopup, {
        "props": _objectSpread$L({}, {
          onInputChange: this.handleInputChange,
          disabled: this.disabled,
          popupVisible: this.isShowPanel,
          inputValue: this.isShowPanel ? this.currentValue : (_this$innerValue = this.innerValue) !== null && _this$innerValue !== void 0 ? _this$innerValue : TIME_PICKER_EMPTY,
          popupProps: _objectSpread$L({
            overlayInnerStyle: {
              width: "auto"
            },
            onVisibleChange: this.handleShowPopup
          }, this.popupProps),
          rangeInputProps: _objectSpread$L({
            size: this.size,
            clearable: this.clearable,
            "class": this.inputClasses,
            placeholder: this.placeholder || [this.global.placeholder, this.global.placeholder],
            suffixIcon: function suffixIcon() {
              return h(TimeIcon);
            },
            onClear: this.handleClear,
            onClick: this.handleClick,
            onFocus: this.handleFocus,
            onBlur: this.handleInputBlur,
            readonly: !this.allowInput,
            activeIndex: this.currentPanelIdx
          }, this.rangeInputProps),
          panel: function panel() {
            return h(_TimePickerPanel, {
              "props": _objectSpread$L({}, {
                steps: _this.steps,
                format: _this.format,
                isShowPanel: _this.isShowPanel,
                disableTime: _this.disableTime,
                hideDisabledTime: _this.hideDisabledTime,
                isFooterDisplay: true,
                value: _this.currentValue[_this.currentPanelIdx || 0],
                onChange: _this.handleTimeChange,
                handleConfirmClick: _this.handleClickConfirm,
                position: _this.currentPanelIdx === 0 ? "start" : "end"
              })
            });
          }
        })
      })]);
    }
  });

  var KeyboardDirection = /* @__PURE__ */function (KeyboardDirection2) {
    KeyboardDirection2[KeyboardDirection2["left"] = 37] = "left";
    KeyboardDirection2[KeyboardDirection2["up"] = 38] = "up";
    KeyboardDirection2[KeyboardDirection2["right"] = 39] = "right";
    KeyboardDirection2[KeyboardDirection2["down"] = 40] = "down";
    return KeyboardDirection2;
  }(KeyboardDirection || {});
  var EPickerCols = /* @__PURE__ */function (EPickerCols2) {
    EPickerCols2["hour"] = "hour";
    EPickerCols2["minute"] = "minute";
    EPickerCols2["second"] = "second";
    EPickerCols2["meridiem"] = "meridiem";
    return EPickerCols2;
  }(EPickerCols || {});

  var TimePicker = withInstall(_TimePicker, VueCompositionAPI__default["default"]);
  var TimeRangePicker = withInstall(_TimeRangePicker, VueCompositionAPI__default["default"]);
  var TimePickerPanel = withInstall(_TimePickerPanel, VueCompositionAPI__default["default"]);

  /** `Object#toString` result references. */

  var boolTag = '[object Boolean]';
  /**
   * Checks if `value` is classified as a boolean primitive or object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
   * @example
   *
   * _.isBoolean(false);
   * // => true
   *
   * _.isBoolean(null);
   * // => false
   */

  function isBoolean(value) {
    return value === true || value === false || isObjectLike_1(value) && _baseGetTag(value) == boolTag;
  }

  var isBoolean_1 = isBoolean;

  function ownKeys$L(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$K(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$L(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$L(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function getParentsToRoot(element, root) {
    var list = [];
    var el = element;

    while (el && el.parentNode) {
      list.push(el);

      if (el === root) {
        break;
      }

      el = el.parentNode;
    }

    return list;
  }
  function getParentMarks(name, element, root) {
    var list = getParentsToRoot(element, root);
    return list.map(function (el) {
      var mark = {
        name: name,
        value: (el === null || el === void 0 ? void 0 : el.getAttribute(name)) || "",
        el: el
      };
      return mark;
    }).filter(function (mark) {
      return mark.value;
    });
  }
  function getMark(name, element, root) {
    var list = getParentMarks(name, element, root);
    var info = list.pop() || null;
    return info;
  }
  function getTNode(prop, options) {
    var tnode = null;
    var item = null;

    var conf = _objectSpread$K({}, options);

    if (typeof prop === "function") {
      var _conf$node;

      item = prop(conf.createElement, (_conf$node = conf.node) === null || _conf$node === void 0 ? void 0 : _conf$node.getModel());
    } else if (typeof prop === "string") {
      item = prop;
    }

    if (typeof item === "string") {
      tnode = item;
    } else if (item) {
      tnode = item;
    }

    return tnode;
  }
  function isTreeNodeValue(item) {
    return typeof item === "string" || typeof item === "number";
  }
  function getNode(store, item) {
    var node = null;
    var val = null;

    if (typeof item === "string" || typeof item === "number") {
      val = item;
    } else if (item && isTreeNodeValue(item.value)) {
      val = item.value;
    }

    node = store.getNode(val);
    return node;
  }

  function ownKeys$K(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$J(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$K(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$K(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var keepAnimationMixins = getKeepAnimationMixins();
  var TreeItemProps = {
    nested: {
      type: Boolean,
      "default": false
    },
    node: {
      type: Object
    },
    treeScope: {
      type: Object
    },
    proxyScope: {
      type: Object
    },
    expandOnClickNode: {
      type: Boolean
    }
  };
  var TreeItem = mixins(getConfigReceiverMixins("tree"), keepAnimationMixins, getGlobalIconMixins()).extend({
    name: "TTreeItem",
    props: TreeItemProps,
    directives: {
      ripple: Ripple
    },
    data: function data() {
      return {
        data: null,
        $clicked: false,
        $nodesMap: null
      };
    },
    methods: {
      getStyles: function getStyles() {
        var _this$node = this.node,
            level = _this$node.level,
            visible = _this$node.visible;
        var levelStyle = "--level: ".concat(level, ";");
        var hiddenStyle = "display:none;";
        if (visible) return levelStyle;
        return "".concat(hiddenStyle, " ").concat(levelStyle);
      },
      getClassList: function getClassList() {
        var _list$push;

        var node = this.node,
            nested = this.nested;
        var list = [];
        list.push("".concat(this.componentName, "__item"));
        list.push((_list$push = {}, _defineProperty$3(_list$push, "".concat(this.componentName, "__item--open"), node.expanded), _defineProperty$3(_list$push, "".concat(this.classPrefix, "-is-active"), node.isActivable() ? node.actived : false), _defineProperty$3(_list$push, "".concat(this.classPrefix, "-is-disabled"), node.isDisabled()), _list$push));

        if (!nested) {
          if (node.visible) {
            list.push("".concat(this.componentName, "__item--visible"));
          } else {
            list.push("".concat(this.componentName, "__item--hidden"));
          }
        }

        return list;
      },
      renderLine: function renderLine(createElement) {
        var h = this.$createElement;
        var node = this.node,
            treeScope = this.treeScope,
            proxyScope = this.proxyScope;
        var line = treeScope.line;
        var scopedSlots = proxyScope.scopedSlots;
        var iconVisible = !!treeScope.icon;
        var lineNode = null;

        if (line === true) {
          if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.line) {
            lineNode = scopedSlots.line({
              node: node === null || node === void 0 ? void 0 : node.getModel()
            });
          } else if (node.parent && node.tree) {
            var vmIsLeaf = node.vmIsLeaf,
                vmIsFirst = node.vmIsFirst,
                level = node.level;
            var lineClasses = [];
            lineClasses.push("".concat(this.componentName, "__line"));

            if (vmIsLeaf || !iconVisible) {
              lineClasses.push("".concat(this.componentName, "__line--leaf"));
            }

            if (vmIsFirst && iconVisible) {
              lineClasses.push("".concat(this.componentName, "__line--first"));
            }

            var shadowStyles = [];
            var parents = node.getParents();
            parents.pop();
            parents.forEach(function (pnode, index) {
              if (!pnode.vmIsLast) {
                shadowStyles.push("calc(-".concat(index + 1, " * var(--space)) 0 var(--color)"));
              }
            });
            var styles = {
              "--level": level ? String(level) : void 0,
              "box-shadow": shadowStyles.join(",")
            };
            lineNode = h("span", {
              "class": lineClasses,
              "style": styles
            });
          }
        } else {
          lineNode = getTNode(line, {
            createElement: createElement,
            node: node
          });
        }

        return lineNode;
      },
      getFolderIcon: function getFolderIcon() {
        var h = this.$createElement;

        if (isFunction_1(this.global.folderIcon)) {
          return this.global.folderIcon(this.$createElement);
        }

        var _this$useGlobalIcon = this.useGlobalIcon({
          CaretRightSmallIcon: CaretRightSmall
        }),
            CaretRightSmallIcon = _this$useGlobalIcon.CaretRightSmallIcon;

        return h(CaretRightSmallIcon);
      },
      renderIcon: function renderIcon(createElement) {
        var h = this.$createElement;
        var node = this.node,
            treeScope = this.treeScope,
            proxyScope = this.proxyScope;
        var icon = treeScope.icon;
        var scopedSlots = proxyScope.scopedSlots;
        var isDefaultIcon = false;
        var iconNode = null;

        if (icon === true) {
          if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.icon) {
            iconNode = scopedSlots.icon({
              node: node === null || node === void 0 ? void 0 : node.getModel()
            });
          } else if (!node.vmIsLeaf) {
            isDefaultIcon = true;
            iconNode = this.getFolderIcon();

            if (node.loading && node.expanded) {
              iconNode = h(Loading);
            }
          } else {
            iconNode = "";
          }
        } else {
          iconNode = getTNode(icon, {
            createElement: createElement,
            node: node
          });
        }

        iconNode = h("span", {
          "class": ["".concat(this.componentName, "__icon"), "".concat(this.classPrefix, "-folder-icon"), isDefaultIcon ? "".concat(this.componentName, "__icon--default") : ""],
          "attrs": {
            "trigger": "expand",
            "ignore": "active"
          }
        }, [iconNode]);
        return iconNode;
      },
      renderLabel: function renderLabel(createElement) {
        var h = this.$createElement;
        var node = this.node,
            treeScope = this.treeScope,
            proxyScope = this.proxyScope,
            expandOnClickNode = this.expandOnClickNode;
        var label = treeScope.label,
            disableCheck = treeScope.disableCheck;
        var scopedSlots = proxyScope.scopedSlots;
        var checkProps = treeScope.checkProps || {};
        var labelNode = null;

        if (label === true) {
          if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.label) {
            labelNode = scopedSlots.label({
              node: node === null || node === void 0 ? void 0 : node.getModel()
            });
          } else {
            labelNode = node.label || "";
          }
        } else {
          labelNode = getTNode(label, {
            createElement: createElement,
            node: node
          });
        }

        var labelClasses = ["".concat(this.componentName, "__label"), _defineProperty$3({}, "".concat(this.classPrefix, "-is-active"), node.isActivable() ? node.actived : false)];

        if (node.vmCheckable) {
          var _node$children;

          var checkboxDisabled = false;

          if (typeof disableCheck === "function") {
            checkboxDisabled = disableCheck(node);
          } else {
            checkboxDisabled = !!disableCheck;
          }

          if (node.isDisabled()) {
            checkboxDisabled = true;
          }

          var itemCheckProps = _objectSpread$J(_objectSpread$J({}, checkProps), {}, {
            disabled: checkboxDisabled
          });

          labelNode = h(Checkbox, {
            "directives": [{
              name: "ripple",
              value: this.keepAnimation.ripple
            }],
            "class": labelClasses,
            "attrs": {
              "checked": node.checked,
              "indeterminate": node.indeterminate,
              "disabled": node.isDisabled(),
              "name": String(node.value),
              "stopLabelTrigger": expandOnClickNode && ((_node$children = node.children) === null || _node$children === void 0 ? void 0 : _node$children.length) > 0,
              "ignore": "expand,active"
            },
            "on": {
              "change": this.handleChange
            },
            "props": _objectSpread$J({}, itemCheckProps)
          }, [labelNode]);
        } else {
          var inner = h("span", {
            "style": "position: relative"
          }, [labelNode]);
          labelNode = node.isActivable() ? h("span", {
            "key": "1",
            "directives": [{
              name: "ripple",
              value: this.keepAnimation.ripple
            }],
            "class": labelClasses
          }, [inner]) : h("span", {
            "key": "2",
            "class": labelClasses
          }, [inner]);
        }

        return labelNode;
      },
      renderOperations: function renderOperations(createElement) {
        var h = this.$createElement;
        var node = this.node,
            treeScope = this.treeScope,
            proxyScope = this.proxyScope;
        var operations = treeScope.operations;
        var scopedSlots = proxyScope.scopedSlots;
        var opNode = null;

        if (scopedSlots !== null && scopedSlots !== void 0 && scopedSlots.operations) {
          opNode = scopedSlots.operations({
            node: node === null || node === void 0 ? void 0 : node.getModel()
          });
        } else {
          opNode = getTNode(operations, {
            createElement: createElement,
            node: node
          });
        }

        if (opNode) {
          opNode = h("span", {
            "class": "".concat(this.componentName, "__operations"),
            "attrs": {
              "ignore": "active,expand"
            }
          }, [opNode]);
        }

        return opNode;
      },
      renderItem: function renderItem(createElement) {
        var itemNodes = [];
        var iconNode = this.renderIcon(createElement);
        var lineNode = this.renderLine(createElement);

        if (lineNode) {
          itemNodes.push(lineNode);
        }

        if (iconNode) {
          itemNodes.push(iconNode);
        }

        var labelNode = this.renderLabel(createElement);

        if (labelNode) {
          itemNodes.push(labelNode);
        }

        var opNode = this.renderOperations(createElement);

        if (opNode) {
          itemNodes.push(opNode);
        }

        return itemNodes;
      },
      handleClick: function handleClick(evt) {
        var _srcTarget$className,
            _srcTarget$className$,
            _this = this;

        var srcTarget = evt.target;
        var isBranchTrigger = this.node.children && this.expandOnClickNode && (srcTarget.className === "".concat(this.classPrefix, "-checkbox__input") || srcTarget.tagName.toLowerCase() === "input");
        if (this.$clicked || isBranchTrigger) return;
        if (this.expandOnClickNode && this.node.children && ((_srcTarget$className = srcTarget.className) === null || _srcTarget$className === void 0 ? void 0 : (_srcTarget$className$ = _srcTarget$className.indexOf) === null || _srcTarget$className$ === void 0 ? void 0 : _srcTarget$className$.call(_srcTarget$className, "".concat(this.classPrefix, "-tree__label"))) !== -1) evt.preventDefault();
        this.$clicked = true;
        setTimeout(function () {
          _this.$clicked = false;
        });
        var node = this.node;
        var state = {
          mouseEvent: evt,
          event: evt,
          node: node,
          path: node.getPath()
        };
        this.$emit("click", state);
      },
      handleChange: function handleChange() {
        var node = this.node;
        var event = new Event("change");
        var state = {
          event: event,
          node: node
        };
        this.$emit("change", state);
      },
      proxyClick: function proxyClick(state) {
        this.$emit("click", state);
      },
      proxyChange: function proxyChange(state) {
        this.$emit("change", state);
      },
      getNestedItem: function getNestedItem(node) {
        var h = this.$createElement;
        var nested = this.nested,
            treeScope = this.treeScope,
            proxyScope = this.proxyScope;
        var treeItem = h(TreeItem, {
          "key": node.value,
          "attrs": {
            "node": node,
            "nested": nested,
            "treeScope": treeScope,
            "proxyScope": proxyScope
          },
          "on": {
            "click": this.proxyClick,
            "change": this.proxyChange
          }
        });
        return treeItem;
      },
      getChildNodes: function getChildNodes() {
        var _this2 = this;

        var node = this.node,
            $nodesMap = this.$nodesMap;
        var children = [];

        if (Array.isArray(node.children)) {
          children = node.children;
        }

        var curNodesMap = /* @__PURE__ */new Map();
        var childrenNodes = children.map(function (child) {
          curNodesMap.set(child.value, 1);
          var nodeView = $nodesMap.get(child.value);

          if (!nodeView && child.visible) {
            nodeView = _this2.getNestedItem(child);
            $nodesMap.set(child.value, nodeView);
          }

          return nodeView;
        });
        this.$nextTick(function () {
          var keys = _toConsumableArray($nodesMap.keys());

          keys.forEach(function (value) {
            if (!curNodesMap.get(value)) {
              $nodesMap["delete"](value);
            }
          });
          curNodesMap.clear();
        });
        return childrenNodes;
      }
    },
    created: function created() {
      var node = this.node;

      if (node) {
        this.data = node.data;
      }

      this.$nodesMap = /* @__PURE__ */new Map();
    },
    destroyed: function destroyed() {
      this.data = null;
      this.$nodesMap.clear();
    },
    render: function render(createElement) {
      var _this3 = this;

      var h = arguments[0];
      var node = this.node,
          nested = this.nested;
      var tree = node.tree,
          level = node.level,
          value = node.value;

      if (!tree || !tree.nodeMap.get(value)) {
        this.$destroy();
      }

      var styles = this.getStyles();
      var classList = this.getClassList();
      var itemNode = h("div", {
        "class": classList,
        "attrs": {
          "data-value": value,
          "data-level": level
        },
        "style": styles,
        "on": {
          "click": function click(evt) {
            return _this3.handleClick(evt);
          }
        }
      }, [this.renderItem(createElement)]);

      if (!nested) {
        return itemNode;
      }

      var childNodes = this.getChildNodes();
      var childrenClassList = [];
      childrenClassList.push("".concat(this.componentName, "__children"));

      if (node.expanded) {
        childrenClassList.push("".concat(this.componentName, "__children--visible"));
      } else {
        childrenClassList.push("".concat(this.componentName, "__children--hidden"));
      }

      var allChildren = node.walk();
      allChildren.shift();
      var allExpandedChildren = allChildren.filter(function (node2) {
        var parent = node2.getParent();
        if (!parent) return true;
        return parent.expanded;
      });
      var childrenStyles = {
        "--hscale": allExpandedChildren.length
      };
      var childrenBox = h("transition-group", {
        "attrs": {
          "tag": "div",
          "enter-active-class": "".concat(this.componentName, "__item--enter-active"),
          "leave-active-class": "".concat(this.componentName, "__item--leave-active")
        },
        "class": childrenClassList,
        "style": childrenStyles
      }, [childNodes]);
      var branchNode = h("div", {
        "class": "".concat(this.componentName, "__branch")
      }, [itemNode, childrenBox]);
      return branchNode;
    }
  });

  var props$l = {
    activable: Boolean,
    actived: {
      type: Array
    },
    defaultActived: {
      type: Array
    },
    activeMultiple: Boolean,
    checkable: Boolean,
    checkProps: {
      type: Object
    },
    checkStrictly: Boolean,
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    disableCheck: {
      type: [Boolean, Function],
      "default": false
    },
    disabled: Boolean,
    empty: {
      type: [String, Function],
      "default": ""
    },
    expandAll: Boolean,
    expanded: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    defaultExpanded: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    expandLevel: {
      type: Number,
      "default": 0
    },
    expandMutex: Boolean,
    expandOnClickNode: Boolean,
    expandParent: Boolean,
    filter: {
      type: Function
    },
    hover: Boolean,
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    keys: {
      type: Object
    },
    label: {
      type: [String, Boolean, Function],
      "default": true
    },
    lazy: {
      type: Boolean,
      "default": true
    },
    line: {
      type: [Boolean, Function],
      "default": false
    },
    load: {
      type: Function
    },
    operations: {
      type: Function
    },
    transition: {
      type: Boolean,
      "default": true
    },
    value: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    defaultValue: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    valueMode: {
      type: String,
      "default": "onlyLeaf",
      validator: function validator(val) {
        return ["onlyLeaf", "parentFirst", "all"].includes(val);
      }
    },
    onActive: Function,
    onChange: Function,
    onClick: Function,
    onExpand: Function,
    onLoad: Function
  };

  var _TdTree = mixins(getConfigReceiverMixins("tree")).extend({
    name: "TTree",
    model: {
      prop: "value",
      event: "change"
    },
    props: props$l,
    data: function data() {
      return {
        store: null,
        treeNodeViews: [],
        treeScope: {
          checkProps: null,
          disableCheck: false,
          empty: null,
          icon: null,
          label: null,
          line: null,
          operations: null
        },
        $cacheMap: null,
        $mouseEvent: null,
        $proxyScope: null
      };
    },
    computed: {
      classList: function classList() {
        var list = [this.componentName];
        var disabled = this.disabled,
            hover = this.hover,
            transition = this.transition,
            checkable = this.checkable,
            expandOnClickNode = this.expandOnClickNode;

        if (disabled) {
          list.push("".concat(this.classPrefix, "-is-disabled"));
        }

        if (hover) {
          list.push("".concat(this.componentName, "--hoverable"));
        }

        if (checkable) {
          list.push("".concat(this.componentName, "--checkable"));
        }

        if (transition) {
          list.push("".concat(this.componentName, "--transition"));
        }

        if (expandOnClickNode) {
          list.push("".concat(this.componentName, "--block-node"));
        }

        return list;
      },
      itemMaxHeight: function itemMaxHeight() {
        return 42;
      },
      maxHeight: function maxHeight() {
        return 0;
      },
      vScrollEnable: function vScrollEnable() {
        return !!this.maxHeight;
      },
      nested: function nested() {
        var nested = !!this.maxHeight;
        nested = false;
        return nested;
      }
    },
    watch: {
      data: function data(list) {
        this.rebuild(list);
      },
      value: function value(nVal) {
        this.store.replaceChecked(nVal);
      },
      expanded: function expanded(nVal) {
        this.store.replaceExpanded(nVal);
      },
      actived: function actived(nVal) {
        this.store.replaceActived(nVal);
      }
    },
    methods: {
      renderItem: function renderItem(node) {
        var h = this.$createElement;
        var nested = this.nested,
            treeScope = this.treeScope,
            $proxyScope = this.$proxyScope,
            expandOnClickNode = this.expandOnClickNode;
        var treeItem = h(TreeItem, {
          "key": node.value,
          "attrs": {
            "node": node,
            "nested": nested,
            "treeScope": treeScope,
            "proxyScope": $proxyScope,
            "expandOnClickNode": expandOnClickNode
          },
          "on": {
            "click": this.handleClick,
            "change": this.handleChange
          }
        });
        return treeItem;
      },
      refresh: function refresh() {
        var store = this.store,
            nested = this.nested;
        var nodes = [];

        if (nested) {
          nodes = store.getChildren();
        } else {
          nodes = store.getNodes();
        }

        this.renderTreeNodeViews(nodes);
      },
      renderTreeNodeViews: function renderTreeNodeViews(nodes) {
        var _this = this;

        var store = this.store,
            $cacheMap = this.$cacheMap;
        this.treeNodeViews = nodes.map(function (node) {
          var nodeView = $cacheMap.get(node.value);

          if (!nodeView && node.visible) {
            nodeView = _this.renderItem(node);
            $cacheMap.set(node.value, nodeView);
          }

          return nodeView;
        });
        this.$nextTick(function () {
          $cacheMap.forEach(function (view, value) {
            if (!store.getNode(value)) {
              $cacheMap["delete"](value);
            }
          });
        });
      },
      updateStoreConfig: function updateStoreConfig() {
        var store = this.store;
        if (!store) return;
        var storeProps = pick_1(this, ["keys", "expandAll", "expandLevel", "expandMutex", "expandParent", "activable", "activeMultiple", "disabled", "checkable", "checkStrictly", "load", "lazy", "valueMode", "filter"]);
        store.setConfig(storeProps);
      },
      updateExpanded: function updateExpanded() {
        var store = this.store,
            expanded = this.expanded,
            expandParent = this.expandParent;

        if (Array.isArray(expanded)) {
          var expandedMap = /* @__PURE__ */new Map();
          expanded.forEach(function (val) {
            expandedMap.set(val, true);

            if (expandParent) {
              var node = store.getNode(val);
              node.getParents().forEach(function (tn) {
                expandedMap.set(tn.value, true);
              });
            }
          });
          var expandedArr = Array.from(expandedMap.keys());
          store.setExpanded(expandedArr);
        }
      },
      build: function build() {
        var _this2 = this;

        var list = this.data;
        var actived = this.actived,
            value = this.value,
            valueMode = this.valueMode,
            filter = this.filter;
        var store = new TreeStore({
          valueMode: valueMode,
          filter: filter,
          onLoad: function onLoad(info) {
            _this2.handleLoad(info);
          },
          onUpdate: function onUpdate() {
            _this2.refresh();
          }
        });
        this.store = store;
        this.updateStoreConfig();

        if (!Array.isArray(list)) {
          list = [];
        }

        store.append(list);
        store.refreshNodes();

        if (Array.isArray(value)) {
          store.setChecked(value);
        }

        this.updateExpanded();

        if (Array.isArray(actived)) {
          store.setActived(actived);
        }

        this.refresh();
      },
      rebuild: function rebuild(list) {
        this.$cacheMap.clear();
        var store = this.store,
            value = this.value,
            actived = this.actived;
        store.reload(list);

        if (Array.isArray(value)) {
          store.setChecked(value);
        }

        this.updateExpanded();

        if (Array.isArray(actived)) {
          store.setActived(actived);
        }

        store.refreshState();
      },
      toggleActived: function toggleActived(item) {
        var node = getNode(this.store, item);
        return this.setActived(node, !node.isActived());
      },
      setActived: function setActived(item, isActived) {
        var node = getNode(this.store, item);
        var actived = node.setActived(isActived);
        var $mouseEvent = this.$mouseEvent;
        var ctx = {
          node: node.getModel(),
          e: $mouseEvent
        };
        emitEvent(this, "active", actived, ctx);
        return actived;
      },
      toggleExpanded: function toggleExpanded(item) {
        var node = getNode(this.store, item);
        return this.setExpanded(node, !node.isExpanded());
      },
      setExpanded: function setExpanded(item, isExpanded) {
        var node = getNode(this.store, item);
        var expanded = node.setExpanded(isExpanded);
        var $mouseEvent = this.$mouseEvent;
        var ctx = {
          node: node.getModel(),
          e: $mouseEvent
        };
        emitEvent(this, "expand", expanded, ctx);
        return expanded;
      },
      toggleChecked: function toggleChecked(item) {
        var node = getNode(this.store, item);
        return this.setChecked(node, !node.isChecked());
      },
      setChecked: function setChecked(item, isChecked) {
        var node = getNode(this.store, item);
        var checked = node.setChecked(isChecked);
        var ctx = {
          node: node.getModel()
        };
        emitEvent(this, "change", checked, ctx);
        return checked;
      },
      handleLoad: function handleLoad(info) {
        var node = info.node;
        var ctx = {
          node: node.getModel()
        };
        var value = this.value,
            expanded = this.expanded,
            actived = this.actived,
            store = this.store;

        if (value && value.length > 0) {
          store.replaceChecked(value);
        }

        if (expanded && expanded.length > 0) {
          store.replaceExpanded(expanded);
        }

        if (actived && actived.length > 0) {
          store.replaceActived(actived);
        }

        emitEvent(this, "load", ctx);
      },
      handleClick: function handleClick(state) {
        var expandOnClickNode = this.expandOnClickNode;
        var mouseEvent = state.mouseEvent,
            event = state.event,
            node = state.node;

        if (!node || this.disabled || node.disabled) {
          return;
        }

        this.$mouseEvent = mouseEvent;
        var shouldExpand = expandOnClickNode;
        var shouldActive = true;
        ["trigger", "ignore"].forEach(function (markName) {
          var mark = getMark(markName, event.target, event.currentTarget);
          var markValue = (mark === null || mark === void 0 ? void 0 : mark.value) || "";

          if (markValue.indexOf("expand") >= 0) {
            if (markName === "trigger") {
              shouldExpand = true;
            } else if (markName === "ignore") {
              shouldExpand = false;
            }
          }

          if (markValue.indexOf("active") >= 0) {
            if (markName === "ignore") {
              shouldActive = false;
            }
          }
        });

        if (shouldExpand) {
          this.toggleExpanded(node);
        }

        if (shouldActive) {
          this.toggleActived(node);
        }

        var ctx = {
          node: node.getModel(),
          e: mouseEvent
        };
        emitEvent(this, "click", ctx);
        this.$mouseEvent = null;
      },
      handleChange: function handleChange(state) {
        var disabled = this.disabled;
        var node = state.node;

        if (!node || disabled || node.disabled) {
          return;
        }

        this.toggleChecked(node);
      },
      updateTreeScope: function updateTreeScope() {
        var treeScope = this.treeScope;
        var scopedProps = pick_1(this, ["checkProps", "disableCheck", "empty", "icon", "label", "line", "operations"]);
        Object.assign(treeScope, scopedProps);
      },
      setItem: function setItem(value, options) {
        var _this3 = this;

        var node = this.store.getNode(value);
        var spec = options;
        var keys = Object.keys(spec);

        if (node && spec) {
          ["expanded", "actived", "checked"].forEach(function (name) {
            if (keys.includes(name)) {
              _this3["set".concat(upperFirst_1(name))](node, spec[name]);

              delete spec[name];
            }
          });
          node.set(spec);
        }
      },
      getItem: function getItem(value) {
        var node = this.store.getNode(value);
        return node === null || node === void 0 ? void 0 : node.getModel();
      },
      getItems: function getItems(value) {
        var nodes = this.store.getNodes(value);
        return nodes.map(function (node) {
          return node.getModel();
        });
      },
      appendTo: function appendTo(para, item) {
        var store = this.store;
        var list = [];

        if (Array.isArray(item)) {
          list = item;
        } else {
          list = [item];
        }

        list.forEach(function (item2) {
          var val = (item2 === null || item2 === void 0 ? void 0 : item2.value) || "";
          var node = getNode(store, val);

          if (node) {
            store.appendNodes(para, node);
          } else {
            store.appendNodes(para, item2);
          }
        });
      },
      insertBefore: function insertBefore(value, item) {
        var store = this.store;
        var val = (item === null || item === void 0 ? void 0 : item.value) || "";
        var node = getNode(store, val);

        if (node) {
          store.insertBefore(value, node);
        } else {
          store.insertBefore(value, item);
        }
      },
      insertAfter: function insertAfter(value, item) {
        var store = this.store;
        var val = (item === null || item === void 0 ? void 0 : item.value) || "";
        var node = getNode(store, val);

        if (node) {
          store.insertAfter(value, node);
        } else {
          store.insertAfter(value, item);
        }
      },
      remove: function remove(value) {
        return this.store.remove(value);
      },
      getIndex: function getIndex(value) {
        return this.store.getNodeIndex(value);
      },
      getParent: function getParent(value) {
        var node = this.store.getParent(value);
        return node === null || node === void 0 ? void 0 : node.getModel();
      },
      getParents: function getParents(value) {
        var nodes = this.store.getParents(value);
        return nodes.map(function (node) {
          return node.getModel();
        });
      },
      getPath: function getPath(value) {
        var node = this.store.getNode(value);
        var pathNodes = [];

        if (node) {
          pathNodes = node.getPath().map(function (node2) {
            return node2.getModel();
          });
        }

        return pathNodes;
      }
    },
    created: function created() {
      this.$cacheMap = /* @__PURE__ */new Map();
      this.$mouseEvent = null;
      this.$proxyScope = {};
      this.updateTreeScope();
      this.build();
    },
    render: function render() {
      var h = arguments[0];
      var classList = this.classList,
          $proxyScope = this.$proxyScope,
          treeNodeViews = this.treeNodeViews;
      this.updateStoreConfig();
      this.updateTreeScope();
      $proxyScope.scopedSlots = this.$scopedSlots;
      var emptyNode = null;

      if (treeNodeViews.length <= 0) {
        var useLocale = !this.empty && !this.$scopedSlots.empty;
        var emptyContent = useLocale ? this.t(this.global.empty) : renderTNodeJSX(this, "empty");
        emptyNode = h("div", {
          "class": "".concat(this.componentName, "__empty")
        }, [emptyContent]);
      }

      var treeNodeList = h("transition-group", {
        "attrs": {
          "tag": "div",
          "enter-active-class": "".concat(this.componentName, "__item--enter-active"),
          "leave-active-class": "".concat(this.componentName, "__item--leave-active")
        },
        "class": "".concat(this.componentName, "__list")
      }, [treeNodeViews]);
      var treeNode = h("div", {
        "class": classList
      }, [emptyNode || treeNodeList]);
      return treeNode;
    }
  });

  var Tree = withInstall(mapProps([{
    name: "value",
    event: ["change", "update:value"]
  }, {
    name: "expanded",
    event: ["expand", "update:expanded"]
  }, {
    name: "actived",
    event: ["active", "update:actived"]
  }], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_TdTree));

  var props$k = {
    clearable: Boolean,
    collapsedItems: {
      type: Function
    },
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    disabled: Boolean,
    empty: {
      type: [String, Function],
      "default": ""
    },
    filter: {
      type: Function
    },
    filterable: Boolean,
    loading: Boolean,
    loadingText: {
      type: [String, Function],
      "default": ""
    },
    max: {
      type: Number,
      "default": 0
    },
    minCollapsedNum: {
      type: Number,
      "default": 0
    },
    multiple: Boolean,
    placeholder: {
      type: String,
      "default": ""
    },
    popupProps: {
      type: Object
    },
    prefixIcon: {
      type: Function
    },
    showCheckAll: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    treeProps: {
      type: Object
    },
    value: {
      type: [String, Number, Object, Array]
    },
    defaultValue: {
      type: [String, Number, Object, Array]
    },
    valueDisplay: {
      type: Function
    },
    valueType: {
      type: String,
      "default": "value",
      validator: function validator(val) {
        return ["value", "object"].includes(val);
      }
    },
    onBlur: Function,
    onChange: Function,
    onClear: Function,
    onFocus: Function,
    onRemove: Function,
    onSearch: Function
  };

  function ownKeys$J(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$I(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$J(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$J(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _TreeSelect = mixins(getConfigReceiverMixins("treeSelect"), getGlobalIconMixins()).extend({
    name: "TTreeSelect",
    model: {
      prop: "value",
      event: "change"
    },
    props: props$k,
    data: function data() {
      return {
        formDisabled: void 0,
        visible: false,
        isHover: false,
        focusing: false,
        defaultProps: {
          trigger: "click",
          placement: "bottom-left",
          overlayClassName: "",
          overlayInnerStyle: function overlayInnerStyle(trigger) {
            return {
              width: "".concat(trigger.offsetWidth, "px")
            };
          }
        },
        filterText: "",
        filterByText: null,
        actived: [],
        expanded: [],
        nodeInfo: null,
        treeKey: 0
      };
    },
    watch: {
      value: function value() {
        var _this = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _this.changeNodeInfo();

                case 2:
                  if (!_this.multiple) {
                    _this.actived = _this.nodeInfo ? [_this.nodeInfo.value] : [];
                  }

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      data: function data() {
        var _this2 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return _this2.changeNodeInfo();

                case 2:
                  _this2.treeRerender();

                case 3:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }))();
      }
    },
    computed: {
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      classes: function classes() {
        var _ref;

        return ["".concat(this.classPrefix, "-select"), "".concat(this.classPrefix, "-select-polyfill"), (_ref = {}, _defineProperty$3(_ref, this.commonStatusClassName.disabled, this.tDisabled), _defineProperty$3(_ref, this.commonStatusClassName.active, this.visible), _defineProperty$3(_ref, this.commonSizeClassName[this.size], this.size), _defineProperty$3(_ref, "".concat(this.classPrefix, "-has-prefix"), this.prefixIconSlot), _defineProperty$3(_ref, "".concat(this.classPrefix, "-select-selected"), this.selectedSingle || !isEmpty_1(this.selectedMultiple)), _ref)];
      },
      popupClass: function popupClass() {
        var popupObject = this.popupObject;
        return "".concat(popupObject.overlayClassName, " ").concat(this.classPrefix, "-select__dropdown narrow-scrollbar");
      },
      isObjectValue: function isObjectValue() {
        return this.valueType === "object";
      },
      checked: function checked() {
        if (this.multiple) {
          if (this.isObjectValue) {
            return isArray_1(this.value) ? this.value.map(function (item) {
              return item.value;
            }) : [];
          }

          return isArray_1(this.value) ? this.value : [];
        }

        return [];
      },
      showArrow: function showArrow() {
        return !this.clearable || !this.isHover || this.tDisabled || !this.multiple && !this.value && this.value !== 0 || this.multiple && isArray_1(this.value) && isEmpty_1(this.value);
      },
      showLoading: function showLoading() {
        return this.loading && !this.tDisabled;
      },
      showClose: function showClose() {
        return this.clearable && this.isHover && !this.tDisabled && (!this.multiple && (!!this.value || this.value === 0) || this.multiple && !isEmpty_1(this.value));
      },
      showPlaceholder: function showPlaceholder() {
        if (!this.showFilter && (isString_1(this.value) && this.value === "" && !this.selectedSingle || isArray_1(this.value) && isEmpty_1(this.value) || isNil_1(this.value))) {
          return true;
        }

        return false;
      },
      showFilter: function showFilter() {
        if (this.tDisabled) {
          return false;
        }

        if (!this.multiple && this.selectedSingle && (this.filterable || isFunction_1(this.filter))) {
          return this.visible;
        }

        return this.filterable || isFunction_1(this.filter);
      },
      showTree: function showTree() {
        return !this.loading;
      },
      popupObject: function popupObject() {
        var propsObject = this.popupProps ? _objectSpread$I(_objectSpread$I({}, this.defaultProps), this.popupProps) : this.defaultProps;
        return propsObject;
      },
      selectedSingle: function selectedSingle() {
        if (!this.multiple && (isString_1(this.value) || isNumber_1(this.value) || isObject_1(this.value))) {
          if (this.nodeInfo) {
            return this.nodeInfo.label;
          }

          return "".concat(this.value);
        }

        return "";
      },
      selectedMultiple: function selectedMultiple() {
        if (this.multiple && isArray_1(this.value) && !isEmpty_1(this.value)) {
          return this.value;
        }

        return [];
      },
      multiLimitDisabled: function multiLimitDisabled() {
        if (this.multiple && this.max && isArray_1(this.value) && this.max <= this.value.length) {
          return true;
        }

        return false;
      },
      filterPlaceholder: function filterPlaceholder() {
        if (this.multiple && isArray_1(this.value) && !isEmpty_1(this.value)) {
          return "";
        }

        var single = this.selectedSingle instanceof Array ? this.selectedSingle[0] : this.selectedSingle;

        if (!this.multiple && single) {
          return single;
        }

        return this.placeholder;
      },
      loadingTextSlot: function loadingTextSlot() {
        var h = this.$createElement;
        var useLocale = !this.loadingText && !this.$scopedSlots.loadingText;
        return useLocale ? h("div", {
          "class": "".concat(this.classPrefix, "-select__empty")
        }, [this.t(this.global.loadingText)]) : renderTNodeJSX(this, "loadingText");
      },
      emptySlot: function emptySlot() {
        var h = this.$createElement;
        var useLocale = !this.empty && !this.$scopedSlots.empty;
        return useLocale ? h("div", {
          "class": "".concat(this.classPrefix, "-select__empty")
        }, [this.t(this.global.empty)]) : renderTNodeJSX(this, "empty");
      },
      prefixIconSlot: function prefixIconSlot() {
        return renderTNodeJSX(this, "prefixIcon");
      },
      realLabel: function realLabel() {
        var treeProps = this.treeProps;

        if (!isEmpty_1(treeProps) && !isEmpty_1(treeProps.keys)) {
          return treeProps.keys.label || "label";
        }

        return "label";
      },
      realValue: function realValue() {
        var treeProps = this.treeProps;

        if (!isEmpty_1(treeProps) && !isEmpty_1(treeProps.keys)) {
          return treeProps.keys.value || "value";
        }

        return "value";
      },
      realChildren: function realChildren() {
        var _treeProps$keys;

        var treeProps = this.treeProps;
        return (treeProps === null || treeProps === void 0 ? void 0 : (_treeProps$keys = treeProps.keys) === null || _treeProps$keys === void 0 ? void 0 : _treeProps$keys.children) || "children";
      },
      tagList: function tagList() {
        if (this.nodeInfo && isArray_1(this.nodeInfo)) {
          return this.nodeInfo.map(function (node) {
            return node.label;
          });
        }

        return this.selectedMultiple;
      }
    },
    mounted: function mounted() {
      var _this3 = this;

      return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(!_this3.value && _this3.defaultValue)) {
                  _context3.next = 3;
                  break;
                }

                _context3.next = 3;
                return _this3.change(_this3.defaultValue, null);

              case 3:
                if (_this3.isObjectValue) {
                  _this3.actived = isArray_1(_this3.value) ? _this3.value.map(function (item) {
                    return item.value;
                  }) : [_this3.value.value];
                } else {
                  _this3.actived = isArray_1(_this3.value) ? _this3.value : [_this3.value];
                }

                _this3.changeNodeInfo();

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }))();
    },
    methods: {
      popupVisibleChange: function popupVisibleChange(visible) {
        var _this4 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4() {
          var searchInput;
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return _this4.visible = visible;

                case 2:
                  _this4.filterText = "";
                  _this4.filterByText = null;

                  if (_this4.showFilter && _this4.visible) {
                    searchInput = _this4.$refs.input;
                    searchInput === null || searchInput === void 0 ? void 0 : searchInput.focus();
                    _this4.focusing = true;
                  }

                case 5:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }))();
      },
      removeTag: function removeTag(index, data, e) {
        if (this.tDisabled) {
          return;
        }

        this.remove({
          value: this.value[index],
          data: data,
          e: e
        });
        isArray_1(this.value) && this.value.splice(index, 1);
        this.change(this.value, null);
      },
      change: function change(value, node) {
        emitEvent(this, "change", value, {
          node: node
        });
        this.changeNodeInfo();
      },
      clear: function clear(e) {
        var defaultValue = this.multiple ? [] : "";
        this.change(defaultValue, null);
        this.actived = [];
        this.filterText = "";
        this.filterByText = null;
        emitEvent(this, "clear", {
          e: e
        });
      },
      focus: function focus(ctx) {
        this.focusing = true;
        emitEvent(this, "focus", _objectSpread$I({
          value: this.value
        }, ctx));
      },
      blur: function blur(ctx) {
        this.focusing = false;
        emitEvent(this, "blur", _objectSpread$I({
          value: this.value
        }, ctx));
      },
      remove: function remove(options) {
        emitEvent(this, "remove", options);
      },
      search: function search(filterWords) {
        emitEvent(this, "search", filterWords);
      },
      treeNodeChange: function treeNodeChange(value, context) {
        var _this5 = this;

        var current = value;

        if (this.isObjectValue) {
          current = value.map(function (nodeValue) {
            return _this5.getTreeNode(_this5.data, nodeValue);
          });
        }

        this.change(current, context.node);
        this.actived = value;
      },
      treeNodeActive: function treeNodeActive(value, context) {
        if (this.multiple) {
          return;
        }

        var triggerValue = this.isObjectValue ? context.node.data : context.node.data[this.realValue];
        this.change(triggerValue, context.node);
        this.actived = [triggerValue];
        this.visible = false;
      },
      treeNodeExpand: function treeNodeExpand(value) {
        this.expanded = value;
      },
      onInputChange: function onInputChange() {
        var _this6 = this;

        if (!this.filterText) {
          this.filterByText = null;
          return null;
        }

        this.filterByText = function (node) {
          if (isFunction_1(_this6.filter)) {
            var filter = _this6.filter(_this6.filterText, node);

            if (isBoolean_1(filter)) {
              return filter;
            }
          }

          return node.data[_this6.realLabel].indexOf(_this6.filterText) >= 0;
        };

        this.search(this.filterText);
      },
      getTreeData: function getTreeData() {
        var _this$$refs$tree,
            _this7 = this;

        return (((_this$$refs$tree = this.$refs.tree) === null || _this$$refs$tree === void 0 ? void 0 : _this$$refs$tree.getItems()) || []).map(function (item) {
          var _ref2;

          return _ref2 = {}, _defineProperty$3(_ref2, _this7.realLabel, item.data[_this7.realLabel]), _defineProperty$3(_ref2, _this7.realValue, item.data[_this7.realValue]), _ref2;
        });
      },
      changeNodeInfo: function changeNodeInfo() {
        var _this8 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5() {
          return regenerator.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return _this8.value;

                case 2:
                  if (!_this8.multiple && (_this8.value || _this8.value === 0)) {
                    _this8.changeSingleNodeInfo();
                  } else if (_this8.multiple && isArray_1(_this8.value)) {
                    _this8.changeMultipleNodeInfo();
                  } else {
                    _this8.nodeInfo = null;
                  }

                case 3:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5);
        }))();
      },
      changeSingleNodeInfo: function changeSingleNodeInfo() {
        var _this$treeProps;

        var tree = this.$refs.tree;
        var nodeValue = this.isObjectValue ? this.value.value : this.value;

        if (tree && (_this$treeProps = this.treeProps) !== null && _this$treeProps !== void 0 && _this$treeProps.load) {
          if (!isEmpty_1(this.data)) {
            var node = tree.getItem(nodeValue);
            if (!node) return;
            this.nodeInfo = {
              label: node.data[this.realLabel],
              value: node.data[this.realValue]
            };
          } else {
            this.nodeInfo = {
              label: nodeValue,
              value: nodeValue
            };
          }
        } else {
          var _node = this.getTreeNode(this.data, nodeValue);

          if (!_node) {
            this.nodeInfo = {
              label: nodeValue,
              value: nodeValue
            };
          } else {
            this.nodeInfo = _node;
          }
        }
      },
      changeMultipleNodeInfo: function changeMultipleNodeInfo() {
        var _this9 = this;

        var tree = this.$refs.tree;
        this.nodeInfo = this.value.map(function (value) {
          var _this9$treeProps;

          var nodeValue = _this9.isObjectValue ? value.value : value;

          if (tree && (_this9$treeProps = _this9.treeProps) !== null && _this9$treeProps !== void 0 && _this9$treeProps.load) {
            if (!isEmpty_1(_this9.data)) {
              var node2 = tree.getItem(nodeValue);
              if (!node2) return;
              return {
                label: node2.data[_this9.realLabel],
                value: node2.data[_this9.realValue]
              };
            }

            return {
              label: nodeValue,
              value: nodeValue
            };
          }

          var node = _this9.getTreeNode(_this9.data, nodeValue);

          if (!node) {
            return {
              label: nodeValue,
              value: nodeValue
            };
          }

          return node;
        });
      },
      getTreeNode: function getTreeNode(data, targetValue) {
        for (var i = 0, len = data.length; i < len; i++) {
          if (data[i][this.realValue] === targetValue) {
            return {
              label: data[i][this.realLabel],
              value: data[i][this.realValue]
            };
          }

          var childrenData = data[i][this.realChildren];

          if (childrenData) {
            var data2 = Array.isArray(childrenData) ? childrenData : this.getTreeData();
            var result = this.getTreeNode(data2, targetValue);

            if (!isNil_1(result)) {
              return result;
            }
          }
        }

        return null;
      },
      treeRerender: function treeRerender() {
        this.treeKey += 1;
      }
    },
    render: function render() {
      var _this10 = this,
          _ref3;

      var h = arguments[0];
      var treeProps = this.treeProps,
          popupObject = this.popupObject,
          classes = this.classes,
          popupClass = this.popupClass,
          treeKey = this.treeKey;
      var iconStyle = {
        "font-size": this.size
      };

      var _this$useGlobalIcon = this.useGlobalIcon({
        CloseCircleFilledIcon: CloseCircleFilled
      }),
          CloseCircleFilledIcon = _this$useGlobalIcon.CloseCircleFilledIcon;

      var treeItem = h(Tree, {
        "ref": "tree",
        "directives": [{
          name: "show",
          value: this.showTree
        }],
        "key": treeKey,
        "attrs": {
          "value": this.checked,
          "hover": true,
          "data": this.data,
          "activable": !this.multiple,
          "checkable": this.multiple,
          "disabled": this.tDisabled || this.multiLimitDisabled,
          "empty": this.empty,
          "size": this.size,
          "filter": this.filterByText,
          "actived": this.actived,
          "expanded": this.expanded,
          "activeMultiple": this.multiple,
          "expandOnClickNode": true,
          "checkStrictly": false
        },
        "on": {
          "change": this.treeNodeChange,
          "active": this.treeNodeActive,
          "expand": this.treeNodeExpand
        },
        "props": _objectSpread$I({}, treeProps)
      }, [h("template", {
        "slot": "empty"
      }, [this.emptySlot])]);
      var searchInput = h(Input, {
        "ref": "input",
        "directives": [{
          name: "show",
          value: this.showFilter
        }],
        "class": "".concat(this.classPrefix, "-select__input"),
        "attrs": {
          "size": this.size,
          "disabled": this.tDisabled,
          "placeholder": this.filterPlaceholder
        },
        "on": {
          "change": this.onInputChange,
          "blur": function blur(value, context) {
            return _this10.blur(context);
          },
          "focus": function focus(value, context) {
            return _this10.focus(context);
          }
        },
        "model": {
          value: _this10.filterText,
          callback: function callback($$v) {
            _this10.filterText = $$v;
          }
        }
      });
      var tagItem = !isEmpty_1(this.tagList) && (this.valueDisplay || this.$scopedSlots.valueDisplay) ? renderTNodeJSX(this, "valueDisplay", {
        params: {
          value: this.nodeInfo,
          onClose: function onClose(index) {
            return _this10.removeTag(index, null);
          }
        }
      }) : this.tagList.map(function (label, index) {
        return h(Tag, {
          "directives": [{
            name: "show",
            value: _this10.minCollapsedNum <= 0 || index < _this10.minCollapsedNum
          }],
          "key": index,
          "attrs": {
            "size": _this10.size,
            "closable": !_this10.tDisabled,
            "disabled": _this10.tDisabled,
            "maxWidth": 300,
            "title": label
          },
          "on": {
            "close": function close(e) {
              return _this10.removeTag(index, null, e);
            }
          }
        }, [label]);
      });
      var selectedSingle = this.valueDisplay || this.$scopedSlots.valueDisplay ? renderTNodeJSX(this, "valueDisplay", {
        params: {
          value: this.nodeInfo || (_ref3 = {}, _defineProperty$3(_ref3, this.realLabel, ""), _defineProperty$3(_ref3, this.realValue, ""), _ref3)
        }
      }) : h("span", {
        "attrs": {
          "title": this.selectedSingle
        },
        "class": ["".concat(this.classPrefix, "-select__single"), "".concat(this.classPrefix, "-tree-select"), "".concat(this.classPrefix, "-single-suffix")]
      }, [this.selectedSingle]);
      var collapsedItem = (this.collapsedItems || this.$scopedSlots.collapsedItems) && this.minCollapsedNum > 0 && this.tagList.length > this.minCollapsedNum ? renderTNodeJSX(this, "collapsedItems", {
        params: {
          count: this.tagList.length - this.minCollapsedNum,
          value: this.selectedMultiple,
          collapsedSelectedItems: this.selectedMultiple.slice(this.minCollapsedNum)
        }
      }) : h(Tag, {
        "directives": [{
          name: "show",
          value: this.minCollapsedNum > 0 && this.tagList.length > this.minCollapsedNum
        }],
        "attrs": {
          "size": this.size
        }
      }, ["+".concat(this.tagList.length - this.minCollapsedNum)]);
      return h("div", {
        "ref": "treeSelect",
        "class": "".concat(this.classPrefix, "-select__wrap")
      }, [h(Popup, helper([{
        "ref": "popup",
        "class": "".concat(this.classPrefix, "-select__popup-reference"),
        "attrs": {
          "visible": this.visible,
          "disabled": this.tDisabled,
          "placement": popupObject.placement,
          "trigger": popupObject.trigger,
          "overlayInnerStyle": popupObject.overlayInnerStyle,
          "overlayClassName": popupClass
        }
      }, {
        "on": {
          "visible-change": this.popupVisibleChange
        }
      }, {
        "attrs": {
          "expandAnimation": true
        }
      }]), [h("div", {
        "class": classes,
        "on": {
          "mouseenter": function mouseenter() {
            return _this10.isHover = true;
          },
          "mouseleave": function mouseleave() {
            return _this10.isHover = false;
          }
        }
      }, [this.prefixIconSlot && h("span", {
        "class": "".concat(this.classPrefix, "-select__left-icon")
      }, [this.prefixIconSlot[0]]), h("span", {
        "directives": [{
          name: "show",
          value: this.showPlaceholder
        }],
        "class": "".concat(this.classPrefix, "-select__placeholder")
      }, [this.placeholder || this.global.placeholder]), h("span", {
        "class": "".concat(this.classPrefix, "-tree-select ").concat(this.classPrefix, "-tag-prefix")
      }, [tagItem]), collapsedItem, !this.multiple && !this.showPlaceholder && !this.showFilter && selectedSingle, searchInput, this.showArrow && !this.showLoading && h(FakeArrow, {
        "attrs": {
          "overlayClassName": "".concat(this.classPrefix, "-select__right-icon ").concat(this.classPrefix, "-select__right-icon-polyfill"),
          "overlayStyle": iconStyle,
          "isActive": this.visible && !this.tDisabled
        }
      }), h(CloseCircleFilledIcon, {
        "directives": [{
          name: "show",
          value: this.showClose && !this.showLoading
        }],
        "class": ["".concat(this.classPrefix, "-select__right-icon"), "".concat(this.classPrefix, "-select__right-icon-polyfill"), "".concat(this.classPrefix, "-select__right-icon-clear")],
        "attrs": {
          "size": this.size
        },
        "nativeOn": {
          "click": this.clear
        }
      }), h(Loading, {
        "directives": [{
          name: "show",
          value: this.showLoading
        }],
        "class": "".concat(this.classPrefix, "-select__right-icon ").concat(this.classPrefix, "-select__right-icon-polyfill ").concat(this.classPrefix, "-select__active-icon"),
        "attrs": {
          "size": "small"
        }
      })]), h("div", {
        "slot": "content"
      }, [h("p", {
        "directives": [{
          name: "show",
          value: this.showLoading
        }],
        "class": "".concat(this.classPrefix, "-select__loading-tips ").concat(this.classPrefix, "-select__right-icon-polyfill")
      }, [this.loadingTextSlot]), treeItem])])]);
    }
  });

  var TreeSelect = withInstall(mapProps([{
    name: "value",
    event: ["change", "clear", "remove"]
  }], {
    model: {
      prop: "value",
      event: "change"
    }
  })(_TreeSelect));

  var props$j = {
    alt: {
      type: String,
      "default": ""
    },
    hideOnLoadFailed: Boolean,
    icon: {
      type: Function
    },
    image: {
      type: String,
      "default": ""
    },
    shape: {
      type: String,
      "default": "circle",
      validator: function validator(val) {
        return ["circle", "round"].includes(val);
      }
    },
    size: {
      type: String,
      "default": ""
    },
    onError: Function
  };

  function ownKeys$I(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$H(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$I(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$I(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$d = getClassPrefixMixins("avatar");
  var _Avatar = mixins(Vue__default["default"], classPrefixMixins$d).extend({
    name: "TAvatar",
    props: _objectSpread$H({}, props$j),
    data: function data() {
      return {
        isImgExist: true,
        gap: 4,
        sizeValue: "",
        scale: ""
      };
    },
    inject: {
      avatarGroup: {
        "default": void 0
      }
    },
    computed: {
      customAvatarSize: function customAvatarSize() {
        return this.isCustomSize() ? {
          width: this.sizeValue,
          height: this.sizeValue,
          "font-size": "".concat(Number.parseInt(this.sizeValue, 10) / 2, "px")
        } : {};
      },
      customImageSize: function customImageSize() {
        return this.isCustomSize() ? {
          height: this.sizeValue,
          width: this.sizeValue
        } : {};
      },
      customCharacterSize: function customCharacterSize() {
        return {
          transform: this.scale
        };
      }
    },
    mounted: function mounted() {
      var _this = this;

      var avatarGroup = this.avatarGroup;
      this.sizeValue = this.size || (avatarGroup === null || avatarGroup === void 0 ? void 0 : avatarGroup.size);
      this.$nextTick(function () {
        _this.setScaleParams();
      });
    },
    methods: {
      handleImgLoadError: function handleImgLoadError() {
        var _this$$props = this.$props,
            onError = _this$$props.onError,
            hideOnLoadFailed = _this$$props.hideOnLoadFailed;
        this.isImgExist = !hideOnLoadFailed;
        onError && onError();
        this.$emit("error");
      },
      setScaleParams: function setScaleParams() {
        var avatar = this.$refs.avatar;
        var avatarChild = this.$refs.avatarChild;
        var avatarWidth = avatar === null || avatar === void 0 ? void 0 : avatar.offsetWidth;
        var avatarChildWidth = avatarChild === null || avatarChild === void 0 ? void 0 : avatarChild.offsetWidth;

        if (this.gap * 2 < avatarWidth) {
          this.scale = avatarChildWidth > avatarWidth - this.gap * 2 ? "scale(".concat((avatarWidth - this.gap * 2) / avatarChildWidth, ")") : "scale(1)";
        }
      },
      isCustomSize: function isCustomSize() {
        return this.sizeValue && !this.commonSizeClassName[this.sizeValue];
      }
    },
    updated: function updated() {
      var _this2 = this;

      this.$nextTick(function () {
        _this2.setScaleParams();
      });
    },
    render: function render() {
      var _ref;

      var h = arguments[0];
      var content = renderContent(this, "default", "content");
      var icon = renderTNodeJSX(this, "icon");
      var isIconOnly = icon && !content;
      var _this$$props2 = this.$props,
          shape = _this$$props2.shape,
          image = _this$$props2.image,
          alt = _this$$props2.alt;
      var avatarClass = [this.componentName, this.commonSizeClassName[this.sizeValue], (_ref = {}, _defineProperty$3(_ref, "".concat(this.componentName, "--circle"), shape === "circle"), _defineProperty$3(_ref, "".concat(this.componentName, "--round"), shape === "round"), _defineProperty$3(_ref, "".concat(this.componentName, "__icon"), !!isIconOnly), _ref)];
      content = h("span", {
        "ref": "avatarChild",
        "style": _objectSpread$H({}, this.customCharacterSize)
      }, [content]);

      if (icon) {
        content = [icon, !isIconOnly ? content : ""];
      }

      if (image && this.isImgExist) {
        content = h("img", {
          "style": _objectSpread$H({}, this.customImageSize),
          "attrs": {
            "src": image,
            "alt": alt
          },
          "on": {
            "error": this.handleImgLoadError
          }
        });
      }

      return h("div", {
        "ref": "avatar",
        "class": avatarClass,
        "style": _objectSpread$H({}, this.customAvatarSize)
      }, [content]);
    }
  });

  var props$i = {
    cascading: {
      type: String,
      "default": "right-up",
      validator: function validator(val) {
        return ["left-up", "right-up"].includes(val);
      }
    },
    collapseAvatar: {
      type: [String, Function]
    },
    max: {
      type: Number
    },
    placement: {
      type: String,
      validator: function validator(val) {
        return ["left", "top", "bottom", "right"].includes(val);
      }
    },
    popupProps: {
      type: Object
    },
    size: {
      type: String,
      "default": "medium"
    }
  };

  function ownKeys$H(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$G(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$H(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$H(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$c = getClassPrefixMixins("avatar");
  var _AvatarGroup = mixins(classPrefixMixins$c).extend({
    name: "TAvatarGroup",
    components: {
      Avatar: _Avatar
    },
    props: _objectSpread$G({}, props$i),
    provide: function provide() {
      return {
        avatarGroup: this
      };
    },
    methods: {
      renderEllipsisAvatar: function renderEllipsisAvatar(children) {
        var h = this.$createElement;

        if ((children === null || children === void 0 ? void 0 : children.length) > this.max) {
          var content = this.setEllipsisContent(children);
          var outAvatar = children.slice(0, this.max);
          outAvatar.push(h(_Avatar, {
            "attrs": {
              "size": this.size,
              "icon": this.isIcon() ? this.collapseAvatar : null
            }
          }, [content]));
          return [outAvatar];
        }

        return [children];
      },
      setEllipsisContent: function setEllipsisContent(children) {
        var content = "";

        if (this.collapseAvatar) {
          if (!this.isIcon()) {
            content = renderContent(this, "collapseAvatar", "content");
          }
        } else {
          content = "+".concat(children.length - this.max);
        }

        return content;
      },
      isIcon: function isIcon() {
        var content = renderTNodeJSX(this, "collapseAvatar");
        return (content === null || content === void 0 ? void 0 : content.context) instanceof Vue__default["default"];
      }
    },
    render: function render() {
      var _ref;

      var h = arguments[0];
      var $scopedSlots = this.$scopedSlots;
      var children = $scopedSlots["default"] && $scopedSlots["default"](null);
      var _this$$props = this.$props,
          cascading = _this$$props.cascading,
          max = _this$$props.max;
      var groupClass = ["".concat(this.componentName, "-group"), (_ref = {}, _defineProperty$3(_ref, "".concat(this.componentName, "--offset-right"), cascading === "right-up"), _defineProperty$3(_ref, "".concat(this.componentName, "--offset-left"), cascading === "left-up"), _ref)];
      var content = [children];

      if (max && max >= 0) {
        content = [this.renderEllipsisAvatar(children)];
      }

      return h("div", {
        "class": groupClass
      }, [content]);
    }
  });

  var Avatar = withInstall(_Avatar);
  var AvatarGroup = withInstall(_AvatarGroup);

  var props$h = {
    color: {
      type: String,
      "default": ""
    },
    content: {
      type: [String, Function]
    },
    count: {
      type: [String, Number, Function],
      "default": 0
    },
    "default": {
      type: [String, Function]
    },
    dot: Boolean,
    maxCount: {
      type: Number,
      "default": 99
    },
    offset: {
      type: Array
    },
    shape: {
      type: String,
      "default": "circle",
      validator: function validator(val) {
        return ["circle", "round"].includes(val);
      }
    },
    showZero: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium"].includes(val);
      }
    }
  };

  function ownKeys$G(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$F(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$G(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$G(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$b = getClassPrefixMixins("badge");
  var _Badge = mixins(classPrefixMixins$b).extend({
    name: "TBadge",
    props: _objectSpread$F({}, props$h),
    methods: {
      getContent: function getContent() {
        if (this.dot) return "";

        if (typeof this.count === "function") {
          return renderTNodeJSX(this, "count");
        }

        if (isNaN(Number(this.count))) {
          return this.count;
        }

        var count = Number(this.count);
        return count > this.maxCount ? "".concat(this.maxCount, "+") : count;
      },
      isSmall: function isSmall() {
        return this.size === "small";
      },
      isZero: function isZero() {
        var content = this.getContent();
        return content === 0 || content === "0";
      },
      isHidden: function isHidden() {
        return !this.showZero && this.isZero();
      },
      getOffset: function getOffset() {
        if (!this.offset) return {};

        var _this$offset = _slicedToArray(this.offset, 2),
            xOffset = _this$offset[0],
            yOffset = _this$offset[1];

        xOffset = isNaN(Number(xOffset)) ? xOffset : "".concat(xOffset, "px");
        yOffset = isNaN(Number(yOffset)) ? yOffset : "".concat(yOffset, "px");
        return {
          xOffset: xOffset,
          yOffset: yOffset
        };
      }
    },
    render: function render() {
      var _ref;

      var h = arguments[0];
      var _this$$props = this.$props,
          dot = _this$$props.dot,
          shape = _this$$props.shape,
          color = _this$$props.color;
      var content = this.getContent();
      var isHidden = this.isHidden();
      var children = this.$slots["default"];

      var _this$getOffset = this.getOffset(),
          xOffset = _this$getOffset.xOffset,
          yOffset = _this$getOffset.yOffset;

      var badgeClassNames = [(_ref = {}, _defineProperty$3(_ref, "".concat(this.componentName, "--dot"), !!dot), _defineProperty$3(_ref, "".concat(this.componentName, "--circle"), !dot && shape === "circle"), _defineProperty$3(_ref, "".concat(this.componentName, "--round"), shape === "round"), _defineProperty$3(_ref, "".concat(this.componentName, "--ribbon"), shape === "ribbon"), _defineProperty$3(_ref, "".concat(this.classPrefix, "-size-s"), this.isSmall()), _ref)];
      var inlineStyle = {
        background: "".concat(color),
        right: xOffset,
        top: yOffset
      };
      return h("div", {
        "class": this.componentName
      }, [children || null, isHidden ? null : h("sup", {
        "class": badgeClassNames,
        "style": inlineStyle
      }, [content])]);
    }
  });

  var Badge = withInstall(_Badge);

  var calendar = createCommonjsModule(function (module, exports) {
    !function (e, t) {
      module.exports = t() ;
    }(commonjsGlobal, function () {

      return function (e, t, a) {
        var n = "h:mm A",
            d = {
          lastDay: "[Yesterday at] " + n,
          sameDay: "[Today at] " + n,
          nextDay: "[Tomorrow at] " + n,
          nextWeek: "dddd [at] " + n,
          lastWeek: "[Last] dddd [at] " + n,
          sameElse: "MM/DD/YYYY"
        };

        t.prototype.calendar = function (e, t) {
          var n = t || this.$locale().calendar || d,
              o = a(e || void 0).startOf("d"),
              s = this.diff(o, "d", !0),
              i = "sameElse",
              f = s < -6 ? i : s < -1 ? "lastWeek" : s < 0 ? "lastDay" : s < 1 ? "sameDay" : s < 2 ? "nextDay" : s < 7 ? "nextWeek" : i,
              l = n[f] || d[f];
          return "function" == typeof l ? l.call(this, a()) : this.format(l);
        };
      };
    });
  });

  var props$g = {
    cell: {
      type: [String, Function]
    },
    cellAppend: {
      type: [String, Function]
    },
    controllerConfig: {
      type: [Boolean, Object],
      "default": void 0
    },
    fillWithZero: {
      type: Boolean,
      "default": void 0
    },
    firstDayOfWeek: {
      type: Number,
      validator: function validator(val) {
        if (!val) return true;
        return [1, 2, 3, 4, 5, 6, 7].includes(val);
      }
    },
    format: {
      type: String,
      "default": "YYYY-MM-DD"
    },
    head: {
      type: [String, Function]
    },
    isShowWeekendDefault: {
      type: Boolean,
      "default": true
    },
    mode: {
      type: String,
      "default": "month",
      validator: function validator(val) {
        if (!val) return true;
        return ["month", "year"].includes(val);
      }
    },
    month: {
      type: [String, Number]
    },
    preventCellContextmenu: Boolean,
    range: {
      type: Array
    },
    theme: {
      type: String,
      "default": "full",
      validator: function validator(val) {
        if (!val) return true;
        return ["full", "card"].includes(val);
      }
    },
    value: {
      type: [String, Date]
    },
    week: {
      type: [Array, Function]
    },
    year: {
      type: [String, Number]
    },
    onCellClick: Function,
    onCellDoubleClick: Function,
    onCellRightClick: Function,
    onControllerChange: Function,
    onMonthChange: Function
  };

  var MIN_YEAR = 1970;
  var FIRST_MONTH_OF_YEAR = 1;
  var LAST_MONTH_OF_YEAR = 12;
  var DEFAULT_YEAR_CELL_NUMINROW = 4;
  var DAY_CN_MAP = {
    1: "\u4E00",
    2: "\u4E8C",
    3: "\u4E09",
    4: "\u56DB",
    5: "\u4E94",
    6: "\u516D",
    7: "\u65E5"
  };

  var getDay = function getDay(dt) {
    var day = dayjs_min(dt).day();

    if (day === 0) {
      day = 7;
    }

    return day;
  };

  var getDayCn = function getDayCn(num) {
    var re = "";
    var numStr = num.toString();

    if (numStr in DAY_CN_MAP) {
      re = DAY_CN_MAP[numStr];
    }

    return re;
  };

  var getCellColIndex = function getCellColIndex(firstDayOfWeek, dt) {
    var re = 0;
    var day = getDay(dt);

    if (day >= firstDayOfWeek) {
      re = day - firstDayOfWeek;
    } else {
      re = 7 - firstDayOfWeek + day;
    }

    return re;
  };

  var addDate = function addDate(dt, days) {
    var d = new Date(dt);
    d.setDate(d.getDate() + days);
    return d;
  };

  var createYearCellsData = function createYearCellsData(year, curDate, format) {
    var monthsArr = [];
    var isCurYear = curDate.year() === year;

    for (var num = FIRST_MONTH_OF_YEAR; num <= LAST_MONTH_OF_YEAR; num++) {
      var date = new Date(year, num - 1);
      var curDateMon = parseInt(curDate.format("M"), 10);
      var isCurrent = isCurYear && curDateMon === num;
      monthsArr.push({
        mode: "year",
        isCurrent: isCurrent,
        date: date,
        formattedDate: dayjs_min(date).format(format),
        filterDate: null,
        formattedFilterDate: null,
        isShowWeekend: true
      });
    }

    return monthsArr;
  };

  var createMonthCellsData = function createMonthCellsData(year, month, firstDayOfWeek, curDate, format) {
    var daysArr = [];
    var begin = dayjs_min("".concat(year, "-").concat(month)).startOf("month").toDate();
    var end = dayjs_min("".concat(year, "-").concat(month)).endOf("month").toDate();
    var days = end.getDate();
    var beginDateColIndex = getCellColIndex(firstDayOfWeek, begin);
    var arr = [];
    var num = 1;

    var createCellData = function createCellData(belongTo, isCurrent, date, weekOrder) {
      var day = getDay(date);
      return {
        mode: "month",
        belongTo: belongTo,
        isCurrent: isCurrent,
        day: day,
        weekOrder: weekOrder,
        date: date,
        formattedDate: dayjs_min(date).format(format),
        filterDate: null,
        formattedFilterDate: null,
        isShowWeekend: true
      };
    };

    for (var i = 0; i < beginDateColIndex; i++) {
      var date = addDate(begin, i - beginDateColIndex);
      arr.push(createCellData(-1, false, date, num));

      if (arr.length === 7) {
        daysArr.push(arr);
        arr = [];
        num += 1;
      }
    }

    for (var _i = 0; _i < days; _i++) {
      var _date = addDate(begin, _i);

      arr.push(createCellData(0, curDate.isSame(dayjs_min(_date)), _date, num));

      if (arr.length === 7) {
        daysArr.push(arr);
        arr = [];
        num += 1;
      }
    }

    if (arr.length) {
      var nextMonthCellNum = 7 - arr.length;

      for (var _i2 = 0; _i2 < nextMonthCellNum; _i2++) {
        var _date2 = addDate(end, _i2 + 1);

        arr.push(createCellData(1, false, _date2, num));
      }

      daysArr.push(arr);
    }

    return daysArr;
  };

  var classPrefixMixins$a = getClassPrefixMixins("calendar");
  var clickTypeEmitEventMap = {
    click: "click",
    dblclick: "dblclick",
    contextmenu: "rightclick"
  };
  var CalendarCellItem = mixins(classPrefixMixins$a).extend({
    name: "TCalendarCell",
    props: {
      item: {
        type: Object,
        "default": function _default() {
          return null;
        }
      },
      theme: {
        type: String,
        "default": function _default() {
          return null;
        }
      },
      fillWithZero: {
        type: Boolean,
        "default": void 0
      },
      t: Function,
      global: Object,
      cell: Function
    },
    computed: {
      allowSlot: function allowSlot() {
        return this.theme === "full";
      },
      disabled: function disabled() {
        return this.item.mode === "month" && this.item.belongTo !== 0;
      },
      valueDisplay: function valueDisplay() {
        if (this.item.mode === "month") {
          var _ref, _this$fillWithZero;

          var dateNum = this.item.date.getDate();
          var fillZero = dateNum < 10 && ((_ref = (_this$fillWithZero = this.fillWithZero) !== null && _this$fillWithZero !== void 0 ? _this$fillWithZero : this.global.fillWithZero) !== null && _ref !== void 0 ? _ref : true);
          return fillZero ? "0".concat(dateNum) : dateNum;
        }

        var map = this.t(this.global.cellMonth).split(",");
        return map[this.item.date.getMonth().toString()];
      },
      cellCls: function cellCls() {
        var _ref2;

        var _this$item = this.item,
            mode = _this$item.mode,
            date = _this$item.date,
            formattedDate = _this$item.formattedDate,
            isCurrent = _this$item.isCurrent;
        var isNow = mode === "year" ? new Date().getMonth() === date.getMonth() : formattedDate === dayjs_min().format("YYYY-MM-DD");
        return ["".concat(this.componentName, "__table-body-cell"), (_ref2 = {}, _defineProperty$3(_ref2, "".concat(this.classPrefix, "-is-disabled"), this.disabled), _defineProperty$3(_ref2, "".concat(this.classPrefix, "-is-checked"), isCurrent), _defineProperty$3(_ref2, "".concat(this.componentName, "__table-body-cell--now"), isNow), _ref2)];
      }
    },
    methods: {
      clickCell: function clickCell(e) {
        if (this.disabled) return;
        this.$emit(clickTypeEmitEventMap[e.type], e);
      }
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var item = this.item,
          cellCls = this.cellCls,
          clickCell = this.clickCell,
          valueDisplay = this.valueDisplay,
          allowSlot = this.allowSlot;

      var defaultNode = function defaultNode() {
        return h("span", [h("div", {
          "class": "".concat(_this.componentName, "__table-body-cell-display")
        }, [valueDisplay]), h("div", {
          "class": "".concat(_this.componentName, "__table-body-cell-content")
        }, [allowSlot && renderTNodeJSX(_this, "cellAppend", {
          params: item
        })])]);
      };

      return item && h("div", {
        "class": cellCls,
        "on": {
          "click": clickCell,
          "dblclick": clickCell,
          "contextmenu": clickCell
        }
      }, [typeof this.cell === "function" ? this.cell(this.$createElement, item) : renderTNodeJSXDefault(this, "cell", {
        defaultNode: defaultNode(),
        params: item
      })]);
    }
  });

  var RenderComponent = Vue__default["default"].extend({
    name: "render-component",
    functional: true,
    props: {
      render: Function
    },
    render: function render(h, ctx) {
      return ctx.props.render(h, ctx.data.attrs);
    }
  });

  function ownKeys$F(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$E(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$F(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$F(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  dayjs_min.extend(calendar);

  var createDefaultCurDate = function createDefaultCurDate() {
    return dayjs_min(dayjs_min().format("YYYY-MM-DD"));
  };

  var getDefaultControllerConfigData = function getDefaultControllerConfigData() {
    var visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    return {
      visible: visible,
      disabled: false,
      mode: {
        visible: true,
        radioGroupProps: {}
      },
      year: {
        visible: true,
        selectProps: {}
      },
      month: {
        visible: true,
        selectProps: {}
      },
      weekend: {
        visible: true,
        showWeekendButtonProps: {},
        hideWeekendButtonProps: {}
      },
      current: {
        visible: true,
        currentDayButtonProps: {},
        currentMonthButtonProps: {}
      }
    };
  };

  var _Calendar = mixins(getConfigReceiverMixins("calendar")).extend({
    name: "TCalendar",
    components: {
      TCheckTag: CheckTag,
      TSelect: Select,
      TOption: Option,
      TRadioGroup: RadioGroup,
      TRadioButton: RadioButton,
      TButton: Button,
      CalendarCellItem: CalendarCellItem,
      RenderComponent: RenderComponent
    },
    props: _objectSpread$E({}, props$g),
    data: function data() {
      return {
        curDate: null,
        curSelectedYear: null,
        curSelectedMonth: null,
        curSelectedMode: null,
        isShowWeekend: true,
        controlSize: "medium"
      };
    },
    computed: {
      realFirstDayOfWeek: function realFirstDayOfWeek() {
        var _ref, _this$firstDayOfWeek;

        return (_ref = (_this$firstDayOfWeek = this.firstDayOfWeek) !== null && _this$firstDayOfWeek !== void 0 ? _this$firstDayOfWeek : this.global.firstDayOfWeek) !== null && _ref !== void 0 ? _ref : 1;
      },
      TEXT_MAP: function TEXT_MAP() {
        var t = this.t,
            global = this.global;
        var r = {
          showWeekend: t(global.showWeekend),
          hideWeekend: t(global.hideWeekend),
          today: t(global.today),
          thisMonth: t(global.thisMonth)
        };
        return r;
      },
      weekDipalyText: function weekDipalyText() {
        return this.week || this.t(this.global.week).split(",");
      },
      calendarCls: function calendarCls() {
        return ["".concat(this.componentName), "".concat(this.componentName, "--").concat(this.theme)];
      },
      calendarPanelCls: function calendarPanelCls() {
        return ["".concat(this.componentName, "__panel"), "".concat(this.componentName, "__panel--").concat(this.curSelectedMode)];
      },
      isWeekRender: function isWeekRender() {
        return typeof this.week === "function";
      },
      rangeFromTo: function rangeFromTo() {
        if (!this.range || this.range.length < 2) {
          return null;
        }

        var _this$range = _slicedToArray(this.range, 2),
            v1 = _this$range[0],
            v2 = _this$range[1];

        if (dayjs_min(v1).isBefore(dayjs_min(v2))) {
          return {
            from: v1,
            to: v2
          };
        }

        return {
          from: v2,
          to: v1
        };
      },
      controllerOptions: function controllerOptions() {
        var dayJsFilterDate = dayjs_min("".concat(this.curSelectedYear, "-").concat(this.curSelectedMonth));
        var re = {
          isShowWeekend: this.isShowWeekend,
          filterDate: dayJsFilterDate.toDate(),
          formattedFilterDate: dayJsFilterDate.format(this.format),
          mode: this.curSelectedMode
        };
        return re;
      },
      cellColHeaders: function cellColHeaders() {
        var re = [];
        var min = 1;
        var max = 7;

        for (var i = this.realFirstDayOfWeek; i <= max; i++) {
          re.push({
            num: i,
            display: this.getWeekDisplay(i)
          });
        }

        if (this.realFirstDayOfWeek > min) {
          for (var _i = min; _i < this.realFirstDayOfWeek; _i++) {
            re.push({
              num: _i,
              display: this.getWeekDisplay(_i)
            });
          }
        }

        return re;
      },
      yearSelectOptionList: function yearSelectOptionList() {
        var re = [];
        var begin = this.curSelectedYear - 10;
        var end = this.curSelectedYear + 10;

        if (this.rangeFromTo && this.rangeFromTo.from && this.rangeFromTo.to) {
          begin = dayjs_min(this.rangeFromTo.from).year();
          end = dayjs_min(this.rangeFromTo.to).year();
        }

        if (begin < MIN_YEAR) {
          begin = MIN_YEAR;
        }

        if (end < MIN_YEAR) {
          end = MIN_YEAR;
        }

        for (var i = begin; i <= end; i++) {
          var disabled = this.checkMonthAndYearSelecterDisabled(i, this.curSelectedMonth);
          re.push({
            value: i,
            label: this.t(this.global.yearSelection, {
              year: i
            }),
            disabled: disabled
          });
        }

        return re;
      },
      monthSelectOptionList: function monthSelectOptionList() {
        var re = [];

        for (var i = FIRST_MONTH_OF_YEAR; i <= LAST_MONTH_OF_YEAR; i++) {
          var disabled = this.checkMonthAndYearSelecterDisabled(this.curSelectedYear, i);
          re.push({
            value: i,
            label: this.t(this.global.monthSelection, {
              month: i
            }),
            disabled: disabled
          });
        }

        return re;
      },
      modeSelectOptionList: function modeSelectOptionList() {
        return [{
          value: "month",
          label: this.t(this.global.monthRadio)
        }, {
          value: "year",
          label: this.t(this.global.yearRadio)
        }];
      },
      monthCellsData: function monthCellsData() {
        var realFirstDayOfWeek = this.realFirstDayOfWeek;
        var daysArr = createMonthCellsData(this.curSelectedYear, this.curSelectedMonth, realFirstDayOfWeek, this.curDate, this.format);
        return daysArr;
      },
      yearCellsData: function yearCellsData() {
        var re = [];
        var monthsArr = createYearCellsData(this.curSelectedYear, this.curDate, this.format);
        var rowCount = Math.ceil(monthsArr.length / DEFAULT_YEAR_CELL_NUMINROW);
        var index = 0;

        for (var i = 1; i <= rowCount; i++) {
          var row = [];

          for (var j = 1; j <= DEFAULT_YEAR_CELL_NUMINROW; j++) {
            row.push(monthsArr[index]);
            index += 1;
          }

          re.push(row);
        }

        return re;
      },
      controllerConfigData: function controllerConfigData() {
        var _ref2, _this$controllerConfi;

        var controllerConfig = (_ref2 = (_this$controllerConfi = this.controllerConfig) !== null && _this$controllerConfi !== void 0 ? _this$controllerConfi : this.global.controllerConfig) !== null && _ref2 !== void 0 ? _ref2 : true;

        if (typeof controllerConfig === "boolean") {
          return getDefaultControllerConfigData(controllerConfig);
        }

        return _objectSpread$E(_objectSpread$E({}, getDefaultControllerConfigData()), controllerConfig);
      },
      isControllerVisible: function isControllerVisible() {
        return this.controllerConfigData && this.controllerConfigData.visible;
      },
      weekendBtnText: function weekendBtnText() {
        return this.isShowWeekend ? this.TEXT_MAP.hideWeekend : this.TEXT_MAP.showWeekend;
      },
      weekendBtnVBind: function weekendBtnVBind() {
        var c = this.controllerConfigData.weekend;
        return this.isShowWeekend ? c.hideWeekendButtonProps : c.showWeekendButtonProps;
      },
      currentBtnText: function currentBtnText() {
        return this.curSelectedMode === "month" ? this.TEXT_MAP.today : this.TEXT_MAP.thisMonth;
      },
      currentBtnVBind: function currentBtnVBind() {
        var c = this.controllerConfigData.current;
        return this.curSelectedMode === "month" ? c.currentDayButtonProps : c.currentMonthButtonProps;
      },
      isModeVisible: function isModeVisible() {
        return this.checkControllerVisible("mode");
      },
      isYearVisible: function isYearVisible() {
        return this.checkControllerVisible("year");
      },
      isMonthVisible: function isMonthVisible() {
        return this.checkControllerVisible("month");
      },
      isWeekendToggleVisible: function isWeekendToggleVisible() {
        return this.checkControllerVisible("weekend");
      },
      isCurrentBtnVisible: function isCurrentBtnVisible() {
        return this.checkControllerVisible("current");
      },
      isModeDisabled: function isModeDisabled() {
        return this.checkControllerDisabled("mode", "radioGroupProps");
      },
      isYearDisabled: function isYearDisabled() {
        return this.checkControllerDisabled("year", "selectProps");
      },
      isMonthDisabled: function isMonthDisabled() {
        return this.checkControllerDisabled("month", "selectProps");
      },
      isWeekendToggleDisabled: function isWeekendToggleDisabled() {
        var p = this.isShowWeekend ? "hideWeekendButtonProps" : "showWeekendButtonProps";
        return this.checkControllerDisabled("weekend", p);
      },
      isCurrentBtnDisabled: function isCurrentBtnDisabled() {
        var p = this.curSelectedMode === "month" ? "currentDayButtonProps" : "currentMonthButtonProps";
        return this.checkControllerDisabled("current", p);
      },
      filterYearStr: function filterYearStr() {
        return "".concat(this.controllerOptions.filterDate.getFullYear());
      },
      filterMonthStr: function filterMonthStr() {
        return "".concat(this.controllerOptions.filterDate.getMonth() + 1);
      },
      filterYearMonth: function filterYearMonth() {
        return {
          year: this.filterYearStr,
          month: this.filterMonthStr
        };
      }
    },
    watch: {
      value: {
        handler: function handler(v) {
          this.setCurrentDate(v);
        },
        immediate: true
      },
      year: {
        handler: function handler(v) {
          this.setCurSelectedYear(v);
        },
        immediate: true
      },
      month: {
        handler: function handler(v) {
          this.setCurSelectedMonth(v);
        },
        immediate: true
      },
      mode: {
        handler: function handler(v) {
          this.curSelectedMode = v;
        },
        immediate: true
      },
      isShowWeekendDefault: {
        handler: function handler(v) {
          this.isShowWeekend = v;
        },
        immediate: true
      },
      filterYearMonth: {
        handler: function handler(v) {
          emitEvent(this, "month-change", v);
          this.controllerChange();
        }
      },
      curSelectedMode: function curSelectedMode() {
        this.handleIE();
      },
      isShowWeekend: function isShowWeekend() {
        this.handleIE();
      },
      isControllerVisible: function isControllerVisible() {
        this.handleIE();
      }
    },
    mounted: function mounted() {
      this.handleIE();
    },
    methods: {
      handleIE: function handleIE() {
        var _this = this;

        if (getIEVersion$1() <= 9) {
          this.$nextTick(function () {
            var element = _this.$el.children[_this.isControllerVisible ? 1 : 0];

            if (_this.curSelectedMode === "month") {
              element.setAttribute("is-show-weekend", "".concat(_this.isShowWeekend));
            } else {
              element.removeAttribute("is-show-weekend");
            }
          });
        }
      },
      getCalendarWeekSlotData: function getCalendarWeekSlotData(item) {
        return {
          day: item.num
        };
      },
      getWeekDisplay: function getWeekDisplay(weekNum) {
        var weekText = this.weekDipalyText;
        return _typeof$1(weekText) === "object" && weekText[weekNum - 1] ? weekText[weekNum - 1] : getDayCn(weekNum);
      },
      checkMonthCellItemShowed: function checkMonthCellItemShowed(cellData) {
        return this.isShowWeekend || cellData.day < 6;
      },
      createCalendarCell: function createCalendarCell(cellData) {
        return _objectSpread$E(_objectSpread$E({}, cellData), this.controllerOptions);
      },
      clickCell: function clickCell(e, cellData) {
        this.curDate = dayjs_min(cellData.date);
        var options = this.getCellClickEventOptions(e, cellData);
        emitEvent(this, "cell-click", options);
      },
      doubleClickCell: function doubleClickCell(e, cellData) {
        var options = this.getCellClickEventOptions(e, cellData);
        emitEvent(this, "cell-double-click", options);
      },
      rightClickCell: function rightClickCell(e, cellData) {
        if (this.preventCellContextmenu) {
          e.preventDefault();
        }

        var options = this.getCellClickEventOptions(e, cellData);
        emitEvent(this, "cell-right-click", options);
      },
      getCellClickEventOptions: function getCellClickEventOptions(e, cellData) {
        return {
          cell: this.createCalendarCell(cellData),
          e: e
        };
      },
      controllerChange: function controllerChange() {
        var options = this.controllerOptions;
        emitEvent(this, "controller-change", options);
      },
      onWeekendToggleClick: function onWeekendToggleClick() {
        this.isShowWeekend = !this.isShowWeekend;
        this.controllerChange();
      },
      checkMonthCellColHeaderVisibled: function checkMonthCellColHeaderVisibled(item) {
        var re = true;

        if (!this.isShowWeekend) {
          re = item.num !== 6 && item.num !== 7;
        }

        return re;
      },
      checkControllerDisabled: function checkControllerDisabled(name, propsName) {
        var re = false;
        var conf = this.controllerConfigData;

        if (conf && (conf.disabled || conf[name] && conf[name][propsName] && conf[name][propsName].disabled)) {
          re = true;
        }

        return re;
      },
      checkControllerVisible: function checkControllerVisible(name) {
        var re = true;
        var conf = this.controllerConfigData;

        if (!conf || !conf.visible || conf[name] === false || conf[name] && !conf[name].visible) {
          re = false;
        }

        return re;
      },
      toToday: function toToday() {
        var currentSelectDate = createDefaultCurDate();
        this.curSelectedYear = currentSelectDate.year();
        this.curSelectedMonth = parseInt(currentSelectDate.format("M"), 10);
      },
      setCurSelectedYear: function setCurSelectedYear(year) {
        var curSelectedYear = year ? parseInt("".concat(year), 10) : createDefaultCurDate().year();

        if (!isNaN(curSelectedYear) && curSelectedYear > 0) {
          this.curSelectedYear = curSelectedYear;
        }
      },
      setCurSelectedMonth: function setCurSelectedMonth(month) {
        var curSelectedMonth = month ? parseInt("".concat(month), 10) : parseInt(createDefaultCurDate().format("M"), 10);

        if (!isNaN(curSelectedMonth) && curSelectedMonth > 0 && curSelectedMonth <= 12) {
          this.curSelectedMonth = curSelectedMonth;
        }
      },
      setCurrentDate: function setCurrentDate(value) {
        this.curDate = value ? dayjs_min(value) : createDefaultCurDate();
      },
      checkMonthAndYearSelecterDisabled: function checkMonthAndYearSelecterDisabled(year, month) {
        var disabled = false;

        if (this.rangeFromTo && this.rangeFromTo.from && this.rangeFromTo.to) {
          var beginYear = dayjs_min(this.rangeFromTo.from).year();
          var endYear = dayjs_min(this.rangeFromTo.to).year();

          if (year === beginYear) {
            var beginMon = parseInt(dayjs_min(this.rangeFromTo.from).format("M"), 10);
            disabled = month < beginMon;
          } else if (year === endYear) {
            var endMon = parseInt(dayjs_min(this.rangeFromTo.to).format("M"), 10);
            disabled = month > endMon;
          }
        }

        return disabled;
      },
      renderControl: function renderControl() {
        var _this2 = this;

        var h = this.$createElement;
        var controllerOptions = this.controllerOptions;
        return h("div", {
          "class": "".concat(this.componentName, "__control")
        }, [h("div", {
          "class": "".concat(this.componentName, "__title")
        }, [renderTNodeJSX(this, "head", {
          params: controllerOptions
        })]), h("div", {
          "class": "".concat(this.componentName, "__control-section")
        }, [this.isYearVisible && h("div", {
          "class": "".concat(this.componentName, "__control-section-cell")
        }, [h("t-select", helper([{
          "attrs": {
            "size": this.controlSize,
            "disabled": this.isYearDisabled,
            "autoWidth": true
          }
        }, {
          "props": _objectSpread$E({}, this.controllerConfigData.year.selectProps)
        }, {
          "model": {
            value: _this2.curSelectedYear,
            callback: function callback($$v) {
              _this2.curSelectedYear = $$v;
            }
          }
        }]), [this.yearSelectOptionList.map(function (item) {
          return h("t-option", {
            "key": item.value,
            "attrs": {
              "value": item.value,
              "label": item.label,
              "disabled": item.disabled
            }
          }, [item.label]);
        })])]), this.curSelectedMode === "month" && this.isMonthVisible && h("div", {
          "class": "".concat(this.componentName, "__control-section-cell")
        }, [h("t-select", helper([{
          "attrs": {
            "size": this.controlSize,
            "disabled": this.isMonthDisabled,
            "autoWidth": true
          }
        }, {
          "props": _objectSpread$E({}, this.controllerConfigData.month.selectProps)
        }, {
          "model": {
            value: _this2.curSelectedMonth,
            callback: function callback($$v) {
              _this2.curSelectedMonth = $$v;
            }
          }
        }]), [this.monthSelectOptionList.map(function (item) {
          return h("t-option", {
            "key": item.value,
            "attrs": {
              "value": item.value,
              "label": item.label,
              "disabled": item.disabled
            }
          }, [item.label]);
        })])]), this.isModeVisible && h("div", {
          "class": "".concat(this.componentName, "__control-section-cell"),
          "style": "height: auto"
        }, [h("t-radio-group", helper([{
          "attrs": {
            "variant": "default-filled",
            "size": this.controlSize,
            "disabled": this.isModeDisabled
          }
        }, {
          "props": _objectSpread$E({}, this.controllerConfigData.mode.radioGroupProps)
        }, {
          "on": {
            "change": this.controllerChange
          },
          "model": {
            value: _this2.curSelectedMode,
            callback: function callback($$v) {
              _this2.curSelectedMode = $$v;
            }
          }
        }]), [this.modeSelectOptionList.map(function (item) {
          return h("t-radio-button", {
            "key": item.value,
            "attrs": {
              "value": item.value
            }
          }, [item.label]);
        })])]), this.theme === "full" && this.curSelectedMode === "month" && this.isWeekendToggleVisible && h("div", {
          "class": "".concat(this.componentName, "__control-section-cell")
        }, [h("t-check-tag", helper([{
          "class": "".concat(this.componentName, "__control-tag"),
          "attrs": {
            "defaultChecked": !this.isShowWeekend,
            "disabled": this.isWeekendToggleDisabled
          },
          "on": {
            "click": this.onWeekendToggleClick
          }
        }, {
          "props": _objectSpread$E({}, this.weekendBtnVBind)
        }]), [this.weekendBtnText])]), this.theme === "full" && this.isCurrentBtnVisible && h("div", {
          "class": "".concat(this.componentName, "__control-section-cell")
        }, [h("t-button", helper([{
          "attrs": {
            "size": this.controlSize,
            "disabled": this.isCurrentBtnDisabled
          },
          "on": {
            "click": function click() {
              _this2.toToday();
            }
          }
        }, {
          "props": _objectSpread$E({}, this.currentBtnVBind)
        }]), [this.currentBtnText])])])]);
      }
    },
    render: function render() {
      var _this3 = this;

      var h = arguments[0];
      var calendarCls = this.calendarCls,
          calendarPanelCls = this.calendarPanelCls,
          isControllerVisible = this.isControllerVisible,
          cellColHeaders = this.cellColHeaders,
          checkMonthCellColHeaderVisibled = this.checkMonthCellColHeaderVisibled;

      var monthBody = function monthBody() {
        return h("table", {
          "class": "".concat(_this3.componentName, "__table")
        }, [h("thead", {
          "class": "".concat(_this3.componentName, "__table-head")
        }, [h("tr", {
          "class": "".concat(_this3.componentName, "__table-head-row")
        }, [cellColHeaders.map(function (item, index) {
          return checkMonthCellColHeaderVisibled(item) && h("th", {
            "class": "".concat(_this3.componentName, "__table-head-cell")
          }, [Array.isArray(_this3.week) ? _this3.week[index] : renderTNodeJSXDefault(_this3, "week", {
            defaultNode: h("span", [item.display]),
            params: _this3.getCalendarWeekSlotData(item)
          })]);
        })])]), h("tbody", {
          "class": "".concat(_this3.componentName, "__table-body")
        }, [_this3.monthCellsData.map(function (week, weekIndex) {
          return h("tr", {
            "class": "".concat(_this3.componentName, "__table-body-row")
          }, [week.map(function (item, itemIndex) {
            return _this3.checkMonthCellItemShowed(item) && h("calendar-cell-item", {
              "key": "d-".concat(weekIndex, "-").concat(itemIndex),
              "attrs": {
                "item": item,
                "theme": _this3.theme,
                "t": _this3.t,
                "global": _this3.global,
                "cell": _this3.cell,
                "fillWithZero": _this3.fillWithZero
              },
              "on": {
                "click": function click(e) {
                  return _this3.clickCell(e, item);
                },
                "dblclick": function dblclick(e) {
                  return _this3.doubleClickCell(e, item);
                },
                "rightclick": function rightclick(e) {
                  return _this3.rightClickCell(e, item);
                }
              },
              "scopedSlots": _objectSpread$E({}, _this3.$scopedSlots)
            });
          })]);
        })])]);
      };

      var yearBody = function yearBody() {
        return h("table", {
          "class": "".concat(_this3.componentName, "__table")
        }, [h("tbody", {
          "class": "".concat(_this3.componentName, "__table-body")
        }, [_this3.yearCellsData.map(function (cell, cellIndex) {
          return h("tr", {
            "class": "".concat(_this3.componentName, "__table-body-row")
          }, [cell.map(function (item, itemIndex) {
            return h("calendar-cell-item", {
              "key": "m-".concat(cellIndex, "-").concat(itemIndex),
              "attrs": {
                "item": item,
                "theme": _this3.theme,
                "t": _this3.t,
                "global": _this3.global,
                "cell": _this3.cell,
                "fillWithZero": _this3.fillWithZero
              },
              "on": {
                "click": function click(e) {
                  return _this3.clickCell(e, item);
                },
                "dblclick": function dblclick(e) {
                  return _this3.doubleClickCell(e, item);
                },
                "rightclick": function rightclick(e) {
                  return _this3.rightClickCell(e, item);
                }
              },
              "scopedSlots": _objectSpread$E({}, _this3.$scopedSlots)
            });
          })]);
        })])]);
      };

      return h("div", {
        "class": calendarCls
      }, [isControllerVisible && this.renderControl(), h("div", {
        "class": calendarPanelCls
      }, [this.curSelectedMode === "month" ? monthBody() : yearBody()])]);
    }
  });

  var Calendar = withInstall(_Calendar);

  var props$f = {
    actions: {
      type: [String, Function]
    },
    avatar: {
      type: [String, Function]
    },
    bordered: {
      type: Boolean,
      "default": true
    },
    content: {
      type: [String, Function]
    },
    cover: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    description: {
      type: [String, Function]
    },
    footer: {
      type: [String, Function]
    },
    header: {
      type: [String, Function]
    },
    headerBordered: Boolean,
    hoverShadow: Boolean,
    loading: {
      type: [Boolean, Function],
      "default": false
    },
    shadow: Boolean,
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["medium", "small"].includes(val);
      }
    },
    status: {
      type: String,
      "default": ""
    },
    subtitle: {
      type: [String, Function]
    },
    theme: {
      type: String,
      "default": "normal",
      validator: function validator(val) {
        if (!val) return true;
        return ["normal", "poster1", "poster2"].includes(val);
      }
    },
    title: {
      type: [String, Function]
    }
  };

  function ownKeys$E(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$D(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$E(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$E(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Card = VueCompositionAPI.defineComponent({
    name: "TCard",
    props: _objectSpread$D({}, props$f),
    components: {
      TLoading: Loading
    },
    setup: function setup(props2, _ref) {
      var slots = _ref.slots;

      var _useCommonClassName = useCommonClassName(),
          sizeClassNames = _useCommonClassName.sizeClassNames;

      var COMPONENT_NAME = usePrefixClass$1("card");
      var baseCls = VueCompositionAPI.computed(function () {
        var defaultClass = [COMPONENT_NAME.value];
        if (props2.size === "small") defaultClass.push("".concat(sizeClassNames[props2.size]));
        if (props2.bordered) defaultClass.push("".concat(COMPONENT_NAME.value, "--bordered"));
        if (props2.shadow) defaultClass.push("".concat(COMPONENT_NAME.value, "--shadow"));
        if (props2.hoverShadow) defaultClass.push("".concat(COMPONENT_NAME.value, "--shadow-hover"));
        return defaultClass;
      });
      var headerCls = VueCompositionAPI.computed(function () {
        var defaultClass = ["".concat(COMPONENT_NAME.value, "__header")];
        return props2.headerBordered ? defaultClass.concat("".concat(COMPONENT_NAME.value, "__title--bordered")) : ["".concat(COMPONENT_NAME.value, "__header")];
      });
      var headerWrapperCls = usePrefixClass$1("card__header-wrapper");
      var headerAvatarCls = usePrefixClass$1("card__avatar");
      var headerTitleCls = usePrefixClass$1("card__title");
      var headerSubTitleCls = usePrefixClass$1("card__subtitle");
      var headerDescriptionCls = usePrefixClass$1("card__description");
      var actionsCls = usePrefixClass$1("card__actions");
      var bodyCls = usePrefixClass$1("card__body");
      var coverCls = usePrefixClass$1("card__cover");
      var footerCls = usePrefixClass$1("card__footer");
      var footerWrapperCls = usePrefixClass$1("card__footer-wrapper");
      var isPoster2 = VueCompositionAPI.computed(function () {
        return props2.theme === "poster2";
      });
      var showTitle = VueCompositionAPI.computed(function () {
        return props2.title || slots.title;
      });
      var showHeader = VueCompositionAPI.computed(function () {
        return props2.header || slots.header;
      });
      var showSubtitle = VueCompositionAPI.computed(function () {
        return props2.subtitle || slots.subtitle;
      });
      var showAvatar = VueCompositionAPI.computed(function () {
        return props2.avatar || slots.avatar;
      });
      var showDescription = VueCompositionAPI.computed(function () {
        return props2.description || slots.description;
      });
      var showStatus = VueCompositionAPI.computed(function () {
        return props2.status || slots.status;
      });
      var showActions = VueCompositionAPI.computed(function () {
        return props2.actions || slots.actions;
      });
      var showFooter = VueCompositionAPI.computed(function () {
        return props2.footer || slots.footer;
      });
      var showCover = VueCompositionAPI.computed(function () {
        return props2.cover || slots.cover;
      });
      var showLoading = VueCompositionAPI.computed(function () {
        return props2.loading || slots.loading;
      });
      var showContent = VueCompositionAPI.computed(function () {
        return props2.content || slots.content || props2["default"] || slots["default"];
      });
      var isHeaderRender = VueCompositionAPI.computed(function () {
        return showHeader.value || showTitle.value || showSubtitle.value || showDescription.value || showAvatar.value || showStatus.value && isPoster2.value || showActions.value && !isPoster2.value;
      });
      var isFooterRender = VueCompositionAPI.computed(function () {
        return showFooter.value || showActions.value && isPoster2.value;
      });
      return {
        isHeaderRender: isHeaderRender,
        isFooterRender: isFooterRender,
        isPoster2: isPoster2,
        showLoading: showLoading,
        showHeader: showHeader,
        showTitle: showTitle,
        showSubtitle: showSubtitle,
        showDescription: showDescription,
        showAvatar: showAvatar,
        showActions: showActions,
        showStatus: showStatus,
        showContent: showContent,
        showCover: showCover,
        showFooter: showFooter,
        baseCls: baseCls,
        bodyCls: bodyCls,
        footerCls: footerCls,
        footerWrapperCls: footerWrapperCls,
        coverCls: coverCls,
        actionsCls: actionsCls,
        headerCls: headerCls,
        headerWrapperCls: headerWrapperCls,
        headerAvatarCls: headerAvatarCls,
        headerTitleCls: headerTitleCls,
        headerSubTitleCls: headerSubTitleCls,
        headerDescriptionCls: headerDescriptionCls,
        COMPONENT_NAME: COMPONENT_NAME
      };
    },
    methods: {
      renderLoading: function renderLoading() {},
      renderCover: function renderCover() {
        var h = this.$createElement;
        var textCover = typeof this.cover === "string";
        return h("div", {
          "class": this.coverCls
        }, [textCover ? h("img", {
          "attrs": {
            "src": this.cover
          }
        }) : renderTNodeJSX(this, "cover")]);
      },
      renderHeader: function renderHeader() {
        var h = this.$createElement;
        if (this.showHeader) return h("div", {
          "class": this.headerCls
        }, [renderTNodeJSX(this, "header")]);
        return h("div", {
          "class": this.headerCls
        }, [h("div", {
          "class": this.headerWrapperCls
        }, [this.showAvatar && h("div", {
          "class": this.headerAvatarCls
        }, [renderTNodeJSX(this, "avatar")]), h("div", [this.showTitle && h("span", {
          "class": this.headerTitleCls
        }, [renderTNodeJSX(this, "title")]), this.showSubtitle && h("span", {
          "class": this.headerSubTitleCls
        }, [renderTNodeJSX(this, "subtitle")]), this.showDescription && h("p", {
          "class": this.headerDescriptionCls
        }, [renderTNodeJSX(this, "description")])])]), this.showActions && !this.isPoster2 && h("div", {
          "class": this.actionsCls
        }, [renderTNodeJSX(this, "actions")]), this.showStatus && h("div", {
          "class": this.actionsCls
        }, [renderTNodeJSX(this, "status")])]);
      }
    },
    render: function render() {
      var h = arguments[0];

      if (this.loading) {
        return renderTNodeJSX(this, "loading", {
          defaultNode: h("t-loading", [h("div", {
            "class": this.baseCls
          })])
        });
      }

      return h("div", {
        "class": this.baseCls
      }, [this.isHeaderRender ? this.renderHeader() : null, this.showCover ? this.renderCover() : null, this.showContent && h("div", {
        "class": this.bodyCls
      }, [renderContent(this, "default", "content")]), this.isFooterRender && h("div", {
        "class": this.footerCls
      }, [h("div", {
        "class": this.footerWrapperCls
      }, [renderTNodeJSX(this, "footer")]), this.showActions && this.isPoster2 && h("div", {
        "class": this.actionsCls
      }, [renderTNodeJSX(this, "actions")])])]);
    }
  });

  var Card = withInstall(_Card);

  var props$e = {
    actions: {
      type: Array
    },
    author: {
      type: [String, Function]
    },
    avatar: {
      type: [String, Object, Function]
    },
    content: {
      type: [String, Function]
    },
    datetime: {
      type: [String, Function]
    },
    quote: {
      type: [String, Function]
    },
    reply: {
      type: [String, Function]
    }
  };

  var classPrefixMixins$9 = getClassPrefixMixins("comment");
  var _Comment = mixins(classPrefixMixins$9).extend({
    name: "TComment",
    props: props$e,
    methods: {
      renderReply: function renderReply() {
        var h = this.$createElement;
        var reply = renderTNodeJSX(this, "reply");
        return reply ? h("div", {
          "class": "".concat(this.componentName, "__reply")
        }, [reply]) : null;
      },
      renderActions: function renderActions() {
        var h = this.$createElement;
        var actions = renderTNodeJSX(this, "actions");
        return actions && actions.length ? h("ul", {
          "class": "".concat(this.componentName, "__actions")
        }, [actions.map(function (action, index) {
          return h("li", {
            "key": "action-".concat(index)
          }, [action]);
        })]) : null;
      },
      renderQuote: function renderQuote() {
        var h = this.$createElement;
        var quote = renderTNodeJSX(this, "quote");
        return quote ? h("div", {
          "class": "".concat(this.componentName, "__quote")
        }, [quote]) : null;
      },
      renderAuthorDatetime: function renderAuthorDatetime() {
        var h = this.$createElement;
        var author = renderTNodeJSX(this, "author");
        var datetime = renderTNodeJSX(this, "datetime");
        return (author || datetime) && h("div", {
          "class": "".concat(this.componentName, "__author")
        }, [author && h("span", {
          "class": "".concat(this.componentName, "__name")
        }, [author]), datetime && h("span", {
          "class": "".concat(this.componentName, "__time")
        }, [datetime])]);
      },
      renderContent: function renderContent() {
        var h = this.$createElement;
        return h("div", {
          "class": "".concat(this.componentName, "__content")
        }, [this.renderAuthorDatetime(), h("div", {
          "class": "".concat(this.componentName, "__detail")
        }, [renderTNodeJSX(this, "content")]), this.renderQuote(), this.renderActions()]);
      },
      renderAvatar: function renderAvatar() {
        var h = this.$createElement;
        var avatar = renderTNodeJSX(this, "avatar");
        return avatar ? h("div", {
          "class": "".concat(this.componentName, "__avatar")
        }, [typeof avatar === "string" ? h("img", {
          "attrs": {
            "src": avatar,
            "alt": ""
          },
          "class": "".concat(this.componentName, "__avatar-image")
        }) : avatar]) : null;
      }
    },
    render: function render() {
      var h = arguments[0];
      return h("div", {
        "class": this.componentName
      }, [h("div", {
        "class": "".concat(this.componentName, "__inner")
      }, [this.renderAvatar(), this.renderContent()]), this.renderReply()]);
    }
  });

  var Comment = withInstall(_Comment);

  var props$d = {
    asyncLoading: {
      type: [String, Function]
    },
    footer: {
      type: [String, Function]
    },
    header: {
      type: [String, Function]
    },
    layout: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        return ["horizontal", "vertical"].includes(val);
      }
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        return ["small", "medium", "large"].includes(val);
      }
    },
    split: Boolean,
    stripe: Boolean,
    onLoadMore: Function,
    onScroll: Function
  };

  var LOAD_MORE = "load-more";
  var LOADING = "loading";

  function ownKeys$D(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$C(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$D(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$D(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$8 = getClassPrefixMixins("list");
  var _List = mixins(classPrefixMixins$8).extend({
    name: "TList",
    props: _objectSpread$C({}, props$d),
    computed: {
      listClass: function listClass() {
        var _ref;

        return ["".concat(this.componentName), this.commonSizeClassName[this.size], (_ref = {}, _defineProperty$3(_ref, "".concat(this.componentName, "--split"), this.split), _defineProperty$3(_ref, "".concat(this.componentName, "--stripe"), this.stripe), _defineProperty$3(_ref, "".concat(this.componentName, "--vertical-action"), this.layout === "vertical"), _ref)];
      },
      loadingClass: function loadingClass() {
        if (this.asyncLoading === "loading") return this.commonStatusClassName.loading;
        if (this.asyncLoading === "load-more") return this.commonStatusClassName.loadMore;
        return "";
      }
    },
    components: {
      Loading: Loading
    },
    methods: {
      renderLoading: function renderLoading() {
        var h = this.$createElement;

        if (this.asyncLoading && typeof this.asyncLoading === "string") {
          var _LOADING$LOAD_MORE$th;

          var text = (_LOADING$LOAD_MORE$th = {}, _defineProperty$3(_LOADING$LOAD_MORE$th, LOADING, "\u6B63\u5728\u52A0\u8F7D\u4E2D\uFF0C\u8BF7\u7A0D\u540E"), _defineProperty$3(_LOADING$LOAD_MORE$th, LOAD_MORE, "\u70B9\u51FB\u52A0\u8F7D\u66F4\u591A"), _LOADING$LOAD_MORE$th)[this.asyncLoading];
          var loading = this.asyncLoading === LOADING;
          return h(Loading, {
            "class": this.loadingClass,
            "attrs": {
              "loading": loading,
              "text": text
            }
          });
        }

        return renderTNodeJSX(this, "asyncLoading");
      },
      handleScroll: function handleScroll(e) {
        var listElement = this.$el;
        var scrollTop = listElement.scrollTop,
            scrollHeight = listElement.scrollHeight,
            clientHeight = listElement.clientHeight;
        this.$emit("scroll", {
          $event: e,
          scrollTop: scrollTop,
          scrollBottom: scrollHeight - clientHeight - scrollTop
        });

        if (this.onScroll) {
          this.onScroll({
            e: e,
            scrollTop: scrollTop,
            scrollBottom: scrollHeight - clientHeight - scrollTop
          });
        }
      },
      handleLoadMore: function handleLoadMore(e) {
        if (typeof this.asyncLoading === "string" && this.asyncLoading !== LOAD_MORE) return;
        this.$emit("load-more", {
          e: e
        });

        if (this.onLoadMore) {
          this.onLoadMore({
            e: e
          });
        }
      },
      renderContent: function renderContent() {
        var h = this.$createElement;
        var propsHeaderContent = renderTNodeJSX(this, "header");
        var propsFooterContent = renderTNodeJSX(this, "footer");
        return [propsHeaderContent && h("div", {
          "class": "".concat(this.componentName, "__header")
        }, [propsHeaderContent]), h("ul", {
          "class": "".concat(this.componentName, "__inner")
        }, [renderTNodeJSX(this, "default")]), propsFooterContent && h("div", {
          "class": "".concat(this.componentName, "__footer")
        }, [propsFooterContent])];
      }
    },
    render: function render() {
      var h = arguments[0];
      var listContent = this.renderContent();
      listContent = [listContent, h("div", {
        "class": "".concat(this.componentName, "__load"),
        "on": {
          "click": this.handleLoadMore
        }
      }, [this.renderLoading()])];
      return h("div", {
        "class": this.listClass,
        "on": {
          "scroll": this.handleScroll
        }
      }, [listContent]);
    }
  });

  var props$c = {
    action: {
      type: [String, Function]
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    }
  };

  var classPrefixMixins$7 = getClassPrefixMixins("list-item");
  var _ListItem = mixins(classPrefixMixins$7).extend({
    name: "TListItem",
    props: props$c,
    render: function render() {
      var h = arguments[0];
      var content = renderContent(this, "default", "content");
      var propsActionContent = renderTNodeJSX(this, "action");
      return h("li", {
        "class": this.componentName
      }, [h("div", {
        "class": "".concat(this.componentName, "-main")
      }, [h("div", {
        "class": "".concat(this.componentName, "__content")
      }, [content]), propsActionContent && h("li", {
        "class": "".concat(this.componentName, "__action")
      }, [propsActionContent])])]);
    }
  });

  var props$b = {
    avatar: {
      type: [String, Function]
    },
    description: {
      type: [String, Function]
    },
    image: {
      type: [String, Function]
    },
    title: {
      type: [String, Function]
    }
  };

  var classPrefixMixins$6 = getClassPrefixMixins("list-item__meta");
  var _ListItemMeta = mixins(classPrefixMixins$6).extend({
    name: "TListItemMeta",
    props: props$b,
    methods: {
      renderAvatar: function renderAvatar() {
        var h = this.$createElement;

        if (this.avatar || this.$scopedSlots.avatar) {
          console.warn("`avatar` is going to be deprecated, please use `image` instead");
        }

        var thumbnail = renderContent(this, "avatar", "image");
        if (!thumbnail) return;

        if (typeof thumbnail === "string") {
          return h("div", {
            "class": "".concat(this.componentName, "-avatar")
          }, [h("img", {
            "attrs": {
              "src": thumbnail
            }
          })]);
        }

        return h("div", {
          "class": "".concat(this.componentName, "-avatar")
        }, [thumbnail]);
      }
    },
    render: function render() {
      var h = arguments[0];
      var propsTitleContent = renderTNodeJSX(this, "title");
      var propsDescriptionContent = renderTNodeJSX(this, "description");
      var listItemMetaContent = [this.renderAvatar(), h("div", {
        "class": "".concat(this.componentName, "-content")
      }, [propsTitleContent && h("h3", {
        "class": "".concat(this.componentName, "-title")
      }, [propsTitleContent]), propsDescriptionContent && h("p", {
        "class": "".concat(this.componentName, "-description")
      }, [propsDescriptionContent])])];
      return h("div", {
        "class": this.componentName
      }, [listItemMetaContent]);
    }
  });

  var List = withInstall(_List);
  var ListItem = withInstall(_ListItem);
  var ListItemMeta = withInstall(_ListItemMeta);

  var PRO_THEME = {
    LINE: "line",
    PLUMP: "plump",
    CIRCLE: "circle"
  };
  var CIRCLE_SIZE = {
    SMALL: "small",
    MEDIUM: "medium",
    LARGE: "large"
  };
  var CIRCLE_SIZE_PX = {
    SMALL: 72,
    MEDIUM: 112,
    LARGE: 160
  };
  var CIRCLE_FONT_SIZE_RATIO = {
    SMALL: 14 / CIRCLE_SIZE_PX.SMALL,
    MEDIUM: 20 / CIRCLE_SIZE_PX.MEDIUM,
    LARGE: 36 / CIRCLE_SIZE_PX.LARGE
  };
  var STATUS_ICON = ["success", "error", "warning"];

  var props$a = {
    color: {
      type: [String, Object, Array],
      "default": ""
    },
    label: {
      type: [String, Boolean, Function],
      "default": true
    },
    percentage: {
      type: Number,
      "default": 0
    },
    size: {
      type: [String, Number],
      "default": "medium"
    },
    status: {
      type: String,
      validator: function validator(val) {
        return ["success", "error", "warning", "active"].includes(val);
      }
    },
    strokeWidth: {
      type: [String, Number]
    },
    theme: {
      type: String,
      "default": "line",
      validator: function validator(val) {
        return ["line", "plump", "circle"].includes(val);
      }
    },
    trackColor: {
      type: String,
      "default": ""
    }
  };

  function ownKeys$C(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$B(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$C(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$C(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$5 = getClassPrefixMixins("progress");
  var _Progress = mixins(classPrefixMixins$5, getGlobalIconMixins()).extend({
    name: "TProgress",
    props: _objectSpread$B({}, props$a),
    computed: {
      statusStyle: function statusStyle() {
        if (this.percentage >= 100) {
          return "success";
        }

        return this.status;
      },
      themeClass: function themeClass() {
        var Line = PRO_THEME.LINE;

        if (this.theme === Line) {
          return "thin";
        }

        return this.theme;
      },
      trackBgStyle: function trackBgStyle() {
        var strokeWidth = this.strokeWidth;
        var height = typeof strokeWidth === "string" ? strokeWidth : "".concat(strokeWidth, "px");
        var Plump = PRO_THEME.PLUMP;

        if (this.theme === Plump) {
          height = "";
        }

        return {
          height: height,
          backgroundColor: this.trackColor,
          borderRadius: height
        };
      },
      circleStrokeStyle: function circleStrokeStyle() {
        return {
          stroke: this.trackColor
        };
      },
      barStyle: function barStyle() {
        return {
          width: "".concat(this.percentage, "%"),
          background: this.color && getBackgroundColor(this.color)
        };
      },
      circlePathStyle: function circlePathStyle() {
        var strokeColor = _typeof$1(this.color) === "object" ? "" : this.color;
        return {
          stroke: strokeColor
        };
      },
      isShowIcon: function isShowIcon() {
        return STATUS_ICON.includes(this.status) && typeof this.label === "boolean";
      },
      diameter: function diameter() {
        var diameter = CIRCLE_SIZE_PX.MEDIUM;

        if (!this.size) {
          return diameter;
        }

        var SMALL = CIRCLE_SIZE.SMALL,
            LARGE = CIRCLE_SIZE.LARGE,
            MEDIUM = CIRCLE_SIZE.MEDIUM;

        switch (this.size) {
          case SMALL:
            diameter = CIRCLE_SIZE_PX.SMALL;
            break;

          case MEDIUM:
            diameter = CIRCLE_SIZE_PX.MEDIUM;
            break;

          case LARGE:
            diameter = CIRCLE_SIZE_PX.LARGE;
            break;

          default:
            diameter = Number(this.size);
            break;
        }

        return diameter;
      },
      rPoints: function rPoints() {
        return this.diameter / 2;
      },
      radius: function radius() {
        return this.rPoints - this.circleStrokeWidth / 2;
      },
      circleStyle: function circleStyle() {
        if (this.theme !== PRO_THEME.CIRCLE) {
          return {};
        }

        var fontSize = this.diameter * CIRCLE_FONT_SIZE_RATIO.MEDIUM;

        if (this.diameter <= CIRCLE_SIZE_PX.SMALL) {
          fontSize = this.diameter * CIRCLE_FONT_SIZE_RATIO.SMALL;
        } else if (this.diameter >= CIRCLE_SIZE_PX.LARGE) {
          fontSize = this.diameter * CIRCLE_FONT_SIZE_RATIO.LARGE;
        }

        return {
          width: "".concat(this.diameter, "px"),
          height: "".concat(this.diameter, "px"),
          fontSize: "".concat(fontSize, "px")
        };
      },
      circleStrokeWidth: function circleStrokeWidth() {
        var defaultWidth = this.size === CIRCLE_SIZE.SMALL ? 4 : 6;
        return this.strokeWidth ? Number(this.strokeWidth) : defaultWidth;
      },
      strokeDashArr: function strokeDashArr() {
        var radius = (this.diameter - this.circleStrokeWidth) / 2;
        var perimeter = Math.PI * 2 * radius;
        var percent = this.percentage / 100;
        return "".concat(perimeter * percent, "  ").concat(perimeter * (1 - percent));
      },
      plumpStyles: function plumpStyles() {
        return {};
      }
    },
    methods: {
      getIconMap: function getIconMap() {
        var _this$useGlobalIcon = this.useGlobalIcon({
          CloseCircleFilledIcon: CloseCircleFilled,
          CheckCircleFilledIcon: CheckCircleFilled,
          ErrorCircleFilledIcon: ErrorCircleFilled,
          CloseIcon: Close,
          CheckIcon: Check,
          ErrorIcon: Error$1
        }),
            CloseCircleFilledIcon = _this$useGlobalIcon.CloseCircleFilledIcon,
            CheckCircleFilledIcon = _this$useGlobalIcon.CheckCircleFilledIcon,
            ErrorCircleFilledIcon = _this$useGlobalIcon.ErrorCircleFilledIcon,
            CloseIcon = _this$useGlobalIcon.CloseIcon,
            CheckIcon = _this$useGlobalIcon.CheckIcon,
            ErrorIcon = _this$useGlobalIcon.ErrorIcon;

        var CIRCLE_ICONS = {
          success: CheckIcon,
          warning: ErrorIcon,
          error: CloseIcon
        };
        var NORMAL_ICONS = {
          success: CheckCircleFilledIcon,
          warning: ErrorCircleFilledIcon,
          error: CloseCircleFilledIcon
        };
        return this.theme === PRO_THEME.CIRCLE ? CIRCLE_ICONS : NORMAL_ICONS;
      },
      getLabelContent: function getLabelContent() {
        var h = this.$createElement;
        var labelContent = "".concat(this.percentage, "%");
        var status = this.status || "";

        if (STATUS_ICON.includes(status) && this.theme !== PRO_THEME.PLUMP) {
          var components = this.getIconMap();
          var component = components[status];

          if (component) {
            labelContent = h(component, {
              "class": ["".concat(this.componentName, "__icon")]
            });
          }
        }

        return labelContent;
      }
    },
    render: function render() {
      var h = arguments[0];
      var labelContent = h("div", {
        "class": "".concat(this.componentName, "__info")
      }, [renderTNodeJSX(this, "label", this.getLabelContent())]);
      var PLUMP_SEPARATE = 10;
      var separateClasses = this.percentage > PLUMP_SEPARATE ? "".concat(this.componentName, "--over-ten") : "".concat(this.componentName, "--under-ten");
      return h("div", {
        "class": this.componentName
      }, [this.theme === PRO_THEME.LINE && h("div", {
        "class": "".concat(this.componentName, "--thin ").concat(this.componentName, "--status--").concat(this.statusStyle)
      }, [h("div", {
        "class": "".concat(this.componentName, "__bar"),
        "style": this.trackBgStyle
      }, [h("div", {
        "class": "".concat(this.componentName, "__inner"),
        "style": this.barStyle
      })]), labelContent]), this.theme === PRO_THEME.PLUMP && h("div", {
        "class": ["".concat(this.componentName, "__bar ").concat(this.componentName, "--plump ").concat(separateClasses), _defineProperty$3({}, "".concat(this.componentName, "--status--").concat(this.statusStyle), this.statusStyle)],
        "style": this.trackBgStyle
      }, [h("div", {
        "class": "".concat(this.componentName, "__inner"),
        "style": this.barStyle
      }, [this.percentage > PLUMP_SEPARATE && labelContent]), this.percentage <= PLUMP_SEPARATE && labelContent]), this.theme === PRO_THEME.CIRCLE && h("div", {
        "class": "".concat(this.componentName, "--circle ").concat(this.componentName, "--status--").concat(this.statusStyle),
        "style": this.circleStyle
      }, [labelContent, h("svg", {
        "attrs": {
          "width": this.diameter,
          "height": this.diameter,
          "viewBox": "0 0 ".concat(this.diameter, " ").concat(this.diameter)
        }
      }, [h("circle", {
        "attrs": {
          "cx": this.rPoints,
          "cy": this.rPoints,
          "r": this.radius,
          "stroke-width": this.circleStrokeWidth,
          "stroke": this.trackColor,
          "fill": "none"
        },
        "class": "".concat(this.componentName, "__circle-outer"),
        "style": this.circleStrokeStyle
      }), this.percentage > 0 && h("circle", {
        "attrs": {
          "cx": this.rPoints,
          "cy": this.rPoints,
          "r": this.radius,
          "stroke-width": this.circleStrokeWidth,
          "fill": "none",
          "stroke-linecap": "round",
          "transform": "matrix(0,-1,1,0,0,".concat(this.diameter, ")"),
          "stroke-dasharray": this.strokeDashArr
        },
        "class": "".concat(this.componentName, "__circle-inner"),
        "style": this.circlePathStyle
      })])])]);
    }
  });

  var Progress = withInstall(_Progress);

  var props$9 = {
    animation: {
      type: String,
      validator: function validator(val) {
        return ["gradient", "flashed"].includes(val);
      }
    },
    loading: {
      type: Boolean,
      "default": true
    },
    rowCol: {
      type: Array
    },
    theme: {
      type: String,
      validator: function validator(val) {
        return ["text", "avatar", "paragraph", "avatar-text", "tab", "article"].includes(val);
      }
    },
    delay: {
      type: Number,
      "default": 0
    }
  };

  function ownKeys$B(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$A(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$B(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$B(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$4 = getClassPrefixMixins("skeleton");
  var ThemeMap = {
    text: [1],
    avatar: [{
      type: "circle",
      size: "56px"
    }],
    paragraph: [1, 1, {
      width: "70%"
    }],
    "avatar-text": [[{
      type: "circle"
    }, {
      type: "text",
      height: "32px"
    }]],
    tab: [{
      height: "30px"
    }, {
      height: "200px"
    }],
    article: [{
      type: "rect",
      height: "30px",
      width: "100%"
    }, {
      type: "rect",
      height: "200px",
      width: "100%"
    }, [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }], [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }], [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }], [{
      type: "text",
      height: "30px"
    }, {
      type: "text",
      height: "30px"
    }]]
  };
  var _Skeleton = mixins(classPrefixMixins$4).extend({
    name: "TSkeleton",
    props: _objectSpread$A({}, props$9),
    data: function data() {
      return {
        delayShowLoading: this.delay <= 0 ? this.loading : false,
        delayTimer: 0
      };
    },
    watch: {
      loading: {
        handler: function handler(val) {
          if (this.delay <= 0) {
            this.delayShowLoading = this.loading;
            return;
          }

          this.handleDelay(val);
        },
        immediate: true
      }
    },
    methods: {
      handleDelay: function handleDelay(loading) {
        var _this = this;

        if (loading) {
          clearTimeout(this.delayTimer);
          this.delayTimer = window.setTimeout(function () {
            _this.delayShowLoading = _this.loading;
          }, this.delay);
        } else {
          this.delayShowLoading = loading;
        }
      },
      renderCols: function renderCols(_cols) {
        var _this2 = this;

        var h = this.$createElement;

        var getColItemClass = function getColItemClass(obj) {
          return ["".concat(_this2.componentName, "__col"), "".concat(_this2.componentName, "--type-").concat(obj.type || "text"), _defineProperty$3({}, "".concat(_this2.componentName, "--animation-").concat(_this2.animation), _this2.animation)];
        };

        var getColItemStyle = function getColItemStyle(obj) {
          var styleName = ["width", "height", "marginRight", "marginLeft", "margin", "size", "background", "backgroundColor"];
          var style = {};
          styleName.forEach(function (name) {
            if (name in obj) {
              var px = isNumber_1(obj[name]) ? "".concat(obj[name], "px") : obj[name];

              if (name === "size") {
                var _ref2 = [px, px];
                style.width = _ref2[0];
                style.height = _ref2[1];
              } else {
                style[name] = px;
              }
            }
          });
          return style;
        };

        var cols = [];

        if (Array.isArray(_cols)) {
          cols = _cols;
        } else if (isNumber_1(_cols)) {
          cols = new Array(_cols).fill({
            type: "text"
          });
        } else {
          cols = [_cols];
        }

        return cols.map(function (obj) {
          return h("div", {
            "class": getColItemClass(obj),
            "style": getColItemStyle(obj)
          }, [typeof obj.content === "function" ? obj.content(_this2.$createElement) : obj.content]);
        });
      },
      renderRowCol: function renderRowCol(_rowCol) {
        var _this3 = this;

        var h = this.$createElement;
        var rowCol = _rowCol || this.rowCol;

        var getBlockClass = function getBlockClass() {
          return ["".concat(_this3.componentName, "__row")];
        };

        return rowCol.map(function (item) {
          return h("div", {
            "class": getBlockClass()
          }, [_this3.renderCols(item)]);
        });
      }
    },
    render: function render() {
      var h = arguments[0];
      var content = renderContent(this, "default", "content");

      if (this.$scopedSlots["default"] && !this.delayShowLoading) {
        return h("div", [content]);
      }

      if (!this.delayShowLoading) {
        return;
      }

      var children = [];

      if (this.theme) {
        children.push(this.renderRowCol(ThemeMap[this.theme]));
      }

      if (this.rowCol) {
        children.push(this.renderRowCol(this.rowCol));
      }

      if (!this.theme && !this.rowCol) {
        children.push(this.renderRowCol([1, 1, 1, {
          width: "70%"
        }]));
      }

      return h("div", {
        "class": this.componentName
      }, [children]);
    }
  });

  var Skeleton = withInstall(_Skeleton);

  var props$8 = {
    animation: {
      type: String,
      "default": "slide",
      validator: function validator(val) {
        if (!val) return true;
        return ["slide", "fade"].includes(val);
      }
    },
    autoplay: {
      type: Boolean,
      "default": true
    },
    current: {
      type: Number,
      "default": 0
    },
    defaultCurrent: {
      type: Number,
      "default": 0
    },
    direction: {
      type: String,
      "default": "horizontal",
      validator: function validator(val) {
        if (!val) return true;
        return ["horizontal", "vertical"].includes(val);
      }
    },
    duration: {
      type: Number,
      "default": 300
    },
    height: {
      type: Number
    },
    interval: {
      type: Number,
      "default": 5e3
    },
    loop: {
      type: Boolean,
      "default": true
    },
    navigation: {
      type: [Object, Function]
    },
    stopOnHover: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "light",
      validator: function validator(val) {
        if (!val) return true;
        return ["light", "dark"].includes(val);
      }
    },
    trigger: {
      type: String,
      "default": "hover",
      validator: function validator(val) {
        if (!val) return true;
        return ["hover", "click"].includes(val);
      }
    },
    type: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "card"].includes(val);
      }
    },
    onChange: Function
  };

  function ownKeys$A(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$z(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$A(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$A(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$3 = getClassPrefixMixins("swiper");
  var swiperItemProps = {
    index: {
      type: Number
    },
    currentIndex: {
      type: Number
    },
    isSwitching: {
      type: Boolean,
      "default": false
    },
    getWrapAttribute: {
      type: Function
    },
    swiperItemLength: {
      type: Number,
      "default": 0
    }
  };
  var CARD_SCALE = 210 / 332;
  var itemWidth = 0.415;
  var _SwiperItem = mixins(classPrefixMixins$3).extend({
    name: "TSwiperItem",
    props: _objectSpread$z(_objectSpread$z({}, props$8), swiperItemProps),
    computed: {
      active: function active() {
        return this.index === this.currentIndex;
      },
      disposeIndex: function disposeIndex() {
        if (this.type !== "card") return 0;

        if (this.currentIndex === 0 && this.index === this.swiperItemLength - 1) {
          return -1;
        }

        if (this.currentIndex === this.swiperItemLength - 1 && this.index === 0) {
          return this.swiperItemLength;
        }

        if (this.index < this.currentIndex - 1 && this.currentIndex - this.index >= this.swiperItemLength / 2) {
          return this.swiperItemLength + 1;
        }

        if (this.index > this.currentIndex + 1 && this.index - this.currentIndex >= this.swiperItemLength / 2) {
          return -2;
        }

        return this.index;
      },
      translateX: function translateX() {
        if (this.type !== "card") return 0;
        var wrapWidth = this.getWrapAttribute("offsetWidth");
        var translateIndex = !this.active && this.swiperItemLength > 2 ? this.disposeIndex : this.index;
        var inStage = Math.abs(translateIndex - this.currentIndex) <= 1;

        if (inStage) {
          return wrapWidth * ((translateIndex - this.currentIndex) * (1 - itemWidth * CARD_SCALE) - itemWidth + 1) / 2;
        }

        if (translateIndex < this.currentIndex) {
          return -itemWidth * (1 + CARD_SCALE) * wrapWidth / 2;
        }

        return (2 + itemWidth * (CARD_SCALE - 1)) * wrapWidth / 2;
      },
      zIndex: function zIndex() {
        if (this.type !== "card") return 0;
        var translateIndex = !this.active && this.swiperItemLength > 2 ? this.disposeIndex : this.index;
        var isActivity = translateIndex === this.currentIndex;
        var inStage = Math.round(Math.abs(translateIndex - this.currentIndex)) <= 1;

        if (isActivity) {
          return 2;
        }

        if (inStage) {
          return 1;
        }

        return 0;
      },
      itemStyle: function itemStyle() {
        if (this.animation === "fade") {
          return {
            opacity: this.active ? 1 : 0,
            transition: this.isSwitching ? "opacity ".concat(this.duration / 1e3, "s") : ""
          };
        }

        if (this.type === "card") {
          var translateIndex = !this.active && this.swiperItemLength > 2 ? this.disposeIndex : this.index;
          var isActivity = translateIndex === this.currentIndex;
          return {
            transform: "translateX(".concat(this.translateX, "px) scale(").concat(isActivity ? 1 : CARD_SCALE, ")"),
            transition: "transform ".concat(this.duration / 1e3, "s ease"),
            zIndex: this.zIndex
          };
        }

        return {};
      }
    },
    render: function render() {
      var _ref, _this$$scopedSlots$de, _this$$scopedSlots;

      var h = arguments[0];
      return h("div", {
        "class": ["".concat(this.classPrefix, "-swiper__container__item"), (_ref = {}, _defineProperty$3(_ref, "".concat(this.classPrefix, "-swiper__card"), this.type === "card"), _defineProperty$3(_ref, "".concat(this.classPrefix, "-is-active"), this.type === "card" && this.active), _defineProperty$3(_ref, "".concat(this.classPrefix, "-swiper__fade"), this.animation === "fade"), _ref)],
        "style": this.itemStyle
      }, [((_this$$scopedSlots$de = (_this$$scopedSlots = this.$scopedSlots)["default"]) === null || _this$$scopedSlots$de === void 0 ? void 0 : _this$$scopedSlots$de.call(_this$$scopedSlots, {})) || []]);
    }
  });

  function ownKeys$z(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$y(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$z(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$z(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$2 = getClassPrefixMixins("swiper");
  var defaultNavigation = {
    placement: "inside",
    showSlideBtn: "always",
    size: "medium",
    type: "bars"
  };
  var _Swiper = mixins(Vue__default["default"], classPrefixMixins$2, getGlobalIconMixins()).extend(_objectSpread$y(_objectSpread$y({
    name: "TSwiper",
    components: {
      TSwiperItem: _SwiperItem
    }
  }, {
    swiperTimer: 0,
    swiperSwitchingTimer: 0
  }), {}, {
    props: _objectSpread$y({}, props$8),
    data: function data() {
      return {
        currentIndex: 0,
        isHovering: false,
        isSwitching: false,
        swiperItemList: [],
        showArrow: false
      };
    },
    computed: {
      swiperItemLength: function swiperItemLength() {
        return this.swiperItemList.length;
      },
      navigationConfig: function navigationConfig() {
        return _objectSpread$y(_objectSpread$y({}, defaultNavigation), isVNode(this.navigation) ? {} : this.navigation);
      },
      isEnd: function isEnd() {
        if (this.type === "card") {
          return !this.loop && this.currentIndex + 1 >= this.swiperItemLength;
        }

        return !this.loop && this.currentIndex + 2 >= this.swiperItemLength;
      },
      propsToUpdateSetTimer: function propsToUpdateSetTimer() {
        return [this.autoplay, this.currentIndex, this.duration, this.interval];
      },
      swiperWrapClass: function swiperWrapClass() {
        var _ref;

        return _ref = {}, _defineProperty$3(_ref, "".concat(this.componentName, "__wrap"), true), _defineProperty$3(_ref, "".concat(this.componentName, "--inside"), this.navigationConfig.placement === "inside"), _defineProperty$3(_ref, "".concat(this.componentName, "--outside"), this.navigationConfig.placement === "outside"), _defineProperty$3(_ref, "".concat(this.componentName, "--vertical"), this.direction === "vertical"), _defineProperty$3(_ref, "".concat(this.componentName, "--large"), this.navigationConfig.size === "large"), _defineProperty$3(_ref, "".concat(this.componentName, "--small"), this.navigationConfig.size === "small"), _ref;
      },
      containerStyle: function containerStyle() {
        var offsetHeight = this.height ? "".concat(this.height, "px") : "".concat(this.getWrapAttribute("offsetHeight"), "px");

        if (this.type === "card" || this.animation === "fade") {
          return {
            height: offsetHeight
          };
        }

        if (this.animation === "slide") {
          if (this.direction === "vertical") {
            return {
              height: offsetHeight,
              transform: "translate3d(0, -".concat(this.currentIndex * 100, "%, 0px)"),
              transition: this.isSwitching ? "transform ".concat(this.duration / 1e3, "s ease") : ""
            };
          }

          return {
            msTransform: "translate3d(-".concat(this.currentIndex * 100, "%, 0px, 0px)"),
            WebkitTransform: "translate3d(-".concat(this.currentIndex * 100, "%, 0px, 0px)"),
            transform: "translate3d(-".concat(this.currentIndex * 100, "%, 0px, 0px)"),
            transition: this.isSwitching ? "transform ".concat(this.duration / 1e3, "s ease") : ""
          };
        }

        return {};
      },
      swiperItems: function swiperItems() {
        var _this = this;

        var h = this.$createElement;
        return this.swiperItemList.map(function (swiperItem, index) {
          return h(_SwiperItem, helper([{
            "attrs": {
              "index": index,
              "currentIndex": _this.currentIndex,
              "isSwitching": _this.isSwitching,
              "getWrapAttribute": _this.getWrapAttribute,
              "swiperItemLength": _this.swiperItemLength
            }
          }, {
            "props": _objectSpread$y(_objectSpread$y({}, _this.$props), swiperItem.propsData)
          }]), [swiperItem.children]);
        });
      }
    },
    watch: {
      propsToUpdateSetTimer: function propsToUpdateSetTimer() {
        this.setTimer();
      },
      isSwitching: function isSwitching() {
        var _this2 = this;

        if (this.isSwitching) {
          if (this.swiperSwitchingTimer) clearTimeout(this.swiperSwitchingTimer);
          this.swiperSwitchingTimer = setTimeout(function () {
            _this2.isSwitching = false;
            _this2.swiperSwitchingTimer = 0;

            if (_this2.isEnd) {
              _this2.clearTimer();
            }
          }, this.duration + 50);
        }
      },
      current: function current() {
        this.swiperTo(this.current, {
          source: "autoplay"
        });
      }
    },
    mounted: function mounted() {
      this.updateSwiperItems();
      this.setTimer();
      this.showArrow = this.navigationConfig.showSlideBtn === "always";
    },
    updated: function updated() {
      var _this3 = this;

      this.$nextTick(function () {
        _this3.updateSwiperItems();
      });
    },
    methods: {
      updateSwiperItems: function updateSwiperItems() {
        var _this$$scopedSlots$de,
            _this$$scopedSlots,
            _this4 = this;

        var originalChildren = ((_this$$scopedSlots$de = (_this$$scopedSlots = this.$scopedSlots)["default"]) === null || _this$$scopedSlots$de === void 0 ? void 0 : _this$$scopedSlots$de.call(_this$$scopedSlots, {})) || [];
        var swiperItemList = originalChildren.map(function (swiper) {
          return swiper.componentOptions;
        }).filter(function (swiper) {
          return kebabCase_1(swiper === null || swiper === void 0 ? void 0 : swiper.tag).endsWith("".concat(_this4.componentName, "-item"));
        });
        var isUnchange = swiperItemList.length === this.swiperItemList.length && this.swiperItemList.every(function (swiperItem, index) {
          return swiperItem === swiperItemList[index];
        });
        if (isUnchange) return;
        this.swiperItemList = swiperItemList;
      },
      setTimer: function setTimer() {
        var _this5 = this;

        if (this.autoplay && this.interval > 0) {
          this.clearTimer();
          this.swiperTimer = setTimeout(function () {
            _this5.swiperTo(_this5.currentIndex + 1, {
              source: "autoplay"
            });
          }, this.currentIndex === 0 ? this.interval - (this.duration + 50) : this.interval);
        }
      },
      clearTimer: function clearTimer() {
        if (this.swiperTimer) {
          clearTimeout(this.swiperTimer);
          this.swiperTimer = 0;
        }
      },
      onMouseEnter: function onMouseEnter() {
        this.isHovering = true;

        if (this.stopOnHover) {
          this.clearTimer();
        }

        if (this.navigationConfig.showSlideBtn === "hover") {
          this.showArrow = true;
        }
      },
      onMouseLeave: function onMouseLeave() {
        this.isHovering = false;

        if (!this.isEnd) {
          this.setTimer();
        }

        if (this.navigationConfig.showSlideBtn === "hover") {
          this.showArrow = false;
        }
      },
      onMouseEnterNavigationItem: function onMouseEnterNavigationItem(i) {
        this.swiperTo(i, {
          source: "hover"
        });
      },
      onClickNavigationItem: function onClickNavigationItem(i) {
        this.swiperTo(i, {
          source: "click"
        });
      },
      swiperTo: function swiperTo(index, context) {
        var targetIndex = index % this.swiperItemLength;
        emitEvent(this, "change", targetIndex, context);
        this.isSwitching = true;
        this.currentIndex = targetIndex;
      },
      goNext: function goNext(context) {
        if (this.isSwitching) return;

        if (this.type === "card") {
          return this.swiperTo(this.currentIndex + 1 >= this.swiperItemLength ? 0 : this.currentIndex + 1, context);
        }

        return this.swiperTo(this.currentIndex + 1, context);
      },
      goPrevious: function goPrevious(context) {
        if (this.isSwitching) return;

        if (this.currentIndex - 1 < 0) {
          return this.swiperTo(this.swiperItemLength - 1, context);
        }

        return this.swiperTo(this.currentIndex - 1, context);
      },
      getWrapAttribute: function getWrapAttribute(attr) {
        var _this$$refs$swiperWra, _this$$refs$swiperWra2;

        return (_this$$refs$swiperWra = this.$refs.swiperWrap) === null || _this$$refs$swiperWra === void 0 ? void 0 : (_this$$refs$swiperWra2 = _this$$refs$swiperWra.parentNode) === null || _this$$refs$swiperWra2 === void 0 ? void 0 : _this$$refs$swiperWra2[attr];
      },
      renderPagination: function renderPagination() {
        var _this6 = this;

        var h = this.$createElement;
        var fractionIndex = this.currentIndex + 1 > this.swiperItemLength ? 1 : this.currentIndex + 1;

        var _this$useGlobalIcon = this.useGlobalIcon({
          ChevronLeftIcon: ChevronLeft,
          ChevronRightIcon: ChevronRight
        }),
            ChevronLeftIcon = _this$useGlobalIcon.ChevronLeftIcon,
            ChevronRightIcon = _this$useGlobalIcon.ChevronRightIcon;

        return h("div", {
          "class": "".concat(this.componentName, "__arrow")
        }, [h("div", {
          "class": "".concat(this.componentName, "__arrow-left"),
          "on": {
            "click": function click() {
              return _this6.goPrevious({
                source: "click"
              });
            }
          }
        }, [h(ChevronLeftIcon)]), h("div", {
          "class": "".concat(this.componentName, "__navigation-text-fraction")
        }, [fractionIndex, "/", this.swiperItemLength]), h("div", {
          "class": "".concat(this.componentName, "__arrow-right"),
          "on": {
            "click": function click() {
              return _this6.goNext({
                source: "click"
              });
            }
          }
        }, [h(ChevronRightIcon)])]);
      },
      renderArrow: function renderArrow() {
        var _this7 = this;

        var h = this.$createElement;
        if (!this.showArrow) return null;

        var _this$useGlobalIcon2 = this.useGlobalIcon({
          ChevronLeftIcon: ChevronLeft,
          ChevronRightIcon: ChevronRight
        }),
            ChevronLeftIcon = _this$useGlobalIcon2.ChevronLeftIcon,
            ChevronRightIcon = _this$useGlobalIcon2.ChevronRightIcon;

        return h("div", {
          "class": ["".concat(this.componentName, "__arrow"), "".concat(this.componentName, "__arrow--default")]
        }, [h("div", {
          "class": "".concat(this.componentName, "__arrow-left"),
          "on": {
            "click": function click() {
              return _this7.goPrevious({
                source: "click"
              });
            }
          }
        }, [h(ChevronLeftIcon)]), h("div", {
          "class": "".concat(this.componentName, "__arrow-right"),
          "on": {
            "click": function click() {
              return _this7.goNext({
                source: "click"
              });
            }
          }
        }, [h(ChevronRightIcon)])]);
      },
      renderNavigation: function renderNavigation() {
        var _this8 = this;

        var h = this.$createElement;
        if (isVNode(this.navigation)) return this.navigation;

        if (this.navigationConfig.type === "fraction") {
          return h("div", {
            "class": ["".concat(this.componentName, "__navigation"), "".concat(this.componentName, "__navigation--fraction")]
          }, [this.renderPagination()]);
        }

        return h("ul", {
          "class": ["".concat(this.componentName, "__navigation"), _defineProperty$3({}, "".concat(this.componentName, "__navigation-bars"), this.navigationConfig.type === "bars")]
        }, [this.swiperItemList.map(function (_, i) {
          return h("li", {
            "key": i,
            "class": ["".concat(_this8.componentName, "__navigation-item"), _defineProperty$3({}, "".concat(_this8.componentName, "-is-active"), i === _this8.currentIndex)],
            "on": {
              "mouseenter": function mouseenter() {
                return _this8.onMouseEnterNavigationItem(i);
              },
              "click": function click() {
                return _this8.onClickNavigationItem(i);
              }
            }
          }, [h("span")]);
        })]);
      },
      renderSwiperItems: function renderSwiperItems() {
        return this.swiperItems;
      }
    },
    render: function render() {
      var _ref4;

      var h = arguments[0];
      return h("div", {
        "class": this.componentName,
        "on": {
          "mouseenter": this.onMouseEnter,
          "mouseLeave": this.onMouseLeave
        },
        "ref": "swiperWrap"
      }, [h("div", {
        "class": this.swiperWrapClass
      }, [h("div", {
        "class": ["".concat(this.componentName, "__content"), (_ref4 = {}, _defineProperty$3(_ref4, "".concat(this.componentName, "-fade"), this.animation === "fade"), _defineProperty$3(_ref4, "".concat(this.componentName, "-card"), this.type === "card"), _ref4)]
      }, [h("div", {
        "class": "".concat(this.componentName, "__container"),
        "style": this.containerStyle
      }, [this.renderSwiperItems()])]), this.renderNavigation(), this.renderArrow()])]);
    }
  }));

  var Swiper = withInstall(_Swiper);
  var SwiperItem = withInstall(_SwiperItem);

  var baseTableProps = {
    allowResizeColumnWidth: {
      type: Boolean,
      "default": void 0
    },
    bordered: Boolean,
    bottomContent: {
      type: [String, Function]
    },
    cellEmptyContent: {
      type: [String, Function]
    },
    columns: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    data: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    disableDataPage: Boolean,
    empty: {
      type: [String, Function],
      "default": ""
    },
    firstFullRow: {
      type: [String, Function]
    },
    fixedRows: {
      type: Array
    },
    footData: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    footerAffixProps: {
      type: Object
    },
    footerAffixedBottom: {
      type: [Boolean, Object],
      "default": false
    },
    footerSummary: {
      type: [String, Function]
    },
    headerAffixProps: {
      type: Object
    },
    headerAffixedTop: {
      type: [Boolean, Object],
      "default": false
    },
    height: {
      type: [String, Number]
    },
    horizontalScrollAffixedBottom: {
      type: [Boolean, Object]
    },
    hover: Boolean,
    lastFullRow: {
      type: [String, Function]
    },
    loading: {
      type: [Boolean, Function],
      "default": void 0
    },
    loadingProps: {
      type: Object
    },
    maxHeight: {
      type: [String, Number]
    },
    pagination: {
      type: Object
    },
    paginationAffixedBottom: {
      type: [Boolean, Object]
    },
    resizable: Boolean,
    rowAttributes: {
      type: [Object, Array, Function]
    },
    rowClassName: {
      type: [String, Object, Array, Function]
    },
    rowKey: {
      type: String,
      "default": "id",
      required: true
    },
    rowspanAndColspan: {
      type: Function
    },
    rowspanAndColspanInFooter: {
      type: Function
    },
    scroll: {
      type: Object
    },
    size: {
      type: String,
      "default": "medium",
      validator: function validator(val) {
        if (!val) return true;
        return ["small", "medium", "large"].includes(val);
      }
    },
    stripe: Boolean,
    tableContentWidth: {
      type: String,
      "default": ""
    },
    tableLayout: {
      type: String,
      "default": "fixed",
      validator: function validator(val) {
        if (!val) return true;
        return ["auto", "fixed"].includes(val);
      }
    },
    topContent: {
      type: [String, Function]
    },
    verticalAlign: {
      type: String,
      "default": "middle",
      validator: function validator(val) {
        if (!val) return true;
        return ["top", "middle", "bottom"].includes(val);
      }
    },
    onCellClick: Function,
    onPageChange: Function,
    onRowClick: Function,
    onRowDblclick: Function,
    onRowMousedown: Function,
    onRowMouseenter: Function,
    onRowMouseleave: Function,
    onRowMouseover: Function,
    onRowMouseup: Function,
    onScroll: Function,
    onScrollX: Function,
    onScrollY: Function
  };

  function getNodeDepth(columns, depthMap) {
    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var maxDepth = depth;

    for (var i = 0, len = columns.length; i < len; i++) {
      var _col$children;

      var col = columns[i];
      depthMap.set(col, depth);

      if (col !== null && col !== void 0 && (_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
        var deep = getNodeDepth(col.children, depthMap, depth + 1);

        if (deep > maxDepth) {
          maxDepth = deep;
        }
      }
    }

    return maxDepth;
  }
  function getChildrenNodeWidth(node) {
    var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var countNew = count;
    var childrenList = (node === null || node === void 0 ? void 0 : node.children) || [];

    for (var i = 0, len = childrenList.length; i < len; i++) {
      var item = childrenList[i];

      if (item.children) {
        countNew = getChildrenNodeWidth(item, countNew);
      } else {
        countNew += 1;
      }
    }

    return countNew;
  }
  function getThRowspanAndColspan(columns) {
    var depthMap = /* @__PURE__ */new Map();
    var columnsDepth = getNodeDepth(columns, depthMap);
    var rowspanAndColspanMap = /* @__PURE__ */new Map();

    var loop = function loop(nodes, leafColumns2) {
      for (var i = 0, len = nodes.length; i < len; i++) {
        var _col$children2;

        var col = nodes[i];
        var rowspan = col.children ? 1 : columnsDepth - depthMap.get(col) + 1;
        var colspan = col.children ? getChildrenNodeWidth(col) : 1;
        var span = {};
        rowspan > 1 && (span.rowspan = rowspan);
        colspan > 1 && (span.colspan = colspan);
        rowspanAndColspanMap.set(col, span);

        if (col !== null && col !== void 0 && (_col$children2 = col.children) !== null && _col$children2 !== void 0 && _col$children2.length) {
          loop(col.children, leafColumns2);
        } else {
          leafColumns2.push(col);
        }
      }
    };

    var leafColumns = [];
    loop(columns, leafColumns);
    return {
      rowspanAndColspanMap: rowspanAndColspanMap,
      leafColumns: leafColumns
    };
  }
  function getThList(columns) {
    var loop = function loop(nodes, thRows) {
      var _children;

      var thRowData = [];
      var children = [];

      for (var i = 0, len = nodes.length; i < len; i++) {
        var _node$children;

        var node = nodes[i];
        var thList = [node];
        thRowData = thRowData.concat(thList);

        if (node !== null && node !== void 0 && (_node$children = node.children) !== null && _node$children !== void 0 && _node$children.length) {
          children = children.concat(node.children);
        }
      }

      if ((_children = children) !== null && _children !== void 0 && _children.length) {
        loop(children, thRows);
      }

      thRows.push(thRowData);
      return thRowData;
    };

    var list = [];
    loop(columns, list);
    list = list.reverse();
    return list;
  }

  function useClassName() {
    var _useConfig = useConfig(),
        classPrefix = _useConfig.classPrefix;

    var classNames = {
      tableBaseClass: {
        table: "".concat(classPrefix.value, "-table"),
        columnResizableTable: "".concat(classPrefix.value, "-table--column-resizable"),
        overflowVisible: "".concat(classPrefix.value, "-table--overflow-visible"),
        body: "".concat(classPrefix.value, "-table__body"),
        content: "".concat(classPrefix.value, "-table__content"),
        topContent: "".concat(classPrefix.value, "-table__top-content"),
        bottomContent: "".concat(classPrefix.value, "-table__bottom-content"),
        paginationWrap: "".concat(classPrefix.value, "-table__pagination-wrap"),
        tdLastRow: "".concat(classPrefix.value, "-table__td-last-row"),
        tdFirstCol: "".concat(classPrefix.value, "-table__td-first-col"),
        thCellInner: "".concat(classPrefix.value, "-table__th-cell-inner"),
        tableRowEdit: "".concat(classPrefix.value, "-table--row-edit"),
        cellEditable: "".concat(classPrefix.value, "-table__cell--editable"),
        cellEditWrap: "".concat(classPrefix.value, "-table__cell-wrap"),
        bordered: "".concat(classPrefix.value, "-table--bordered"),
        striped: "".concat(classPrefix.value, "-table--striped"),
        hover: "".concat(classPrefix.value, "-table--hoverable"),
        loading: "".concat(classPrefix.value, "-table--loading"),
        rowspanAndColspan: "".concat(classPrefix.value, "-table--rowspan-colspan"),
        empty: "".concat(classPrefix.value, "-table__empty"),
        emptyRow: "".concat(classPrefix.value, "-table__empty-row"),
        headerFixed: "".concat(classPrefix.value, "-table--header-fixed"),
        columnFixed: "".concat(classPrefix.value, "-table--column-fixed"),
        widthOverflow: "".concat(classPrefix.value, "-table--width-overflow"),
        multipleHeader: "".concat(classPrefix.value, "-table--multiple-header"),
        footerAffixed: "".concat(classPrefix.value, "-table--footer-affixed"),
        horizontalBarAffixed: "".concat(classPrefix.value, "-table--horizontal-bar-affixed"),
        affixedHeader: "".concat(classPrefix.value, "-table--affixed-header"),
        affixedHeaderElm: "".concat(classPrefix.value, "-table__affixed-header-elm"),
        affixedFooterElm: "".concat(classPrefix.value, "-table__affixed-footer-elm"),
        affixedFooterWrap: "".concat(classPrefix.value, "-table__affixed-footer-wrap"),
        scrollbarDivider: "".concat(classPrefix.value, "-table__scroll-bar-divider"),
        fullHeight: "".concat(classPrefix.value, "-table--full-height"),
        resizeLine: "".concat(classPrefix.value, "-table__resize-line"),
        obviousScrollbar: "".concat(classPrefix.value, "-table__scrollbar--obvious"),
        affixedHeaderWrap: "".concat(classPrefix.value, "-table__affixed-header-elm-wrap")
      },
      tdAlignClasses: {
        left: "".concat(classPrefix.value, "-align-left"),
        right: "".concat(classPrefix.value, "-align-right"),
        center: "".concat(classPrefix.value, "-align-center")
      },
      tableHeaderClasses: {
        header: "".concat(classPrefix.value, "-table__header"),
        thBordered: "".concat(classPrefix.value, "-table__header-th--bordered"),
        fixed: "".concat(classPrefix.value, "-table__header--fixed"),
        multipleHeader: "".concat(classPrefix.value, "-table__header--multiple")
      },
      tableFooterClasses: {
        footer: "".concat(classPrefix.value, "-table__footer"),
        footerSummary: "".concat(classPrefix.value, "-table__footer-summary"),
        fixed: "".concat(classPrefix.value, "-table__footer--fixed")
      },
      tableAlignClasses: {
        top: "".concat(classPrefix.value, "-vertical-align-top"),
        middle: "".concat(classPrefix.value, "-vertical-align-middle"),
        bottom: "".concat(classPrefix.value, "-vertical-align-bottom")
      },
      tableRowFixedClasses: {
        top: "".concat(classPrefix.value, "-table__row--fixed-top"),
        bottom: "".concat(classPrefix.value, "-table__row--fixed-bottom"),
        firstBottom: "".concat(classPrefix.value, "-table__row--fixed-bottom-first"),
        withoutBorderBottom: "".concat(classPrefix.value, "-table__row--without-border-bottom")
      },
      tableColFixedClasses: {
        left: "".concat(classPrefix.value, "-table__cell--fixed-left"),
        right: "".concat(classPrefix.value, "-table__cell--fixed-right"),
        lastLeft: "".concat(classPrefix.value, "-table__cell--fixed-left-last"),
        firstRight: "".concat(classPrefix.value, "-table__cell--fixed-right-first"),
        leftShadow: "".concat(classPrefix.value, "-table__content--scrollable-to-left"),
        rightShadow: "".concat(classPrefix.value, "-table__content--scrollable-to-right")
      },
      tableLayoutClasses: {
        auto: "".concat(classPrefix.value, "-table--layout-auto"),
        fixed: "".concat(classPrefix.value, "-table--layout-fixed")
      },
      tdEllipsisClass: "".concat(classPrefix.value, "-table-td--ellipsis"),
      tableFullRowClasses: {
        base: "".concat(classPrefix.value, "-table__row--full"),
        innerFullRow: "".concat(classPrefix.value, "-table__row-full-inner"),
        innerFullElement: "".concat(classPrefix.value, "-table__row-full-element"),
        firstFullRow: "".concat(classPrefix.value, "-table__first-full-row"),
        lastFullRow: "".concat(classPrefix.value, "-table__last-full-row")
      },
      tableExpandClasses: {
        iconBox: "".concat(classPrefix.value, "-table__expand-box"),
        iconCell: "".concat(classPrefix.value, "-table__expandable-icon-cell"),
        row: "".concat(classPrefix.value, "-table__expanded-row"),
        rowInner: "".concat(classPrefix.value, "-table__expanded-row-inner"),
        expanded: "".concat(classPrefix.value, "-table__row--expanded"),
        collapsed: "".concat(classPrefix.value, "-table__row--collapsed")
      },
      tableSortClasses: {
        sortable: "".concat(classPrefix.value, "-table__cell--sortable"),
        title: "".concat(classPrefix.value, "-table__cell--title"),
        trigger: "".concat(classPrefix.value, "-table__cell--sort-trigger"),
        doubleIcon: "".concat(classPrefix.value, "-table__double-icons"),
        sortIcon: "".concat(classPrefix.value, "-table__sort-icon"),
        iconDirection: {
          asc: "".concat(classPrefix.value, "-table-sort-asc"),
          desc: "".concat(classPrefix.value, "-table-sort-desc")
        },
        iconActive: "".concat(classPrefix.value, "-table__sort-icon--active"),
        iconDefault: "".concat(classPrefix.value, "-icon-sort--default")
      },
      tableSelectedClasses: {
        selected: "".concat(classPrefix.value, "-table__row--selected"),
        disabled: "".concat(classPrefix.value, "-table__row--disabled"),
        checkCell: "".concat(classPrefix.value, "-table__cell-check")
      },
      tableFilterClasses: {
        filterable: "".concat(classPrefix.value, "-table__cell--filterable"),
        popup: "".concat(classPrefix.value, "-table__filter-pop"),
        icon: "".concat(classPrefix.value, "-table__filter-icon"),
        popupContent: "".concat(classPrefix.value, "-table__filter-pop-content"),
        result: "".concat(classPrefix.value, "-table__filter-result"),
        inner: "".concat(classPrefix.value, "-table__row-filter-inner"),
        bottomButtons: "".concat(classPrefix.value, "-table__filter--bottom-buttons"),
        contentInner: "".concat(classPrefix.value, "-table__filter-pop-content-inner"),
        iconWrap: "".concat(classPrefix.value, "-table__filter-icon-wrap")
      },
      asyncLoadingClass: "".concat(classPrefix.value, "-table__async-loading"),
      isFocusClass: "".concat(classPrefix.value, "-is-focus"),
      isLoadingClass: "".concat(classPrefix.value, "-is-loading"),
      isLoadMoreClass: "".concat(classPrefix.value, "-is-load-more"),
      tableTreeClasses: {
        col: "".concat(classPrefix.value, "-table__tree-col"),
        inlineCol: "".concat(classPrefix.value, "-table__tree-col--inline"),
        icon: "".concat(classPrefix.value, "-table__tree-op-icon")
      },
      tableDraggableClasses: {
        rowDraggable: "".concat(classPrefix.value, "-table--row-draggable"),
        rowHandlerDraggable: "".concat(classPrefix.value, "-table--row-handler-draggable"),
        colDraggable: "".concat(classPrefix.value, "-table--col-draggable"),
        handle: "".concat(classPrefix.value, "-table__handle-draggable"),
        ghost: "".concat(classPrefix.value, "-table__ele--draggable-ghost"),
        chosen: "".concat(classPrefix.value, "-table__ele--draggable-chosen"),
        dragging: "".concat(classPrefix.value, "-table__ele--draggable-dragging")
      },
      virtualScrollClasses: {
        cursor: "".concat(classPrefix.value, "-table__virtual-scroll-cursor"),
        header: "".concat(classPrefix.value, "-table__virtual-scroll-header")
      },
      positiveRotate90: "".concat(classPrefix.value, "-positive-rotate-90"),
      negativeRotate180: "".concat(classPrefix.value, "-negative-rotate-180")
    };
    return classNames;
  }

  function ownKeys$y(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$x(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$y(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$y(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TEllipsis = VueCompositionAPI.defineComponent({
    name: "TEllipsis",
    props: {
      content: {
        type: [String, Function]
      },
      "default": {
        type: [String, Function]
      },
      popupContent: {
        type: [String, Number, Function]
      },
      placement: String,
      attach: Function,
      popupProps: Object,
      zIndex: Number
    },
    setup: function setup(props) {
      var _useConfig = useConfig(),
          classPrefix = _useConfig.classPrefix;

      var root = VueCompositionAPI.ref();
      var isOverflow = VueCompositionAPI.ref(false);
      var ellipsisClasses = VueCompositionAPI.computed(function () {
        return ["".concat(classPrefix.value, "-table__ellipsis"), "".concat(classPrefix.value, "-text-ellipsis")];
      });

      var onTriggerMouseenter = function onTriggerMouseenter() {
        if (!root.value) return;
        isOverflow.value = isNodeOverflow(root.value);
      };

      var onTriggerMouseleave = function onTriggerMouseleave() {
        isOverflow.value = isNodeOverflow(root.value);
      };

      var onMouseAround = debounce_1(function (e) {
        e.type === "mouseleave" ? onTriggerMouseleave() : onTriggerMouseenter();
      }, 80);
      return {
        root: root,
        isOverflow: isOverflow,
        ellipsisClasses: ellipsisClasses,
        onMouseAround: onMouseAround
      };
    },
    render: function render() {
      var _this = this;

      var h = arguments[0];
      var cellNode = renderContent(this, "default", "content");
      var ellipsisContent = h("div", {
        "ref": "root",
        "class": this.ellipsisClasses,
        "on": {
          "mouseenter": this.onMouseAround,
          "mouseleave": this.onMouseAround
        }
      }, [cellNode]);
      var content = null;

      if (this.isOverflow) {
        var rProps = _objectSpread$x({
          content: this.popupContent || function () {
            return cellNode;
          },
          destroyOnClose: true,
          zIndex: this.zIndex,
          attach: this.attach || function () {
            return _this.root;
          },
          placement: this.placement
        }, this.popupProps || {});

        content = h(Popup, helper([{}, {
          "props": rProps
        }]), [ellipsisContent]);
      } else {
        content = ellipsisContent;
      }

      return content;
    }
  });

  function ownKeys$x(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$w(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$x(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$x(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function renderTitle(h, slots, col, index) {
    var params = {
      col: col,
      colIndex: index
    };

    if (isFunction_1(col.title)) {
      return col.title(h, params);
    }

    if (isString_1(col.title) && slots[col.title]) {
      return slots[col.title](params);
    }

    if (isFunction_1(col.render)) {
      return col.render(h, _objectSpread$w(_objectSpread$w({}, params), {}, {
        type: "title",
        row: {},
        rowIndex: -1
      })) || col.title;
    }

    return col.title;
  }
  function useTableHeader(props) {
    var _useClassName = useClassName(),
        tableSortClasses = _useClassName.tableSortClasses,
        tableFilterClasses = _useClassName.tableFilterClasses;

    var spansAndLeafNodes = VueCompositionAPI.computed(function () {
      return getThRowspanAndColspan(props.columns);
    });
    var thList = VueCompositionAPI.computed(function () {
      return getThList(props.columns);
    });
    var isMultipleHeader = VueCompositionAPI.computed(function () {
      return thList.value.length > 1;
    });

    var renderTitleWidthIcon = function renderTitleWidthIcon(h, _ref, col, colIndex, ellipsisTitle, attach) {
      var _classes;

      var _ref2 = _slicedToArray(_ref, 3),
          title = _ref2[0],
          sortIcon = _ref2[1],
          filterIcon = _ref2[2];

      var classes = (_classes = {}, _defineProperty$3(_classes, tableSortClasses.sortable, sortIcon), _defineProperty$3(_classes, tableFilterClasses.filterable, filterIcon), _classes);
      var content = isFunction_1(ellipsisTitle) ? ellipsisTitle(h, {
        col: col,
        colIndex: colIndex
      }) : void 0;
      return h("div", {
        "class": classes
      }, [h("div", {
        "class": tableSortClasses.title
      }, [col.ellipsis && ellipsisTitle !== false && ellipsisTitle !== null ? h(TEllipsis, {
        "attrs": {
          "placement": "bottom-right",
          "attach": attach ? function () {
            return attach;
          } : void 0,
          "popupContent": content && function () {
            return content;
          },
          "popupProps": _typeof$1(ellipsisTitle) === "object" ? ellipsisTitle : void 0
        }
      }, [title]) : h("div", [title]), Boolean(sortIcon || filterIcon) && h("div", {
        "class": tableFilterClasses.iconWrap
      }, [sortIcon, filterIcon])])]);
    };

    return {
      thList: thList,
      isMultipleHeader: isMultipleHeader,
      spansAndLeafNodes: spansAndLeafNodes,
      renderTitleWidthIcon: renderTitleWidthIcon
    };
  }

  var DEFAULT_MIN_WIDTH = 80;
  var DEFAULT_MAX_WIDTH = 600;
  function useColumnResize(tableContentRef, refreshTable, getThWidthList, updateThWidthList) {
    var resizeLineRef = VueCompositionAPI.ref();
    var notCalculateWidthCols = VueCompositionAPI.ref([]);
    var resizeLineParams = {
      isDragging: false,
      draggingCol: null,
      draggingStart: 0
    };
    var resizeLineStyle = VueCompositionAPI.reactive({
      display: "none",
      height: "10px",
      left: "10px",
      bottom: "0"
    });

    var setNotCalculateWidthCols = function setNotCalculateWidthCols(colKeys) {
      notCalculateWidthCols.value = colKeys;
    };

    var onColumnMouseover = function onColumnMouseover(e) {
      if (!resizeLineRef.value) return;
      var target = e.target.closest("th");
      var targetBoundRect = target.getBoundingClientRect();

      if (!resizeLineParams.isDragging) {
        var distance = 8;

        if (targetBoundRect.right - e.pageX <= distance) {
          target.style.cursor = "col-resize";
          resizeLineParams.draggingCol = target;
        } else {
          target.style.cursor = "";
          resizeLineParams.draggingCol = null;
        }
      }
    };

    var onColumnMousedown = function onColumnMousedown(e, col, nearCol) {
      var _tableContentRef$valu, _col$resize, _col$resize2;

      if (!resizeLineParams.draggingCol) return;
      var target = e.target.closest("th");
      var targetBoundRect = target.getBoundingClientRect();
      var tableBoundRect = (_tableContentRef$valu = tableContentRef.value) === null || _tableContentRef$valu === void 0 ? void 0 : _tableContentRef$valu.getBoundingClientRect();
      var resizeLinePos = targetBoundRect.right - tableBoundRect.left;
      var colLeft = targetBoundRect.left - tableBoundRect.left;
      var minColWidth = ((_col$resize = col.resize) === null || _col$resize === void 0 ? void 0 : _col$resize.minWidth) || DEFAULT_MIN_WIDTH;
      var maxColWidth = ((_col$resize2 = col.resize) === null || _col$resize2 === void 0 ? void 0 : _col$resize2.maxWidth) || DEFAULT_MAX_WIDTH;
      var minResizeLineLeft = colLeft + minColWidth;
      var maxResizeLineLeft = colLeft + maxColWidth;
      resizeLineParams.isDragging = true;
      resizeLineParams.draggingStart = e.x;

      if (resizeLineRef !== null && resizeLineRef !== void 0 && resizeLineRef.value) {
        resizeLineStyle.display = "block";
        resizeLineStyle.height = "".concat(tableBoundRect.bottom - targetBoundRect.top, "px");
        resizeLineStyle.left = "".concat(resizeLinePos, "px");
        var parent = tableContentRef.value.parentElement.getBoundingClientRect();
        resizeLineStyle.bottom = "".concat(parent.bottom - tableBoundRect.bottom, "px");
      }

      var setThWidthListByColumnDrag = function setThWidthListByColumnDrag(dragCol, dragWidth, nearCol2) {
        var _nearCol2$resize, _updateThWidthList;

        var thWidthList = getThWidthList();
        var propColWidth = isNumber_1(dragCol.width) ? dragCol.width : parseFloat(dragCol.width);
        var propNearColWidth = isNumber_1(nearCol2.width) ? nearCol2.width : parseFloat(nearCol2.width);
        var oldWidth = thWidthList[dragCol.colKey] || propColWidth;
        var oldNearWidth = thWidthList[nearCol2.colKey] || propNearColWidth;
        updateThWidthList((_updateThWidthList = {}, _defineProperty$3(_updateThWidthList, dragCol.colKey, dragWidth), _defineProperty$3(_updateThWidthList, nearCol2.colKey, Math.max(((_nearCol2$resize = nearCol2.resize) === null || _nearCol2$resize === void 0 ? void 0 : _nearCol2$resize.minWidth) || DEFAULT_MIN_WIDTH, oldWidth + oldNearWidth - dragWidth)), _updateThWidthList));
        setNotCalculateWidthCols([dragCol.colKey, nearCol2.colKey]);
      };

      var onDragEnd = function onDragEnd() {
        if (resizeLineParams.isDragging) {
          var width = Math.ceil(parseInt(resizeLineStyle.left, 10) - colLeft) || 0;

          if (width <= minColWidth) {
            width = minColWidth;
          } else if (width >= maxColWidth) {
            width = maxColWidth;
          }

          setThWidthListByColumnDrag(col, width, nearCol);
          resizeLineParams.isDragging = false;
          resizeLineParams.draggingCol = null;
          target.style.cursor = "";
          resizeLineStyle.display = "none";
          resizeLineStyle.left = "0";
          document.removeEventListener("mousemove", onDragOver);
          document.removeEventListener("mouseup", onDragEnd);
          document.onselectstart = null;
          document.ondragstart = null;
        }

        refreshTable();
      };

      var onDragOver = function onDragOver(e2) {
        if (resizeLineParams.isDragging) {
          var left = resizeLinePos + e2.x - resizeLineParams.draggingStart;
          resizeLineStyle.left = "".concat(Math.min(Math.max(left, minResizeLineLeft), maxResizeLineLeft), "px");
        }
      };

      document.addEventListener("mouseup", onDragEnd);
      document.addEventListener("mousemove", onDragOver);

      document.onselectstart = function () {
        return false;
      };

      document.ondragstart = function () {
        return false;
      };
    };

    var recalculateColWidth = function recalculateColWidth(columns, thWidthList, tableLayout, tableElmWidth) {
      var actualWidth = 0;
      var missingWidthCols = [];
      var thMap = {};
      columns.forEach(function (col) {
        if (!thWidthList[col.colKey]) {
          thMap[col.colKey] = isNumber_1(col.width) ? col.width : parseFloat(col.width);
        } else {
          thMap[col.colKey] = thWidthList[col.colKey];
        }

        var originWidth = thMap[col.colKey];

        if (originWidth) {
          actualWidth += originWidth;
        } else {
          missingWidthCols.push(col);
        }
      });
      var tableWidth = tableElmWidth;
      var needUpdate = false;

      if (tableWidth > 0) {
        if (missingWidthCols.length) {
          if (actualWidth < tableWidth) {
            var widthDiff = tableWidth - actualWidth;
            var avgWidth = widthDiff / missingWidthCols.length;
            missingWidthCols.forEach(function (col) {
              thMap[col.colKey] = avgWidth;
            });
          } else if (tableLayout === "fixed") {
            missingWidthCols.forEach(function (col) {
              var originWidth = thMap[col.colKey] || 100;
              thMap[col.colKey] = isNumber_1(originWidth) ? originWidth : parseFloat(originWidth);
            });
          } else {
            var extraWidth = missingWidthCols.length * 100;
            var totalWidth = extraWidth + actualWidth;
            columns.forEach(function (col) {
              if (!thMap[col.colKey]) {
                thMap[col.colKey] = 100 / totalWidth * tableWidth;
              } else {
                thMap[col.colKey] = thMap[col.colKey] / totalWidth * tableWidth;
              }
            });
          }

          needUpdate = true;
        } else {
          if (notCalculateWidthCols.value.length) {
            var sum = 0;
            notCalculateWidthCols.value.forEach(function (colKey) {
              sum += thMap[colKey];
            });
            actualWidth -= sum;
            tableWidth -= sum;
          }

          if (actualWidth !== tableWidth || notCalculateWidthCols.value.length) {
            columns.forEach(function (col) {
              if (notCalculateWidthCols.value.includes(col.colKey)) return;
              thMap[col.colKey] = thMap[col.colKey] / actualWidth * tableWidth;
            });
            needUpdate = true;
          }
        }
      } else {
        missingWidthCols.forEach(function (col) {
          var originWidth = thMap[col.colKey] || 100;
          thMap[col.colKey] = isNumber_1(originWidth) ? originWidth : parseFloat(originWidth);
        });
        needUpdate = true;
      }

      if (needUpdate) {
        var addon = 0;
        Object.keys(thMap).forEach(function (key) {
          var width = thMap[key];
          addon += width - Math.floor(width);
          thMap[key] = Math.floor(width) + (addon > 1 ? 1 : 0);

          if (addon > 1) {
            addon -= 1;
          }
        });

        if (addon > 0.5) {
          thMap[columns[0].colKey] += 1;
        }
      }

      updateThWidthList(thMap);

      if (notCalculateWidthCols.value.length) {
        notCalculateWidthCols.value = [];
      }
    };

    return {
      resizeLineRef: resizeLineRef,
      resizeLineStyle: resizeLineStyle,
      onColumnMouseover: onColumnMouseover,
      onColumnMousedown: onColumnMousedown,
      recalculateColWidth: recalculateColWidth
    };
  }

  function getScrollbarWidth() {
    var defaultScrollbarWidth = 6;
    if (!navigator) return defaultScrollbarWidth;
    if (/(Chrome|Safari)/i.test(navigator.userAgent)) return defaultScrollbarWidth;
    var scrollDiv = document.createElement("div");
    scrollDiv.style.cssText = "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;";
    document.body.appendChild(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);

    if (/Firefox/.test(navigator.userAgent)) {
      scrollbarWidth -= 4;
    }

    if (getIEVersion$1() <= 11) {
      scrollbarWidth = 12;
    }

    return scrollbarWidth;
  }

  function ownKeys$w(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$v(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$w(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$w(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function getColumnFixedStyles(col, index, rowAndColFixedPosition, tableColFixedClasses) {
    var _thClasses;

    var fixedPos = rowAndColFixedPosition === null || rowAndColFixedPosition === void 0 ? void 0 : rowAndColFixedPosition.get(col.colKey || index);
    if (!fixedPos) return {};
    var thClasses = (_thClasses = {}, _defineProperty$3(_thClasses, tableColFixedClasses.left, col.fixed === "left"), _defineProperty$3(_thClasses, tableColFixedClasses.right, col.fixed === "right"), _defineProperty$3(_thClasses, tableColFixedClasses.lastLeft, col.fixed === "left" && fixedPos.lastLeftFixedCol), _defineProperty$3(_thClasses, tableColFixedClasses.firstRight, col.fixed === "right" && fixedPos.firstRightFixedCol), _thClasses);
    var thStyles = {
      left: col.fixed === "left" ? "".concat(fixedPos.left, "px") : void 0,
      right: col.fixed === "right" ? "".concat(fixedPos.right, "px") : void 0
    };
    return {
      style: thStyles,
      classes: thClasses
    };
  }
  function getRowFixedStyles(rowId, rowIndex, rowLength, fixedRows, rowAndColFixedPosition, tableRowFixedClasses) {
    var _rowClasses;

    if (!fixedRows || !fixedRows.length) return {
      style: void 0,
      classes: void 0
    };
    var fixedTop = rowIndex < fixedRows[0];
    var fixedBottom = rowIndex > rowLength - 1 - fixedRows[1];
    var firstFixedBottomRow = rowLength - fixedRows[1];
    var fixedPos = (rowAndColFixedPosition === null || rowAndColFixedPosition === void 0 ? void 0 : rowAndColFixedPosition.get(rowId)) || {};
    var rowClasses = (_rowClasses = {}, _defineProperty$3(_rowClasses, tableRowFixedClasses.top, fixedTop), _defineProperty$3(_rowClasses, tableRowFixedClasses.bottom, fixedBottom), _defineProperty$3(_rowClasses, tableRowFixedClasses.firstBottom, rowIndex === firstFixedBottomRow), _defineProperty$3(_rowClasses, tableRowFixedClasses.withoutBorderBottom, rowIndex === firstFixedBottomRow - 1), _rowClasses);
    var rowStyles = {
      top: fixedTop ? "".concat(fixedPos.top, "px") : void 0,
      bottom: fixedBottom ? "".concat(fixedPos.bottom, "px") : void 0
    };
    return {
      style: rowStyles,
      classes: rowClasses
    };
  }
  function useFixed(props, context, finalColumns) {
    var _toRefs = VueCompositionAPI.toRefs(props),
        columns = _toRefs.columns,
        tableLayout = _toRefs.tableLayout,
        tableContentWidth = _toRefs.tableContentWidth,
        fixedRows = _toRefs.fixedRows,
        firstFullRow = _toRefs.firstFullRow,
        lastFullRow = _toRefs.lastFullRow,
        maxHeight = _toRefs.maxHeight,
        headerAffixedTop = _toRefs.headerAffixedTop,
        footerAffixedBottom = _toRefs.footerAffixedBottom,
        bordered = _toRefs.bordered,
        resizable = _toRefs.resizable,
        allowResizeColumnWidth = _toRefs.allowResizeColumnWidth;

    var data = VueCompositionAPI.ref([]);
    var tableContentRef = VueCompositionAPI.ref();
    var isFixedHeader = VueCompositionAPI.ref(false);
    var isWidthOverflow = VueCompositionAPI.ref(false);
    var tableElmRef = VueCompositionAPI.ref();
    var scrollbarWidth = VueCompositionAPI.ref(6);
    var rowAndColFixedPosition = VueCompositionAPI.ref( /* @__PURE__ */new Map());
    var showColumnShadow = VueCompositionAPI.reactive({
      left: false,
      right: false
    });
    var virtualScrollHeaderPos = VueCompositionAPI.ref({
      left: 0,
      top: 0
    });
    var tableWidth = VueCompositionAPI.ref(0);
    var tableElmWidth = VueCompositionAPI.ref(0);
    var thWidthList = VueCompositionAPI.ref({});
    var isFixedColumn = VueCompositionAPI.ref(false);
    var isFixedRightColumn = VueCompositionAPI.ref(false);
    var isFixedLeftColumn = VueCompositionAPI.ref(false);
    var columnResizable = VueCompositionAPI.computed(function () {
      return resizable.value || allowResizeColumnWidth.value || false;
    });
    var notNeedThWidthList = VueCompositionAPI.computed(function () {
      var _props$scroll;

      return !(props.headerAffixedTop || props.footerAffixedBottom || props.horizontalScrollAffixedBottom || ((_props$scroll = props.scroll) === null || _props$scroll === void 0 ? void 0 : _props$scroll.type) === "virtual");
    });
    var recalculateColWidth = VueCompositionAPI.ref(function () {});

    function setUseFixedTableElmRef(val) {
      tableElmRef.value = val;
    }

    function setRecalculateColWidthFuncRef(val) {
      recalculateColWidth.value = val;
    }

    function getColumnMap(columns2) {
      var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Map();
      var levelNodes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var level = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var parent = arguments.length > 4 ? arguments[4] : undefined;

      for (var i = 0, len = columns2.length; i < len; i++) {
        var _col$children;

        var col = columns2[i];

        if (["left", "right"].includes(col.fixed)) {
          isFixedColumn.value = true;
        }

        if (col.fixed === "right") {
          isFixedRightColumn.value = true;
        }

        if (col.fixed === "left") {
          isFixedLeftColumn.value = true;
        }

        var key = col.colKey || i;
        var columnInfo = {
          col: col,
          parent: parent,
          index: i
        };
        map.set(key, columnInfo);

        if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
          getColumnMap(col.children, map, levelNodes, level + 1, columnInfo);
        }

        if (levelNodes[level]) {
          levelNodes[level].push(columnInfo);
        } else {
          levelNodes[level] = [columnInfo];
        }
      }

      return {
        newColumnsMap: map,
        levelNodes: levelNodes
      };
    }

    var setFixedLeftPos = function setFixedLeftPos(columns2, initialColumnMap) {
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      for (var i = 0, len = columns2.length; i < len; i++) {
        var _col$children2;

        var col = columns2[i];
        if (col.fixed === "right") return;
        var colInfo = initialColumnMap.get(col.colKey || i);
        var lastColIndex = i - 1;

        while (lastColIndex >= 0 && columns2[lastColIndex].fixed !== "left") {
          lastColIndex -= 1;
        }

        var lastCol = columns2[lastColIndex];
        var defaultWidth = i === 0 ? (parent === null || parent === void 0 ? void 0 : parent.left) || 0 : 0;
        var lastColInfo = initialColumnMap.get((lastCol === null || lastCol === void 0 ? void 0 : lastCol.colKey) || i - 1);
        colInfo.left = ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.left) || defaultWidth) + ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.width) || 0);

        if ((_col$children2 = col.children) !== null && _col$children2 !== void 0 && _col$children2.length) {
          setFixedLeftPos(col.children, initialColumnMap, colInfo);
        }
      }
    };

    var setFixedRightPos = function setFixedRightPos(columns2, initialColumnMap) {
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      for (var i = columns2.length - 1; i >= 0; i--) {
        var _col$children3;

        var col = columns2[i];
        if (col.fixed === "left") return;
        var colInfo = initialColumnMap.get(col.colKey || i);
        var lastColIndex = i + 1;

        while (lastColIndex < columns2.length && columns2[lastColIndex].fixed !== "right") {
          lastColIndex += 1;
        }

        var lastCol = columns2[lastColIndex];
        var defaultWidth = i === columns2.length - 1 ? (parent === null || parent === void 0 ? void 0 : parent.right) || 0 : 0;
        var lastColInfo = initialColumnMap.get((lastCol === null || lastCol === void 0 ? void 0 : lastCol.colKey) || i + 1);
        colInfo.right = ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.right) || defaultWidth) + ((lastColInfo === null || lastColInfo === void 0 ? void 0 : lastColInfo.width) || 0);

        if ((_col$children3 = col.children) !== null && _col$children3 !== void 0 && _col$children3.length) {
          setFixedRightPos(col.children, initialColumnMap, colInfo);
        }
      }
    };

    var setFixedColPosition = function setFixedColPosition(trList, initialColumnMap) {
      if (!trList) return;

      for (var i = 0, len = trList.length; i < len; i++) {
        var thList = trList[i].children;

        for (var j = 0, thLen = thList.length; j < thLen; j++) {
          var _obj$col;

          var th = thList[j];
          var colKey = th.dataset.colkey;

          if (!colKey) {
            log.warn("TDesign Table", "".concat(th.innerText, " missing colKey. colKey is required for fixed column feature."));
          }

          var obj = initialColumnMap.get(colKey || j);

          if (obj !== null && obj !== void 0 && (_obj$col = obj.col) !== null && _obj$col !== void 0 && _obj$col.fixed) {
            initialColumnMap.set(colKey, _objectSpread$v(_objectSpread$v({}, obj), {}, {
              width: th.getBoundingClientRect().width
            }));
          }
        }
      }

      setFixedLeftPos(columns.value, initialColumnMap);
      setFixedRightPos(columns.value, initialColumnMap);
    };

    var setFixedRowPosition = function setFixedRowPosition(trList, initialColumnMap, thead, tfoot) {
      var _ref = fixedRows.value || [],
          _ref2 = _slicedToArray(_ref, 2),
          fixedTopRows = _ref2[0],
          fixedBottomRows = _ref2[1];

      var data2 = props.data,
          _props$rowKey = props.rowKey,
          rowKey = _props$rowKey === void 0 ? "id" : _props$rowKey;

      for (var i = 0; i < fixedTopRows; i++) {
        var tr = trList[i];
        var rowId = get_1(data2[i], rowKey);
        var thisRowInfo = initialColumnMap.get(rowId) || {};
        var lastRowId = get_1(data2[i - 1], rowKey);
        var lastRowInfo = initialColumnMap.get(lastRowId) || {};
        var defaultBottom = 0;

        if (i === 0) {
          defaultBottom = (thead === null || thead === void 0 ? void 0 : thead.getBoundingClientRect().height) || 0;
        }

        thisRowInfo.top = (lastRowInfo.top || defaultBottom) + (lastRowInfo.height || 0);
        initialColumnMap.set(rowId, _objectSpread$v(_objectSpread$v({}, thisRowInfo), {}, {
          height: tr.getBoundingClientRect().height
        }));
      }

      for (var _i = data2.length - 1; _i >= data2.length - fixedBottomRows; _i--) {
        var _tr = trList[_i];

        var _rowId = get_1(data2[_i], rowKey);

        var _thisRowInfo = initialColumnMap.get(_rowId) || {};

        var _lastRowId = get_1(data2[_i + 1], rowKey);

        var _lastRowInfo = initialColumnMap.get(_lastRowId) || {};

        var _defaultBottom = 0;

        if (_i === data2.length - 1) {
          _defaultBottom = (tfoot === null || tfoot === void 0 ? void 0 : tfoot.getBoundingClientRect().height) || 0;
        }

        _thisRowInfo.bottom = (_lastRowInfo.bottom || _defaultBottom) + (_lastRowInfo.height || 0);
        initialColumnMap.set(_rowId, _objectSpread$v(_objectSpread$v({}, _thisRowInfo), {}, {
          height: _tr.getBoundingClientRect().height
        }));
      }
    };

    var updateRowAndColFixedPosition = function updateRowAndColFixedPosition(tableContentElm, initialColumnMap) {
      rowAndColFixedPosition.value.clear();
      if (!tableContentElm) return;
      var thead = tableContentElm.querySelector("thead");
      thead && setFixedColPosition(thead.children, initialColumnMap);
      var tbody = tableContentElm.querySelector("tbody");
      var tfoot = tableContentElm.querySelector("tfoot");
      tbody && setFixedRowPosition(tbody.children, initialColumnMap, thead, tfoot);
      rowAndColFixedPosition.value = initialColumnMap;
    };

    var shadowLastScrollLeft;

    var updateColumnFixedShadow = function updateColumnFixedShadow(target, extra) {
      if (!isFixedColumn || !target) return;
      var scrollLeft = target.scrollLeft;
      if (shadowLastScrollLeft === scrollLeft && (!extra || !extra.skipScrollLimit)) return;
      shadowLastScrollLeft = scrollLeft;
      var isShowRight = target.clientWidth + scrollLeft < target.scrollWidth;
      showColumnShadow.left = scrollLeft > 0;
      showColumnShadow.right = isShowRight;
    };

    var setIsLastOrFirstFixedCol = function setIsLastOrFirstFixedCol(levelNodes) {
      for (var t = 0; t < levelNodes.length; t++) {
        var nodes = levelNodes[t];

        for (var i = 0, len = nodes.length; i < len; i++) {
          var colMapInfo = nodes[i];
          var nextColMapInfo = nodes[i + 1];
          var parent = colMapInfo.parent;
          var isParentLastLeftFixedCol = !parent || (parent === null || parent === void 0 ? void 0 : parent.lastLeftFixedCol);

          if (isParentLastLeftFixedCol && colMapInfo.col.fixed === "left" && (nextColMapInfo === null || nextColMapInfo === void 0 ? void 0 : nextColMapInfo.col.fixed) !== "left") {
            colMapInfo.lastLeftFixedCol = true;
          }

          var lastColMapInfo = nodes[i - 1];
          var isParentFirstRightFixedCol = !parent || (parent === null || parent === void 0 ? void 0 : parent.firstRightFixedCol);

          if (isParentFirstRightFixedCol && colMapInfo.col.fixed === "right" && (lastColMapInfo === null || lastColMapInfo === void 0 ? void 0 : lastColMapInfo.col.fixed) !== "right") {
            colMapInfo.firstRightFixedCol = true;
          }
        }
      }
    };

    var updateFixedStatus = function updateFixedStatus() {
      var _getColumnMap = getColumnMap(columns.value),
          newColumnsMap = _getColumnMap.newColumnsMap,
          levelNodes = _getColumnMap.levelNodes;

      setIsLastOrFirstFixedCol(levelNodes);
      var timer = setTimeout(function () {
        var _fixedRows$value;

        if (isFixedColumn.value || (_fixedRows$value = fixedRows.value) !== null && _fixedRows$value !== void 0 && _fixedRows$value.length) {
          updateRowAndColFixedPosition(tableContentRef.value, newColumnsMap);
        }

        clearTimeout(timer);
      }, 0);
      return function () {
        clearTimeout(timer);
      };
    };

    var updateFixedHeader = function updateFixedHeader() {
      var timer = setTimeout(function () {
        if (!tableContentRef.value) return;
        isFixedHeader.value = tableContentRef.value.scrollHeight > tableContentRef.value.clientHeight;
        isWidthOverflow.value = tableContentRef.value.scrollWidth > tableContentRef.value.clientWidth;
        var pos = tableContentRef.value.getBoundingClientRect();
        virtualScrollHeaderPos.value = {
          top: pos.top,
          left: pos.left
        };
        clearTimeout(timer);
      }, 0);
    };

    var updateTableWidth = function updateTableWidth() {
      var _tableContentRef$valu, _tableElmRef$value;

      var rect = (_tableContentRef$valu = tableContentRef.value) === null || _tableContentRef$valu === void 0 ? void 0 : _tableContentRef$valu.getBoundingClientRect();
      if (!rect) return;
      var reduceWidth = isFixedHeader.value ? scrollbarWidth.value : 0;
      tableWidth.value = rect.width - reduceWidth - (props.bordered ? 1 : 0);
      var elmRect = tableElmRef === null || tableElmRef === void 0 ? void 0 : (_tableElmRef$value = tableElmRef.value) === null || _tableElmRef$value === void 0 ? void 0 : _tableElmRef$value.getBoundingClientRect();
      tableElmWidth.value = elmRect === null || elmRect === void 0 ? void 0 : elmRect.width;
    };

    var updateThWidthList = function updateThWidthList(trList) {
      if (trList instanceof HTMLCollection) {
        if (columnResizable.value) return;
        var widthMap = {};

        for (var i = 0, len = trList.length; i < len; i++) {
          var thList = trList[i].children;

          for (var j = 0, thLen = thList.length; j < thLen; j++) {
            var th = thList[j];
            var colKey = th.dataset.colkey;
            widthMap[colKey] = th.getBoundingClientRect().width;
          }
        }

        thWidthList.value = widthMap;
      } else {
        if (!thWidthList.value) {
          thWidthList.value = {};
        }

        Object.entries(trList).forEach(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
              colKey = _ref4[0],
              width = _ref4[1];

          thWidthList.value[colKey] = width;
        });
      }
    };

    var updateThWidthListHandler = function updateThWidthListHandler() {
      if (columnResizable.value) {
        recalculateColWidth.value(finalColumns.value, thWidthList.value, tableLayout.value, tableElmWidth.value);
      }

      if (notNeedThWidthList.value) return;
      var timer = setTimeout(function () {
        var _tableContentRef$valu2;

        updateTableWidth();
        var thead = (_tableContentRef$valu2 = tableContentRef.value) === null || _tableContentRef$valu2 === void 0 ? void 0 : _tableContentRef$valu2.querySelector("thead");
        if (!thead) return;
        updateThWidthList(thead.children);
        clearTimeout(timer);
      }, 0);
    };

    var emitScrollEvent = function emitScrollEvent(e) {
      var _props$onScrollX, _props$onScrollY, _props$onScroll;

      (_props$onScrollX = props.onScrollX) === null || _props$onScrollX === void 0 ? void 0 : _props$onScrollX.call(props, {
        e: e
      });
      context.emit("scroll-x", {
        e: e
      });
      (_props$onScrollY = props.onScrollY) === null || _props$onScrollY === void 0 ? void 0 : _props$onScrollY.call(props, {
        e: e
      });
      context.emit("scroll-y", {
        e: e
      });
      (_props$onScroll = props.onScroll) === null || _props$onScroll === void 0 ? void 0 : _props$onScroll.call(props, {
        e: e
      });
      context.emit("scroll", {
        e: e
      });
    };

    var getThWidthList = function getThWidthList() {
      if (!thWidthList.value) {
        thWidthList.value = {};
      }

      return thWidthList.value;
    };

    VueCompositionAPI.watch([data, columns, bordered, tableLayout, tableContentWidth, isFixedHeader, isWidthOverflow, isFixedColumn, fixedRows, firstFullRow, lastFullRow], updateFixedStatus, {
      immediate: true
    });
    VueCompositionAPI.watch([isFixedColumn, columns], function () {
      var timer = setTimeout(function () {
        if (isFixedColumn.value) {
          updateColumnFixedShadow(tableContentRef.value);
        }

        clearTimeout(timer);
      }, 0);
    }, {
      immediate: true
    });
    VueCompositionAPI.watch([maxHeight, data, columns, bordered], updateFixedHeader, {
      immediate: true
    });
    VueCompositionAPI.watch([data, columns, bordered, tableLayout, fixedRows, isFixedHeader, headerAffixedTop, footerAffixedBottom, tableContentWidth], updateThWidthListHandler, {
      immediate: true
    });
    var refreshTable = debounce_1(function () {
      updateTableWidth();
      updateFixedHeader();
      updateThWidthListHandler();

      if (isFixedColumn.value || isFixedHeader.value) {
        updateFixedStatus();
        updateColumnFixedShadow(tableContentRef.value, {
          skipScrollLimit: true
        });
      }
    }, 30);
    var onResize = refreshTable;
    VueCompositionAPI.onMounted(function () {
      var scrollWidth = getScrollbarWidth();
      scrollbarWidth.value = scrollWidth;
      var timer = setTimeout(function () {
        updateTableWidth();

        if (columnResizable.value) {
          recalculateColWidth.value(finalColumns.value, thWidthList.value, tableLayout.value, tableElmWidth.value);
        }

        clearTimeout(timer);
      });
      var isWatchResize = isFixedColumn.value || isFixedHeader.value || !notNeedThWidthList.value || !data.value.length;

      if (isWatchResize) {
        on$1(window, "resize", onResize);
      }
    });
    VueCompositionAPI.onBeforeMount(function () {
      off$1(window, "resize", onResize);
    });

    var setData = function setData(dataSource) {
      data.value = dataSource;
    };

    return {
      tableWidth: tableWidth,
      tableElmWidth: tableElmWidth,
      thWidthList: thWidthList,
      isFixedHeader: isFixedHeader,
      isWidthOverflow: isWidthOverflow,
      tableContentRef: tableContentRef,
      isFixedColumn: isFixedColumn,
      showColumnShadow: showColumnShadow,
      rowAndColFixedPosition: rowAndColFixedPosition,
      virtualScrollHeaderPos: virtualScrollHeaderPos,
      scrollbarWidth: scrollbarWidth,
      setData: setData,
      refreshTable: refreshTable,
      emitScrollEvent: emitScrollEvent,
      updateThWidthListHandler: updateThWidthListHandler,
      updateColumnFixedShadow: updateColumnFixedShadow,
      setUseFixedTableElmRef: setUseFixedTableElmRef,
      getThWidthList: getThWidthList,
      updateThWidthList: updateThWidthList,
      setRecalculateColWidthFuncRef: setRecalculateColWidthFuncRef
    };
  }

  function ownKeys$v(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$u(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$v(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$v(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function usePagination(props, context) {
    var _pagination$value, _pagination$value2, _props$data;

    var _toRefs = VueCompositionAPI.toRefs(props),
        pagination = _toRefs.pagination,
        data = _toRefs.data,
        disableDataPage = _toRefs.disableDataPage;

    var _useConfig = useConfig(),
        classPrefix = _useConfig.classPrefix;

    var pageSize = ((_pagination$value = pagination.value) === null || _pagination$value === void 0 ? void 0 : _pagination$value.pageSize) || ((_pagination$value2 = pagination.value) === null || _pagination$value2 === void 0 ? void 0 : _pagination$value2.defaultPageSize) || 10;
    var dataSource = VueCompositionAPI.ref(((_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.slice(0, pageSize)) || []);
    var isPaginateData = VueCompositionAPI.ref(false);

    var updateDataSourceAndPaginate = function updateDataSourceAndPaginate() {
      var current = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      var pageSize2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
      var data2 = props.data;
      var t = Boolean(!disableDataPage.value && data2.length > pageSize2);
      isPaginateData.value = t;

      if (t) {
        var start = (current - 1) * pageSize2;
        var end = current * pageSize2;
        dataSource.value = data2.slice(start, end);
      } else {
        dataSource.value = data2;
      }
    };

    VueCompositionAPI.watch(function () {
      var _pagination$value3, _pagination$value4;

      return [(_pagination$value3 = pagination.value) === null || _pagination$value3 === void 0 ? void 0 : _pagination$value3.current, (_pagination$value4 = pagination.value) === null || _pagination$value4 === void 0 ? void 0 : _pagination$value4.pageSize, data.value.length, disableDataPage];
    }, function () {
      if (!pagination.value || !pagination.value.current) return;
      updateDataSourceAndPaginate(pagination.value.current, pagination.value.pageSize);
    }, {
      immediate: true
    });
    VueCompositionAPI.watch([data], function () {
      if (!pagination.value || !pagination.value.defaultCurrent) return;
      updateDataSourceAndPaginate(pagination.value.defaultCurrent, pagination.value.defaultPageSize);
    }, {
      immediate: true
    });

    var renderPagination = function renderPagination(h) {
      if (!pagination.value) return null;
      return h("div", {
        "class": "".concat(classPrefix.value, "-table__pagination")
      }, [h(Pagination, {
        "props": _objectSpread$u({}, pagination.value),
        "on": _objectSpread$u({}, {
          change: function change(pageInfo) {
            var _props$onPageChange;

            (_props$onPageChange = props.onPageChange) === null || _props$onPageChange === void 0 ? void 0 : _props$onPageChange.call(props, pageInfo, dataSource.value);
            context.emit("page-change", pageInfo, dataSource.value);

            if (pagination.value && !pagination.value.current && pagination.value.defaultCurrent) {
              updateDataSourceAndPaginate(pageInfo.current, pageInfo.pageSize);
            }
          }
        })
      })]);
    };

    return {
      isPaginateData: isPaginateData,
      dataSource: dataSource,
      renderPagination: renderPagination
    };
  }

  function useAffix(props) {
    var tableContentRef = VueCompositionAPI.ref();
    var affixHeaderRef = VueCompositionAPI.ref();
    var affixFooterRef = VueCompositionAPI.ref();
    var horizontalScrollbarRef = VueCompositionAPI.ref();
    var paginationRef = VueCompositionAPI.ref();
    var showAffixHeader = VueCompositionAPI.ref(true);
    var showAffixFooter = VueCompositionAPI.ref(true);
    var showAffixPagination = VueCompositionAPI.ref(true);
    var isVirtualScroll = VueCompositionAPI.computed(function () {
      return props.scroll && props.scroll.type === "virtual" && (props.scroll.threshold || 100) < props.data.length;
    });
    var isAffixed = VueCompositionAPI.computed(function () {
      return !!(props.headerAffixedTop || props.footerAffixedBottom || props.horizontalScrollAffixedBottom);
    });
    var lastScrollLeft = 0;

    var onHorizontalScroll = function onHorizontalScroll(scrollElement) {
      if (!isAffixed.value && !isVirtualScroll.value) return;
      var target = scrollElement;

      if (!target && tableContentRef.value) {
        lastScrollLeft = 0;
        target = tableContentRef.value;
      }

      if (!target) return;
      var left = target.scrollLeft;
      if (lastScrollLeft === left) return;
      lastScrollLeft = left;
      var toUpdateScrollElement = [tableContentRef.value, affixHeaderRef.value, affixFooterRef.value, horizontalScrollbarRef.value];

      for (var i = 0, len = toUpdateScrollElement.length; i < len; i++) {
        if (toUpdateScrollElement[i] && scrollElement !== toUpdateScrollElement[i]) {
          toUpdateScrollElement[i].scrollLeft = left;
        }
      }
    };

    var isAffixedBottomElementShow = function isAffixedBottomElementShow(elementRect, tableRect, headerHeight) {
      return tableRect.top + headerHeight < elementRect.top && elementRect.top > elementRect.height;
    };

    var getOffsetTop = function getOffsetTop(props2) {
      if (typeof props2 === "boolean") return 0;
      return props2.offsetTop || 0;
    };

    var updateAffixHeaderOrFooter = function updateAffixHeaderOrFooter() {
      var _tableContentRef$valu, _tableContentRef$valu2, _tableContentRef$valu3, _affixFooterRef$value;

      if (!isAffixed.value && !isVirtualScroll.value) return;
      var pos = (_tableContentRef$valu = tableContentRef.value) === null || _tableContentRef$valu === void 0 ? void 0 : _tableContentRef$valu.getBoundingClientRect();
      var headerRect = (_tableContentRef$valu2 = tableContentRef.value) === null || _tableContentRef$valu2 === void 0 ? void 0 : (_tableContentRef$valu3 = _tableContentRef$valu2.querySelector("thead")) === null || _tableContentRef$valu3 === void 0 ? void 0 : _tableContentRef$valu3.getBoundingClientRect();
      var headerHeight = headerRect.height || 0;
      var footerRect = (_affixFooterRef$value = affixFooterRef.value) === null || _affixFooterRef$value === void 0 ? void 0 : _affixFooterRef$value.getBoundingClientRect();

      if ((props.headerAffixedTop || isVirtualScroll.value) && affixHeaderRef.value) {
        var offsetTop = getOffsetTop(props.headerAffixProps || props.headerAffixedTop);
        var footerHeight = (footerRect === null || footerRect === void 0 ? void 0 : footerRect.height) || 0;
        var r = Math.abs(pos.top) < pos.height - headerHeight - offsetTop - footerHeight;

        if (isVirtualScroll.value) {
          r = pos.top > -1 * headerRect.height;
        }

        showAffixHeader.value = r;
      }

      if (props.footerAffixedBottom && affixFooterRef !== null && affixFooterRef !== void 0 && affixFooterRef.value) {
        showAffixFooter.value = isAffixedBottomElementShow(footerRect, pos, headerHeight);
      } else if (props.horizontalScrollAffixedBottom && horizontalScrollbarRef !== null && horizontalScrollbarRef !== void 0 && horizontalScrollbarRef.value) {
        var horizontalScrollbarRect = horizontalScrollbarRef.value.getBoundingClientRect();
        showAffixFooter.value = isAffixedBottomElementShow(horizontalScrollbarRect, pos, headerHeight);
      }

      if (props.paginationAffixedBottom && paginationRef.value) {
        var pageRect = paginationRef.value.getBoundingClientRect();
        showAffixPagination.value = isAffixedBottomElementShow(pageRect, pos, headerHeight);
      }
    };

    var onDocumentScroll = function onDocumentScroll() {
      updateAffixHeaderOrFooter();
    };

    var onFootScroll = function onFootScroll() {
      onHorizontalScroll(affixFooterRef.value);
    };

    var onHeaderScroll = function onHeaderScroll() {
      onHorizontalScroll(affixHeaderRef.value);
    };

    var horizontalScrollbarScroll = function horizontalScrollbarScroll() {
      onHorizontalScroll(horizontalScrollbarRef.value);
    };

    var onTableContentScroll = function onTableContentScroll() {
      onHorizontalScroll(tableContentRef.value);
    };

    var onFootMouseEnter = function onFootMouseEnter() {
      on$1(affixFooterRef.value, "scroll", onFootScroll);
    };

    var onFootMouseLeave = function onFootMouseLeave() {
      off$1(affixFooterRef.value, "scroll", onFootScroll);
    };

    var onHeaderMouseEnter = function onHeaderMouseEnter() {
      on$1(affixHeaderRef.value, "scroll", onHeaderScroll);
    };

    var onHeaderMouseLeave = function onHeaderMouseLeave() {
      off$1(affixHeaderRef.value, "scroll", onHeaderScroll);
    };

    var onScrollbarMouseEnter = function onScrollbarMouseEnter() {
      on$1(horizontalScrollbarRef.value, "scroll", horizontalScrollbarScroll);
    };

    var onScrollbarMouseLeave = function onScrollbarMouseLeave() {
      off$1(horizontalScrollbarRef.value, "scroll", horizontalScrollbarScroll);
    };

    var onTableContentMouseEnter = function onTableContentMouseEnter() {
      on$1(tableContentRef.value, "scroll", onTableContentScroll);
    };

    var onTableContentMouseLeave = function onTableContentMouseLeave() {
      off$1(tableContentRef.value, "scroll", onTableContentScroll);
    };

    var addHorizontalScrollListeners = function addHorizontalScrollListeners() {
      if (affixHeaderRef.value) {
        on$1(affixHeaderRef.value, "mouseenter", onHeaderMouseEnter);
        on$1(affixHeaderRef.value, "mouseleave", onHeaderMouseLeave);
      }

      if (props.footerAffixedBottom && affixFooterRef.value) {
        on$1(affixFooterRef.value, "mouseenter", onFootMouseEnter);
        on$1(affixFooterRef.value, "mouseleave", onFootMouseLeave);
      }

      if (props.horizontalScrollAffixedBottom && horizontalScrollbarRef.value) {
        on$1(horizontalScrollbarRef.value, "mouseenter", onScrollbarMouseEnter);
        on$1(horizontalScrollbarRef.value, "mouseleave", onScrollbarMouseLeave);
      }

      if ((isAffixed.value || isVirtualScroll.value) && tableContentRef.value) {
        on$1(tableContentRef.value, "mouseenter", onTableContentMouseEnter);
        on$1(tableContentRef.value, "mouseleave", onTableContentMouseLeave);
      }
    };

    var removeHorizontalScrollListeners = function removeHorizontalScrollListeners() {
      if (affixHeaderRef.value) {
        off$1(affixHeaderRef.value, "mouseenter", onHeaderMouseEnter);
        off$1(affixHeaderRef.value, "mouseleave", onHeaderMouseLeave);
      }

      if (affixFooterRef.value) {
        off$1(affixFooterRef.value, "mouseenter", onFootMouseEnter);
        off$1(affixFooterRef.value, "mouseleave", onFootMouseLeave);
      }

      if (tableContentRef.value) {
        off$1(tableContentRef.value, "mouseenter", onTableContentMouseEnter);
        off$1(tableContentRef.value, "mouseleave", onTableContentMouseLeave);
      }

      if (horizontalScrollbarRef.value) {
        off$1(horizontalScrollbarRef.value, "mouseenter", onScrollbarMouseEnter);
        off$1(horizontalScrollbarRef.value, "mouseleave", onScrollbarMouseLeave);
      }
    };

    var addVerticalScrollListener = function addVerticalScrollListener() {
      if (!isAffixed.value && !props.paginationAffixedBottom) return;
      var timer = setTimeout(function () {
        if (isAffixed.value || props.paginationAffixedBottom) {
          on$1(document, "scroll", onDocumentScroll);
        } else {
          off$1(document, "scroll", onDocumentScroll);
        }

        clearTimeout(timer);
      });
    };

    VueCompositionAPI.watch([affixHeaderRef, affixFooterRef, horizontalScrollbarRef, tableContentRef], function () {
      addHorizontalScrollListeners();
      onHorizontalScroll();
      updateAffixHeaderOrFooter();
    });
    VueCompositionAPI.watch(isAffixed, addVerticalScrollListener);
    VueCompositionAPI.watch(function () {
      return [props.data, props.columns, props.headerAffixedTop, props.footerAffixedBottom, props.horizontalScrollAffixedBottom];
    }, function () {
      onHorizontalScroll();
    });
    VueCompositionAPI.onBeforeMount(function () {
      off$1(document, "scroll", onDocumentScroll);
      removeHorizontalScrollListeners();
    });

    var setTableContentRef = function setTableContentRef(tableContent) {
      tableContentRef.value = tableContent;
      addVerticalScrollListener();
    };

    return {
      showAffixHeader: showAffixHeader,
      showAffixFooter: showAffixFooter,
      showAffixPagination: showAffixPagination,
      affixHeaderRef: affixHeaderRef,
      affixFooterRef: affixFooterRef,
      horizontalScrollbarRef: horizontalScrollbarRef,
      paginationRef: paginationRef,
      onHorizontalScroll: onHorizontalScroll,
      setTableContentRef: setTableContentRef,
      updateAffixHeaderOrFooter: updateAffixHeaderOrFooter
    };
  }

  function formatRowAttributes(attributes, params) {
    if (!attributes) return void 0;
    var attrList = attributes instanceof Array ? attributes : [attributes];
    var result = {};

    for (var i = 0; i < attrList.length; i++) {
      var attrItem = attrList[i];
      if (!attrItem) continue;
      var attrProperty = isFunction_1(attrItem) ? attrItem(params) : attrItem;
      result = attrProperty instanceof Array ? formatRowAttributes(attrProperty, params) : Object.assign(result, attrProperty);
    }

    return result;
  }
  function formatRowClassNames(rowClassNames, params, rowKey) {
    var rowClassList = rowClassNames instanceof Array ? rowClassNames : [rowClassNames];
    var row = params.row,
        rowIndex = params.rowIndex;
    var customClasses = [];

    for (var i = 0, len = rowClassList.length; i < len; i++) {
      var rName = rowClassList[i];
      var tClass = isFunction_1(rName) ? rName(params) : rName;

      if (isObject_1(tClass) && !(tClass instanceof Array)) {
        tClass[rowIndex] && (tClass = tClass[rowIndex]);
        var rowId = get_1(row, rowKey || "id");
        tClass[rowId] && (tClass = tClass[rowId]);
      } else if (tClass instanceof Array) {
        tClass = formatRowClassNames(tClass, params, rowKey);
      }

      customClasses = customClasses.concat(tClass);
    }

    return customClasses;
  }
  function filterDataByIds() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var byId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "id";
    return data.filter(function () {
      var d = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return ids.includes(d[byId]);
    });
  }
  function isRowSelectedDisabled(selectColumn, row, rowIndex) {
    var disabled = isFunction_1(selectColumn.disabled) ? selectColumn.disabled({
      row: row,
      rowIndex: rowIndex
    }) : selectColumn.disabled;

    if (selectColumn.checkProps) {
      if (isFunction_1(selectColumn.checkProps)) {
        disabled = disabled || selectColumn.checkProps({
          row: row,
          rowIndex: rowIndex
        }).disabled;
      } else if (selectColumn.checkProps === "object") {
        disabled = disabled || selectColumn.checkProps.disabled;
      }
    }

    return !!disabled;
  }
  function getCurrentRowByKey(columns, key) {
    if (!columns || !key) return;
    var col = columns === null || columns === void 0 ? void 0 : columns.find(function (t) {
      return t.colKey === key;
    });
    if (col) return col;

    for (var i = 0, len = columns.length; i < len; i++) {
      var _columns$i, _columns$i$children;

      if ((_columns$i = columns[i]) !== null && _columns$i !== void 0 && (_columns$i$children = _columns$i.children) !== null && _columns$i$children !== void 0 && _columns$i$children.length) {
        var _columns$i2;

        return getCurrentRowByKey((_columns$i2 = columns[i]) === null || _columns$i2 === void 0 ? void 0 : _columns$i2.children, key);
      }
    }
  }
  function getAffixProps(mainAffixProps, subAffixProps) {
    if (_typeof$1(mainAffixProps) === "object") return mainAffixProps;
    if (_typeof$1(subAffixProps) === "object") return subAffixProps;
    return {};
  }
  function getEditableKeysMap(keys, list, rowKey) {
    var map = {};

    for (var i = 0, len = list.length; i < len; i++) {
      var rowValue = get_1(list[i], rowKey);

      if (keys.includes(rowValue)) {
        map[rowValue] = true;
      }
    }

    return map;
  }

  function getCellKey(row, rowKey, colKey, colIndex) {
    var rowValue = get_1(row, rowKey);

    if (rowValue === void 0) {
      log.error("Table", "rowKey is wrong, can not get unique identifier of row.");
    }

    return [rowValue, colKey || colIndex].join("_");
  }
  function useRowspanAndColspan(data, columns, rowKey, rowspanAndColspan) {
    var skipSpansMap = VueCompositionAPI.ref( /* @__PURE__ */new Map());

    var onTrRowspanOrColspan = function onTrRowspanOrColspan(params, skipSpansValue) {
      var rowIndex = params.rowIndex,
          colIndex = params.colIndex;
      if (!skipSpansValue.rowspan && !skipSpansValue.colspan) return;
      var maxRowIndex = rowIndex + (skipSpansValue.rowspan || 1);
      var maxColIndex = colIndex + (skipSpansValue.colspan || 1);

      for (var i = rowIndex; i < maxRowIndex; i++) {
        for (var j = colIndex; j < maxColIndex; j++) {
          if (i !== rowIndex || j !== colIndex) {
            if (!data.value[i] || !columns.value[j]) return;
            var cellKey = getCellKey(data.value[i], rowKey.value, columns.value[j].colKey, j);
            var state = skipSpansMap.value.get(cellKey) || {};
            state.skipped = true;
            skipSpansMap.value.set(cellKey, state);
          }
        }
      }
    };

    var updateSkipSpansMap = function updateSkipSpansMap(data2, columns2, rowspanAndColspan2) {
      var _skipSpansMap$value;

      (_skipSpansMap$value = skipSpansMap.value) === null || _skipSpansMap$value === void 0 ? void 0 : _skipSpansMap$value.clear();
      if (!data2 || !rowspanAndColspan2) return;

      for (var i = 0, len = data2.length; i < len; i++) {
        var row = data2[i];

        for (var j = 0, colLen = columns2.length; j < colLen; j++) {
          var col = columns2[j];
          var params = {
            row: row,
            col: col,
            rowIndex: i,
            colIndex: j
          };
          var cellKey = getCellKey(row, rowKey.value, col.colKey, j);
          var state = skipSpansMap.value.get(cellKey) || {};
          var o = rowspanAndColspan2(params) || {};

          if (o.rowspan || o.colspan || state.rowspan || state.colspan) {
            o.rowspan && (state.rowspan = o.rowspan);
            o.colspan && (state.colspan = o.colspan);
            skipSpansMap.value.set(cellKey, state);
          }

          onTrRowspanOrColspan === null || onTrRowspanOrColspan === void 0 ? void 0 : onTrRowspanOrColspan(params, state);
        }
      }
    };

    VueCompositionAPI.watch(function () {
      return [data.value, columns.value, rowspanAndColspan];
    }, function () {
      updateSkipSpansMap(data.value, columns.value, rowspanAndColspan === null || rowspanAndColspan === void 0 ? void 0 : rowspanAndColspan.value);
    }, {
      immediate: true
    });
    return {
      skipSpansMap: skipSpansMap
    };
  }

  function ownKeys$u(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$t(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$u(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$u(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TABLE_PROPS = ["rowKey", "rowClassName", "columns", "fixedRows", "footData", "rowAttributes", "rowspanAndColspan", "scroll", "cellEmptyContent", "onCellClick", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup"];
  var ROW_LISTENERS = ["click", "dblclick", "mouseover", "mousedown", "mouseenter", "mouseleave", "mouseup"];
  function renderCell(params, slots, extra) {
    var col = params.col,
        row = params.row;

    if (isFunction_1(col.cell)) {
      return col.cell(VueCompositionAPI.h, params);
    }

    if (slots[col.colKey]) {
      return slots[col.colKey](params);
    }

    if (isString_1(col.cell) && slots[col.cell]) {
      return slots[col.cell](params);
    }

    if (isFunction_1(col.render)) {
      return col.render(VueCompositionAPI.h, _objectSpread$t(_objectSpread$t({}, params), {}, {
        type: "cell"
      }));
    }

    var r = get_1(row, col.colKey);
    if (![void 0, "", null].includes(r)) return r;

    if (extra !== null && extra !== void 0 && extra.cellEmptyContent) {
      return isFunction_1(extra.cellEmptyContent) ? extra.cellEmptyContent(VueCompositionAPI.h, params) : extra.cellEmptyContent;
    }

    if (slots.cellEmptyContent) return slots.cellEmptyContent(params);
    return r;
  }
  var TrElement = VueCompositionAPI.defineComponent({
    name: "TR",
    props: _objectSpread$t(_objectSpread$t({
      row: Object,
      rowIndex: Number,
      dataLength: Number,
      rowAndColFixedPosition: Map,
      skipSpansMap: Map
    }, pick_1(baseTableProps, TABLE_PROPS)), {}, {
      scrollType: String,
      rowHeight: Number,
      trs: Map,
      bufferSize: Number,
      isVirtual: Boolean,
      tableElm: {},
      tableContentElm: {}
    }),
    setup: function setup(props, context) {
      var _toRefs = VueCompositionAPI.toRefs(props),
          tableContentElm = _toRefs.tableContentElm;

      var trRef = VueCompositionAPI.ref(null);

      var _useClassName = useClassName(),
          tdEllipsisClass = _useClassName.tdEllipsisClass,
          tableBaseClass = _useClassName.tableBaseClass,
          tableColFixedClasses = _useClassName.tableColFixedClasses,
          tableRowFixedClasses = _useClassName.tableRowFixedClasses,
          tdAlignClasses = _useClassName.tdAlignClasses,
          tableDraggableClasses = _useClassName.tableDraggableClasses;

      var trStyles = VueCompositionAPI.computed(function () {
        return getRowFixedStyles(get_1(props.row, props.rowKey || "id"), props.rowIndex, props.dataLength, props.fixedRows, props.rowAndColFixedPosition, tableRowFixedClasses);
      });
      var trAttributes = VueCompositionAPI.computed(function () {
        return formatRowAttributes(props.rowAttributes, {
          row: props.row,
          rowIndex: props.rowIndex,
          type: "body"
        });
      });
      var classes = VueCompositionAPI.computed(function () {
        var _trStyles$value;

        var customClasses = formatRowClassNames(props.rowClassName, {
          row: props.row,
          rowIndex: props.rowIndex,
          type: "body"
        }, props.rowKey || "id");
        return [(_trStyles$value = trStyles.value) === null || _trStyles$value === void 0 ? void 0 : _trStyles$value.classes, customClasses];
      });

      var _useLazyLoad = useLazyLoad(tableContentElm, trRef, VueCompositionAPI.reactive(_objectSpread$t(_objectSpread$t({}, props.scroll), {}, {
        rowIndex: props.rowIndex
      }))),
          hasLazyLoadHolder = _useLazyLoad.hasLazyLoadHolder,
          tRowHeight = _useLazyLoad.tRowHeight;

      var getTrListeners = function getTrListeners(row, rowIndex) {
        var trListeners = {};
        ROW_LISTENERS.forEach(function (eventName) {
          trListeners[eventName] = function (e) {
            var _props;

            var p = {
              e: e,
              row: row,
              index: rowIndex
            };
            (_props = props["onRow".concat(upperFirst_1(eventName))]) === null || _props === void 0 ? void 0 : _props.call(props, p);
            context.emit("row-".concat(eventName), p);
          };
        });
        return trListeners;
      };

      VueCompositionAPI.onMounted(function () {
        var trs = props.trs,
            rowData = props.row,
            scrollType = props.scrollType,
            isVirtual = props.isVirtual;

        if (scrollType === "virtual") {
          if (isVirtual) {
            var $index = rowData.$index;
            trs.set($index, trRef.value);
            context.emit("onRowMounted");
          }
        }
      });
      VueCompositionAPI.onBeforeUnmount(function () {
        if (props.isVirtual) {
          var trs = props.trs,
              row = props.row;
          var $index = row.$index;
          trs["delete"]($index);
        }
      });
      return {
        trRef: trRef,
        tableColFixedClasses: tableColFixedClasses,
        tableDraggableClasses: tableDraggableClasses,
        tSlots: context.slots,
        tdEllipsisClass: tdEllipsisClass,
        tableBaseClass: tableBaseClass,
        tdAlignClasses: tdAlignClasses,
        trStyles: trStyles,
        classes: classes,
        trAttributes: trAttributes,
        tRowHeight: tRowHeight,
        hasLazyLoadHolder: hasLazyLoadHolder,
        getTrListeners: getTrListeners
      };
    },
    methods: {
      renderEllipsisCell: function renderEllipsisCell(h2, cellParams, params) {
        var _this = this;

        var h = this.$createElement;
        var cellNode = params.cellNode;
        var col = cellParams.col,
            colIndex = cellParams.colIndex;
        var placement = colIndex < 2 ? "top-left" : "top-right";
        var content = isFunction_1(col.ellipsis) ? col.ellipsis(h2, cellParams) : void 0;
        return h(TEllipsis, {
          "attrs": {
            "placement": placement,
            "attach": this.tableElm ? function () {
              return _this.tableElm;
            } : void 0,
            "popupContent": content && function () {
              return content;
            },
            "popupProps": _typeof$1(col.ellipsis) === "object" ? col.ellipsis : void 0
          }
        }, [cellNode]);
      },
      renderTd: function renderTd(h2, params, extra) {
        var _ref,
            _this2 = this;

        var h = this.$createElement;
        var col = params.col,
            colIndex = params.colIndex,
            rowIndex = params.rowIndex;
        var cellSpans = extra.cellSpans,
            dataLength = extra.dataLength,
            rowAndColFixedPosition = extra.rowAndColFixedPosition;
        var cellNode = renderCell(params, this.tSlots, {
          cellEmptyContent: extra.cellEmptyContent
        });
        var tdStyles = getColumnFixedStyles(col, colIndex, rowAndColFixedPosition, this.tableColFixedClasses);
        var customClasses = isFunction_1(col.className) ? col.className(_objectSpread$t(_objectSpread$t({}, params), {}, {
          type: "td"
        })) : col.className;
        var classes = [tdStyles.classes, customClasses, (_ref = {}, _defineProperty$3(_ref, this.tdEllipsisClass, col.ellipsis), _defineProperty$3(_ref, this.tableBaseClass.tdLastRow, rowIndex + cellSpans.rowspan === dataLength), _defineProperty$3(_ref, this.tableBaseClass.tdFirstCol, colIndex === 0 && this.rowspanAndColspan), _defineProperty$3(_ref, this.tdAlignClasses[col.align], col.align && col.align !== "left"), _defineProperty$3(_ref, this.tableDraggableClasses.handle, col.colKey === "drag"), _ref)];

        var onClick = function onClick(e) {
          var _this2$onCellClick;

          var p = _objectSpread$t(_objectSpread$t({}, params), {}, {
            e: e
          });

          (_this2$onCellClick = _this2.onCellClick) === null || _this2$onCellClick === void 0 ? void 0 : _this2$onCellClick.call(_this2, p);

          _this2.$emit("cell-click", p);
        };

        return h("td", helper([{
          "class": classes,
          "style": tdStyles.style
        }, {
          "attrs": _objectSpread$t(_objectSpread$t({}, col.attrs), cellSpans)
        }, {
          "on": {
            "click": onClick
          }
        }]), [col.ellipsis ? this.renderEllipsisCell(h2, params, {
          cellNode: cellNode
        }) : cellNode]);
      }
    },
    render: function render(h2) {
      var _this$columns,
          _this3 = this,
          _this$trStyles;

      var h = arguments[0];
      var row = this.row,
          rowIndex = this.rowIndex,
          dataLength = this.dataLength,
          rowAndColFixedPosition = this.rowAndColFixedPosition;
      var columnVNodeList = (_this$columns = this.columns) === null || _this$columns === void 0 ? void 0 : _this$columns.map(function (col, colIndex) {
        var cellSpans = {};
        var params = {
          row: row,
          col: col,
          rowIndex: rowIndex,
          colIndex: colIndex
        };
        var spanState = null;

        if (_this3.skipSpansMap.size) {
          var _spanState, _spanState2;

          var cellKey = getCellKey(row, _this3.rowKey, col.colKey, colIndex);
          spanState = _this3.skipSpansMap.get(cellKey) || {};
          ((_spanState = spanState) === null || _spanState === void 0 ? void 0 : _spanState.rowspan) > 1 && (cellSpans.rowspan = spanState.rowspan);
          ((_spanState2 = spanState) === null || _spanState2 === void 0 ? void 0 : _spanState2.colspan) > 1 && (cellSpans.colspan = spanState.colspan);
          if (spanState.skipped) return null;
        }

        return _this3.renderTd(h2, params, {
          dataLength: dataLength,
          rowAndColFixedPosition: rowAndColFixedPosition,
          columnLength: _this3.columns.length,
          cellSpans: cellSpans,
          cellEmptyContent: _this3.cellEmptyContent
        });
      });
      var attrs = this.trAttributes || {};
      return h("tr", helper([{
        "ref": "trRef"
      }, {
        "attrs": attrs
      }, {
        "style": (_this$trStyles = this.trStyles) === null || _this$trStyles === void 0 ? void 0 : _this$trStyles.style,
        "class": this.classes
      }, {
        "on": this.getTrListeners(row, rowIndex)
      }]), [this.hasLazyLoadHolder ? [h("td", {
        "style": {
          height: "".concat(this.tRowHeight, "px"),
          border: "none"
        }
      })] : columnVNodeList]);
    }
  });

  function ownKeys$t(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$s(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$t(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$t(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var ROW_AND_TD_LISTENERS = ROW_LISTENERS.concat("cell-click");
  var extendTableProps = ["rowKey", "rowClassName", "rowAttributes", "loading", "empty", "fixedRows", "firstFullRow", "lastFullRow", "rowspanAndColspan", "scroll", "cellEmptyContent", "onCellClick", "onPageChange", "onRowClick", "onRowDblclick", "onRowMouseover", "onRowMousedown", "onRowMouseenter", "onRowMouseleave", "onRowMouseup", "onScroll", "onScrollX", "onScrollY"];
  var TBody = VueCompositionAPI.defineComponent({
    name: "TBody",
    props: _objectSpread$s({
      data: Array,
      columns: Array,
      rowAndColFixedPosition: Map,
      showColumnShadow: Object,
      tableElm: {},
      tableWidth: Number,
      isWidthOverflow: Boolean,
      translateY: Number,
      scrollType: String,
      isVirtual: Boolean,
      rowHeight: Number,
      trs: Map,
      bufferSize: Number,
      tableContentElm: {},
      handleRowMounted: Function,
      renderExpandedRow: Function,
      firstFullRow: [String, Function],
      lastFullRow: [String, Function]
    }, pick_1(baseTableProps, extendTableProps)),
    setup: function setup(props, _ref) {
      var emit = _ref.emit;
      var renderTNode = useTNodeJSX();

      var _toRefs = VueCompositionAPI.toRefs(props),
          data = _toRefs.data,
          columns = _toRefs.columns,
          rowKey = _toRefs.rowKey,
          rowspanAndColspan = _toRefs.rowspanAndColspan;

      var _useConfig = useConfig("table"),
          t = _useConfig.t,
          global = _useConfig.global;

      var _useClassName = useClassName(),
          tableFullRowClasses = _useClassName.tableFullRowClasses,
          tableBaseClass = _useClassName.tableBaseClass;

      var _useRowspanAndColspan = useRowspanAndColspan(data, columns, rowKey, rowspanAndColspan),
          skipSpansMap = _useRowspanAndColspan.skipSpansMap;

      var tbodyClasses = VueCompositionAPI.computed(function () {
        return [tableBaseClass.body];
      });
      var isFixedLeftColumn = VueCompositionAPI.computed(function () {
        return props.isWidthOverflow && !!props.columns.find(function (col) {
          return col.fixed === "left";
        });
      });

      var getTrListeners = function getTrListeners() {
        var trListeners = {};
        ROW_AND_TD_LISTENERS.forEach(function (eventName) {
          var name = ["cell-click"].includes(eventName) ? eventName : "row-".concat(eventName);

          trListeners[name] = function (context) {
            emit(name, context);
          };
        });
        return trListeners;
      };

      return {
        t: t,
        global: global,
        tableFullRowClasses: tableFullRowClasses,
        tbodyClasses: tbodyClasses,
        tableBaseClass: tableBaseClass,
        isFixedLeftColumn: isFixedLeftColumn,
        skipSpansMap: skipSpansMap,
        renderTNode: renderTNode,
        getTrListeners: getTrListeners
      };
    },
    render: function render(h) {
      var _this = this,
          _this$data,
          _this$data2;

      var renderEmpty = function renderEmpty(h2, columns) {
        return h("tr", {
          "class": [_this.tableBaseClass.emptyRow, _defineProperty$3({}, _this.tableFullRowClasses.base, _this.isWidthOverflow)]
        }, [h("td", {
          "attrs": {
            "colspan": columns.length
          }
        }, [h("div", {
          "class": [_this.tableBaseClass.empty, _defineProperty$3({}, _this.tableFullRowClasses.innerFullRow, _this.isWidthOverflow)],
          "style": _this.isWidthOverflow ? {
            width: "".concat(_this.tableWidth, "px")
          } : {}
        }, [_this.renderTNode("empty") || _this.t(_this.global.empty)])])]);
      };

      var getFullRow = function getFullRow(h2, columnLength2, type) {
        var tType = camelCase_1(type);

        var fullRowNode = _this.renderTNode(tType);

        if (["", null, void 0, false].includes(fullRowNode)) return null;
        var classes = [_this.tableFullRowClasses.base, _this.tableFullRowClasses[tType]];
        return h("tr", {
          "class": classes
        }, [h("td", {
          "attrs": {
            "colspan": columnLength2
          }
        }, [h("div", {
          "class": _defineProperty$3({}, _this.tableFullRowClasses.innerFullRow, _this.isFixedToLeft),
          "style": _this.isFixedToLeft ? {
            width: "".concat(_this.tableWidth, "px")
          } : {}
        }, [h("div", {
          "class": _this.tableFullRowClasses.innerFullElement
        }, [fullRowNode])])])]);
      };

      var columnLength = this.columns.length;
      var dataLength = this.data.length;
      var trNodeList = [];
      var properties = ["rowAndColFixedPosition", "scroll", "tableElm", "tableContentElm", "trs", "bufferSize", "isVirtual", "rowHeight", "scrollType"];
      (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.forEach(function (row, rowIndex) {
        var trProps = _objectSpread$s(_objectSpread$s({}, pick_1(_this.$props, TABLE_PROPS)), {}, {
          row: row,
          columns: _this.columns,
          rowIndex: rowIndex,
          dataLength: dataLength,
          skipSpansMap: _this.skipSpansMap
        }, pick_1(_this.$props, properties));

        if (_this.onCellClick) {
          trProps.onCellClick = _this.onCellClick;
        }

        var on = _this.getTrListeners();

        if (_this.handleRowMounted) {
          on.onRowMounted = _this.handleRowMounted;
        }

        var trNode = h(TrElement, helper([{
          "scopedSlots": _this.$scopedSlots,
          "key": get_1(row, _this.rowKey || "id")
        }, {
          "on": on
        }, {}, {
          "props": trProps
        }]));
        trNodeList.push(trNode);

        if (_this.renderExpandedRow) {
          var p = {
            row: row,
            index: rowIndex,
            columns: _this.columns,
            tableWidth: _this.tableWidth,
            isWidthOverflow: _this.isWidthOverflow
          };

          var expandedContent = _this.renderExpandedRow(h, p);

          expandedContent && trNodeList.push(expandedContent);
        }
      });
      var list = [getFullRow(h, columnLength, "first-full-row"), trNodeList, getFullRow(h, columnLength, "last-full-row")];
      var isEmpty = !((_this$data2 = this.data) !== null && _this$data2 !== void 0 && _this$data2.length) && !this.loading && !this.firstFullRow && !this.lastFullRow;
      var translate = "translate(0, ".concat(this.translateY, "px)");
      var posStyle = {
        transform: translate,
        "-ms-transform": translate,
        "-moz-transform": translate,
        "-webkit-transform": translate
      };
      return h("tbody", {
        "class": this.tbodyClasses,
        "style": this.isVirtual && _objectSpread$s({}, posStyle)
      }, [isEmpty ? renderEmpty(h, this.columns) : list]);
    }
  });

  function formatCSSUnit(unit) {
    if (!unit) return unit;
    return isNaN(Number(unit)) ? unit : "".concat(unit, "px");
  }
  function useStyle(props) {
    var _toRefs = VueCompositionAPI.toRefs(props),
        bordered = _toRefs.bordered,
        stripe = _toRefs.stripe,
        hover = _toRefs.hover,
        verticalAlign = _toRefs.verticalAlign,
        height = _toRefs.height,
        maxHeight = _toRefs.maxHeight,
        tableContentWidth = _toRefs.tableContentWidth;

    var _useClassName = useClassName(),
        tableBaseClass = _useClassName.tableBaseClass,
        tableAlignClasses = _useClassName.tableAlignClasses;

    var _useCommonClassName = useCommonClassName(),
        sizeClassNames = _useCommonClassName.sizeClassNames;

    var tableClasses = VueCompositionAPI.computed(function () {
      var _ref;

      return [tableBaseClass.table, (_ref = {}, _defineProperty$3(_ref, sizeClassNames[props.size], props.size !== "medium"), _defineProperty$3(_ref, tableBaseClass.bordered, bordered.value), _defineProperty$3(_ref, tableBaseClass.striped, stripe.value), _defineProperty$3(_ref, tableBaseClass.hover, hover.value), _defineProperty$3(_ref, tableBaseClass.loading, props.loading), _defineProperty$3(_ref, tableBaseClass.affixedHeader, props.headerAffixedTop), _defineProperty$3(_ref, tableBaseClass.rowspanAndColspan, props.rowspanAndColspan), _defineProperty$3(_ref, tableBaseClass.horizontalBarAffixed, props.horizontalScrollAffixedBottom), _defineProperty$3(_ref, tableBaseClass.footerAffixed, props.footerAffixedBottom), _defineProperty$3(_ref, tableAlignClasses[verticalAlign.value], verticalAlign.value !== "middle"), _ref)];
    });
    var tableContentStyles = VueCompositionAPI.computed(function () {
      return {
        height: formatCSSUnit(height.value),
        maxHeight: formatCSSUnit(maxHeight.value)
      };
    });
    var tableElementStyles = VueCompositionAPI.computed(function () {
      return {
        width: formatCSSUnit(tableContentWidth.value)
      };
    });
    return {
      tableClasses: tableClasses,
      tableElementStyles: tableElementStyles,
      tableContentStyles: tableContentStyles
    };
  }

  function ownKeys$s(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$r(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$s(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$s(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var THead = VueCompositionAPI.defineComponent({
    name: "THead",
    props: {
      isFixedHeader: Boolean,
      rowAndColFixedPosition: Map,
      thWidthList: Object,
      bordered: Boolean,
      isMultipleHeader: Boolean,
      resizable: Boolean,
      spansAndLeafNodes: Object,
      thList: Array,
      columnResizeParams: Object
    },
    setup: function setup(props, _ref) {
      var slots = _ref.slots;
      var theadRef = VueCompositionAPI.ref();
      var classnames = useClassName();
      var tableHeaderClasses = classnames.tableHeaderClasses,
          tableBaseClass = classnames.tableBaseClass;

      var _useConfig = useConfig(),
          classPrefix = _useConfig.classPrefix;

      var theadClasses = VueCompositionAPI.computed(function () {
        var _ref2;

        return [tableHeaderClasses.header, (_ref2 = {}, _defineProperty$3(_ref2, tableHeaderClasses.fixed, props.isFixedHeader), _defineProperty$3(_ref2, tableBaseClass.bordered, props.bordered && props.isMultipleHeader), _defineProperty$3(_ref2, tableHeaderClasses.multipleHeader, props.isMultipleHeader), _ref2)];
      });
      return _objectSpread$r(_objectSpread$r({}, classnames), {}, {
        theadRef: theadRef,
        theadClasses: theadClasses,
        classPrefix: classPrefix,
        slots: slots
      });
    },
    render: function render(h) {
      var _this = this;

      var renderThNodeList = function renderThNodeList(h2, rowAndColFixedPosition, thWidthList) {
        var thBorderMap = /* @__PURE__ */new Map();
        var thRowspanAndColspan = _this.spansAndLeafNodes.rowspanAndColspanMap;
        return _this.thList.map(function (row, rowIndex) {
          var thRow = row.map(function (col, index) {
            var _ref3, _col$children;

            var rowspanAndColspan = thRowspanAndColspan.get(col);

            if (index === 0 && rowspanAndColspan.rowspan > 1) {
              for (var j = rowIndex + 1; j < rowIndex + rowspanAndColspan.rowspan; j++) {
                thBorderMap.set(_this.thList[j][0], true);
              }
            }

            var thStyles = getColumnFixedStyles(col, index, rowAndColFixedPosition, _this.tableColFixedClasses);
            var colParams = {
              col: col,
              colIndex: index,
              row: {},
              rowIndex: -1
            };
            var customClasses = isFunction_1(col.className) ? col.className(_objectSpread$r(_objectSpread$r({}, colParams), {}, {
              type: "th"
            })) : col.className;
            var thClasses = [thStyles.classes, customClasses, (_ref3 = {}, _defineProperty$3(_ref3, _this.tableHeaderClasses.thBordered, thBorderMap.get(col)), _defineProperty$3(_ref3, "".concat(_this.classPrefix, "-table__th-").concat(col.colKey), col.colKey), _defineProperty$3(_ref3, _this.tdAlignClasses[col.align], col.align && col.align !== "left"), _ref3)];
            var withoutChildren = !((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length);
            var width = withoutChildren && thWidthList !== null && thWidthList !== void 0 && thWidthList[col.colKey] ? "".concat(thWidthList === null || thWidthList === void 0 ? void 0 : thWidthList[col.colKey], "px") : void 0;

            var styles = _objectSpread$r(_objectSpread$r({}, thStyles.style || {}), {}, {
              width: width
            });

            var innerTh = renderTitle(h2, _this.slots, col, index);
            var resizeColumnListener = _this.resizable ? {
              mousedown: function mousedown(e) {
                var _this$columnResizePar, _this$columnResizePar2;

                return (_this$columnResizePar = _this.columnResizeParams) === null || _this$columnResizePar === void 0 ? void 0 : (_this$columnResizePar2 = _this$columnResizePar.onColumnMousedown) === null || _this$columnResizePar2 === void 0 ? void 0 : _this$columnResizePar2.call(_this$columnResizePar, e, col, index < row.length - 1 ? row[index + 1] : row[index - 1]);
              },
              mousemove: function mousemove(e) {
                var _this$columnResizePar3, _this$columnResizePar4;

                return (_this$columnResizePar3 = _this.columnResizeParams) === null || _this$columnResizePar3 === void 0 ? void 0 : (_this$columnResizePar4 = _this$columnResizePar3.onColumnMouseover) === null || _this$columnResizePar4 === void 0 ? void 0 : _this$columnResizePar4.call(_this$columnResizePar3, e);
              }
            } : {};
            var content = isFunction_1(col.ellipsisTitle) ? col.ellipsisTitle(h2, {
              col: col,
              colIndex: index
            }) : void 0;
            return h("th", helper([{
              "key": col.colKey,
              "attrs": {
                "data-colkey": col.colKey
              },
              "class": thClasses,
              "style": styles
            }, {
              "attrs": _objectSpread$r({}, rowspanAndColspan)
            }, {}, {
              "on": resizeColumnListener
            }]), [h("div", {
              "class": _this.tableBaseClass.thCellInner
            }, [col.ellipsis && col.ellipsisTitle !== false && col.ellipsisTitle !== null ? h(TEllipsis, {
              "attrs": {
                "placement": "bottom",
                "attach": _this.theadRef ? function () {
                  return _this.theadRef;
                } : void 0,
                "popupContent": content && function () {
                  return content;
                },
                "popupProps": _typeof$1(col.ellipsisTitle) === "object" ? col.ellipsisTitle : void 0
              }
            }, [innerTh]) : innerTh])]);
          });
          return h("tr", {
            "key": rowIndex
          }, [thRow]);
        });
      };

      return h("thead", {
        "ref": "theadRef",
        "class": this.theadClasses
      }, [renderThNodeList(h, this.rowAndColFixedPosition, this.thWidthList)]);
    }
  });

  function ownKeys$r(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$q(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$r(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$r(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TFoot = VueCompositionAPI.defineComponent({
    name: "TFoot",
    props: {
      rowKey: String,
      isFixedHeader: Boolean,
      rowAndColFixedPosition: Map,
      footData: Array,
      columns: Array,
      rowAttributes: [Array, Object, Function],
      rowClassName: [Array, String, Object, Function],
      thWidthList: [Object],
      footerSummary: [String, Function],
      rowspanAndColspanInFooter: Function
    },
    setup: function setup(props, context) {
      var renderTNode = useTNodeJSX();
      var classnames = useClassName();

      var _toRefs = VueCompositionAPI.toRefs(props),
          footData = _toRefs.footData,
          columns = _toRefs.columns,
          rowKey = _toRefs.rowKey,
          rowspanAndColspanInFooter = _toRefs.rowspanAndColspanInFooter;

      var _useRowspanAndColspan = useRowspanAndColspan(footData, columns, rowKey, rowspanAndColspanInFooter),
          skipSpansMap = _useRowspanAndColspan.skipSpansMap;

      var renderTFootCell = function renderTFootCell(p) {
        var col = p.col,
            row = p.row;

        if (isFunction_1(col.foot)) {
          return col.foot(VueCompositionAPI.h, p);
        }

        if (isString_1(col.foot) && context.slots[col.foot]) {
          return context.slots[col.foot](p);
        }

        return col.foot || get_1(row, col.colKey);
      };

      return _objectSpread$q(_objectSpread$q({
        skipSpansMap: skipSpansMap
      }, classnames), {}, {
        renderTFootCell: renderTFootCell,
        renderTNode: renderTNode
      });
    },
    render: function render() {
      var _this$footData,
          _this = this;

      var h = arguments[0];
      if (!this.columns) return null;
      var theadClasses = [this.tableFooterClasses.footer, _defineProperty$3({}, this.tableFooterClasses.fixed, this.isFixedHeader)];
      var footerDomList = (_this$footData = this.footData) === null || _this$footData === void 0 ? void 0 : _this$footData.map(function (row, rowIndex) {
        var trAttributes = formatRowAttributes(_this.rowAttributes, {
          row: row,
          rowIndex: rowIndex,
          type: "foot"
        });
        var customClasses = formatRowClassNames(_this.rowClassName, {
          row: row,
          rowIndex: rowIndex,
          type: "foot"
        }, _this.rowKey || "id");
        return h("tr", helper([{
          "key": rowIndex
        }, {
          "attrs": trAttributes
        }, {
          "class": customClasses
        }]), [_this.columns.map(function (col, colIndex) {
          var _this$thWidthList;

          var cellSpans = {};
          var spanState = null;

          if (_this.skipSpansMap.size) {
            var _spanState, _spanState2;

            var cellKey = getCellKey(row, _this.rowKey, col.colKey, colIndex);
            spanState = _this.skipSpansMap.get(cellKey) || {};
            ((_spanState = spanState) === null || _spanState === void 0 ? void 0 : _spanState.rowspan) > 1 && (cellSpans.rowspan = spanState.rowspan);
            ((_spanState2 = spanState) === null || _spanState2 === void 0 ? void 0 : _spanState2.colspan) > 1 && (cellSpans.colspan = spanState.colspan);
            if (spanState.skipped) return null;
          }

          var tdStyles = getColumnFixedStyles(col, colIndex, _this.rowAndColFixedPosition, _this.tableColFixedClasses);

          var style = _objectSpread$q({}, tdStyles.style);

          if ((_this$thWidthList = _this.thWidthList) !== null && _this$thWidthList !== void 0 && _this$thWidthList[col.colKey]) {
            style.width = "".concat(_this.thWidthList[col.colKey], "px");
          }

          return h("td", helper([{}, {
            "attrs": _objectSpread$q({
              key: col.colKey
            }, cellSpans)
          }, {
            "class": tdStyles.classes,
            "style": style
          }]), [_this.renderTFootCell({
            row: row,
            rowIndex: rowIndex,
            col: col,
            colIndex: colIndex
          })]);
        })]);
      });
      var footerSummary = this.renderTNode("footerSummary");
      if (!footerSummary && (!this.footData || !this.footData.length)) return null;
      return h("tfoot", {
        "ref": "tFooterRef",
        "class": theadClasses
      }, [footerSummary && h("tr", {
        "class": this.tableFullRowClasses.base
      }, [h("td", {
        "attrs": {
          "colspan": this.columns.length
        }
      }, [h("div", {
        "class": this.tableFullRowClasses.innerFullElement
      }, [footerSummary])])]), footerDomList]);
    }
  });

  function ownKeys$q(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$p(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$q(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$q(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var BASE_TABLE_EVENTS = ["page-change", "cell-click", "scroll", "scrollX", "scrollY"];
  var BASE_TABLE_ALL_EVENTS = ROW_LISTENERS.map(function (t) {
    return "row-".concat(t);
  }).concat(BASE_TABLE_EVENTS);
  var _BaseTable = VueCompositionAPI.defineComponent({
    name: "TBaseTable",
    props: _objectSpread$p(_objectSpread$p({}, baseTableProps), {}, {
      renderExpandedRow: Function,
      onLeafColumnsChange: Function
    }),
    setup: function setup(props2, context) {
      var _props2$scroll3;

      var renderTNode = useTNodeJSX();
      var tableRef = VueCompositionAPI.ref();
      var tableElmRef = VueCompositionAPI.ref();
      var tableBodyRef = VueCompositionAPI.ref();
      var tableFootHeight = VueCompositionAPI.ref(0);

      var _useClassName = useClassName(),
          virtualScrollClasses = _useClassName.virtualScrollClasses,
          tableLayoutClasses = _useClassName.tableLayoutClasses,
          tableBaseClass = _useClassName.tableBaseClass,
          tableColFixedClasses = _useClassName.tableColFixedClasses;

      var _useStyle = useStyle(props2),
          tableClasses = _useStyle.tableClasses,
          tableContentStyles = _useStyle.tableContentStyles,
          tableElementStyles = _useStyle.tableElementStyles;

      var _useConfig = useConfig("table"),
          global = _useConfig.global;

      var _useTableHeader = useTableHeader(props2),
          isMultipleHeader = _useTableHeader.isMultipleHeader,
          spansAndLeafNodes = _useTableHeader.spansAndLeafNodes,
          thList = _useTableHeader.thList;

      var finalColumns = VueCompositionAPI.computed(function () {
        var _spansAndLeafNodes$va;

        return ((_spansAndLeafNodes$va = spansAndLeafNodes.value) === null || _spansAndLeafNodes$va === void 0 ? void 0 : _spansAndLeafNodes$va.leafColumns) || props2.columns;
      });

      var _useFixed = useFixed(props2, context, finalColumns),
          scrollbarWidth = _useFixed.scrollbarWidth,
          tableWidth = _useFixed.tableWidth,
          tableElmWidth = _useFixed.tableElmWidth,
          tableContentRef = _useFixed.tableContentRef,
          isFixedHeader = _useFixed.isFixedHeader,
          isWidthOverflow = _useFixed.isWidthOverflow,
          isFixedColumn = _useFixed.isFixedColumn,
          thWidthList = _useFixed.thWidthList,
          showColumnShadow = _useFixed.showColumnShadow,
          rowAndColFixedPosition = _useFixed.rowAndColFixedPosition,
          setData = _useFixed.setData,
          refreshTable = _useFixed.refreshTable,
          emitScrollEvent = _useFixed.emitScrollEvent,
          setUseFixedTableElmRef = _useFixed.setUseFixedTableElmRef,
          updateColumnFixedShadow = _useFixed.updateColumnFixedShadow,
          getThWidthList = _useFixed.getThWidthList,
          updateThWidthList = _useFixed.updateThWidthList,
          setRecalculateColWidthFuncRef = _useFixed.setRecalculateColWidthFuncRef;

      var _useAffix = useAffix(props2),
          affixHeaderRef = _useAffix.affixHeaderRef,
          affixFooterRef = _useAffix.affixFooterRef,
          horizontalScrollbarRef = _useAffix.horizontalScrollbarRef,
          paginationRef = _useAffix.paginationRef,
          showAffixHeader = _useAffix.showAffixHeader,
          showAffixFooter = _useAffix.showAffixFooter,
          showAffixPagination = _useAffix.showAffixPagination,
          onHorizontalScroll = _useAffix.onHorizontalScroll,
          updateAffixHeaderOrFooter = _useAffix.updateAffixHeaderOrFooter,
          setTableContentRef = _useAffix.setTableContentRef;

      var _usePagination = usePagination(props2, context),
          dataSource = _usePagination.dataSource,
          isPaginateData = _usePagination.isPaginateData,
          renderPagination = _usePagination.renderPagination;

      var columnResizeParams = useColumnResize(tableContentRef, refreshTable, getThWidthList, updateThWidthList);
      var resizeLineRef = columnResizeParams.resizeLineRef,
          resizeLineStyle = columnResizeParams.resizeLineStyle,
          recalculateColWidth = columnResizeParams.recalculateColWidth;
      setRecalculateColWidthFuncRef(recalculateColWidth);
      var dynamicBaseTableClasses = VueCompositionAPI.computed(function () {
        var _ref;

        return [tableClasses.value, (_ref = {}, _defineProperty$3(_ref, tableBaseClass.headerFixed, isFixedHeader.value), _defineProperty$3(_ref, tableBaseClass.columnFixed, isFixedColumn.value), _defineProperty$3(_ref, tableBaseClass.widthOverflow, isWidthOverflow.value), _defineProperty$3(_ref, tableBaseClass.multipleHeader, isMultipleHeader.value), _defineProperty$3(_ref, tableColFixedClasses.leftShadow, showColumnShadow.left), _defineProperty$3(_ref, tableColFixedClasses.rightShadow, showColumnShadow.right), _defineProperty$3(_ref, tableBaseClass.columnResizableTable, props2.resizable), _ref)];
      });
      var tableElmClasses = VueCompositionAPI.computed(function () {
        return [[tableLayoutClasses[props2.tableLayout]], _defineProperty$3({}, tableBaseClass.fullHeight, props2.height)];
      });
      var isVirtual = VueCompositionAPI.computed(function () {
        var _props2$scroll, _props2$data, _props2$scroll2;

        return ((_props2$scroll = props2.scroll) === null || _props2$scroll === void 0 ? void 0 : _props2$scroll.type) === "virtual" && ((_props2$data = props2.data) === null || _props2$data === void 0 ? void 0 : _props2$data.length) > (((_props2$scroll2 = props2.scroll) === null || _props2$scroll2 === void 0 ? void 0 : _props2$scroll2.threshold) || 100);
      });
      var showRightDivider = VueCompositionAPI.computed(function () {
        return props2.bordered && isFixedHeader.value && (isMultipleHeader.value && isWidthOverflow.value || !isMultipleHeader.value);
      });
      VueCompositionAPI.watch(tableElmRef, function () {
        setUseFixedTableElmRef(tableElmRef.value);
      });
      VueCompositionAPI.watch(function () {
        return [props2.data, dataSource, isPaginateData];
      }, function () {
        setData(isPaginateData.value ? dataSource.value : props2.data);
      });
      VueCompositionAPI.watch(spansAndLeafNodes, function () {
        var _props2$onLeafColumns;

        (_props2$onLeafColumns = props2.onLeafColumnsChange) === null || _props2$onLeafColumns === void 0 ? void 0 : _props2$onLeafColumns.call(props2, spansAndLeafNodes.value.leafColumns);
        context.emit("LeafColumnsChange", spansAndLeafNodes.value.leafColumns);
      });

      var onFixedChange = function onFixedChange() {
        VueCompositionAPI.nextTick(function () {
          onHorizontalScroll();
          updateAffixHeaderOrFooter();
        });
      };

      var getListener = function getListener() {
        var listener = {};
        BASE_TABLE_ALL_EVENTS.forEach(function (key) {
          listener[key] = function () {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            context.emit.apply(context, [key].concat(args));
          };
        });
        return listener;
      };

      var _ref3 = props2.scroll || {},
          type = _ref3.type,
          rowHeight = _ref3.rowHeight,
          _ref3$bufferSize = _ref3.bufferSize,
          bufferSize = _ref3$bufferSize === void 0 ? 20 : _ref3$bufferSize,
          _ref3$isFixedRowHeigh = _ref3.isFixedRowHeight,
          isFixedRowHeight = _ref3$isFixedRowHeigh === void 0 ? false : _ref3$isFixedRowHeigh;

      var _toRefs = VueCompositionAPI.toRefs(props2),
          data = _toRefs.data;

      var _ref4 = type === "virtual" ? useVirtualScroll({
        container: tableContentRef,
        data: data,
        fixedHeight: isFixedRowHeight,
        lineHeight: rowHeight,
        bufferSize: bufferSize,
        threshold: (_props2$scroll3 = props2.scroll) === null || _props2$scroll3 === void 0 ? void 0 : _props2$scroll3.threshold
      }) : {},
          _ref4$trs = _ref4.trs,
          trs = _ref4$trs === void 0 ? null : _ref4$trs,
          _ref4$scrollHeight = _ref4.scrollHeight,
          scrollHeight = _ref4$scrollHeight === void 0 ? null : _ref4$scrollHeight,
          _ref4$visibleData = _ref4.visibleData,
          visibleData = _ref4$visibleData === void 0 ? null : _ref4$visibleData,
          _ref4$translateY = _ref4.translateY,
          translateY = _ref4$translateY === void 0 ? null : _ref4$translateY,
          _ref4$handleScroll = _ref4.handleScroll,
          handleVirtualScroll = _ref4$handleScroll === void 0 ? null : _ref4$handleScroll,
          _ref4$handleRowMounte = _ref4.handleRowMounted,
          handleRowMounted = _ref4$handleRowMounte === void 0 ? null : _ref4$handleRowMounte;

      VueCompositionAPI.provide("tableContentRef", tableContentRef);
      VueCompositionAPI.provide("rowHeightRef", VueCompositionAPI.ref(rowHeight));
      var lastScrollY = 0;

      var onInnerVirtualScroll = function onInnerVirtualScroll(e) {
        var target = e.target || e.srcElement;
        var top = target.scrollTop;

        if (lastScrollY !== top) {
          isVirtual.value && handleVirtualScroll();
        } else {
          lastScrollY = 0;
          updateColumnFixedShadow(target);
        }

        lastScrollY = top;
        emitScrollEvent(e);
      };

      var getTFootHeight = function getTFootHeight() {
        var _tableElmRef$value$qu;

        if (!tableElmRef.value) return;
        tableFootHeight.value = (_tableElmRef$value$qu = tableElmRef.value.querySelector("tfoot")) === null || _tableElmRef$value$qu === void 0 ? void 0 : _tableElmRef$value$qu.getBoundingClientRect().height;
      };

      VueCompositionAPI.watch(tableContentRef, function () {
        setTableContentRef(tableContentRef.value);
      });
      VueCompositionAPI.watch(tableElmRef, getTFootHeight);
      VueCompositionAPI.onMounted(function () {
        getTFootHeight();
        setTableContentRef(tableContentRef.value);
      });
      return {
        thList: thList,
        isVirtual: isVirtual,
        global: global,
        tableFootHeight: tableFootHeight,
        tableWidth: tableWidth,
        tableElmWidth: tableElmWidth,
        tableRef: tableRef,
        tableElmRef: tableElmRef,
        tableBaseClass: tableBaseClass,
        spansAndLeafNodes: spansAndLeafNodes,
        dynamicBaseTableClasses: dynamicBaseTableClasses,
        tableContentStyles: tableContentStyles,
        tableElementStyles: tableElementStyles,
        virtualScrollClasses: virtualScrollClasses,
        tableLayoutClasses: tableLayoutClasses,
        tableElmClasses: tableElmClasses,
        tableContentRef: tableContentRef,
        isFixedHeader: isFixedHeader,
        isWidthOverflow: isWidthOverflow,
        isFixedColumn: isFixedColumn,
        rowAndColFixedPosition: rowAndColFixedPosition,
        showColumnShadow: showColumnShadow,
        thWidthList: thWidthList,
        isPaginateData: isPaginateData,
        dataSource: dataSource,
        scrollType: type,
        rowHeight: rowHeight,
        trs: trs,
        bufferSize: bufferSize,
        scrollHeight: scrollHeight,
        visibleData: visibleData,
        translateY: translateY,
        affixHeaderRef: affixHeaderRef,
        affixFooterRef: affixFooterRef,
        paginationRef: paginationRef,
        showAffixHeader: showAffixHeader,
        showAffixFooter: showAffixFooter,
        scrollbarWidth: scrollbarWidth,
        isMultipleHeader: isMultipleHeader,
        showRightDivider: showRightDivider,
        resizeLineRef: resizeLineRef,
        resizeLineStyle: resizeLineStyle,
        columnResizeParams: columnResizeParams,
        horizontalScrollbarRef: horizontalScrollbarRef,
        tableBodyRef: tableBodyRef,
        showAffixPagination: showAffixPagination,
        getListener: getListener,
        renderPagination: renderPagination,
        renderTNode: renderTNode,
        handleRowMounted: handleRowMounted,
        onFixedChange: onFixedChange,
        onHorizontalScroll: onHorizontalScroll,
        updateAffixHeaderOrFooter: updateAffixHeaderOrFooter,
        refreshTable: refreshTable,
        onInnerVirtualScroll: onInnerVirtualScroll
      };
    },
    render: function render(h) {
      var _this$spansAndLeafNod,
          _this = this,
          _navigator,
          _this$affixHeaderRef,
          _this$footData,
          _this$tableContentRef;

      var rowAndColFixedPosition = this.rowAndColFixedPosition;
      var data = this.isPaginateData ? this.dataSource : this.data;
      var columns = ((_this$spansAndLeafNod = this.spansAndLeafNodes) === null || _this$spansAndLeafNod === void 0 ? void 0 : _this$spansAndLeafNod.leafColumns) || this.columns;

      if (this.allowResizeColumnWidth) {
        log.warn("Table", "allowResizeColumnWidth is going to be deprecated, please use resizable instead.");
      }

      var columnResizable = this.allowResizeColumnWidth === void 0 ? this.resizable : this.allowResizeColumnWidth;

      if (columnResizable && this.tableLayout === "auto") {
        log.warn("Table", "table-layout can not be `auto` for resizable column table, set `table-layout: fixed` please.");
      }

      var defaultColWidth = this.tableLayout === "fixed" && this.isWidthOverflow ? "100px" : void 0;
      var colgroup = h("colgroup", [columns.map(function (col) {
        var style = {
          width: formatCSSUnit(_this.thWidthList[col.colKey] || col.width) || defaultColWidth
        };

        if (col.minWidth) {
          style.minWidth = formatCSSUnit(col.minWidth);
        }

        return h("col", {
          "key": col.colKey,
          "style": style
        });
      })]);
      var onlyVirtualScrollBordered = !!(this.isVirtual && !this.headerAffixedTop && this.bordered) && /Chrome/.test((_navigator = navigator) === null || _navigator === void 0 ? void 0 : _navigator.userAgent);
      var borderWidth = this.bordered && onlyVirtualScrollBordered ? 1 : 0;
      var barWidth = this.isWidthOverflow ? this.scrollbarWidth : 0;
      var IEHeaderWrap = getIEVersion$1() <= 11 ? 4 : 0;
      var affixHeaderHeight = (((_this$affixHeaderRef = this.affixHeaderRef) === null || _this$affixHeaderRef === void 0 ? void 0 : _this$affixHeaderRef.getBoundingClientRect().height) || 0) - IEHeaderWrap;
      var affixHeaderWrapHeight = affixHeaderHeight - barWidth - borderWidth;
      var headerOpacity = this.headerAffixedTop ? Number(this.showAffixHeader) : 1;
      var affixHeaderWrapHeightStyle = {
        width: "".concat(this.tableWidth, "px"),
        height: "".concat(affixHeaderWrapHeight, "px"),
        opacity: headerOpacity,
        marginTop: onlyVirtualScrollBordered ? "".concat(borderWidth, "px") : 0
      };
      var affixedLeftBorder = this.bordered ? 1 : 0;
      var affixedHeader = Boolean((this.headerAffixedTop || this.isVirtual) && this.tableWidth) && h("div", {
        "ref": "affixHeaderRef",
        "style": {
          width: "".concat(this.tableWidth - affixedLeftBorder, "px"),
          opacity: headerOpacity
        },
        "class": ["scrollbar", _defineProperty$3({}, this.tableBaseClass.affixedHeaderElm, this.headerAffixedTop || this.isVirtual)]
      }, [h("table", {
        "class": this.tableElmClasses,
        "style": _objectSpread$p(_objectSpread$p({}, this.tableElementStyles), {}, {
          width: "".concat(this.tableElmWidth, "px")
        })
      }, [colgroup, h(THead, {
        "scopedSlots": this.$scopedSlots,
        "attrs": {
          "isFixedHeader": this.isFixedHeader,
          "rowAndColFixedPosition": this.rowAndColFixedPosition,
          "isMultipleHeader": this.isMultipleHeader,
          "bordered": this.bordered,
          "spansAndLeafNodes": this.spansAndLeafNodes,
          "thList": this.thList,
          "thWidthList": this.thWidthList,
          "resizable": columnResizable,
          "columnResizeParams": this.columnResizeParams
        }
      })])]);
      var affixHeaderWithWrap = h("div", {
        "class": this.tableBaseClass.affixedHeaderWrap,
        "style": affixHeaderWrapHeightStyle
      }, [affixedHeader]);
      var marginScrollbarWidth = barWidth;

      if (this.bordered) {
        marginScrollbarWidth += 1;
      }

      var affixedFooter = Boolean(this.footerAffixedBottom && ((_this$footData = this.footData) === null || _this$footData === void 0 ? void 0 : _this$footData.length) && this.tableWidth) && h(Affix, helper([{
        "class": this.tableBaseClass.affixedFooterWrap,
        "on": {
          "fixedChange": this.onFixedChange
        },
        "attrs": {
          "offsetBottom": marginScrollbarWidth || 0
        }
      }, {
        "props": getAffixProps(this.footerAffixedBottom, this.footerAffixProps)
      }, {
        "style": {
          marginTop: "".concat(-1 * (this.tableFootHeight + marginScrollbarWidth), "px")
        }
      }]), [h("div", {
        "ref": "affixFooterRef",
        "style": {
          width: "".concat(this.tableWidth - affixedLeftBorder, "px"),
          opacity: Number(this.showAffixFooter)
        },
        "class": ["scrollbar", _defineProperty$3({}, this.tableBaseClass.affixedFooterElm, this.footerAffixedBottom || this.isVirtual)]
      }, [h("table", {
        "class": this.tableElmClasses,
        "style": _objectSpread$p(_objectSpread$p({}, this.tableElementStyles), {}, {
          width: "".concat(this.tableElmWidth, "px")
        })
      }, [colgroup, h(TFoot, {
        "attrs": {
          "rowKey": this.rowKey,
          "isFixedHeader": this.isFixedHeader,
          "rowAndColFixedPosition": rowAndColFixedPosition,
          "footData": this.footData,
          "columns": columns,
          "rowAttributes": this.rowAttributes,
          "rowClassName": this.rowClassName,
          "thWidthList": this.thWidthList,
          "footerSummary": this.footerSummary,
          "rowspanAndColspanInFooter": this.rowspanAndColspanInFooter
        },
        "scopedSlots": this.$scopedSlots
      })])])]);
      var translate = "translate(0, ".concat(this.scrollHeight, "px)");
      var virtualStyle = {
        transform: translate,
        "-ms-transform": translate,
        "-moz-transform": translate,
        "-webkit-transform": translate
      };

      var tableBodyProps = _objectSpread$p({
        rowAndColFixedPosition: rowAndColFixedPosition,
        showColumnShadow: this.showColumnShadow,
        data: this.isVirtual ? this.visibleData : data,
        columns: columns,
        tableElm: this.tableRef,
        tableContentElm: this.tableContentRef,
        tableWidth: this.tableWidth,
        isWidthOverflow: this.isWidthOverflow,
        isVirtual: this.isVirtual,
        translateY: this.translateY,
        scrollType: this.scrollType,
        rowHeight: this.rowHeight,
        trs: this.trs,
        bufferSize: this.bufferSize,
        scroll: this.scroll,
        cellEmptyContent: this.cellEmptyContent,
        handleRowMounted: this.handleRowMounted,
        renderExpandedRow: this.renderExpandedRow
      }, pick_1(this.$props, extendTableProps));

      var tBodyListener = this.getListener();
      var tableContent = h("div", helper([{
        "ref": "tableContentRef",
        "class": this.tableBaseClass.content,
        "style": this.tableContentStyles
      }, {
        "on": {
          scroll: this.onInnerVirtualScroll
        }
      }]), [this.isVirtual && h("div", {
        "class": this.virtualScrollClasses.cursor,
        "style": virtualStyle
      }), h("table", {
        "ref": "tableElmRef",
        "class": this.tableElmClasses,
        "style": this.tableElementStyles
      }, [colgroup, h(THead, {
        "scopedSlots": this.$scopedSlots,
        "attrs": {
          "isFixedHeader": this.isFixedHeader,
          "rowAndColFixedPosition": this.rowAndColFixedPosition,
          "isMultipleHeader": this.isMultipleHeader,
          "bordered": this.bordered,
          "spansAndLeafNodes": this.spansAndLeafNodes,
          "thList": this.thList,
          "thWidthList": this.thWidthList,
          "resizable": columnResizable,
          "columnResizeParams": this.columnResizeParams
        }
      }), h(TBody, helper([{
        "ref": "tableBodyRef",
        "scopedSlots": this.$scopedSlots
      }, {
        "props": tableBodyProps
      }, {}, {
        "on": tBodyListener
      }])), h(TFoot, {
        "attrs": {
          "rowKey": this.rowKey,
          "isFixedHeader": this.isFixedHeader,
          "rowAndColFixedPosition": rowAndColFixedPosition,
          "footData": this.footData,
          "columns": columns,
          "rowAttributes": this.rowAttributes,
          "rowClassName": this.rowClassName,
          "footerSummary": this.footerSummary,
          "rowspanAndColspanInFooter": this.rowspanAndColspanInFooter
        },
        "scopedSlots": this.$scopedSlots
      })])]);
      var customLoadingText = this.renderTNode("loading");
      var loadingContent = this.loading !== void 0 && h(Loading, helper([{
        "attrs": {
          "loading": !!this.loading,
          "text": customLoadingText ? function () {
            return customLoadingText;
          } : void 0,
          "attach": this.tableRef ? function () {
            return _this.tableRef;
          } : void 0,
          "showOverlay": true
        }
      }, {
        "props": _objectSpread$p({
          size: "small"
        }, this.loadingProps)
      }]));
      var topContent = this.renderTNode("topContent");
      var bottomContent = this.renderTNode("bottomContent");
      var pagination = h("div", {
        "ref": "paginationRef",
        "class": this.tableBaseClass.paginationWrap,
        "style": {
          opacity: Number(this.showAffixPagination)
        }
      }, [this.renderPagination(h)]);
      var bottom = !!bottomContent && h("div", {
        "class": this.tableBaseClass.bottomContent
      }, [bottomContent]);
      return h("div", {
        "ref": "tableRef",
        "class": this.dynamicBaseTableClasses,
        "style": "position: relative"
      }, [!!topContent && h("div", {
        "class": this.tableBaseClass.topContent
      }, [topContent]), !!(this.isVirtual || this.headerAffixedTop) && (this.headerAffixedTop ? h(Affix, helper([{
        "attrs": {
          "offsetTop": 0
        }
      }, {
        "props": getAffixProps(this.headerAffixedTop, this.headerAffixProps)
      }, {
        "on": {
          "fixedChange": this.onFixedChange
        }
      }]), [affixHeaderWithWrap]) : this.isFixedHeader && affixHeaderWithWrap), tableContent, affixedFooter, loadingContent, this.showRightDivider && h("div", {
        "class": this.tableBaseClass.scrollbarDivider,
        "style": {
          right: "".concat(this.scrollbarWidth, "px"),
          height: "".concat((_this$tableContentRef = this.tableContentRef) === null || _this$tableContentRef === void 0 ? void 0 : _this$tableContentRef.getBoundingClientRect().height, "px")
        }
      }), bottom, this.horizontalScrollAffixedBottom && h(Affix, helper([{
        "attrs": {
          "offsetBottom": 0
        }
      }, {
        "props": getAffixProps(this.horizontalScrollAffixedBottom)
      }, {
        "style": {
          marginTop: "-".concat(this.scrollbarWidth * 2, "px")
        }
      }]), [h("div", {
        "ref": "horizontalScrollbarRef",
        "class": ["scrollbar", this.tableBaseClass.obviousScrollbar],
        "style": {
          width: "".concat(this.tableWidth, "px"),
          overflow: "auto",
          opacity: Number(this.showAffixFooter)
        }
      }, [h("div", {
        "style": {
          width: "".concat(this.tableElmWidth, "px"),
          height: "5px"
        }
      })])]), this.paginationAffixedBottom ? h(Affix, helper([{
        "attrs": {
          "offsetBottom": 0
        }
      }, {
        "props": getAffixProps(this.paginationAffixedBottom)
      }]), [pagination]) : pagination, h("div", {
        "ref": "resizeLineRef",
        "class": this.tableBaseClass.resizeLine,
        "style": this.resizeLineStyle
      })]);
    }
  });

  var primaryTableProps = {
    asyncLoading: {
      type: [String, Function]
    },
    columnController: {
      type: Object
    },
    columnControllerVisible: {
      type: Boolean,
      "default": void 0
    },
    defaultColumnControllerVisible: {
      type: Boolean,
      "default": void 0
    },
    columns: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    displayColumns: {
      type: Array,
      "default": void 0
    },
    defaultDisplayColumns: {
      type: Array
    },
    dragSort: {
      type: String,
      validator: function validator(val) {
        if (!val) return true;
        return ["row", "row-handler", "col", "drag-col"].includes(val);
      }
    },
    dragSortOptions: {
      type: Object
    },
    editableRowKeys: {
      type: Array
    },
    expandIcon: {
      type: [Boolean, Function],
      "default": true
    },
    expandOnRowClick: Boolean,
    expandedRow: {
      type: [String, Function]
    },
    expandedRowKeys: {
      type: Array,
      "default": void 0
    },
    defaultExpandedRowKeys: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    filterIcon: {
      type: Function
    },
    filterRow: {
      type: [String, Function]
    },
    filterValue: {
      type: Object,
      "default": void 0
    },
    defaultFilterValue: {
      type: Object
    },
    hideSortTips: Boolean,
    indeterminateSelectedRowKeys: {
      type: Array
    },
    multipleSort: Boolean,
    selectedRowKeys: {
      type: Array,
      "default": void 0
    },
    defaultSelectedRowKeys: {
      type: Array,
      "default": function _default() {
        return [];
      }
    },
    sort: {
      type: [Object, Array],
      "default": void 0
    },
    defaultSort: {
      type: [Object, Array]
    },
    sortIcon: {
      type: Function
    },
    sortOnRowDraggable: Boolean,
    onAsyncLoadingClick: Function,
    onCellClick: Function,
    onChange: Function,
    onColumnChange: Function,
    onColumnControllerVisibleChange: Function,
    onDataChange: Function,
    onDisplayColumnsChange: Function,
    onDragSort: Function,
    onExpandChange: Function,
    onFilterChange: Function,
    onRowEdit: Function,
    onRowValidate: Function,
    onSelectChange: Function,
    onSortChange: Function,
    onValidate: Function
  };

  function ownKeys$p(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$o(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$p(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$p(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var ActionMixin = Vue__default["default"].extend({
    methods: {
      getConfirmBtn: function getConfirmBtn(options) {
        var h = this.$createElement;
        var confirmBtn = options.confirmBtn,
            className = options.className;
        if (confirmBtn === null) return null;

        if (confirmBtn && this.$scopedSlots.confirmBtn) {
          console.warn("Both $props.confirmBtn and $scopedSlots.confirmBtn exist, $props.confirmBtn is preferred.");
        }

        var defaultButtonProps = this.getDefaultConfirmBtnProps(options);

        if (!confirmBtn && !this.$scopedSlots.confirmBtn) {
          return h(Button, helper([{
            "class": className
          }, {
            "props": _objectSpread$o({}, defaultButtonProps)
          }]));
        }

        if (confirmBtn && ["string", "object"].includes(_typeof$1(confirmBtn))) {
          return this.getButtonByProps(confirmBtn, defaultButtonProps, className);
        }

        return renderTNodeJSX(this, "confirmBtn");
      },
      getCancelBtn: function getCancelBtn(options) {
        var h = this.$createElement;
        var cancelBtn = options.cancelBtn,
            className = options.className;
        if (cancelBtn === null) return null;

        if (cancelBtn && this.$scopedSlots.cancelBtn) {
          console.warn("Both $props.cancelBtn and $scopedSlots.cancelBtn exist, $props.cancelBtn is preferred.");
        }

        var defaultButtonProps = this.getDefaultCancelBtnProps(options);

        if (!cancelBtn && !this.$scopedSlots.cancelBtn) {
          return h(Button, helper([{
            "class": className
          }, {
            "props": _objectSpread$o({}, defaultButtonProps)
          }]));
        }

        if (cancelBtn && ["string", "object"].includes(_typeof$1(cancelBtn))) {
          return this.getButtonByProps(cancelBtn, defaultButtonProps);
        }

        return renderTNodeJSX(this, "cancelBtn");
      },
      getButtonByProps: function getButtonByProps(button, defaultButton, className) {
        var h = this.$createElement;
        var newOptions = defaultButton;

        if (isString_1(button)) {
          newOptions.content = button;
        } else if (isObject_1(button)) {
          newOptions = _objectSpread$o(_objectSpread$o({}, newOptions), button);
        }

        return h(Button, helper([{
          "class": className
        }, {
          "props": newOptions
        }]));
      },
      confirmBtnAction: function confirmBtnAction(e) {},
      cancelBtnAction: function cancelBtnAction(e) {},
      getDefaultConfirmBtnProps: function getDefaultConfirmBtnProps(options) {
        var _this = this;

        var globalConfirm = options.globalConfirm,
            theme = options.theme,
            globalConfirmBtnTheme = options.globalConfirmBtnTheme;
        var defaultTheme = (globalConfirmBtnTheme === null || globalConfirmBtnTheme === void 0 ? void 0 : globalConfirmBtnTheme[theme]) || "primary";
        var props = {
          theme: defaultTheme,
          content: "\u786E\u5B9A",
          size: options.size,
          onClick: function onClick(e) {
            _this.confirmBtnAction(e);
          }
        };

        if (isString_1(globalConfirm)) {
          props.content = globalConfirm;
        } else if (isObject_1(globalConfirm)) {
          props = _objectSpread$o(_objectSpread$o({}, props), globalConfirm);
        }

        return props;
      },
      getDefaultCancelBtnProps: function getDefaultCancelBtnProps(options) {
        var _this2 = this;

        var globalCancel = options.globalCancel;
        var props = {
          theme: "default",
          content: "\u53D6\u6D88",
          size: options.size,
          onClick: function onClick(e) {
            _this2.cancelBtnAction(e);
          }
        };

        if (isString_1(globalCancel)) {
          props.content = globalCancel;
        } else if (isObject_1(globalCancel)) {
          props = _objectSpread$o(_objectSpread$o({}, props), globalCancel);
        }

        return props;
      }
    }
  });

  var props$7 = {
    attach: {
      type: [String, Function],
      "default": ""
    },
    body: {
      type: [String, Function],
      "default": ""
    },
    cancelBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    closeBtn: {
      type: [String, Boolean, Function],
      "default": true
    },
    closeOnEscKeydown: {
      type: Boolean,
      "default": void 0
    },
    closeOnOverlayClick: {
      type: Boolean,
      "default": void 0
    },
    confirmBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    "default": {
      type: [String, Function]
    },
    destroyOnClose: Boolean,
    draggable: Boolean,
    footer: {
      type: [Boolean, Function],
      "default": true
    },
    header: {
      type: [String, Boolean, Function],
      "default": true
    },
    mode: {
      type: String,
      "default": "modal",
      validator: function validator(val) {
        if (!val) return true;
        return ["modal", "modeless", "normal"].includes(val);
      }
    },
    placement: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        if (!val) return true;
        return ["top", "center"].includes(val);
      }
    },
    preventScrollThrough: {
      type: Boolean,
      "default": true
    },
    showInAttachedElement: Boolean,
    showOverlay: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        if (!val) return true;
        return ["default", "info", "warning", "danger", "success"].includes(val);
      }
    },
    top: {
      type: [String, Number]
    },
    visible: Boolean,
    width: {
      type: [String, Number]
    },
    zIndex: {
      type: Number
    },
    onCancel: Function,
    onClose: Function,
    onCloseBtnClick: Function,
    onClosed: Function,
    onConfirm: Function,
    onEscKeydown: Function,
    onOpened: Function,
    onOverlayClick: Function
  };

  function ownKeys$o(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$n(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$o(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$o(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function getCSSValue(v) {
    return isNaN(Number(v)) ? v : "".concat(Number(v), "px");
  }

  var mousePosition;

  var getClickPosition = function getClickPosition(e) {
    mousePosition = {
      x: e.clientX,
      y: e.clientY
    };
    setTimeout(function () {
      mousePosition = null;
    }, 100);
  };

  if (typeof window !== "undefined" && window.document && window.document.documentElement) {
    document.documentElement.addEventListener("click", getClickPosition, true);
  }

  var _Dialog = mixins(ActionMixin, getConfigReceiverMixins("dialog"), getGlobalIconMixins()).extend({
    name: "TDialog",
    components: {
      TButton: Button
    },
    data: function data() {
      return {
        scrollWidth: 0,
        disX: 0,
        disY: 0,
        windowInnerWidth: 0,
        windowInnerHeight: 0,
        dialogW: 0,
        dialogH: 0,
        dLeft: 0,
        dTop: 0
      };
    },
    props: _objectSpread$n({}, props$7),
    computed: {
      isModal: function isModal() {
        return this.mode === "modal";
      },
      isModeLess: function isModeLess() {
        return this.mode === "modeless";
      },
      isNormal: function isNormal() {
        return this.mode === "normal";
      },
      maskClass: function maskClass() {
        return ["".concat(this.componentName, "__mask"), !this.showOverlay && "".concat(this.classPrefix, "-is-hidden")];
      },
      dialogClass: function dialogClass() {
        var dialogClass = ["".concat(this.componentName), "".concat(this.componentName, "--default"), "".concat(this.componentName, "__modal-").concat(this.theme)];
        return dialogClass;
      },
      positionClass: function positionClass() {
        if (this.isNormal) return [];
        var dialogClass = ["".concat(this.componentName, "__position"), !!this.top && "".concat(this.componentName, "--top"), "".concat(this.placement && !this.top ? "".concat(this.componentName, "--").concat(this.placement) : "")];
        return dialogClass;
      },
      wrapClass: function wrapClass() {
        return [!this.isNormal && "".concat(this.componentName, "__wrap")];
      },
      positionStyle: function positionStyle() {
        var topStyle = {};

        if (this.top !== void 0) {
          if (isNumber_1(this.top) && this.top < 0) {
            topStyle.paddingTop = "".concat(this.top, "px");
          } else {
            topStyle.paddingTop = this.top;
          }
        }

        return topStyle;
      },
      dialogStyle: function dialogStyle() {
        return {
          width: getCSSValue(this.width)
        };
      }
    },
    watch: {
      visible: function visible(value) {
        var _this = this;

        if (value) {
          var scrollWidth = this.scrollWidth;

          if (this.isModal && !this.showInAttachedElement) {
            if (scrollWidth > 0 && this.preventScrollThrough) {
              var bodyCssText = "position: relative;width: calc(100% - ".concat(scrollWidth, "px);");
              document.body.style.cssText = bodyCssText;
            }

            this.preventScrollThrough && addClass(document.body, "".concat(this.componentName, "--lock"));
            this.$nextTick(function () {
              var target = _this.$refs.dialog;

              if (mousePosition && target) {
                target.style.transformOrigin = "".concat(mousePosition.x - target.offsetLeft, "px ").concat(mousePosition.y - target.offsetTop, "px");
              }
            });
          }
        } else {
          document.body.style.cssText = "";
          removeClass(document.body, "".concat(this.componentName, "--lock"));
        }

        this.addKeyboardEvent(value);

        if (this.isModeLess && this.draggable) {
          this.initDragEvent(value);
        }

        if (value && !this.destroyOnClose && requestAnimationFrame) {
          requestAnimationFrame(function () {
            updateElement(_this);
          });
        }
      }
    },
    mounted: function mounted() {
      this.scrollWidth = window.innerWidth - document.body.offsetWidth;

      if (this.draggable) {
        window.addEventListener("resize", throttle_1(this.resizeAdjustPosition, 1e3));
      }

      if (this.visible && this.isModal && this.preventScrollThrough) {
        addClass(document.body, "".concat(this.componentName, "--lock"));
      }
    },
    beforeDestroy: function beforeDestroy() {
      this.addKeyboardEvent(false);
    },
    directives: {
      TransferDom: TransferDom
    },
    methods: {
      addKeyboardEvent: function addKeyboardEvent(status) {
        if (status) {
          document.addEventListener("keydown", this.keyboardEvent);
        } else {
          document.removeEventListener("keydown", this.keyboardEvent);
        }
      },
      keyboardEvent: function keyboardEvent(e) {
        if (e.code === "Escape") {
          var _this$closeOnEscKeydo;

          emitEvent(this, "esc-keydown", {
            e: e
          });

          if ((_this$closeOnEscKeydo = this.closeOnEscKeydown) !== null && _this$closeOnEscKeydo !== void 0 ? _this$closeOnEscKeydo : this.global.closeOnEscKeydown) {
            this.emitCloseEvent({
              e: e,
              trigger: "esc"
            });
          }
        }
      },
      overlayAction: function overlayAction(e) {
        var _this$closeOnOverlayC;

        if (this.showOverlay && ((_this$closeOnOverlayC = this.closeOnOverlayClick) !== null && _this$closeOnOverlayC !== void 0 ? _this$closeOnOverlayC : this.global.closeOnOverlayClick)) {
          if (e.target === this.$refs.dialogPosition) {
            emitEvent(this, "overlay-click", {
              e: e
            });
            this.emitCloseEvent({
              e: e,
              trigger: "overlay"
            });
          }
        }
      },
      closeBtnAction: function closeBtnAction(e) {
        emitEvent(this, "close-btn-click", {
          e: e
        });
        this.emitCloseEvent({
          trigger: "close-btn",
          e: e
        });
      },
      cancelBtnAction: function cancelBtnAction(e) {
        emitEvent(this, "cancel", {
          e: e
        });
        this.emitCloseEvent({
          trigger: "cancel",
          e: e
        });
      },
      confirmBtnAction: function confirmBtnAction(e) {
        emitEvent(this, "confirm", {
          e: e
        });
      },
      afterEnter: function afterEnter() {
        emitEvent(this, "opened");
      },
      afterLeave: function afterLeave() {
        if (this.isModeLess && this.draggable) {
          var target = this.$refs.dialog;
          target.style.position = "relative";
          target.style.left = "unset";
          target.style.top = "unset";
        }

        emitEvent(this, "closed");
      },
      emitCloseEvent: function emitCloseEvent(context) {
        emitEvent(this, "close", context);
        this.$emit("update:visible", false);
      },
      hasEventOn: function hasEventOn(name) {
        var _this$_events;

        var eventFuncs = (_this$_events = this["_events"]) === null || _this$_events === void 0 ? void 0 : _this$_events[name];
        return !!(eventFuncs !== null && eventFuncs !== void 0 && eventFuncs.length);
      },
      getIcon: function getIcon() {
        var h = this.$createElement;

        var _this$useGlobalIcon = this.useGlobalIcon({
          InfoCircleFilledIcon: InfoCircleFilled,
          CheckCircleFilledIcon: CheckCircleFilled,
          ErrorCircleFilledIcon: ErrorCircleFilled
        }),
            InfoCircleFilledIcon = _this$useGlobalIcon.InfoCircleFilledIcon,
            CheckCircleFilledIcon = _this$useGlobalIcon.CheckCircleFilledIcon,
            ErrorCircleFilledIcon = _this$useGlobalIcon.ErrorCircleFilledIcon;

        var icon = {
          info: h(InfoCircleFilledIcon, {
            "class": "".concat(this.classPrefix, "-is-info")
          }),
          warning: h(ErrorCircleFilledIcon, {
            "class": "".concat(this.classPrefix, "-is-warning")
          }),
          danger: h(ErrorCircleFilledIcon, {
            "class": "".concat(this.classPrefix, "-is-error")
          }),
          success: h(CheckCircleFilledIcon, {
            "class": "".concat(this.classPrefix, "-is-success")
          })
        };
        return icon[this.theme];
      },
      mousedownHandler: function mousedownHandler(targetEvent) {
        var target = this.$refs.dialog;
        this.disX = targetEvent.clientX - target.offsetLeft;
        this.disY = targetEvent.clientY - target.offsetTop;
        this.dialogW = target.offsetWidth;
        this.dialogH = target.offsetHeight;
        this.windowInnerWidth = window.innerWidth || document.documentElement.clientWidth;
        this.windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;
        if (this.dialogW > this.windowInnerWidth || this.dialogH > this.windowInnerHeight) return;
        document.addEventListener("mousemove", this.mouseMoverHandler);
        document.addEventListener("mouseup", this.mouseUpHandler);
        document.addEventListener("dragend", this.mouseUpHandler);
      },
      mouseMoverHandler: function mouseMoverHandler(documentEvent) {
        var target = this.$refs.dialog;
        var left = documentEvent.clientX - this.disX;
        var top = documentEvent.clientY - this.disY;
        if (left < 0) left = 0;
        if (top < 0) top = 0;
        if (this.windowInnerWidth - target.offsetWidth - left < 0) left = this.windowInnerWidth - target.offsetWidth;
        if (this.windowInnerHeight - target.offsetHeight - top < 0) top = this.windowInnerHeight - target.offsetHeight;
        target.style.position = "absolute";
        target.style.left = "".concat(left, "px");
        target.style.top = "".concat(top, "px");
      },
      mouseUpHandler: function mouseUpHandler() {
        document.removeEventListener("mousemove", this.mouseMoverHandler);
        document.removeEventListener("mouseup", this.mouseUpHandler);
        document.removeEventListener("dragend", this.mouseUpHandler);
      },
      initDragEvent: function initDragEvent(status) {
        var target = this.$refs.dialog;

        if (status) {
          target.addEventListener("mousedown", this.mousedownHandler);
        } else {
          target.removeEventListener("mousedown", this.mousedownHandler);
        }
      },
      resizeAdjustPosition: function resizeAdjustPosition() {
        if (this.visible) {
          var target = this.$refs.dialog;
          target.style.left = "".concat(this.dLeft * (window.innerWidth / this.windowInnerWidth), "px");
          target.style.top = "".concat(this.dTop * (window.innerHeight / this.windowInnerHeight), "px");
        }
      },
      renderDialog: function renderDialog() {
        var h = this.$createElement;

        var _this$useGlobalIcon2 = this.useGlobalIcon({
          CloseIcon: Close
        }),
            CloseIcon = _this$useGlobalIcon2.CloseIcon;

        var defaultHeader = h("h5", {
          "class": "title"
        });
        var defaultCloseBtn = h(CloseIcon);
        var body = renderContent(this, "default", "body");
        var defaultFooter = h("div", [this.getCancelBtn({
          cancelBtn: this.cancelBtn,
          globalCancel: this.global.cancel,
          className: "".concat(this.componentName, "__cancel")
        }), this.getConfirmBtn({
          theme: this.theme,
          confirmBtn: this.confirmBtn,
          globalConfirm: this.global.confirm,
          globalConfirmBtnTheme: this.global.confirmBtnTheme,
          className: "".concat(this.componentName, "__confirm")
        })]);
        var bodyClassName = this.theme === "default" ? "".concat(this.componentName, "__body") : "".concat(this.componentName, "__body__icon");
        return h("div", {
          "class": this.wrapClass
        }, [h("div", {
          "class": this.positionClass,
          "style": this.positionStyle,
          "on": {
            "click": this.overlayAction
          },
          "ref": "dialogPosition"
        }, [h("div", {
          "key": "dialog",
          "ref": "dialog",
          "class": this.dialogClass,
          "style": this.dialogStyle
        }, [h("div", {
          "class": "".concat(this.componentName, "__header")
        }, [this.getIcon(), renderTNodeJSX(this, "header", defaultHeader)]), this.closeBtn ? h("span", {
          "class": "".concat(this.componentName, "__close"),
          "on": {
            "click": this.closeBtnAction
          }
        }, [renderTNodeJSX(this, "closeBtn", defaultCloseBtn)]) : null, h("div", {
          "class": bodyClassName
        }, [body]), h("div", {
          "class": "".concat(this.componentName, "__footer")
        }, [renderTNodeJSX(this, "footer", defaultFooter)])])])]);
      }
    },
    render: function render() {
      var _ref;

      var h = arguments[0];
      var maskView = this.isModal && h("div", {
        "key": "mask",
        "class": this.maskClass
      });
      var dialogView = this.renderDialog();
      var view = [maskView, dialogView];
      var ctxStyle = {
        zIndex: this.zIndex
      };
      var ctxClass = ["".concat(this.componentName, "__ctx"), (_ref = {}, _defineProperty$3(_ref, "".concat(this.classPrefix, "-dialog__ctx--fixed"), this.mode === "modal"), _defineProperty$3(_ref, "".concat(this.classPrefix, "-dialog__ctx--absolute"), this.isModal && this.showInAttachedElement), _defineProperty$3(_ref, "".concat(this.componentName, "__ctx--modeless"), this.isModeLess), _ref)];
      return h("transition", {
        "attrs": {
          "duration": 300,
          "name": "".concat(this.componentName, "-zoom__vue")
        },
        "on": {
          "afterEnter": this.afterEnter,
          "afterLeave": this.afterLeave
        }
      }, [(!this.destroyOnClose || this.visible) && h("div", {
        "directives": [{
          name: "show",
          value: this.visible
        }, {
          name: "transfer-dom",
          value: this.attach
        }],
        "class": ctxClass,
        "style": ctxStyle
      }, [view])]);
    }
  });

  function ownKeys$n(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$m(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$n(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$n(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var createDialog = function createDialog(props) {
    var options = _objectSpread$m({}, props);

    options.visible = true;
    var dialog = new _Dialog({
      propsData: _objectSpread$m(_objectSpread$m({}, options), {}, {
        onClose: options.onClose || function () {
          dialog.visible = false;
        }
      })
    }).$mount();

    if (options.className) {
      options.className.split(" ").forEach(function (name) {
        dialog.$el.classList.add(name.trim());
      });
    }

    if (options.style) {
      dialog.$el.style.cssText += options.style;
    }

    var container = getAttach(options.attach);

    if (container) {
      container.appendChild(dialog.$el);
    } else {
      console.error("attach is not exist");
    }

    var dialogNode = {
      show: function show() {
        dialog.visible = true;
      },
      hide: function hide() {
        dialog.visible = false;
      },
      update: function update(options2) {
        Object.assign(dialog, options2);
      },
      destroy: function destroy() {
        dialog.visible = false;
        container.contains(dialog.$el) && container.removeChild(dialog.$el);
      }
    };
    return dialogNode;
  };

  var confirm = function confirm(props) {
    return createDialog(props);
  };

  var alert = function alert(props) {
    var options = _objectSpread$m({}, props);

    options.cancelBtn = null;
    return createDialog(options);
  };

  var extraApi$1 = {
    confirm: confirm,
    alert: alert
  };
  var _DialogPlugin = {
    install: function install() {
      Vue__default["default"].prototype.$dialog = createDialog;
      Object.keys(extraApi$1).forEach(function (funcName) {
        Vue__default["default"].prototype.$dialog[funcName] = extraApi$1[funcName];
      });
    }
  };
  Object.keys(extraApi$1).forEach(function (funcName) {
    _DialogPlugin[funcName] = extraApi$1[funcName];
  });
  var DialogPlugin = _DialogPlugin;

  function ownKeys$m(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$l(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$m(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$m(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function getColumnKeys(columns) {
    var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : /* @__PURE__ */new Set();

    for (var i = 0, len = columns.length; i < len; i++) {
      var _col$children;

      var col = columns[i];
      col.colKey && keys.add(col.colKey);

      if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
        getColumnKeys(col.children, keys);
      }
    }

    return keys;
  }
  function useColumnController(props, context) {
    var _useConfig = useConfig("table"),
        classPrefix = _useConfig.classPrefix,
        global = _useConfig.global;

    var _useGlobalIcon = useGlobalIcon({
      SettingIcon: Setting
    }),
        SettingIcon = _useGlobalIcon.SettingIcon;

    var _toRefs = VueCompositionAPI.toRefs(props),
        columns = _toRefs.columns,
        columnController = _toRefs.columnController,
        displayColumns = _toRefs.displayColumns,
        columnControllerVisible = _toRefs.columnControllerVisible;

    var dialogInstance = VueCompositionAPI.ref(null);
    var enabledColKeys = VueCompositionAPI.computed(function () {
      var _columnController$val;

      var arr = (((_columnController$val = columnController.value) === null || _columnController$val === void 0 ? void 0 : _columnController$val.fields) || _toConsumableArray(getColumnKeys(columns.value))).filter(function (v) {
        return v;
      });

      return new Set(arr);
    });

    var keys = _toConsumableArray(getColumnKeys(columns.value));

    var _useDefaultValue = useDefaultValue(displayColumns, props.defaultDisplayColumns || keys, props.onDisplayColumnsChange, "displayColumns", "display-columns-change"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        tDisplayColumns = _useDefaultValue2[0],
        setTDisplayColumns = _useDefaultValue2[1];

    var columnCheckboxKeys = VueCompositionAPI.ref(displayColumns.value || props.defaultDisplayColumns || keys);
    var checkboxOptions = VueCompositionAPI.computed(function () {
      return getCheckboxOptions(columns.value);
    });
    var intersectionChecked = VueCompositionAPI.computed(function () {
      return intersection_1(columnCheckboxKeys.value, _toConsumableArray(enabledColKeys.value));
    });
    VueCompositionAPI.watch([displayColumns], function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          val = _ref2[0];

      columnCheckboxKeys.value = val || props.defaultDisplayColumns || keys;
    });

    function getCheckboxOptions(columns2) {
      var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      var _loop = function _loop(i, len) {
        var _item$children;

        var item = columns2[i];

        if (item.colKey) {
          arr.push({
            label: function label() {
              return renderTitle(VueCompositionAPI.h, context.slots, item, i);
            },
            value: item.colKey,
            disabled: !enabledColKeys.value.has(item.colKey)
          });
        }

        if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
          getCheckboxOptions(item.children, arr);
        }
      };

      for (var i = 0, len = columns2.length; i < len; i++) {
        _loop(i);
      }

      return arr;
    }

    var handleCheckChange = function handleCheckChange(val, ctx) {
      var _props$onColumnChange;

      columnCheckboxKeys.value = val;
      var params = {
        columns: val,
        type: ctx.type,
        currentColumn: getCurrentRowByKey(columns.value, String(ctx.current)),
        e: ctx.e
      };
      (_props$onColumnChange = props.onColumnChange) === null || _props$onColumnChange === void 0 ? void 0 : _props$onColumnChange.call(props, params);
      context.emit("column-change", params);
    };

    var handleClickAllShowColumns = function handleClickAllShowColumns(checked, ctx) {
      if (checked) {
        var _checkboxOptions$valu, _props$onColumnChange2;

        var newData = ((_checkboxOptions$valu = checkboxOptions.value) === null || _checkboxOptions$valu === void 0 ? void 0 : _checkboxOptions$valu.map(function (t) {
          return t.value;
        })) || [];
        columnCheckboxKeys.value = newData;
        var params = {
          type: "check",
          columns: newData,
          e: ctx.e
        };
        (_props$onColumnChange2 = props.onColumnChange) === null || _props$onColumnChange2 === void 0 ? void 0 : _props$onColumnChange2.call(props, params);
        context.emit("column-change", params);
      } else {
        var _props$onColumnChange3;

        var disabledColKeys = checkboxOptions.value.filter(function (t) {
          return t.disabled;
        }).map(function (t) {
          return t.value;
        });
        columnCheckboxKeys.value = disabledColKeys;
        var _params = {
          type: "uncheck",
          columns: disabledColKeys,
          e: ctx.e
        };
        (_props$onColumnChange3 = props.onColumnChange) === null || _props$onColumnChange3 === void 0 ? void 0 : _props$onColumnChange3.call(props, _params);
        context.emit("column-change", _params);
      }
    };

    var handleToggleColumnController = function handleToggleColumnController() {
      var _columnController$val4;

      dialogInstance.value = DialogPlugin.confirm(_objectSpread$l({
        header: global.value.columnConfigTitleText,
        body: function body(h2) {
          var _columnController$val2, _columnController$val3;

          var widthMode = ((_columnController$val2 = columnController.value) === null || _columnController$val2 === void 0 ? void 0 : _columnController$val2.displayType) === "fixed-width" ? "fixed" : "auto";
          var checkedLength = intersectionChecked.value.length;
          var isCheckedAll = checkedLength === enabledColKeys.value.size;
          var isIndeterminate = checkedLength > 0 && checkedLength < enabledColKeys.value.size;
          var prefix = classPrefix.value;
          var classes = ["".concat(prefix, "-table__column-controller"), "".concat(prefix, "-table__column-controller--").concat(widthMode)];
          var defaultNode = VueCompositionAPI.h("div", {
            "class": classes
          }, [VueCompositionAPI.h("div", {
            "class": "".concat(prefix, "-table__column-controller-body")
          }, [VueCompositionAPI.h("p", {
            "class": "".concat(prefix, "-table__column-controller-desc")
          }, [global.value.columnConfigDescriptionText]), VueCompositionAPI.h("div", {
            "class": "".concat(prefix, "-table__column-controller-block")
          }, [VueCompositionAPI.h(Checkbox, {
            "attrs": {
              "indeterminate": isIndeterminate,
              "checked": isCheckedAll
            },
            "on": {
              "change": handleClickAllShowColumns
            }
          }, [global.value.selectAllText])]), VueCompositionAPI.h("div", {
            "class": "".concat(prefix, "-table__column-controller-block")
          }, [VueCompositionAPI.h(CheckboxGroup, helper([{
            "attrs": {
              "options": checkboxOptions.value
            }
          }, {
            "props": (_columnController$val3 = columnController.value) === null || _columnController$val3 === void 0 ? void 0 : _columnController$val3.checkboxProps
          }, {
            "attrs": {
              "value": columnCheckboxKeys.value
            },
            "on": {
              "change": handleCheckChange
            }
          }]))])])]);
          return defaultNode;
        },
        confirmBtn: global.value.confirmText,
        cancelBtn: global.value.cancelText,
        width: 612,
        onConfirm: function onConfirm() {
          setTDisplayColumns(_toConsumableArray(columnCheckboxKeys.value));

          if (columnControllerVisible.value === void 0) {
            dialogInstance.value.hide();
          } else {
            var _props$onColumnContro;

            (_props$onColumnContro = props.onColumnControllerVisibleChange) === null || _props$onColumnContro === void 0 ? void 0 : _props$onColumnContro.call(props, false, {
              trigger: "cancel"
            });
            context.emit("update:columnControllerVisible", false);
          }
        },
        onClose: function onClose() {
          if (columnControllerVisible.value === void 0) {
            dialogInstance.value.hide();
          } else {
            var _props$onColumnContro2;

            (_props$onColumnContro2 = props.onColumnControllerVisibleChange) === null || _props$onColumnContro2 === void 0 ? void 0 : _props$onColumnContro2.call(props, false, {
              trigger: "confirm"
            });
            context.emit("update:columnControllerVisible", false);
          }
        }
      }, ((_columnController$val4 = columnController.value) === null || _columnController$val4 === void 0 ? void 0 : _columnController$val4.dialogProps) || {}));
    };

    VueCompositionAPI.watch([columnControllerVisible], function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 1),
          visible = _ref4[0];

      if (visible === void 0) return;

      if (dialogInstance.value) {
        visible ? dialogInstance.value.show() : dialogInstance.value.hide();
      } else {
        visible && handleToggleColumnController();
      }
    }, {
      immediate: true
    });

    var renderColumnController = function renderColumnController(h2) {
      var _props$columnControll;

      var isColumnController = !!(columnController.value && Object.keys(columnController.value).length);
      var placement = isColumnController ? columnController.value.placement || "top-right" : "";
      if (isColumnController && columnController.value.hideTriggerButton) return null;
      var classes = ["".concat(classPrefix.value, "-table__column-controller-trigger"), _defineProperty$3({}, "".concat(classPrefix.value, "-align-").concat(placement), !!placement)];
      return VueCompositionAPI.h("div", {
        "class": classes
      }, [VueCompositionAPI.h(Button, helper([{
        "attrs": {
          "theme": "default",
          "variant": "outline",
          "content": global.value.columnConfigButtonText
        },
        "on": {
          "click": handleToggleColumnController
        },
        "scopedSlots": {
          icon: function icon() {
            return VueCompositionAPI.h(SettingIcon);
          }
        }
      }, {
        "props": (_props$columnControll = props.columnController) === null || _props$columnControll === void 0 ? void 0 : _props$columnControll.buttonProps
      }]))]);
    };

    return {
      tDisplayColumns: tDisplayColumns,
      columnCheckboxKeys: columnCheckboxKeys,
      checkboxOptions: checkboxOptions,
      renderColumnController: renderColumnController
    };
  }

  function useRowExpand(props, context) {
    var _toRefs = VueCompositionAPI.toRefs(props),
        expandedRowKeys = _toRefs.expandedRowKeys;

    var renderTNode = useTNodeJSX();

    var _useConfig = useConfig("table"),
        t = _useConfig.t,
        global = _useConfig.global;

    var _useGlobalIcon = useGlobalIcon({
      ChevronRightCircleIcon: ChevronRightCircle
    }),
        ChevronRightCircleIcon = _useGlobalIcon.ChevronRightCircleIcon;

    var _useClassName = useClassName(),
        tableExpandClasses = _useClassName.tableExpandClasses,
        positiveRotate90 = _useClassName.positiveRotate90,
        tableFullRowClasses = _useClassName.tableFullRowClasses;

    var _useDefaultValue = useDefaultValue(expandedRowKeys, props.defaultExpandedRowKeys || [], props.onExpandChange, "expandedRowKeys", "expand-change"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        tExpandedRowKeys = _useDefaultValue2[0],
        setTExpandedRowKeys = _useDefaultValue2[1];

    var showExpandedRow = VueCompositionAPI.computed(function () {
      return Boolean(props.expandedRow || context.slots.expandedRow || context.slots["expanded-row"]);
    });
    var showExpandIconColumn = VueCompositionAPI.computed(function () {
      return props.expandIcon !== false && showExpandedRow.value;
    });
    var isFirstColumnFixed = VueCompositionAPI.computed(function () {
      var _props$columns, _props$columns$;

      return ((_props$columns = props.columns) === null || _props$columns === void 0 ? void 0 : (_props$columns$ = _props$columns[0]) === null || _props$columns$ === void 0 ? void 0 : _props$columns$.fixed) === "left";
    });

    var onToggleExpand = function onToggleExpand(e, row) {
      props.expandOnRowClick && e.stopPropagation();
      var currentId = get_1(row, props.rowKey || "id");
      var index = tExpandedRowKeys.value.indexOf(currentId);

      var newKeys = _toConsumableArray(tExpandedRowKeys.value);

      index !== -1 ? newKeys.splice(index, 1) : newKeys.push(currentId);
      setTExpandedRowKeys(newKeys, {
        expandedRowData: props.data.filter(function (t2) {
          return newKeys.includes(get_1(t2, props.rowKey || "id"));
        })
      });
    };

    var renderExpandIcon = function renderExpandIcon(h, p) {
      var row = p.row,
          rowIndex = p.rowIndex;
      var currentId = get_1(row, props.rowKey || "id");
      var expanded = tExpandedRowKeys.value.includes(currentId);
      var icon = renderTNode("expandIcon", {
        defaultNode: t(global.value.expandIcon) || h(ChevronRightCircleIcon),
        params: {
          row: row,
          index: rowIndex
        }
      });
      if (!icon) return null;
      var classes = [tableExpandClasses.iconBox, tableExpandClasses[expanded ? "expanded" : "collapsed"], _defineProperty$3({}, positiveRotate90, expanded)];
      return h("span", {
        "class": classes,
        "on": {
          "click": function click(e) {
            return onToggleExpand(e, row);
          }
        }
      }, [icon]);
    };

    var getExpandColumn = function getExpandColumn(h) {
      var expandCol = {
        colKey: "__EXPAND_ROW_ICON_COLUMN__",
        width: 64,
        className: tableExpandClasses.iconCell,
        fixed: isFirstColumnFixed.value ? "left" : void 0,
        cell: renderExpandIcon
      };
      return expandCol;
    };

    var renderExpandedRow = function renderExpandedRow(h, p) {
      var rowId = get_1(p.row, props.rowKey || "id");
      if (!tExpandedRowKeys.value.includes(rowId)) return null;
      var isFixedLeft = p.isWidthOverflow && props.columns.find(function (item) {
        return item.fixed === "left";
      });
      return h("tr", {
        "key": "expand_".concat(rowId),
        "class": [tableExpandClasses.row, _defineProperty$3({}, tableFullRowClasses.base, isFixedLeft)]
      }, [h("td", {
        "attrs": {
          "colspan": p.columns.length
        }
      }, [h("div", {
        "class": [tableExpandClasses.rowInner, _defineProperty$3({}, tableFullRowClasses.innerFullRow, isFixedLeft)],
        "style": isFixedLeft ? {
          width: "".concat(p.tableWidth, "px")
        } : {}
      }, [h("div", {
        "class": tableFullRowClasses.innerFullElement
      }, [renderTNode("expandedRow", {
        params: p
      })])])])]);
    };

    var onInnerExpandRowClick = function onInnerExpandRowClick(p) {
      onToggleExpand(p.e, p.row);
    };

    return {
      showExpandedRow: showExpandedRow,
      showExpandIconColumn: showExpandIconColumn,
      getExpandColumn: getExpandColumn,
      renderExpandedRow: renderExpandedRow,
      onInnerExpandRowClick: onInnerExpandRowClick
    };
  }

  function ownKeys$l(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$k(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$l(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$l(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useRowSelect(props, tableSelectedClasses) {
    var _toRefs = VueCompositionAPI.toRefs(props),
        selectedRowKeys = _toRefs.selectedRowKeys,
        columns = _toRefs.columns,
        data = _toRefs.data,
        rowKey = _toRefs.rowKey;

    var selectedRowClassNames = VueCompositionAPI.ref();

    var _useDefaultValue = useDefaultValue(selectedRowKeys, props.defaultSelectedRowKeys || [], props.onSelectChange, "selectedRowKeys", "select-change"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        tSelectedRowKeys = _useDefaultValue2[0],
        setTSelectedRowKeys = _useDefaultValue2[1];

    var selectColumn = VueCompositionAPI.computed(function () {
      return props.columns.find(function (_ref) {
        var type = _ref.type;
        return ["multiple", "single"].includes(type);
      });
    });
    var canSelectedRows = VueCompositionAPI.computed(function () {
      return props.data.filter(function (row, rowIndex) {
        return !isDisabled(row, rowIndex);
      });
    });
    var intersectionKeys = VueCompositionAPI.computed(function () {
      return intersection_1(tSelectedRowKeys.value, canSelectedRows.value.map(function (t) {
        return get_1(t, props.rowKey || "id");
      }));
    });
    VueCompositionAPI.watch([data, columns, tSelectedRowKeys, selectColumn, rowKey], function () {
      var _selectColumn$value;

      var disabledRowFunc = function disabledRowFunc(p) {
        return selectColumn.value.disabled(p) ? tableSelectedClasses.disabled : "";
      };

      var disabledRowClass = (_selectColumn$value = selectColumn.value) !== null && _selectColumn$value !== void 0 && _selectColumn$value.disabled ? disabledRowFunc : void 0;
      var selected = new Set(tSelectedRowKeys.value);

      var selectedRowClassFunc = function selectedRowClassFunc(_ref2) {
        var row = _ref2.row;
        var rowId = get_1(row, props.rowKey || "id");
        return selected.has(rowId) ? tableSelectedClasses.selected : "";
      };

      var selectedRowClass = selected.size ? selectedRowClassFunc : void 0;
      selectedRowClassNames.value = [disabledRowClass, selectedRowClass].filter(function (v) {
        return v;
      });
    }, {
      immediate: true
    });

    function isDisabled(row, rowIndex) {
      return isRowSelectedDisabled(selectColumn.value, row, rowIndex);
    }

    function getSelectedHeader(h2) {
      return function () {
        return VueCompositionAPI.h(Checkbox, {
          "attrs": {
            "checked": intersectionKeys.value.length !== 0 && canSelectedRows.value.length !== 0 && intersectionKeys.value.length === canSelectedRows.value.length,
            "indeterminate": intersectionKeys.value.length > 0 && intersectionKeys.value.length < canSelectedRows.value.length,
            "disabled": !canSelectedRows.value.length
          },
          "on": _objectSpread$k({}, {
            change: handleSelectAll
          })
        });
      };
    }

    function renderSelectCell(h2, p) {
      var column = p.col,
          _p$row = p.row,
          row = _p$row === void 0 ? {} : _p$row,
          rowIndex = p.rowIndex;
      var checked = tSelectedRowKeys.value.includes(get_1(row, props.rowKey || "id"));
      var disabled = typeof column.disabled === "function" ? column.disabled({
        row: row,
        rowIndex: rowIndex
      }) : column.disabled;
      var checkProps = isFunction_1(column.checkProps) ? column.checkProps({
        row: row,
        rowIndex: rowIndex
      }) : column.checkProps;
      var selectBoxProps = {
        props: _objectSpread$k({
          checked: checked,
          disabled: disabled
        }, checkProps),
        on: {
          click: function click(e) {
            e === null || e === void 0 ? void 0 : e.stopPropagation();
          },
          change: function change() {
            return handleSelectChange(row);
          }
        }
      };
      if (column.type === "single") return VueCompositionAPI.h(Radio, helper([{}, selectBoxProps]));

      if (column.type === "multiple") {
        var _props$indeterminateS;

        var isIndeterminate = (_props$indeterminateS = props.indeterminateSelectedRowKeys) !== null && _props$indeterminateS !== void 0 && _props$indeterminateS.length ? props.indeterminateSelectedRowKeys.includes(get_1(row, props.rowKey)) : false;
        return VueCompositionAPI.h(Checkbox, helper([{
          "attrs": {
            "indeterminate": isIndeterminate
          }
        }, selectBoxProps]));
      }

      return null;
    }

    function handleSelectChange() {
      var row = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var selectedRowKeys2 = _toConsumableArray(tSelectedRowKeys.value);

      var reRowKey = props.rowKey || "id";
      var id = get_1(row, reRowKey);
      var selectedRowIndex = selectedRowKeys2.indexOf(id);
      var isExisted = selectedRowIndex !== -1;

      if (selectColumn.value.type === "multiple") {
        isExisted ? selectedRowKeys2.splice(selectedRowIndex, 1) : selectedRowKeys2.push(id);
      } else if (selectColumn.value.type === "single") {
        selectedRowKeys2 = !isExisted ? [id] : [];
      } else {
        log.warn("Table", "`column.type` must be one of `multiple` and `single`");
        return;
      }

      setTSelectedRowKeys(selectedRowKeys2, {
        selectedRowData: filterDataByIds(props.data, selectedRowKeys2, reRowKey),
        currentRowKey: id,
        currentRowData: row,
        type: isExisted ? "uncheck" : "check"
      });
    }

    function handleSelectAll(checked) {
      var _selectedRowKeys$valu;

      var reRowKey = props.rowKey || "id";
      var canSelectedRowKeys = canSelectedRows.value.map(function (record) {
        return get_1(record, reRowKey);
      });
      var disabledSelectedRowKeys = ((_selectedRowKeys$valu = selectedRowKeys.value) === null || _selectedRowKeys$valu === void 0 ? void 0 : _selectedRowKeys$valu.filter(function (id) {
        return !canSelectedRowKeys.includes(id);
      })) || [];
      var allIds = checked ? [].concat(_toConsumableArray(disabledSelectedRowKeys), _toConsumableArray(canSelectedRowKeys)) : _toConsumableArray(disabledSelectedRowKeys);
      setTSelectedRowKeys(allIds, {
        selectedRowData: checked ? filterDataByIds(props.data, allIds, reRowKey) : [],
        type: checked ? "check" : "uncheck",
        currentRowKey: "CHECK_ALL_BOX"
      });
    }

    function formatToRowSelectColumn(col) {
      var isSelection = ["multiple", "single"].includes(col.type);
      if (!isSelection) return col;
      return _objectSpread$k(_objectSpread$k({}, col), {}, {
        width: col.width || 64,
        className: tableSelectedClasses.checkCell,
        cell: function cell(h2, p) {
          return renderSelectCell(h2, p);
        },
        title: col.type === "multiple" ? getSelectedHeader() : ""
      });
    }

    return {
      selectedRowClassNames: selectedRowClassNames,
      formatToRowSelectColumn: formatToRowSelectColumn
    };
  }

  var SorterButton = VueCompositionAPI.defineComponent({
    props: {
      sortType: {
        type: String,
        "default": "all"
      },
      sortOrder: {
        type: String,
        "default": function _default() {
          return "";
        }
      },
      sortIcon: Function,
      tooltipProps: Object,
      hideSortTips: Boolean
    },
    setup: function setup(props, context) {
      var _useClassName = useClassName(),
          tableSortClasses = _useClassName.tableSortClasses,
          negativeRotate180 = _useClassName.negativeRotate180;

      var renderTNode = useTNodeDefault();

      var _useConfig = useConfig("table"),
          t = _useConfig.t,
          global = _useConfig.global;

      var _useGlobalIcon = useGlobalIcon({
        ChevronDownIcon: ChevronDown
      }),
          ChevronDownIcon = _useGlobalIcon.ChevronDownIcon;

      var allowSortTypes = VueCompositionAPI.computed(function () {
        return props.sortType === "all" ? ["asc", "desc"] : [props.sortType];
      });

      var onSortIconClick = function onSortIconClick(e, direction) {
        context.emit("sort-icon-click", e, {
          descending: direction === "desc"
        });
      };

      return {
        t: t,
        global: global,
        ChevronDownIcon: ChevronDownIcon,
        tableSortClasses: tableSortClasses,
        negativeRotate180: negativeRotate180,
        allowSortTypes: allowSortTypes,
        onSortIconClick: onSortIconClick,
        renderTNode: renderTNode
      };
    },
    methods: {
      getSortIcon: function getSortIcon(direction, activeClass) {
        var _this = this;

        var h = this.$createElement;
        var ChevronDownIcon = this.ChevronDownIcon;
        var defaultIcon = this.t(this.global.sortIcon) || h(ChevronDownIcon);
        var icon = this.renderTNode("sortIcon", defaultIcon);
        var sortClassName = [activeClass, this.tableSortClasses.sortIcon, this.tableSortClasses.iconDirection[direction], _defineProperty$3({}, this.negativeRotate180, direction === "asc")];
        return h("span", {
          "class": sortClassName,
          "on": {
            "click": function click(e) {
              return _this.onSortIconClick(e, direction);
            }
          }
        }, [icon]);
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];
      var tableSortClasses = this.tableSortClasses;
      var classes = [tableSortClasses.trigger, _defineProperty$3({}, tableSortClasses.doubleIcon, this.allowSortTypes.length > 1)];
      var tooltips = {
        asc: this.global.sortAscendingOperationText,
        desc: this.global.sortDescendingOperationText
      };
      var sortButton = this.allowSortTypes.map(function (direction) {
        var _this2$hideSortTips;

        var activeClass = direction === _this2.sortOrder ? tableSortClasses.iconActive : tableSortClasses.iconDefault;
        var cancelTips = _this2.global.sortCancelOperationText;
        var tips = direction === _this2.sortOrder ? cancelTips : tooltips[direction];
        if ((_this2$hideSortTips = _this2.hideSortTips) !== null && _this2$hideSortTips !== void 0 ? _this2$hideSortTips : _this2.global.hideSortTips) return _this2.getSortIcon(direction, activeClass);
        return h(Tooltip, helper([{
          "attrs": {
            "content": tips,
            "placement": "right"
          }
        }, _this2.tooltipProps, {
          "attrs": {
            "showArrow": false
          },
          "class": _this2.tableSortClasses.iconDirection[direction]
        }]), [_this2.getSortIcon(direction, activeClass)]);
      });
      return h("div", {
        "class": classes
      }, [sortButton]);
    }
  });

  function ownKeys$k(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$j(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$k(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$k(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useSorter(props, _ref) {
    var emit = _ref.emit,
        slots = _ref.slots;

    var _toRefs = VueCompositionAPI.toRefs(props),
        sort = _toRefs.sort,
        data = _toRefs.data;

    var originalData = VueCompositionAPI.ref();

    var _useDefaultValue = useDefaultValue(sort, props.defaultSort, props.onSortChange, "sort", "sort-change"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        tSortInfo = _useDefaultValue2[0],
        setTSortInfo = _useDefaultValue2[1];

    var _useDefaultValue3 = useDefaultValue(data, [], props.onDataChange, "data", "data-change"),
        _useDefaultValue4 = _slicedToArray(_useDefaultValue3, 2),
        tData = _useDefaultValue4[0],
        setTData = _useDefaultValue4[1];

    var sorterFuncMap = VueCompositionAPI.computed(function () {
      return getSorterFuncMap(props.columns);
    });
    var sortArray = VueCompositionAPI.computed(function () {
      var sort2 = tSortInfo.value;
      if (!sort2) return [];
      return Array.isArray(sort2) ? sort2 : [sort2];
    });
    var sortMap = VueCompositionAPI.computed(function () {
      var sortMap2 = {};
      sortArray.value.forEach(function (info, index) {
        var sortBy = info.sortBy;
        sortMap2[sortBy] = _objectSpread$j({
          index: index
        }, info);
      });
      return sortMap2;
    });

    function getSorterFuncMap(columns) {
      var map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      for (var i = 0, len = columns.length; i < len; i++) {
        var _col$children;

        var col = columns[i];

        if (isFunction_1(col.sorter)) {
          map[col.colKey] = col.sorter;
        }

        if ((_col$children = col.children) !== null && _col$children !== void 0 && _col$children.length) {
          getSorterFuncMap(col.children, map);
        }
      }

      return map;
    }

    function handleDataSort(sortInfo) {
      var sort2 = sortInfo;
      if (!Object.keys(sorterFuncMap.value).length) return;

      if (!originalData.value) {
        originalData.value = tData.value;
      }

      var isEmptyArraySort = !sort2 || sort2 instanceof Array && !sort2.length;
      var isEmptyObjectSort = !(sort2 instanceof Array) && !(sort2 !== null && sort2 !== void 0 && sort2.sortBy);

      if (isEmptyArraySort || isEmptyObjectSort) {
        setTData(originalData.value, {
          trigger: "sort"
        });
        return originalData.value;
      }

      var formattedSort = sort2 instanceof Array ? sort2 : [sort2];
      var newData = tData.value.slice().sort(function (a, b) {
        var sortResult = 0;

        for (var i = 0, len = formattedSort.length; i < len; i++) {
          var item = formattedSort[i];
          var sortFunc = sorterFuncMap.value[item.sortBy];

          if (sortResult === 0 && sortFunc) {
            sortResult = item.descending ? sortFunc(b, a) : sortFunc(a, b);
          } else {
            break;
          }
        }

        return sortResult;
      });
      if (JSON.stringify(newData) === JSON.stringify(tData.value)) return;
      setTData(newData, {
        trigger: "sort"
      });
      return newData;
    }

    function handleSortHeaderClick(col, p) {
      var _props$onChange;

      var sortInfo;

      if (props.multipleSort) {
        sortInfo = getMultipleNextSort(col, p);
      } else {
        var sort2 = tSortInfo.value instanceof Array ? tSortInfo.value[0] : tSortInfo.value;
        sortInfo = getSingleNextSort(col, sort2, p);
      }

      var newData = handleDataSort(sortInfo);
      var currentData = newData || tData.value;
      var currentDataSource = currentData;
      setTSortInfo(sortInfo, {
        currentDataSource: currentDataSource,
        col: col
      });
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, {
        sorter: sortInfo
      }, {
        currentData: currentData,
        trigger: "sorter"
      });
      emit("change", {
        sorter: sortInfo
      }, {
        currentData: currentData,
        col: col,
        trigger: "sorter"
      });
    }

    function getSortOrder(descending) {
      if (descending === void 0) return;
      return descending ? "desc" : "asc";
    }

    function getSingleNextSort(col, sortInfo, p) {
      if (sortInfo && sortInfo.sortBy === col.colKey && sortInfo.descending === p.descending) {
        return void 0;
      }

      return {
        sortBy: col.colKey,
        descending: p.descending
      };
    }

    function getMultipleNextSort(col, p) {
      var sort2 = tSortInfo.value;
      if (!(sort2 instanceof Array)) return;
      var colKey = col.colKey;

      var result = _toConsumableArray(sort2);

      for (var i = 0, len = sort2.length; i < len; i++) {
        if (sort2[i].sortBy === colKey) {
          var next = getSingleNextSort(col, sort2[i], p);
          next ? result[i] = next : result.splice(i, 1);
          return result;
        }
      }

      result.push({
        sortBy: colKey,
        descending: p.descending
      });
      return result;
    }

    function renderSortIcon(h, _ref2) {
      var _sortMap$value$col$co;

      var col = _ref2.col;
      if (!col.sorter) return null;
      var sorterButtonsProps = {
        sortType: col.sortType,
        sortOrder: getSortOrder((_sortMap$value$col$co = sortMap.value[col.colKey]) === null || _sortMap$value$col$co === void 0 ? void 0 : _sortMap$value$col$co.descending),
        sortIcon: props.sortIcon,
        hideSortTips: props.hideSortTips
      };
      return h(SorterButton, helper([{
        "scopedSlots": {
          sortIcon: slots.sortIcon
        }
      }, {
        "props": sorterButtonsProps
      }, {}, {
        "on": {
          "sort-icon-click": function sortIconClick(_, p) {
            return handleSortHeaderClick(col, p);
          }
        }
      }]));
    }

    return {
      renderSortIcon: renderSortIcon
    };
  }

  /**
   * Converts the first character of `string` to lower case.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category String
   * @param {string} [string=''] The string to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.lowerFirst('Fred');
   * // => 'fred'
   *
   * _.lowerFirst('FRED');
   * // => 'fRED'
   */

  var lowerFirst = _createCaseFirst('toLowerCase');
  var lowerFirst_1 = lowerFirst;

  function ownKeys$j(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$i(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$j(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$j(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TableFilterController = VueCompositionAPI.defineComponent({
    name: "TableFilterController",
    props: {
      column: Object,
      tFilterValue: Object,
      innerFilterValue: Object,
      tableFilterClasses: Object,
      isFocusClass: String,
      primaryTableElement: {}
    },
    setup: function setup(props, _ref) {
      var emit = _ref.emit;
      var triggerElementRef = VueCompositionAPI.ref(null);
      var renderTNode = useTNodeDefault();

      var _useConfig = useConfig("table"),
          t = _useConfig.t,
          global = _useConfig.global;

      var _useGlobalIcon = useGlobalIcon({
        FilterIcon: Filter
      }),
          FilterIcon = _useGlobalIcon.FilterIcon;

      var filterPopupVisible = VueCompositionAPI.ref(false);

      var onFilterPopupVisibleChange = function onFilterPopupVisibleChange(visible) {
        filterPopupVisible.value = visible;
        emit("visible-change", visible);
      };

      return {
        t: t,
        global: global,
        FilterIcon: FilterIcon,
        filterPopupVisible: filterPopupVisible,
        triggerElementRef: triggerElementRef,
        renderTNode: renderTNode,
        onFilterPopupVisibleChange: onFilterPopupVisibleChange
      };
    },
    render: function render(h) {
      var _this = this,
          _this$tFilterValue;

      var getFilterContent = function getFilterContent(h2, column2) {
        var _column2$filter, _column2$filter2, _this$innerFilterValu;

        var types = ["single", "multiple", "input"];

        if (column2.type && !types.includes(column2.filter.type)) {
          log.error("Table", "filter.type must be the following: ".concat(JSON.stringify(types)));
          return;
        }

        if (!column2.filter.type && !column2.filter.component) {
          log.error("Table", "both filter.type and filter.component can not be empty.");
          return;
        }

        var component = {
          single: RadioGroup,
          multiple: CheckboxGroup,
          input: Input
        }[column2.filter.type] || column2.filter.component;
        if (!component && !column2.filter.component) return;

        var filterComponentProps = _objectSpread$i(_objectSpread$i({
          options: ["single", "multiple"].includes(column2.filter.type) ? (_column2$filter = column2.filter) === null || _column2$filter === void 0 ? void 0 : _column2$filter.list : void 0
        }, ((_column2$filter2 = column2.filter) === null || _column2$filter2 === void 0 ? void 0 : _column2$filter2.props) || {}), {}, {
          value: (_this$innerFilterValu = _this.innerFilterValue) === null || _this$innerFilterValu === void 0 ? void 0 : _this$innerFilterValu[column2.colKey]
        });

        if (column2.filter.type === "single") {
          filterComponentProps.onChange = function (val) {
            _this.$emit("inner-filter-change", val, column2);
          };
        }

        var on = {
          change: function change(val) {
            _this.$emit("inner-filter-change", val, column2);
          }
        };

        if (column2.filter.confirmEvents) {
          column2.filter.confirmEvents.forEach(function (event) {
            var pureEvent = lowerFirst_1(event.replace("on", ""));

            on[pureEvent] = function () {
              _this.$emit("confirm", column2);

              _this.filterPopupVisible = false;
            };
          });
        }

        var wrapperListeners = {};

        if (column2.filter.showConfirmAndReset) {
          wrapperListeners.click = function (e) {
            return e.stopPropagation();
          };
        }

        var renderComponent = function renderComponent() {
          var _this$innerFilterValu2;

          if (!component) return null;
          var isVueComponent = component.install && component.component;

          if (typeof component === "function" && !isVueComponent) {
            return component(function (v, b) {
              var tProps = _typeof$1(b) === "object" && "attrs" in b ? b.attrs : {};
              return h2(v, {
                props: _objectSpread$i(_objectSpread$i({}, filterComponentProps), tProps),
                on: on
              });
            });
          }

          return h(component, helper([{
            "attrs": {
              "value": (_this$innerFilterValu2 = _this.innerFilterValue) === null || _this$innerFilterValu2 === void 0 ? void 0 : _this$innerFilterValu2[column2.colKey]
            }
          }, {
            "props": _objectSpread$i({}, filterComponentProps)
          }, {}, {
            "on": _objectSpread$i({}, on)
          }]));
        };

        return h("div", helper([{
          "class": _this.tableFilterClasses.contentInner
        }, {
          "on": wrapperListeners
        }]), [renderComponent()]);
      };

      var getBottomButtons = function getBottomButtons(h2, column2) {
        if (!column2.filter.showConfirmAndReset) return;
        return h("div", {
          "class": _this.tableFilterClasses.bottomButtons
        }, [h(Button, {
          "attrs": {
            "theme": "default",
            "size": "small"
          },
          "on": {
            "click": function click() {
              _this.$emit("reset", column2);

              _this.filterPopupVisible = false;
            }
          }
        }, [_this.global.resetText]), h(Button, {
          "attrs": {
            "theme": "primary",
            "size": "small"
          },
          "on": {
            "click": function click() {
              _this.$emit("confirm", column2);

              _this.filterPopupVisible = false;
            }
          }
        }, [_this.global.confirmText])]);
      };

      var column = this.column,
          FilterIcon = this.FilterIcon;
      if (!column.filter || column.filter && !Object.keys(column.filter).length) return null;
      var defaultFilterIcon = this.t(this.global.filterIcon) || h(FilterIcon);
      return h(Popup, helper([{
        "attrs": {
          "attach": this.primaryTableElement ? function () {
            return _this.primaryTableElement;
          } : void 0,
          "visible": this.filterPopupVisible,
          "destroyOnClose": true,
          "trigger": "click",
          "placement": "bottom",
          "showArrow": true,
          "overlayClassName": this.tableFilterClasses.popup
        }
      }, {
        "on": {
          "visible-change": function visibleChange(val) {
            return _this.onFilterPopupVisibleChange(val);
          }
        }
      }, {
        "class": [this.tableFilterClasses.icon, _defineProperty$3({}, this.isFocusClass, !isEmpty_1((_this$tFilterValue = this.tFilterValue) === null || _this$tFilterValue === void 0 ? void 0 : _this$tFilterValue[column.colKey]))],
        "attrs": {
          "content": function content() {
            return h("div", {
              "class": _this.tableFilterClasses.popupContent
            }, [getFilterContent(h, column), getBottomButtons(h, column)]);
          }
        }
      }]), [h("div", {
        "ref": "triggerElementRef"
      }, [this.renderTNode("filterIcon", defaultFilterIcon)])]);
    }
  });

  function ownKeys$i(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$h(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$i(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$i(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function filterEmptyData(data) {
    var newFilterValue = {};
    Object.keys(data).forEach(function (key) {
      var item = data[key];
      var isArrayTrue = item instanceof Array && item.length;
      var isObject = _typeof$1(item) === "object" && !(item instanceof Array);
      var isObjectTrue = isObject && Object.keys(item).length;

      if (isArrayTrue || isObjectTrue || !["null", "", "undefined"].includes(String(item))) {
        newFilterValue[key] = item;
      }
    });
    return newFilterValue;
  }

  function useFilter(props, context) {
    var primaryTableRef = VueCompositionAPI.ref(null);

    var _useConfig = useConfig("table"),
        t = _useConfig.t,
        global = _useConfig.global;

    var renderTNode = useTNodeDefault();

    var _toRefs = VueCompositionAPI.toRefs(props),
        filterValue = _toRefs.filterValue;

    var _useClassName = useClassName(),
        tableFilterClasses = _useClassName.tableFilterClasses,
        isFocusClass = _useClassName.isFocusClass;

    var isTableOverflowHidden = VueCompositionAPI.ref();

    var _useDefaultValue = useDefaultValue(filterValue, props.defaultFilterValue, props.onFilterChange, "filterValue", "filter-change"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        tFilterValue = _useDefaultValue2[0],
        setTFilterValue = _useDefaultValue2[1];

    var innerFilterValue = VueCompositionAPI.ref(tFilterValue.value);
    var hasEmptyCondition = VueCompositionAPI.computed(function () {
      var filterEmpty = filterEmptyData(tFilterValue.value || {});
      return !tFilterValue.value || !Object.keys(filterEmpty).length;
    });
    VueCompositionAPI.watch([tFilterValue], function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          val = _ref2[0];

      innerFilterValue.value = val;
    });

    function renderFirstFilterRow(h) {
      var _props$pagination, _props$data;

      if (hasEmptyCondition.value) return null;
      var defaultNode = h("div", {
        "class": tableFilterClasses.result
      }, [t(global.value.searchResultText, {
        result: getFilterResultContent(),
        count: ((_props$pagination = props.pagination) === null || _props$pagination === void 0 ? void 0 : _props$pagination.total) || ((_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.length)
      }), h(Button, {
        "attrs": {
          "theme": "primary",
          "variant": "text"
        },
        "on": {
          "click": onResetAll
        }
      }, [global.value.clearFilterResultButtonText])]);
      var filterContent = renderTNode("filterRow");
      if (props.filterRow && !filterContent) return null;
      return h("div", {
        "class": tableFilterClasses.inner
      }, [filterContent || defaultNode]);
    }

    function getFilterResultContent() {
      var arr = [];
      props.columns.filter(function (col) {
        return col.filter;
      }).forEach(function (col) {
        var value = tFilterValue.value[col.colKey];

        if (col.filter.list && !["null", "", "undefined"].includes(String(value))) {
          var formattedValue = value instanceof Array ? value : [value];
          var label = [];
          col.filter.list.forEach(function (option) {
            if (formattedValue.includes(option.value)) {
              label.push(option.label);
            }
          });
          value = label.join();
        }

        if (value) {
          arr.push("".concat(col.title, "\uFF1A").concat(value));
        }
      });
      return arr.join("\uFF1B");
    }

    function onInnerFilterChange(val, column) {
      var filterValue2 = _objectSpread$h(_objectSpread$h({}, innerFilterValue.value), {}, _defineProperty$3({}, column.colKey, val));

      innerFilterValue.value = filterValue2;

      if (!column.filter.showConfirmAndReset) {
        emitFilterChange(filterValue2, column);
      }
    }

    function emitFilterChange(filterValue2, column) {
      var _props$onChange;

      setTFilterValue(filterValue2, {
        col: column
      });
      (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, {
        filter: filterValue2
      }, {
        trigger: "filter"
      });
      context.emit("change", {
        filter: filterValue2
      }, {
        trigger: "filter"
      });
    }

    function onReset(column) {
      var filterValue2 = _objectSpread$h(_objectSpread$h({}, tFilterValue.value), {}, _defineProperty$3({}, column.colKey, {
        single: "",
        multiple: [],
        input: ""
      }[column.filter.type] || column.filter.resetValue || ""));

      emitFilterChange(filterValue2, column);
    }

    function onResetAll() {
      emitFilterChange({}, void 0);
    }

    function onConfirm(column) {
      emitFilterChange(innerFilterValue.value, column);
    }

    function renderFilterIcon(h, _ref3) {
      var _primaryTableRef$valu;

      var col = _ref3.col;
      return h(TableFilterController, helper([{
        "scopedSlots": {
          filterIcon: context.slots.filterIcon
        },
        "attrs": {
          "column": col,
          "filterIcon": props.filterIcon,
          "tFilterValue": tFilterValue.value,
          "innerFilterValue": innerFilterValue.value,
          "tableFilterClasses": tableFilterClasses,
          "isFocusClass": isFocusClass,
          "primaryTableElement": (_primaryTableRef$valu = primaryTableRef.value) === null || _primaryTableRef$valu === void 0 ? void 0 : _primaryTableRef$valu.$el
        }
      }, {
        "on": {
          reset: onReset,
          confirm: onConfirm,
          "inner-filter-change": onInnerFilterChange,
          "visible-change": onPopupVisibleChange
        }
      }]));
    }

    function setFilterPrimaryTableRef(primaryTableElement) {
      primaryTableRef.value = primaryTableElement;
    }

    function onPopupVisibleChange(visible) {
      if (visible && !isTableOverflowHidden.value) {
        isTableOverflowHidden.value = !visible;
      }
    }

    return {
      hasEmptyCondition: hasEmptyCondition,
      isTableOverflowHidden: isTableOverflowHidden,
      renderFilterIcon: renderFilterIcon,
      renderFirstFilterRow: renderFirstFilterRow,
      setFilterPrimaryTableRef: setFilterPrimaryTableRef
    };
  }

  /**!
   * Sortable 1.15.0
   * @author	RubaXa   <trash@rubaxa.org>
   * @author	owenm    <owen23355@gmail.com>
   * @license MIT
   */
  function ownKeys$h(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys$h(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys$h(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  var version = "1.15.0";

  function userAgent(pattern) {
    if (typeof window !== 'undefined' && window.navigator) {
      return !! /*@__PURE__*/navigator.userAgent.match(pattern);
    }
  }

  var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
  var Edge = userAgent(/Edge/i);
  var FireFox = userAgent(/firefox/i);
  var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
  var IOS = userAgent(/iP(ad|od|hone)/i);
  var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);
  var captureMode = {
    capture: false,
    passive: false
  };

  function on(el, event, fn) {
    el.addEventListener(event, fn, !IE11OrLess && captureMode);
  }

  function off(el, event, fn) {
    el.removeEventListener(event, fn, !IE11OrLess && captureMode);
  }

  function matches(
  /**HTMLElement*/
  el,
  /**String*/
  selector) {
    if (!selector) return;
    selector[0] === '>' && (selector = selector.substring(1));

    if (el) {
      try {
        if (el.matches) {
          return el.matches(selector);
        } else if (el.msMatchesSelector) {
          return el.msMatchesSelector(selector);
        } else if (el.webkitMatchesSelector) {
          return el.webkitMatchesSelector(selector);
        }
      } catch (_) {
        return false;
      }
    }

    return false;
  }

  function getParentOrHost(el) {
    return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
  }

  function closest(
  /**HTMLElement*/
  el,
  /**String*/
  selector,
  /**HTMLElement*/
  ctx, includeCTX) {
    if (el) {
      ctx = ctx || document;

      do {
        if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
          return el;
        }

        if (el === ctx) break;
        /* jshint boss:true */
      } while (el = getParentOrHost(el));
    }

    return null;
  }

  var R_SPACE = /\s+/g;

  function toggleClass(el, name, state) {
    if (el && name) {
      if (el.classList) {
        el.classList[state ? 'add' : 'remove'](name);
      } else {
        var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');
        el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');
      }
    }
  }

  function css(el, prop, val) {
    var style = el && el.style;

    if (style) {
      if (val === void 0) {
        if (document.defaultView && document.defaultView.getComputedStyle) {
          val = document.defaultView.getComputedStyle(el, '');
        } else if (el.currentStyle) {
          val = el.currentStyle;
        }

        return prop === void 0 ? val : val[prop];
      } else {
        if (!(prop in style) && prop.indexOf('webkit') === -1) {
          prop = '-webkit-' + prop;
        }

        style[prop] = val + (typeof val === 'string' ? '' : 'px');
      }
    }
  }

  function matrix(el, selfOnly) {
    var appliedTransforms = '';

    if (typeof el === 'string') {
      appliedTransforms = el;
    } else {
      do {
        var transform = css(el, 'transform');

        if (transform && transform !== 'none') {
          appliedTransforms = transform + ' ' + appliedTransforms;
        }
        /* jshint boss:true */

      } while (!selfOnly && (el = el.parentNode));
    }

    var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
    /*jshint -W056 */

    return matrixFn && new matrixFn(appliedTransforms);
  }

  function find(ctx, tagName, iterator) {
    if (ctx) {
      var list = ctx.getElementsByTagName(tagName),
          i = 0,
          n = list.length;

      if (iterator) {
        for (; i < n; i++) {
          iterator(list[i], i);
        }
      }

      return list;
    }

    return [];
  }

  function getWindowScrollingElement() {
    var scrollingElement = document.scrollingElement;

    if (scrollingElement) {
      return scrollingElement;
    } else {
      return document.documentElement;
    }
  }
  /**
   * Returns the "bounding client rect" of given element
   * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted
   * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container
   * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr
   * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone
   * @param  {[HTMLElement]} container              The parent the element will be placed in
   * @return {Object}                               The boundingClientRect of el, with specified adjustments
   */


  function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
    if (!el.getBoundingClientRect && el !== window) return;
    var elRect, top, left, bottom, right, height, width;

    if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
      elRect = el.getBoundingClientRect();
      top = elRect.top;
      left = elRect.left;
      bottom = elRect.bottom;
      right = elRect.right;
      height = elRect.height;
      width = elRect.width;
    } else {
      top = 0;
      left = 0;
      bottom = window.innerHeight;
      right = window.innerWidth;
      height = window.innerHeight;
      width = window.innerWidth;
    }

    if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
      // Adjust for translate()
      container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)
      // Not needed on <= IE11

      if (!IE11OrLess) {
        do {
          if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {
            var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container

            top -= containerRect.top + parseInt(css(container, 'border-top-width'));
            left -= containerRect.left + parseInt(css(container, 'border-left-width'));
            bottom = top + elRect.height;
            right = left + elRect.width;
            break;
          }
          /* jshint boss:true */

        } while (container = container.parentNode);
      }
    }

    if (undoScale && el !== window) {
      // Adjust for scale()
      var elMatrix = matrix(container || el),
          scaleX = elMatrix && elMatrix.a,
          scaleY = elMatrix && elMatrix.d;

      if (elMatrix) {
        top /= scaleY;
        left /= scaleX;
        width /= scaleX;
        height /= scaleY;
        bottom = top + height;
        right = left + width;
      }
    }

    return {
      top: top,
      left: left,
      bottom: bottom,
      right: right,
      width: width,
      height: height
    };
  }
  /**
   * Checks if a side of an element is scrolled past a side of its parents
   * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question
   * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')
   * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')
   * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element
   */


  function isScrolledPast(el, elSide, parentSide) {
    var parent = getParentAutoScrollElement(el, true),
        elSideVal = getRect(el)[elSide];
    /* jshint boss:true */

    while (parent) {
      var parentSideVal = getRect(parent)[parentSide],
          visible = void 0;

      if (parentSide === 'top' || parentSide === 'left') {
        visible = elSideVal >= parentSideVal;
      } else {
        visible = elSideVal <= parentSideVal;
      }

      if (!visible) return parent;
      if (parent === getWindowScrollingElement()) break;
      parent = getParentAutoScrollElement(parent, false);
    }

    return false;
  }
  /**
   * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)
   * and non-draggable elements
   * @param  {HTMLElement} el       The parent element
   * @param  {Number} childNum      The index of the child
   * @param  {Object} options       Parent Sortable's options
   * @return {HTMLElement}          The child at index childNum, or null if not found
   */


  function getChild(el, childNum, options, includeDragEl) {
    var currentChild = 0,
        i = 0,
        children = el.children;

    while (i < children.length) {
      if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {
        if (currentChild === childNum) {
          return children[i];
        }

        currentChild++;
      }

      i++;
    }

    return null;
  }
  /**
   * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)
   * @param  {HTMLElement} el       Parent element
   * @param  {selector} selector    Any other elements that should be ignored
   * @return {HTMLElement}          The last child, ignoring ghostEl
   */


  function lastChild(el, selector) {
    var last = el.lastElementChild;

    while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {
      last = last.previousElementSibling;
    }

    return last || null;
  }
  /**
   * Returns the index of an element within its parent for a selected set of
   * elements
   * @param  {HTMLElement} el
   * @param  {selector} selector
   * @return {number}
   */


  function index(el, selector) {
    var index = 0;

    if (!el || !el.parentNode) {
      return -1;
    }
    /* jshint boss:true */


    while (el = el.previousElementSibling) {
      if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {
        index++;
      }
    }

    return index;
  }
  /**
   * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.
   * The value is returned in real pixels.
   * @param  {HTMLElement} el
   * @return {Array}             Offsets in the format of [left, top]
   */


  function getRelativeScrollOffset(el) {
    var offsetLeft = 0,
        offsetTop = 0,
        winScroller = getWindowScrollingElement();

    if (el) {
      do {
        var elMatrix = matrix(el),
            scaleX = elMatrix.a,
            scaleY = elMatrix.d;
        offsetLeft += el.scrollLeft * scaleX;
        offsetTop += el.scrollTop * scaleY;
      } while (el !== winScroller && (el = el.parentNode));
    }

    return [offsetLeft, offsetTop];
  }
  /**
   * Returns the index of the object within the given array
   * @param  {Array} arr   Array that may or may not hold the object
   * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find
   * @return {Number}      The index of the object in the array, or -1
   */


  function indexOfObject(arr, obj) {
    for (var i in arr) {
      if (!arr.hasOwnProperty(i)) continue;

      for (var key in obj) {
        if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);
      }
    }

    return -1;
  }

  function getParentAutoScrollElement(el, includeSelf) {
    // skip to window
    if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();
    var elem = el;
    var gotSelf = false;

    do {
      // we don't need to get elem css if it isn't even overflowing in the first place (performance)
      if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
        var elemCSS = css(elem);

        if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {
          if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();
          if (gotSelf || includeSelf) return elem;
          gotSelf = true;
        }
      }
      /* jshint boss:true */

    } while (elem = elem.parentNode);

    return getWindowScrollingElement();
  }

  function extend(dst, src) {
    if (dst && src) {
      for (var key in src) {
        if (src.hasOwnProperty(key)) {
          dst[key] = src[key];
        }
      }
    }

    return dst;
  }

  function isRectEqual(rect1, rect2) {
    return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
  }

  var _throttleTimeout;

  function throttle(callback, ms) {
    return function () {
      if (!_throttleTimeout) {
        var args = arguments,
            _this = this;

        if (args.length === 1) {
          callback.call(_this, args[0]);
        } else {
          callback.apply(_this, args);
        }

        _throttleTimeout = setTimeout(function () {
          _throttleTimeout = void 0;
        }, ms);
      }
    };
  }

  function cancelThrottle() {
    clearTimeout(_throttleTimeout);
    _throttleTimeout = void 0;
  }

  function scrollBy(el, x, y) {
    el.scrollLeft += x;
    el.scrollTop += y;
  }

  function clone(el) {
    var Polymer = window.Polymer;
    var $ = window.jQuery || window.Zepto;

    if (Polymer && Polymer.dom) {
      return Polymer.dom(el).cloneNode(true);
    } else if ($) {
      return $(el).clone(true)[0];
    } else {
      return el.cloneNode(true);
    }
  }

  var expando = 'Sortable' + new Date().getTime();

  function AnimationStateManager() {
    var animationStates = [],
        animationCallbackId;
    return {
      captureAnimationState: function captureAnimationState() {
        animationStates = [];
        if (!this.options.animation) return;
        var children = [].slice.call(this.el.children);
        children.forEach(function (child) {
          if (css(child, 'display') === 'none' || child === Sortable.ghost) return;
          animationStates.push({
            target: child,
            rect: getRect(child)
          });

          var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect); // If animating: compensate for current animation


          if (child.thisAnimationDuration) {
            var childMatrix = matrix(child, true);

            if (childMatrix) {
              fromRect.top -= childMatrix.f;
              fromRect.left -= childMatrix.e;
            }
          }

          child.fromRect = fromRect;
        });
      },
      addAnimationState: function addAnimationState(state) {
        animationStates.push(state);
      },
      removeAnimationState: function removeAnimationState(target) {
        animationStates.splice(indexOfObject(animationStates, {
          target: target
        }), 1);
      },
      animateAll: function animateAll(callback) {
        var _this = this;

        if (!this.options.animation) {
          clearTimeout(animationCallbackId);
          if (typeof callback === 'function') callback();
          return;
        }

        var animating = false,
            animationTime = 0;
        animationStates.forEach(function (state) {
          var time = 0,
              target = state.target,
              fromRect = target.fromRect,
              toRect = getRect(target),
              prevFromRect = target.prevFromRect,
              prevToRect = target.prevToRect,
              animatingRect = state.rect,
              targetMatrix = matrix(target, true);

          if (targetMatrix) {
            // Compensate for current animation
            toRect.top -= targetMatrix.f;
            toRect.left -= targetMatrix.e;
          }

          target.toRect = toRect;

          if (target.thisAnimationDuration) {
            // Could also check if animatingRect is between fromRect and toRect
            if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect
            (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
              // If returning to same place as started from animation and on same axis
              time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
            }
          } // if fromRect != toRect: animate


          if (!isRectEqual(toRect, fromRect)) {
            target.prevFromRect = fromRect;
            target.prevToRect = toRect;

            if (!time) {
              time = _this.options.animation;
            }

            _this.animate(target, animatingRect, toRect, time);
          }

          if (time) {
            animating = true;
            animationTime = Math.max(animationTime, time);
            clearTimeout(target.animationResetTimer);
            target.animationResetTimer = setTimeout(function () {
              target.animationTime = 0;
              target.prevFromRect = null;
              target.fromRect = null;
              target.prevToRect = null;
              target.thisAnimationDuration = null;
            }, time);
            target.thisAnimationDuration = time;
          }
        });
        clearTimeout(animationCallbackId);

        if (!animating) {
          if (typeof callback === 'function') callback();
        } else {
          animationCallbackId = setTimeout(function () {
            if (typeof callback === 'function') callback();
          }, animationTime);
        }

        animationStates = [];
      },
      animate: function animate(target, currentRect, toRect, duration) {
        if (duration) {
          css(target, 'transition', '');
          css(target, 'transform', '');
          var elMatrix = matrix(this.el),
              scaleX = elMatrix && elMatrix.a,
              scaleY = elMatrix && elMatrix.d,
              translateX = (currentRect.left - toRect.left) / (scaleX || 1),
              translateY = (currentRect.top - toRect.top) / (scaleY || 1);
          target.animatingX = !!translateX;
          target.animatingY = !!translateY;
          css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');
          this.forRepaintDummy = repaint(target); // repaint

          css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));
          css(target, 'transform', 'translate3d(0,0,0)');
          typeof target.animated === 'number' && clearTimeout(target.animated);
          target.animated = setTimeout(function () {
            css(target, 'transition', '');
            css(target, 'transform', '');
            target.animated = false;
            target.animatingX = false;
            target.animatingY = false;
          }, duration);
        }
      }
    };
  }

  function repaint(target) {
    return target.offsetWidth;
  }

  function calculateRealTime(animatingRect, fromRect, toRect, options) {
    return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
  }

  var plugins = [];
  var defaults = {
    initializeByDefault: true
  };
  var PluginManager = {
    mount: function mount(plugin) {
      // Set default static properties
      for (var option in defaults) {
        if (defaults.hasOwnProperty(option) && !(option in plugin)) {
          plugin[option] = defaults[option];
        }
      }

      plugins.forEach(function (p) {
        if (p.pluginName === plugin.pluginName) {
          throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
        }
      });
      plugins.push(plugin);
    },
    pluginEvent: function pluginEvent(eventName, sortable, evt) {
      var _this = this;

      this.eventCanceled = false;

      evt.cancel = function () {
        _this.eventCanceled = true;
      };

      var eventNameGlobal = eventName + 'Global';
      plugins.forEach(function (plugin) {
        if (!sortable[plugin.pluginName]) return; // Fire global events if it exists in this sortable

        if (sortable[plugin.pluginName][eventNameGlobal]) {
          sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({
            sortable: sortable
          }, evt));
        } // Only fire plugin event if plugin is enabled in this sortable,
        // and plugin has event defined


        if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
          sortable[plugin.pluginName][eventName](_objectSpread2({
            sortable: sortable
          }, evt));
        }
      });
    },
    initializePlugins: function initializePlugins(sortable, el, defaults, options) {
      plugins.forEach(function (plugin) {
        var pluginName = plugin.pluginName;
        if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;
        var initialized = new plugin(sortable, el, sortable.options);
        initialized.sortable = sortable;
        initialized.options = sortable.options;
        sortable[pluginName] = initialized; // Add default options from plugin

        _extends(defaults, initialized.defaults);
      });

      for (var option in sortable.options) {
        if (!sortable.options.hasOwnProperty(option)) continue;
        var modified = this.modifyOption(sortable, option, sortable.options[option]);

        if (typeof modified !== 'undefined') {
          sortable.options[option] = modified;
        }
      }
    },
    getEventProperties: function getEventProperties(name, sortable) {
      var eventProperties = {};
      plugins.forEach(function (plugin) {
        if (typeof plugin.eventProperties !== 'function') return;

        _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
      });
      return eventProperties;
    },
    modifyOption: function modifyOption(sortable, name, value) {
      var modifiedValue;
      plugins.forEach(function (plugin) {
        // Plugin must exist on the Sortable
        if (!sortable[plugin.pluginName]) return; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin

        if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {
          modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
        }
      });
      return modifiedValue;
    }
  };

  function dispatchEvent(_ref) {
    var sortable = _ref.sortable,
        rootEl = _ref.rootEl,
        name = _ref.name,
        targetEl = _ref.targetEl,
        cloneEl = _ref.cloneEl,
        toEl = _ref.toEl,
        fromEl = _ref.fromEl,
        oldIndex = _ref.oldIndex,
        newIndex = _ref.newIndex,
        oldDraggableIndex = _ref.oldDraggableIndex,
        newDraggableIndex = _ref.newDraggableIndex,
        originalEvent = _ref.originalEvent,
        putSortable = _ref.putSortable,
        extraEventProperties = _ref.extraEventProperties;
    sortable = sortable || rootEl && rootEl[expando];
    if (!sortable) return;
    var evt,
        options = sortable.options,
        onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature

    if (window.CustomEvent && !IE11OrLess && !Edge) {
      evt = new CustomEvent(name, {
        bubbles: true,
        cancelable: true
      });
    } else {
      evt = document.createEvent('Event');
      evt.initEvent(name, true, true);
    }

    evt.to = toEl || rootEl;
    evt.from = fromEl || rootEl;
    evt.item = targetEl || rootEl;
    evt.clone = cloneEl;
    evt.oldIndex = oldIndex;
    evt.newIndex = newIndex;
    evt.oldDraggableIndex = oldDraggableIndex;
    evt.newDraggableIndex = newDraggableIndex;
    evt.originalEvent = originalEvent;
    evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;

    var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));

    for (var option in allEventProperties) {
      evt[option] = allEventProperties[option];
    }

    if (rootEl) {
      rootEl.dispatchEvent(evt);
    }

    if (options[onName]) {
      options[onName].call(sortable, evt);
    }
  }

  var _excluded$1 = ["evt"];

  var pluginEvent = function pluginEvent(eventName, sortable) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        originalEvent = _ref.evt,
        data = _objectWithoutProperties(_ref, _excluded$1);

    PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({
      dragEl: dragEl,
      parentEl: parentEl,
      ghostEl: ghostEl,
      rootEl: rootEl,
      nextEl: nextEl,
      lastDownEl: lastDownEl,
      cloneEl: cloneEl,
      cloneHidden: cloneHidden,
      dragStarted: moved,
      putSortable: putSortable,
      activeSortable: Sortable.active,
      originalEvent: originalEvent,
      oldIndex: oldIndex,
      oldDraggableIndex: oldDraggableIndex,
      newIndex: newIndex,
      newDraggableIndex: newDraggableIndex,
      hideGhostForTarget: _hideGhostForTarget,
      unhideGhostForTarget: _unhideGhostForTarget,
      cloneNowHidden: function cloneNowHidden() {
        cloneHidden = true;
      },
      cloneNowShown: function cloneNowShown() {
        cloneHidden = false;
      },
      dispatchSortableEvent: function dispatchSortableEvent(name) {
        _dispatchEvent({
          sortable: sortable,
          name: name,
          originalEvent: originalEvent
        });
      }
    }, data));
  };

  function _dispatchEvent(info) {
    dispatchEvent(_objectSpread2({
      putSortable: putSortable,
      cloneEl: cloneEl,
      targetEl: dragEl,
      rootEl: rootEl,
      oldIndex: oldIndex,
      oldDraggableIndex: oldDraggableIndex,
      newIndex: newIndex,
      newDraggableIndex: newDraggableIndex
    }, info));
  }

  var dragEl,
      parentEl,
      ghostEl,
      rootEl,
      nextEl,
      lastDownEl,
      cloneEl,
      cloneHidden,
      oldIndex,
      newIndex,
      oldDraggableIndex,
      newDraggableIndex,
      activeGroup,
      putSortable,
      awaitingDragStarted = false,
      ignoreNextClick = false,
      sortables = [],
      tapEvt,
      touchEvt,
      lastDx,
      lastDy,
      tapDistanceLeft,
      tapDistanceTop,
      moved,
      lastTarget,
      lastDirection,
      pastFirstInvertThresh = false,
      isCircumstantialInvert = false,
      targetMoveDistance,
      // For positioning ghost absolutely
  ghostRelativeParent,
      ghostRelativeParentInitialScroll = [],
      // (left, top)
  _silent = false,
      savedInputChecked = [];
  /** @const */

  var documentExists = typeof document !== 'undefined',
      PositionGhostAbsolutely = IOS,
      CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',
      // This will not pass for IE9, because IE9 DnD only works on anchors
  supportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),
      supportCssPointerEvents = function () {
    if (!documentExists) return; // false when <= IE11

    if (IE11OrLess) {
      return false;
    }

    var el = document.createElement('x');
    el.style.cssText = 'pointer-events:auto';
    return el.style.pointerEvents === 'auto';
  }(),
      _detectDirection = function _detectDirection(el, options) {
    var elCSS = css(el),
        elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),
        child1 = getChild(el, 0, options),
        child2 = getChild(el, 1, options),
        firstChildCSS = child1 && css(child1),
        secondChildCSS = child2 && css(child2),
        firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,
        secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;

    if (elCSS.display === 'flex') {
      return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';
    }

    if (elCSS.display === 'grid') {
      return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';
    }

    if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== 'none') {
      var touchingSideChild2 = firstChildCSS["float"] === 'left' ? 'left' : 'right';
      return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';
    }

    return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';
  },
      _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {
    var dragElS1Opp = vertical ? dragRect.left : dragRect.top,
        dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,
        dragElOppLength = vertical ? dragRect.width : dragRect.height,
        targetS1Opp = vertical ? targetRect.left : targetRect.top,
        targetS2Opp = vertical ? targetRect.right : targetRect.bottom,
        targetOppLength = vertical ? targetRect.width : targetRect.height;
    return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
  },

  /**
   * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.
   * @param  {Number} x      X position
   * @param  {Number} y      Y position
   * @return {HTMLElement}   Element of the first found nearest Sortable
   */
  _detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {
    var ret;
    sortables.some(function (sortable) {
      var threshold = sortable[expando].options.emptyInsertThreshold;
      if (!threshold || lastChild(sortable)) return;
      var rect = getRect(sortable),
          insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,
          insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;

      if (insideHorizontally && insideVertically) {
        return ret = sortable;
      }
    });
    return ret;
  },
      _prepareGroup = function _prepareGroup(options) {
    function toFn(value, pull) {
      return function (to, from, dragEl, evt) {
        var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;

        if (value == null && (pull || sameGroup)) {
          // Default pull value
          // Default pull and put value if same group
          return true;
        } else if (value == null || value === false) {
          return false;
        } else if (pull && value === 'clone') {
          return value;
        } else if (typeof value === 'function') {
          return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);
        } else {
          var otherGroup = (pull ? to : from).options.group.name;
          return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
        }
      };
    }

    var group = {};
    var originalGroup = options.group;

    if (!originalGroup || _typeof(originalGroup) != 'object') {
      originalGroup = {
        name: originalGroup
      };
    }

    group.name = originalGroup.name;
    group.checkPull = toFn(originalGroup.pull, true);
    group.checkPut = toFn(originalGroup.put);
    group.revertClone = originalGroup.revertClone;
    options.group = group;
  },
      _hideGhostForTarget = function _hideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, 'display', 'none');
    }
  },
      _unhideGhostForTarget = function _unhideGhostForTarget() {
    if (!supportCssPointerEvents && ghostEl) {
      css(ghostEl, 'display', '');
    }
  }; // #1184 fix - Prevent click event on fallback if dragged but item not changed position


  if (documentExists && !ChromeForAndroid) {
    document.addEventListener('click', function (evt) {
      if (ignoreNextClick) {
        evt.preventDefault();
        evt.stopPropagation && evt.stopPropagation();
        evt.stopImmediatePropagation && evt.stopImmediatePropagation();
        ignoreNextClick = false;
        return false;
      }
    }, true);
  }

  var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {
    if (dragEl) {
      evt = evt.touches ? evt.touches[0] : evt;

      var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);

      if (nearest) {
        // Create imitation event
        var event = {};

        for (var i in evt) {
          if (evt.hasOwnProperty(i)) {
            event[i] = evt[i];
          }
        }

        event.target = event.rootEl = nearest;
        event.preventDefault = void 0;
        event.stopPropagation = void 0;

        nearest[expando]._onDragOver(event);
      }
    }
  };

  var _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {
    if (dragEl) {
      dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
    }
  };
  /**
   * @class  Sortable
   * @param  {HTMLElement}  el
   * @param  {Object}       [options]
   */


  function Sortable(el, options) {
    if (!(el && el.nodeType && el.nodeType === 1)) {
      throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
    }

    this.el = el; // root element

    this.options = options = _extends({}, options); // Export instance

    el[expando] = this;
    var defaults = {
      group: null,
      sort: true,
      disabled: false,
      store: null,
      handle: null,
      draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',
      swapThreshold: 1,
      // percentage; 0 <= x <= 1
      invertSwap: false,
      // invert always
      invertedSwapThreshold: null,
      // will be set to same as swapThreshold if default
      removeCloneOnHide: true,
      direction: function direction() {
        return _detectDirection(el, this.options);
      },
      ghostClass: 'sortable-ghost',
      chosenClass: 'sortable-chosen',
      dragClass: 'sortable-drag',
      ignore: 'a, img',
      filter: null,
      preventOnFilter: true,
      animation: 0,
      easing: null,
      setData: function setData(dataTransfer, dragEl) {
        dataTransfer.setData('Text', dragEl.textContent);
      },
      dropBubble: false,
      dragoverBubble: false,
      dataIdAttr: 'data-id',
      delay: 0,
      delayOnTouchOnly: false,
      touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
      forceFallback: false,
      fallbackClass: 'sortable-fallback',
      fallbackOnBody: false,
      fallbackTolerance: 0,
      fallbackOffset: {
        x: 0,
        y: 0
      },
      supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && !Safari,
      emptyInsertThreshold: 5
    };
    PluginManager.initializePlugins(this, el, defaults); // Set default options

    for (var name in defaults) {
      !(name in options) && (options[name] = defaults[name]);
    }

    _prepareGroup(options); // Bind all private methods


    for (var fn in this) {
      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
        this[fn] = this[fn].bind(this);
      }
    } // Setup drag mode


    this.nativeDraggable = options.forceFallback ? false : supportDraggable;

    if (this.nativeDraggable) {
      // Touch start threshold cannot be greater than the native dragstart threshold
      this.options.touchStartThreshold = 1;
    } // Bind events


    if (options.supportPointer) {
      on(el, 'pointerdown', this._onTapStart);
    } else {
      on(el, 'mousedown', this._onTapStart);
      on(el, 'touchstart', this._onTapStart);
    }

    if (this.nativeDraggable) {
      on(el, 'dragover', this);
      on(el, 'dragenter', this);
    }

    sortables.push(this.el); // Restore sorting

    options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager

    _extends(this, AnimationStateManager());
  }

  Sortable.prototype =
  /** @lends Sortable.prototype */
  {
    constructor: Sortable,
    _isOutsideThisEl: function _isOutsideThisEl(target) {
      if (!this.el.contains(target) && target !== this.el) {
        lastTarget = null;
      }
    },
    _getDirection: function _getDirection(evt, target) {
      return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
    },
    _onTapStart: function _onTapStart(
    /** Event|TouchEvent */
    evt) {
      if (!evt.cancelable) return;

      var _this = this,
          el = this.el,
          options = this.options,
          preventOnFilter = options.preventOnFilter,
          type = evt.type,
          touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,
          target = (touch || evt).target,
          originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,
          filter = options.filter;

      _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.


      if (dragEl) {
        return;
      }

      if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
        return; // only left button and enabled
      } // cancel dnd if original target is content editable


      if (originalTarget.isContentEditable) {
        return;
      } // Safari ignores further event handling after mousedown


      if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {
        return;
      }

      target = closest(target, options.draggable, el, false);

      if (target && target.animated) {
        return;
      }

      if (lastDownEl === target) {
        // Ignoring duplicate `down`
        return;
      } // Get the index of the dragged element within its parent


      oldIndex = index(target);
      oldDraggableIndex = index(target, options.draggable); // Check filter

      if (typeof filter === 'function') {
        if (filter.call(this, evt, target, this)) {
          _dispatchEvent({
            sortable: _this,
            rootEl: originalTarget,
            name: 'filter',
            targetEl: target,
            toEl: el,
            fromEl: el
          });

          pluginEvent('filter', _this, {
            evt: evt
          });
          preventOnFilter && evt.cancelable && evt.preventDefault();
          return; // cancel dnd
        }
      } else if (filter) {
        filter = filter.split(',').some(function (criteria) {
          criteria = closest(originalTarget, criteria.trim(), el, false);

          if (criteria) {
            _dispatchEvent({
              sortable: _this,
              rootEl: criteria,
              name: 'filter',
              targetEl: target,
              fromEl: el,
              toEl: el
            });

            pluginEvent('filter', _this, {
              evt: evt
            });
            return true;
          }
        });

        if (filter) {
          preventOnFilter && evt.cancelable && evt.preventDefault();
          return; // cancel dnd
        }
      }

      if (options.handle && !closest(originalTarget, options.handle, el, false)) {
        return;
      } // Prepare `dragstart`


      this._prepareDragStart(evt, touch, target);
    },
    _prepareDragStart: function _prepareDragStart(
    /** Event */
    evt,
    /** Touch */
    touch,
    /** HTMLElement */
    target) {
      var _this = this,
          el = _this.el,
          options = _this.options,
          ownerDocument = el.ownerDocument,
          dragStartFn;

      if (target && !dragEl && target.parentNode === el) {
        var dragRect = getRect(target);
        rootEl = el;
        dragEl = target;
        parentEl = dragEl.parentNode;
        nextEl = dragEl.nextSibling;
        lastDownEl = target;
        activeGroup = options.group;
        Sortable.dragged = dragEl;
        tapEvt = {
          target: dragEl,
          clientX: (touch || evt).clientX,
          clientY: (touch || evt).clientY
        };
        tapDistanceLeft = tapEvt.clientX - dragRect.left;
        tapDistanceTop = tapEvt.clientY - dragRect.top;
        this._lastX = (touch || evt).clientX;
        this._lastY = (touch || evt).clientY;
        dragEl.style['will-change'] = 'all';

        dragStartFn = function dragStartFn() {
          pluginEvent('delayEnded', _this, {
            evt: evt
          });

          if (Sortable.eventCanceled) {
            _this._onDrop();

            return;
          } // Delayed drag has been triggered
          // we can re-enable the events: touchmove/mousemove


          _this._disableDelayedDragEvents();

          if (!FireFox && _this.nativeDraggable) {
            dragEl.draggable = true;
          } // Bind the events: dragstart/dragend


          _this._triggerDragStart(evt, touch); // Drag start event


          _dispatchEvent({
            sortable: _this,
            name: 'choose',
            originalEvent: evt
          }); // Chosen item


          toggleClass(dragEl, options.chosenClass, true);
        }; // Disable "draggable"


        options.ignore.split(',').forEach(function (criteria) {
          find(dragEl, criteria.trim(), _disableDraggable);
        });
        on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);
        on(ownerDocument, 'mouseup', _this._onDrop);
        on(ownerDocument, 'touchend', _this._onDrop);
        on(ownerDocument, 'touchcancel', _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)

        if (FireFox && this.nativeDraggable) {
          this.options.touchStartThreshold = 4;
          dragEl.draggable = true;
        }

        pluginEvent('delayStart', this, {
          evt: evt
        }); // Delay is impossible for native DnD in Edge or IE

        if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
          if (Sortable.eventCanceled) {
            this._onDrop();

            return;
          } // If the user moves the pointer or let go the click or touch
          // before the delay has been reached:
          // disable the delayed drag


          on(ownerDocument, 'mouseup', _this._disableDelayedDrag);
          on(ownerDocument, 'touchend', _this._disableDelayedDrag);
          on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);
          on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);
          on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);
          options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);
          _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
        } else {
          dragStartFn();
        }
      }
    },
    _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(
    /** TouchEvent|PointerEvent **/
    e) {
      var touch = e.touches ? e.touches[0] : e;

      if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
        this._disableDelayedDrag();
      }
    },
    _disableDelayedDrag: function _disableDelayedDrag() {
      dragEl && _disableDraggable(dragEl);
      clearTimeout(this._dragStartTimer);

      this._disableDelayedDragEvents();
    },
    _disableDelayedDragEvents: function _disableDelayedDragEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, 'mouseup', this._disableDelayedDrag);
      off(ownerDocument, 'touchend', this._disableDelayedDrag);
      off(ownerDocument, 'touchcancel', this._disableDelayedDrag);
      off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);
      off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);
      off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);
    },
    _triggerDragStart: function _triggerDragStart(
    /** Event */
    evt,
    /** Touch */
    touch) {
      touch = touch || evt.pointerType == 'touch' && evt;

      if (!this.nativeDraggable || touch) {
        if (this.options.supportPointer) {
          on(document, 'pointermove', this._onTouchMove);
        } else if (touch) {
          on(document, 'touchmove', this._onTouchMove);
        } else {
          on(document, 'mousemove', this._onTouchMove);
        }
      } else {
        on(dragEl, 'dragend', this);
        on(rootEl, 'dragstart', this._onDragStart);
      }

      try {
        if (document.selection) {
          // Timeout neccessary for IE9
          _nextTick(function () {
            document.selection.empty();
          });
        } else {
          window.getSelection().removeAllRanges();
        }
      } catch (err) {}
    },
    _dragStarted: function _dragStarted(fallback, evt) {
      awaitingDragStarted = false;

      if (rootEl && dragEl) {
        pluginEvent('dragStarted', this, {
          evt: evt
        });

        if (this.nativeDraggable) {
          on(document, 'dragover', _checkOutsideTargetEl);
        }

        var options = this.options; // Apply effect

        !fallback && toggleClass(dragEl, options.dragClass, false);
        toggleClass(dragEl, options.ghostClass, true);
        Sortable.active = this;
        fallback && this._appendGhost(); // Drag start event

        _dispatchEvent({
          sortable: this,
          name: 'start',
          originalEvent: evt
        });
      } else {
        this._nulling();
      }
    },
    _emulateDragOver: function _emulateDragOver() {
      if (touchEvt) {
        this._lastX = touchEvt.clientX;
        this._lastY = touchEvt.clientY;

        _hideGhostForTarget();

        var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        var parent = target;

        while (target && target.shadowRoot) {
          target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
          if (target === parent) break;
          parent = target;
        }

        dragEl.parentNode[expando]._isOutsideThisEl(target);

        if (parent) {
          do {
            if (parent[expando]) {
              var inserted = void 0;
              inserted = parent[expando]._onDragOver({
                clientX: touchEvt.clientX,
                clientY: touchEvt.clientY,
                target: target,
                rootEl: parent
              });

              if (inserted && !this.options.dragoverBubble) {
                break;
              }
            }

            target = parent; // store last element
          }
          /* jshint boss:true */
          while (parent = parent.parentNode);
        }

        _unhideGhostForTarget();
      }
    },
    _onTouchMove: function _onTouchMove(
    /**TouchEvent*/
    evt) {
      if (tapEvt) {
        var options = this.options,
            fallbackTolerance = options.fallbackTolerance,
            fallbackOffset = options.fallbackOffset,
            touch = evt.touches ? evt.touches[0] : evt,
            ghostMatrix = ghostEl && matrix(ghostEl, true),
            scaleX = ghostEl && ghostMatrix && ghostMatrix.a,
            scaleY = ghostEl && ghostMatrix && ghostMatrix.d,
            relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),
            dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),
            dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1); // only set the status to dragging, when we are actually dragging

        if (!Sortable.active && !awaitingDragStarted) {
          if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
            return;
          }

          this._onDragStart(evt, true);
        }

        if (ghostEl) {
          if (ghostMatrix) {
            ghostMatrix.e += dx - (lastDx || 0);
            ghostMatrix.f += dy - (lastDy || 0);
          } else {
            ghostMatrix = {
              a: 1,
              b: 0,
              c: 0,
              d: 1,
              e: dx,
              f: dy
            };
          }

          var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
          css(ghostEl, 'webkitTransform', cssMatrix);
          css(ghostEl, 'mozTransform', cssMatrix);
          css(ghostEl, 'msTransform', cssMatrix);
          css(ghostEl, 'transform', cssMatrix);
          lastDx = dx;
          lastDy = dy;
          touchEvt = touch;
        }

        evt.cancelable && evt.preventDefault();
      }
    },
    _appendGhost: function _appendGhost() {
      // Bug if using scale(): https://stackoverflow.com/questions/2637058
      // Not being adjusted for
      if (!ghostEl) {
        var container = this.options.fallbackOnBody ? document.body : rootEl,
            rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),
            options = this.options; // Position absolutely

        if (PositionGhostAbsolutely) {
          // Get relatively positioned parent
          ghostRelativeParent = container;

          while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {
            ghostRelativeParent = ghostRelativeParent.parentNode;
          }

          if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
            if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();
            rect.top += ghostRelativeParent.scrollTop;
            rect.left += ghostRelativeParent.scrollLeft;
          } else {
            ghostRelativeParent = getWindowScrollingElement();
          }

          ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
        }

        ghostEl = dragEl.cloneNode(true);
        toggleClass(ghostEl, options.ghostClass, false);
        toggleClass(ghostEl, options.fallbackClass, true);
        toggleClass(ghostEl, options.dragClass, true);
        css(ghostEl, 'transition', '');
        css(ghostEl, 'transform', '');
        css(ghostEl, 'box-sizing', 'border-box');
        css(ghostEl, 'margin', 0);
        css(ghostEl, 'top', rect.top);
        css(ghostEl, 'left', rect.left);
        css(ghostEl, 'width', rect.width);
        css(ghostEl, 'height', rect.height);
        css(ghostEl, 'opacity', '0.8');
        css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');
        css(ghostEl, 'zIndex', '100000');
        css(ghostEl, 'pointerEvents', 'none');
        Sortable.ghost = ghostEl;
        container.appendChild(ghostEl); // Set transform-origin

        css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');
      }
    },
    _onDragStart: function _onDragStart(
    /**Event*/
    evt,
    /**boolean*/
    fallback) {
      var _this = this;

      var dataTransfer = evt.dataTransfer;
      var options = _this.options;
      pluginEvent('dragStart', this, {
        evt: evt
      });

      if (Sortable.eventCanceled) {
        this._onDrop();

        return;
      }

      pluginEvent('setupClone', this);

      if (!Sortable.eventCanceled) {
        cloneEl = clone(dragEl);
        cloneEl.removeAttribute("id");
        cloneEl.draggable = false;
        cloneEl.style['will-change'] = '';

        this._hideClone();

        toggleClass(cloneEl, this.options.chosenClass, false);
        Sortable.clone = cloneEl;
      } // #1143: IFrame support workaround


      _this.cloneId = _nextTick(function () {
        pluginEvent('clone', _this);
        if (Sortable.eventCanceled) return;

        if (!_this.options.removeCloneOnHide) {
          rootEl.insertBefore(cloneEl, dragEl);
        }

        _this._hideClone();

        _dispatchEvent({
          sortable: _this,
          name: 'clone'
        });
      });
      !fallback && toggleClass(dragEl, options.dragClass, true); // Set proper drop events

      if (fallback) {
        ignoreNextClick = true;
        _this._loopId = setInterval(_this._emulateDragOver, 50);
      } else {
        // Undo what was set in _prepareDragStart before drag started
        off(document, 'mouseup', _this._onDrop);
        off(document, 'touchend', _this._onDrop);
        off(document, 'touchcancel', _this._onDrop);

        if (dataTransfer) {
          dataTransfer.effectAllowed = 'move';
          options.setData && options.setData.call(_this, dataTransfer, dragEl);
        }

        on(document, 'drop', _this); // #1276 fix:

        css(dragEl, 'transform', 'translateZ(0)');
      }

      awaitingDragStarted = true;
      _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
      on(document, 'selectstart', _this);
      moved = true;

      if (Safari) {
        css(document.body, 'user-select', 'none');
      }
    },
    // Returns true - if no further action is needed (either inserted or another condition)
    _onDragOver: function _onDragOver(
    /**Event*/
    evt) {
      var el = this.el,
          target = evt.target,
          dragRect,
          targetRect,
          revert,
          options = this.options,
          group = options.group,
          activeSortable = Sortable.active,
          isOwner = activeGroup === group,
          canSort = options.sort,
          fromSortable = putSortable || activeSortable,
          vertical,
          _this = this,
          completedFired = false;

      if (_silent) return;

      function dragOverEvent(name, extra) {
        pluginEvent(name, _this, _objectSpread2({
          evt: evt,
          isOwner: isOwner,
          axis: vertical ? 'vertical' : 'horizontal',
          revert: revert,
          dragRect: dragRect,
          targetRect: targetRect,
          canSort: canSort,
          fromSortable: fromSortable,
          target: target,
          completed: completed,
          onMove: function onMove(target, after) {
            return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);
          },
          changed: changed
        }, extra));
      } // Capture animation state


      function capture() {
        dragOverEvent('dragOverAnimationCapture');

        _this.captureAnimationState();

        if (_this !== fromSortable) {
          fromSortable.captureAnimationState();
        }
      } // Return invocation when dragEl is inserted (or completed)


      function completed(insertion) {
        dragOverEvent('dragOverCompleted', {
          insertion: insertion
        });

        if (insertion) {
          // Clones must be hidden before folding animation to capture dragRectAbsolute properly
          if (isOwner) {
            activeSortable._hideClone();
          } else {
            activeSortable._showClone(_this);
          }

          if (_this !== fromSortable) {
            // Set ghost class to new sortable's ghost class
            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
            toggleClass(dragEl, options.ghostClass, true);
          }

          if (putSortable !== _this && _this !== Sortable.active) {
            putSortable = _this;
          } else if (_this === Sortable.active && putSortable) {
            putSortable = null;
          } // Animation


          if (fromSortable === _this) {
            _this._ignoreWhileAnimating = target;
          }

          _this.animateAll(function () {
            dragOverEvent('dragOverAnimationComplete');
            _this._ignoreWhileAnimating = null;
          });

          if (_this !== fromSortable) {
            fromSortable.animateAll();
            fromSortable._ignoreWhileAnimating = null;
          }
        } // Null lastTarget if it is not inside a previously swapped element


        if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
          lastTarget = null;
        } // no bubbling and not fallback


        if (!options.dragoverBubble && !evt.rootEl && target !== document) {
          dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted


          !insertion && nearestEmptyInsertDetectEvent(evt);
        }

        !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
        return completedFired = true;
      } // Call when dragEl has been inserted


      function changed() {
        newIndex = index(dragEl);
        newDraggableIndex = index(dragEl, options.draggable);

        _dispatchEvent({
          sortable: _this,
          name: 'change',
          toEl: el,
          newIndex: newIndex,
          newDraggableIndex: newDraggableIndex,
          originalEvent: evt
        });
      }

      if (evt.preventDefault !== void 0) {
        evt.cancelable && evt.preventDefault();
      }

      target = closest(target, options.draggable, el, true);
      dragOverEvent('dragOver');
      if (Sortable.eventCanceled) return completedFired;

      if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
        return completed(false);
      }

      ignoreNextClick = false;

      if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list
      : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
        vertical = this._getDirection(evt, target) === 'vertical';
        dragRect = getRect(dragEl);
        dragOverEvent('dragOverValid');
        if (Sortable.eventCanceled) return completedFired;

        if (revert) {
          parentEl = rootEl; // actualization

          capture();

          this._hideClone();

          dragOverEvent('revert');

          if (!Sortable.eventCanceled) {
            if (nextEl) {
              rootEl.insertBefore(dragEl, nextEl);
            } else {
              rootEl.appendChild(dragEl);
            }
          }

          return completed(true);
        }

        var elLastChild = lastChild(el, options.draggable);

        if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
          // Insert to end of list
          // If already at end of list: Do not insert
          if (elLastChild === dragEl) {
            return completed(false);
          } // if there is a last element, it is the target


          if (elLastChild && el === evt.target) {
            target = elLastChild;
          }

          if (target) {
            targetRect = getRect(target);
          }

          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
            capture();

            if (elLastChild && elLastChild.nextSibling) {
              // the last draggable element is not the last node
              el.insertBefore(dragEl, elLastChild.nextSibling);
            } else {
              el.appendChild(dragEl);
            }

            parentEl = el; // actualization

            changed();
            return completed(true);
          }
        } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
          // Insert to start of list
          var firstChild = getChild(el, 0, options, true);

          if (firstChild === dragEl) {
            return completed(false);
          }

          target = firstChild;
          targetRect = getRect(target);

          if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
            capture();
            el.insertBefore(dragEl, firstChild);
            parentEl = el; // actualization

            changed();
            return completed(true);
          }
        } else if (target.parentNode === el) {
          targetRect = getRect(target);
          var direction = 0,
              targetBeforeFirstSwap,
              differentLevel = dragEl.parentNode !== el,
              differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),
              side1 = vertical ? 'top' : 'left',
              scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),
              scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;

          if (lastTarget !== target) {
            targetBeforeFirstSwap = targetRect[side1];
            pastFirstInvertThresh = false;
            isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
          }

          direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
          var sibling;

          if (direction !== 0) {
            // Check if target is beside dragEl in respective direction (ignoring hidden elements)
            var dragIndex = index(dragEl);

            do {
              dragIndex -= direction;
              sibling = parentEl.children[dragIndex];
            } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));
          } // If dragEl is already beside target: Do not insert


          if (direction === 0 || sibling === target) {
            return completed(false);
          }

          lastTarget = target;
          lastDirection = direction;
          var nextSibling = target.nextElementSibling,
              after = false;
          after = direction === 1;

          var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);

          if (moveVector !== false) {
            if (moveVector === 1 || moveVector === -1) {
              after = moveVector === 1;
            }

            _silent = true;
            setTimeout(_unsilent, 30);
            capture();

            if (after && !nextSibling) {
              el.appendChild(dragEl);
            } else {
              target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
            } // Undo chrome's scroll adjustment (has no effect on other browsers)


            if (scrolledPastTop) {
              scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
            }

            parentEl = dragEl.parentNode; // actualization
            // must be done before animation

            if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {
              targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
            }

            changed();
            return completed(true);
          }
        }

        if (el.contains(dragEl)) {
          return completed(false);
        }
      }

      return false;
    },
    _ignoreWhileAnimating: null,
    _offMoveEvents: function _offMoveEvents() {
      off(document, 'mousemove', this._onTouchMove);
      off(document, 'touchmove', this._onTouchMove);
      off(document, 'pointermove', this._onTouchMove);
      off(document, 'dragover', nearestEmptyInsertDetectEvent);
      off(document, 'mousemove', nearestEmptyInsertDetectEvent);
      off(document, 'touchmove', nearestEmptyInsertDetectEvent);
    },
    _offUpEvents: function _offUpEvents() {
      var ownerDocument = this.el.ownerDocument;
      off(ownerDocument, 'mouseup', this._onDrop);
      off(ownerDocument, 'touchend', this._onDrop);
      off(ownerDocument, 'pointerup', this._onDrop);
      off(ownerDocument, 'touchcancel', this._onDrop);
      off(document, 'selectstart', this);
    },
    _onDrop: function _onDrop(
    /**Event*/
    evt) {
      var el = this.el,
          options = this.options; // Get the index of the dragged element within its parent

      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);
      pluginEvent('drop', this, {
        evt: evt
      });
      parentEl = dragEl && dragEl.parentNode; // Get again after plugin event

      newIndex = index(dragEl);
      newDraggableIndex = index(dragEl, options.draggable);

      if (Sortable.eventCanceled) {
        this._nulling();

        return;
      }

      awaitingDragStarted = false;
      isCircumstantialInvert = false;
      pastFirstInvertThresh = false;
      clearInterval(this._loopId);
      clearTimeout(this._dragStartTimer);

      _cancelNextTick(this.cloneId);

      _cancelNextTick(this._dragStartId); // Unbind events


      if (this.nativeDraggable) {
        off(document, 'drop', this);
        off(el, 'dragstart', this._onDragStart);
      }

      this._offMoveEvents();

      this._offUpEvents();

      if (Safari) {
        css(document.body, 'user-select', '');
      }

      css(dragEl, 'transform', '');

      if (evt) {
        if (moved) {
          evt.cancelable && evt.preventDefault();
          !options.dropBubble && evt.stopPropagation();
        }

        ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);

        if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {
          // Remove clone(s)
          cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
        }

        if (dragEl) {
          if (this.nativeDraggable) {
            off(dragEl, 'dragend', this);
          }

          _disableDraggable(dragEl);

          dragEl.style['will-change'] = ''; // Remove classes
          // ghostClass is added in dragStarted

          if (moved && !awaitingDragStarted) {
            toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
          }

          toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event

          _dispatchEvent({
            sortable: this,
            name: 'unchoose',
            toEl: parentEl,
            newIndex: null,
            newDraggableIndex: null,
            originalEvent: evt
          });

          if (rootEl !== parentEl) {
            if (newIndex >= 0) {
              // Add event
              _dispatchEvent({
                rootEl: parentEl,
                name: 'add',
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt
              }); // Remove event


              _dispatchEvent({
                sortable: this,
                name: 'remove',
                toEl: parentEl,
                originalEvent: evt
              }); // drag from one list and drop into another


              _dispatchEvent({
                rootEl: parentEl,
                name: 'sort',
                toEl: parentEl,
                fromEl: rootEl,
                originalEvent: evt
              });

              _dispatchEvent({
                sortable: this,
                name: 'sort',
                toEl: parentEl,
                originalEvent: evt
              });
            }

            putSortable && putSortable.save();
          } else {
            if (newIndex !== oldIndex) {
              if (newIndex >= 0) {
                // drag & drop within the same list
                _dispatchEvent({
                  sortable: this,
                  name: 'update',
                  toEl: parentEl,
                  originalEvent: evt
                });

                _dispatchEvent({
                  sortable: this,
                  name: 'sort',
                  toEl: parentEl,
                  originalEvent: evt
                });
              }
            }
          }

          if (Sortable.active) {
            /* jshint eqnull:true */
            if (newIndex == null || newIndex === -1) {
              newIndex = oldIndex;
              newDraggableIndex = oldDraggableIndex;
            }

            _dispatchEvent({
              sortable: this,
              name: 'end',
              toEl: parentEl,
              originalEvent: evt
            }); // Save sorting


            this.save();
          }
        }
      }

      this._nulling();
    },
    _nulling: function _nulling() {
      pluginEvent('nulling', this);
      rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
      savedInputChecked.forEach(function (el) {
        el.checked = true;
      });
      savedInputChecked.length = lastDx = lastDy = 0;
    },
    handleEvent: function handleEvent(
    /**Event*/
    evt) {
      switch (evt.type) {
        case 'drop':
        case 'dragend':
          this._onDrop(evt);

          break;

        case 'dragenter':
        case 'dragover':
          if (dragEl) {
            this._onDragOver(evt);

            _globalDragOver(evt);
          }

          break;

        case 'selectstart':
          evt.preventDefault();
          break;
      }
    },

    /**
     * Serializes the item into an array of string.
     * @returns {String[]}
     */
    toArray: function toArray() {
      var order = [],
          el,
          children = this.el.children,
          i = 0,
          n = children.length,
          options = this.options;

      for (; i < n; i++) {
        el = children[i];

        if (closest(el, options.draggable, this.el, false)) {
          order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
        }
      }

      return order;
    },

    /**
     * Sorts the elements according to the array.
     * @param  {String[]}  order  order of the items
     */
    sort: function sort(order, useAnimation) {
      var items = {},
          rootEl = this.el;
      this.toArray().forEach(function (id, i) {
        var el = rootEl.children[i];

        if (closest(el, this.options.draggable, rootEl, false)) {
          items[id] = el;
        }
      }, this);
      useAnimation && this.captureAnimationState();
      order.forEach(function (id) {
        if (items[id]) {
          rootEl.removeChild(items[id]);
          rootEl.appendChild(items[id]);
        }
      });
      useAnimation && this.animateAll();
    },

    /**
     * Save the current sorting
     */
    save: function save() {
      var store = this.options.store;
      store && store.set && store.set(this);
    },

    /**
     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.
     * @param   {HTMLElement}  el
     * @param   {String}       [selector]  default: `options.draggable`
     * @returns {HTMLElement|null}
     */
    closest: function closest$1(el, selector) {
      return closest(el, selector || this.options.draggable, this.el, false);
    },

    /**
     * Set/get option
     * @param   {string} name
     * @param   {*}      [value]
     * @returns {*}
     */
    option: function option(name, value) {
      var options = this.options;

      if (value === void 0) {
        return options[name];
      } else {
        var modifiedValue = PluginManager.modifyOption(this, name, value);

        if (typeof modifiedValue !== 'undefined') {
          options[name] = modifiedValue;
        } else {
          options[name] = value;
        }

        if (name === 'group') {
          _prepareGroup(options);
        }
      }
    },

    /**
     * Destroy
     */
    destroy: function destroy() {
      pluginEvent('destroy', this);
      var el = this.el;
      el[expando] = null;
      off(el, 'mousedown', this._onTapStart);
      off(el, 'touchstart', this._onTapStart);
      off(el, 'pointerdown', this._onTapStart);

      if (this.nativeDraggable) {
        off(el, 'dragover', this);
        off(el, 'dragenter', this);
      } // Remove draggable attributes


      Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {
        el.removeAttribute('draggable');
      });

      this._onDrop();

      this._disableDelayedDragEvents();

      sortables.splice(sortables.indexOf(this.el), 1);
      this.el = el = null;
    },
    _hideClone: function _hideClone() {
      if (!cloneHidden) {
        pluginEvent('hideClone', this);
        if (Sortable.eventCanceled) return;
        css(cloneEl, 'display', 'none');

        if (this.options.removeCloneOnHide && cloneEl.parentNode) {
          cloneEl.parentNode.removeChild(cloneEl);
        }

        cloneHidden = true;
      }
    },
    _showClone: function _showClone(putSortable) {
      if (putSortable.lastPutMode !== 'clone') {
        this._hideClone();

        return;
      }

      if (cloneHidden) {
        pluginEvent('showClone', this);
        if (Sortable.eventCanceled) return; // show clone at dragEl or original position

        if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
          rootEl.insertBefore(cloneEl, dragEl);
        } else if (nextEl) {
          rootEl.insertBefore(cloneEl, nextEl);
        } else {
          rootEl.appendChild(cloneEl);
        }

        if (this.options.group.revertClone) {
          this.animate(dragEl, cloneEl);
        }

        css(cloneEl, 'display', '');
        cloneHidden = false;
      }
    }
  };

  function _globalDragOver(
  /**Event*/
  evt) {
    if (evt.dataTransfer) {
      evt.dataTransfer.dropEffect = 'move';
    }

    evt.cancelable && evt.preventDefault();
  }

  function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
    var evt,
        sortable = fromEl[expando],
        onMoveFn = sortable.options.onMove,
        retVal; // Support for new CustomEvent feature

    if (window.CustomEvent && !IE11OrLess && !Edge) {
      evt = new CustomEvent('move', {
        bubbles: true,
        cancelable: true
      });
    } else {
      evt = document.createEvent('Event');
      evt.initEvent('move', true, true);
    }

    evt.to = toEl;
    evt.from = fromEl;
    evt.dragged = dragEl;
    evt.draggedRect = dragRect;
    evt.related = targetEl || toEl;
    evt.relatedRect = targetRect || getRect(toEl);
    evt.willInsertAfter = willInsertAfter;
    evt.originalEvent = originalEvent;
    fromEl.dispatchEvent(evt);

    if (onMoveFn) {
      retVal = onMoveFn.call(sortable, evt, originalEvent);
    }

    return retVal;
  }

  function _disableDraggable(el) {
    el.draggable = false;
  }

  function _unsilent() {
    _silent = false;
  }

  function _ghostIsFirst(evt, vertical, sortable) {
    var rect = getRect(getChild(sortable.el, 0, sortable.options, true));
    var spacer = 10;
    return vertical ? evt.clientX < rect.left - spacer || evt.clientY < rect.top && evt.clientX < rect.right : evt.clientY < rect.top - spacer || evt.clientY < rect.bottom && evt.clientX < rect.left;
  }

  function _ghostIsLast(evt, vertical, sortable) {
    var rect = getRect(lastChild(sortable.el, sortable.options.draggable));
    var spacer = 10;
    return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;
  }

  function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
    var mouseOnAxis = vertical ? evt.clientY : evt.clientX,
        targetLength = vertical ? targetRect.height : targetRect.width,
        targetS1 = vertical ? targetRect.top : targetRect.left,
        targetS2 = vertical ? targetRect.bottom : targetRect.right,
        invert = false;

    if (!invertSwap) {
      // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold
      if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
        // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2
        // check if past first invert threshold on side opposite of lastDirection
        if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
          // past first invert threshold, do not restrict inverted threshold to dragEl shadow
          pastFirstInvertThresh = true;
        }

        if (!pastFirstInvertThresh) {
          // dragEl shadow (target move distance shadow)
          if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow
          : mouseOnAxis > targetS2 - targetMoveDistance) {
            return -lastDirection;
          }
        } else {
          invert = true;
        }
      } else {
        // Regular
        if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
          return _getInsertDirection(target);
        }
      }
    }

    invert = invert || invertSwap;

    if (invert) {
      // Invert of regular
      if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
        return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
      }
    }

    return 0;
  }
  /**
   * Gets the direction dragEl must be swapped relative to target in order to make it
   * seem that dragEl has been "inserted" into that element's position
   * @param  {HTMLElement} target       The target whose position dragEl is being inserted at
   * @return {Number}                   Direction dragEl must be swapped
   */


  function _getInsertDirection(target) {
    if (index(dragEl) < index(target)) {
      return 1;
    } else {
      return -1;
    }
  }
  /**
   * Generate id
   * @param   {HTMLElement} el
   * @returns {String}
   * @private
   */


  function _generateId(el) {
    var str = el.tagName + el.className + el.src + el.href + el.textContent,
        i = str.length,
        sum = 0;

    while (i--) {
      sum += str.charCodeAt(i);
    }

    return sum.toString(36);
  }

  function _saveInputCheckedState(root) {
    savedInputChecked.length = 0;
    var inputs = root.getElementsByTagName('input');
    var idx = inputs.length;

    while (idx--) {
      var el = inputs[idx];
      el.checked && savedInputChecked.push(el);
    }
  }

  function _nextTick(fn) {
    return setTimeout(fn, 0);
  }

  function _cancelNextTick(id) {
    return clearTimeout(id);
  } // Fixed #973:


  if (documentExists) {
    on(document, 'touchmove', function (evt) {
      if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
        evt.preventDefault();
      }
    });
  } // Export utils


  Sortable.utils = {
    on: on,
    off: off,
    css: css,
    find: find,
    is: function is(el, selector) {
      return !!closest(el, selector, el, false);
    },
    extend: extend,
    throttle: throttle,
    closest: closest,
    toggleClass: toggleClass,
    clone: clone,
    index: index,
    nextTick: _nextTick,
    cancelNextTick: _cancelNextTick,
    detectDirection: _detectDirection,
    getChild: getChild
  };
  /**
   * Get the Sortable instance of an element
   * @param  {HTMLElement} element The element
   * @return {Sortable|undefined}         The instance of Sortable
   */

  Sortable.get = function (element) {
    return element[expando];
  };
  /**
   * Mount a plugin to Sortable
   * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted
   */


  Sortable.mount = function () {
    for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
      plugins[_key] = arguments[_key];
    }

    if (plugins[0].constructor === Array) plugins = plugins[0];
    plugins.forEach(function (plugin) {
      if (!plugin.prototype || !plugin.prototype.constructor) {
        throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
      }

      if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);
      PluginManager.mount(plugin);
    });
  };
  /**
   * Create sortable instance
   * @param {HTMLElement}  el
   * @param {Object}      [options]
   */


  Sortable.create = function (el, options) {
    return new Sortable(el, options);
  }; // Export


  Sortable.version = version;
  var autoScrolls = [],
      scrollEl,
      scrollRootEl,
      scrolling = false,
      lastAutoScrollX,
      lastAutoScrollY,
      touchEvt$1,
      pointerElemChangedInterval;

  function AutoScrollPlugin() {
    function AutoScroll() {
      this.defaults = {
        scroll: true,
        forceAutoScrollFallback: false,
        scrollSensitivity: 30,
        scrollSpeed: 10,
        bubbleScroll: true
      }; // Bind all private methods

      for (var fn in this) {
        if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {
          this[fn] = this[fn].bind(this);
        }
      }
    }

    AutoScroll.prototype = {
      dragStarted: function dragStarted(_ref) {
        var originalEvent = _ref.originalEvent;

        if (this.sortable.nativeDraggable) {
          on(document, 'dragover', this._handleAutoScroll);
        } else {
          if (this.options.supportPointer) {
            on(document, 'pointermove', this._handleFallbackAutoScroll);
          } else if (originalEvent.touches) {
            on(document, 'touchmove', this._handleFallbackAutoScroll);
          } else {
            on(document, 'mousemove', this._handleFallbackAutoScroll);
          }
        }
      },
      dragOverCompleted: function dragOverCompleted(_ref2) {
        var originalEvent = _ref2.originalEvent; // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)

        if (!this.options.dragOverBubble && !originalEvent.rootEl) {
          this._handleAutoScroll(originalEvent);
        }
      },
      drop: function drop() {
        if (this.sortable.nativeDraggable) {
          off(document, 'dragover', this._handleAutoScroll);
        } else {
          off(document, 'pointermove', this._handleFallbackAutoScroll);
          off(document, 'touchmove', this._handleFallbackAutoScroll);
          off(document, 'mousemove', this._handleFallbackAutoScroll);
        }

        clearPointerElemChangedInterval();
        clearAutoScrolls();
        cancelThrottle();
      },
      nulling: function nulling() {
        touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
        autoScrolls.length = 0;
      },
      _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
        this._handleAutoScroll(evt, true);
      },
      _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
        var _this = this;

        var x = (evt.touches ? evt.touches[0] : evt).clientX,
            y = (evt.touches ? evt.touches[0] : evt).clientY,
            elem = document.elementFromPoint(x, y);
        touchEvt$1 = evt; // IE does not seem to have native autoscroll,
        // Edge's autoscroll seems too conditional,
        // MACOS Safari does not have autoscroll,
        // Firefox and Chrome are good

        if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
          autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change

          var ogElemScroller = getParentAutoScrollElement(elem, true);

          if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
            pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour

            pointerElemChangedInterval = setInterval(function () {
              var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);

              if (newElem !== ogElemScroller) {
                ogElemScroller = newElem;
                clearAutoScrolls();
              }

              autoScroll(evt, _this.options, newElem, fallback);
            }, 10);
            lastAutoScrollX = x;
            lastAutoScrollY = y;
          }
        } else {
          // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll
          if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
            clearAutoScrolls();
            return;
          }

          autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
        }
      }
    };
    return _extends(AutoScroll, {
      pluginName: 'scroll',
      initializeByDefault: true
    });
  }

  function clearAutoScrolls() {
    autoScrolls.forEach(function (autoScroll) {
      clearInterval(autoScroll.pid);
    });
    autoScrolls = [];
  }

  function clearPointerElemChangedInterval() {
    clearInterval(pointerElemChangedInterval);
  }

  var autoScroll = throttle(function (evt, options, rootEl, isFallback) {
    // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521
    if (!options.scroll) return;
    var x = (evt.touches ? evt.touches[0] : evt).clientX,
        y = (evt.touches ? evt.touches[0] : evt).clientY,
        sens = options.scrollSensitivity,
        speed = options.scrollSpeed,
        winScroller = getWindowScrollingElement();
    var scrollThisInstance = false,
        scrollCustomFn; // New scroll root, set scrollEl

    if (scrollRootEl !== rootEl) {
      scrollRootEl = rootEl;
      clearAutoScrolls();
      scrollEl = options.scroll;
      scrollCustomFn = options.scrollFn;

      if (scrollEl === true) {
        scrollEl = getParentAutoScrollElement(rootEl, true);
      }
    }

    var layersOut = 0;
    var currentParent = scrollEl;

    do {
      var el = currentParent,
          rect = getRect(el),
          top = rect.top,
          bottom = rect.bottom,
          left = rect.left,
          right = rect.right,
          width = rect.width,
          height = rect.height,
          canScrollX = void 0,
          canScrollY = void 0,
          scrollWidth = el.scrollWidth,
          scrollHeight = el.scrollHeight,
          elCSS = css(el),
          scrollPosX = el.scrollLeft,
          scrollPosY = el.scrollTop;

      if (el === winScroller) {
        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');
        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');
      } else {
        canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');
        canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');
      }

      var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
      var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);

      if (!autoScrolls[layersOut]) {
        for (var i = 0; i <= layersOut; i++) {
          if (!autoScrolls[i]) {
            autoScrolls[i] = {};
          }
        }
      }

      if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
        autoScrolls[layersOut].el = el;
        autoScrolls[layersOut].vx = vx;
        autoScrolls[layersOut].vy = vy;
        clearInterval(autoScrolls[layersOut].pid);

        if (vx != 0 || vy != 0) {
          scrollThisInstance = true;
          /* jshint loopfunc:true */

          autoScrolls[layersOut].pid = setInterval(function () {
            // emulate drag over during autoscroll (fallback), emulating native DnD behaviour
            if (isFallback && this.layer === 0) {
              Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely

            }

            var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
            var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;

            if (typeof scrollCustomFn === 'function') {
              if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {
                return;
              }
            }

            scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
          }.bind({
            layer: layersOut
          }), 24);
        }
      }

      layersOut++;
    } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));

    scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not
  }, 30);

  var drop = function drop(_ref) {
    var originalEvent = _ref.originalEvent,
        putSortable = _ref.putSortable,
        dragEl = _ref.dragEl,
        activeSortable = _ref.activeSortable,
        dispatchSortableEvent = _ref.dispatchSortableEvent,
        hideGhostForTarget = _ref.hideGhostForTarget,
        unhideGhostForTarget = _ref.unhideGhostForTarget;
    if (!originalEvent) return;
    var toSortable = putSortable || activeSortable;
    hideGhostForTarget();
    var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
    var target = document.elementFromPoint(touch.clientX, touch.clientY);
    unhideGhostForTarget();

    if (toSortable && !toSortable.el.contains(target)) {
      dispatchSortableEvent('spill');
      this.onSpill({
        dragEl: dragEl,
        putSortable: putSortable
      });
    }
  };

  function Revert() {}

  Revert.prototype = {
    startIndex: null,
    dragStart: function dragStart(_ref2) {
      var oldDraggableIndex = _ref2.oldDraggableIndex;
      this.startIndex = oldDraggableIndex;
    },
    onSpill: function onSpill(_ref3) {
      var dragEl = _ref3.dragEl,
          putSortable = _ref3.putSortable;
      this.sortable.captureAnimationState();

      if (putSortable) {
        putSortable.captureAnimationState();
      }

      var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);

      if (nextSibling) {
        this.sortable.el.insertBefore(dragEl, nextSibling);
      } else {
        this.sortable.el.appendChild(dragEl);
      }

      this.sortable.animateAll();

      if (putSortable) {
        putSortable.animateAll();
      }
    },
    drop: drop
  };

  _extends(Revert, {
    pluginName: 'revertOnSpill'
  });

  function Remove() {}

  Remove.prototype = {
    onSpill: function onSpill(_ref4) {
      var dragEl = _ref4.dragEl,
          putSortable = _ref4.putSortable;
      var parentSortable = putSortable || this.sortable;
      parentSortable.captureAnimationState();
      dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);
      parentSortable.animateAll();
    },
    drop: drop
  };

  _extends(Remove, {
    pluginName: 'removeOnSpill'
  });

  Sortable.mount(new AutoScrollPlugin());
  Sortable.mount(Remove, Revert);

  function swapDragArrayElement(data, currentIndex, targetIndex) {
    var newData = _toConsumableArray(data);

    if (targetIndex - currentIndex > 0) {
      newData.splice(targetIndex + 1, 0, newData[currentIndex]);
      newData.splice(currentIndex, 1);
    } else {
      newData.splice(targetIndex, 0, newData[currentIndex]);
      newData.splice(currentIndex + 1, 1);
    }

    return newData;
  }

  function ownKeys$g(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$g(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$g(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$g(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useDragSort(props, context) {
    var _toRefs = VueCompositionAPI.toRefs(props),
        sortOnRowDraggable = _toRefs.sortOnRowDraggable,
        dragSort = _toRefs.dragSort,
        data = _toRefs.data;

    var _useClassName = useClassName(),
        tableDraggableClasses = _useClassName.tableDraggableClasses,
        tableBaseClass = _useClassName.tableBaseClass,
        tableFullRowClasses = _useClassName.tableFullRowClasses;

    var columns = VueCompositionAPI.ref(props.columns || []);
    var primaryTableRef = VueCompositionAPI.ref(null);
    var dragCol = VueCompositionAPI.computed(function () {
      var _columns$value;

      return (_columns$value = columns.value) === null || _columns$value === void 0 ? void 0 : _columns$value.find(function (item) {
        return item.colKey === "drag";
      });
    });
    var isRowDraggable = VueCompositionAPI.computed(function () {
      return sortOnRowDraggable.value || dragSort.value === "row";
    });
    var isRowHandlerDraggable = VueCompositionAPI.computed(function () {
      return ["drag-col", "row-handler"].includes(dragSort.value) && !!dragCol.value;
    });
    var isColDraggable = VueCompositionAPI.computed(function () {
      return dragSort.value === "col";
    });
    var lastRowList = VueCompositionAPI.ref([]);
    var lastColList = VueCompositionAPI.ref([]);

    if (dragSort.value === "drag-col") {
      log.error("Table", "dragSort='drag-col' is going to be deprecated, please use dragSort='col' instead.");
    }

    if (props.sortOnRowDraggable) {
      log.error("Table", "`sortOnRowDraggable` is going to be deprecated, please use dragSort='row' instead.");
    }

    VueCompositionAPI.watch(data, function (data2) {
      lastRowList.value = data2 === null || data2 === void 0 ? void 0 : data2.map(function (item) {
        return get_1(item, props.rowKey);
      });
    }, {
      immediate: true
    });
    VueCompositionAPI.watch(columns, function (columns2) {
      lastColList.value = columns2 || [];
    }, {
      immediate: true
    });

    var registerRowDragEvent = function registerRowDragEvent(element) {
      if (!isRowHandlerDraggable.value && !isRowDraggable.value) return;
      var dragContainer = element === null || element === void 0 ? void 0 : element.querySelector("tbody");

      if (!dragContainer) {
        console.error("tbody does not exist.");
        return null;
      }

      var dragInstanceTmp = null;

      var baseOptions = _objectSpread$g(_objectSpread$g({
        animation: 150
      }, props.dragSortOptions), {}, {
        ghostClass: tableDraggableClasses.ghost,
        chosenClass: tableDraggableClasses.chosen,
        dragClass: tableDraggableClasses.dragging,
        filter: ".".concat(tableFullRowClasses.base),
        onMove: function onMove(evt) {
          return !hasClass(evt.related, tableFullRowClasses.base);
        },
        onEnd: function onEnd(evt) {
          var _dragInstanceTmp, _props$onDragSort;

          (_dragInstanceTmp = dragInstanceTmp) === null || _dragInstanceTmp === void 0 ? void 0 : _dragInstanceTmp.sort(lastRowList.value);
          var currentIndex = evt.oldIndex,
              targetIndex = evt.newIndex;

          if (isFunction_1(props.firstFullRow) && props.firstFullRow(VueCompositionAPI.h) || context.slots.firstFullRow) {
            currentIndex -= 1;
            targetIndex -= 1;
          }

          var params = {
            data: data.value,
            currentIndex: currentIndex,
            current: data.value[currentIndex],
            targetIndex: targetIndex,
            target: data.value[targetIndex],
            newData: swapDragArrayElement(_toConsumableArray(props.data), currentIndex, targetIndex),
            e: evt,
            sort: "row"
          };
          params.currentData = params.newData;
          (_props$onDragSort = props.onDragSort) === null || _props$onDragSort === void 0 ? void 0 : _props$onDragSort.call(props, params);
          context.emit("drag-sort", params);
        }
      });

      if (isRowDraggable.value) {
        dragInstanceTmp = new Sortable(dragContainer, _objectSpread$g({}, baseOptions));
      } else {
        dragInstanceTmp = new Sortable(dragContainer, _objectSpread$g(_objectSpread$g({}, baseOptions), {}, {
          handle: ".".concat(tableDraggableClasses.handle)
        }));
      }

      lastRowList.value = dragInstanceTmp.toArray();
    };

    var registerColDragEvent = function registerColDragEvent(tableElement) {
      var _dragInstanceTmp3;

      if (!isColDraggable.value || !tableElement) return;
      var dragInstanceTmp = null;

      var options = _objectSpread$g(_objectSpread$g({
        animation: 150
      }, props.dragSortOptions), {}, {
        dataIdAttr: "data-colkey",
        direction: "vertical",
        ghostClass: tableDraggableClasses.ghost,
        chosenClass: tableDraggableClasses.chosen,
        dragClass: tableDraggableClasses.dragging,
        handle: ".".concat(tableBaseClass.thCellInner),
        onEnd: function onEnd(evt) {
          var _dragInstanceTmp2, _props$onDragSort2;

          (_dragInstanceTmp2 = dragInstanceTmp) === null || _dragInstanceTmp2 === void 0 ? void 0 : _dragInstanceTmp2.sort(_toConsumableArray(lastColList.value));
          var currentIndex = evt.oldIndex,
              targetIndex = evt.newIndex;
          var current = columns.value[currentIndex];
          var target = columns.value[targetIndex];

          if (!current || !current.colKey) {
            log.error("Table", "colKey is missing in ".concat(JSON.stringify(current)));
          }

          if (!target || !target.colKey) {
            log.error("Table", "colKey is missing in ".concat(JSON.stringify(target)));
          }

          currentIndex = props.columns.findIndex(function (t) {
            return t.colKey === current.colKey;
          });
          targetIndex = props.columns.findIndex(function (t) {
            return t.colKey === target.colKey;
          });
          var params = {
            data: columns.value,
            currentIndex: currentIndex,
            current: current,
            targetIndex: targetIndex,
            target: target,
            newData: swapDragArrayElement(_toConsumableArray(props.columns), currentIndex, targetIndex),
            e: evt,
            sort: "col"
          };
          params.currentData = params.newData;
          (_props$onDragSort2 = props.onDragSort) === null || _props$onDragSort2 === void 0 ? void 0 : _props$onDragSort2.call(props, params);
          context.emit("drag-sort", params);
        }
      });

      var container = tableElement.querySelector("thead > tr");
      dragInstanceTmp = new Sortable(container, options);
      lastColList.value = (_dragInstanceTmp3 = dragInstanceTmp) === null || _dragInstanceTmp3 === void 0 ? void 0 : _dragInstanceTmp3.toArray();
    };

    function setDragSortPrimaryTableRef(primaryTableElement) {
      primaryTableRef.value = primaryTableElement;
    }

    function setDragSortColumns(val) {
      columns.value = val;
    }

    VueCompositionAPI.watch([primaryTableRef], function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          val = _ref2[0];

      if (!val || !val.$el) return;
      registerRowDragEvent(val.$el);
      registerColDragEvent(val.$el);
      var timer = setTimeout(function () {
        if (val.$refs.affixHeaderRef) {
          registerColDragEvent(val.$refs.affixHeaderRef);
        }

        clearTimeout(timer);
      });
    });
    return {
      isRowDraggable: isRowDraggable,
      isRowHandlerDraggable: isRowHandlerDraggable,
      isColDraggable: isColDraggable,
      setDragSortPrimaryTableRef: setDragSortPrimaryTableRef,
      setDragSortColumns: setDragSortColumns
    };
  }

  function useAsyncLoading(props, context) {
    var renderTNode = useTNodeJSX();

    var _useConfig = useConfig("table"),
        global = _useConfig.global;

    var _useClassName = useClassName(),
        isLoadingClass = _useClassName.isLoadingClass,
        isLoadMoreClass = _useClassName.isLoadMoreClass,
        asyncLoadingClass = _useClassName.asyncLoadingClass;

    var classes = VueCompositionAPI.computed(function () {
      var _ref;

      return [asyncLoadingClass, (_ref = {}, _defineProperty$3(_ref, isLoadingClass, props.asyncLoading === "loading"), _defineProperty$3(_ref, isLoadMoreClass, props.asyncLoading === "load-more"), _ref)];
    });

    function onLoadClick() {
      var _props$onAsyncLoading;

      if (typeof props.asyncLoading !== "string") return;
      (_props$onAsyncLoading = props.onAsyncLoadingClick) === null || _props$onAsyncLoading === void 0 ? void 0 : _props$onAsyncLoading.call(props, {
        status: props.asyncLoading
      });
      context.emit("async-loading-click", {
        status: props.asyncLoading
      });
    }

    function renderAsyncLoading(h) {
      var asyncLoadingNode = renderTNode("asyncLoading");

      if (isString_1(asyncLoadingNode)) {
        var asyncLoading = props.asyncLoading;
        var loadingText = {
          "load-more": global.value.loadingMoreText,
          loading: global.value.loadingText
        }[String(asyncLoading)];
        return h("div", {
          "class": classes.value,
          "on": {
            "click": onLoadClick
          }
        }, [h(Loading, {
          "attrs": {
            "loading": asyncLoading === "loading",
            "size": "small",
            "text": loadingText
          }
        })]);
      }

      if (![null, false, void 0].includes(asyncLoadingNode)) {
        return h("div", {
          "class": classes.value,
          "on": {
            "click": onLoadClick
          }
        }, [asyncLoadingNode]);
      }

      return null;
    }

    return {
      renderAsyncLoading: renderAsyncLoading
    };
  }

  function ownKeys$f(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$f(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$f(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$f(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var EditableCell = VueCompositionAPI.defineComponent({
    name: "TableEditableCell",
    props: {
      row: Object,
      rowIndex: Number,
      col: Object,
      colIndex: Number,
      oldCell: [Function, String],
      tableBaseClass: Object,
      cellEmptyContent: [Function, String],
      editable: {
        type: Boolean,
        "default": void 0
      },
      errors: {
        type: Array,
        "default": void 0
      },
      onChange: Function,
      onValidate: Function,
      onRuleChange: Function
    },
    setup: function setup(props, context) {
      var _toRefs = VueCompositionAPI.toRefs(props),
          row = _toRefs.row,
          col = _toRefs.col;

      var tableEditableCellRef = VueCompositionAPI.ref(null);
      var isEdit = VueCompositionAPI.ref(false);
      var editValue = VueCompositionAPI.ref();
      var errorList = VueCompositionAPI.ref();

      var _useGlobalIcon = useGlobalIcon({
        Edit1Icon: Edit1
      }),
          Edit1Icon = _useGlobalIcon.Edit1Icon;

      var currentRow = VueCompositionAPI.computed(function () {
        var newRow = _objectSpread$f({}, row.value);

        col.value && set_1(newRow, col.value.colKey, editValue.value);
        return newRow;
      });
      var cellNode = VueCompositionAPI.computed(function () {
        var node = renderCell({
          row: currentRow.value,
          col: _objectSpread$f(_objectSpread$f({}, col.value), {}, {
            cell: props.oldCell
          }),
          rowIndex: props.rowIndex,
          colIndex: props.colIndex
        }, context.slots, {
          cellEmptyContent: props.cellEmptyContent
        });
        return node;
      });
      var componentProps = VueCompositionAPI.computed(function () {
        var _edit$abortEditOnEven;

        var edit = col.value.edit;
        if (!edit) return {};
        var editProps = isFunction_1(edit.props) ? edit.props({
          col: col.value,
          row: row.value,
          rowIndex: props.rowIndex,
          colIndex: props.colIndex,
          editedRow: currentRow.value
        }) : _objectSpread$f({}, edit.props);
        delete editProps.onChange;
        delete editProps.value;
        (_edit$abortEditOnEven = edit.abortEditOnEvent) === null || _edit$abortEditOnEven === void 0 ? void 0 : _edit$abortEditOnEven.forEach(function (item) {
          delete editProps[item];
        });
        return editProps;
      });
      var isAbortEditOnChange = VueCompositionAPI.computed(function () {
        var _edit$abortEditOnEven2;

        var edit = col.value.edit;
        if (!edit) return false;
        return Boolean((_edit$abortEditOnEven2 = edit.abortEditOnEvent) === null || _edit$abortEditOnEven2 === void 0 ? void 0 : _edit$abortEditOnEven2.includes("onChange"));
      });

      var validateEdit = function validateEdit(trigger) {
        return new Promise(function (resolve) {
          var params = {
            result: [{
              col: props.col,
              row: props.row,
              colIndex: props.colIndex,
              rowIndex: props.rowIndex,
              errorList: [],
              value: editValue.value
            }],
            trigger: trigger
          };

          if (!col.value.edit || !col.value.edit.rules) {
            var _props$onValidate;

            (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 ? void 0 : _props$onValidate.call(props, params);
            resolve(true);
            return;
          }

          validate(editValue.value, col.value.edit.rules).then(function (result) {
            var _props$onValidate2;

            var list = result === null || result === void 0 ? void 0 : result.filter(function (t) {
              return !t.result;
            });
            params.result[0].errorList = list;
            (_props$onValidate2 = props.onValidate) === null || _props$onValidate2 === void 0 ? void 0 : _props$onValidate2.call(props, params);

            if (!list || !list.length) {
              resolve(true);
            } else {
              errorList.value = list;
              resolve(list);
            }
          });
        });
      };

      var isSame = function isSame(a, b) {
        if (_typeof$1(a) === "object" && _typeof$1(b) === "object") {
          return JSON.stringify(a) === JSON.stringify(b);
        }

        return a === b;
      };

      var updateAndSaveAbort = function updateAndSaveAbort(outsideAbortEvent) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        validateEdit("self").then(function (result) {
          if (result !== true) return;
          var oldValue = get_1(row.value, col.value.colKey);

          if (!isSame(editValue.value, oldValue)) {
            editValue.value = oldValue;
            outsideAbortEvent === null || outsideAbortEvent === void 0 ? void 0 : outsideAbortEvent.apply(void 0, args);
          }

          var timer = setTimeout(function () {
            isEdit.value = false;
            clearTimeout(timer);
          }, 0);
        });
      };

      var listeners = VueCompositionAPI.computed(function () {
        var _edit$abortEditOnEven3;

        var edit = col.value.edit;
        var isCellEditable = props.editable === void 0;
        if (!isEdit.value || !isCellEditable) return;
        if (!(edit !== null && edit !== void 0 && (_edit$abortEditOnEven3 = edit.abortEditOnEvent) !== null && _edit$abortEditOnEven3 !== void 0 && _edit$abortEditOnEven3.length)) return {};
        var tListeners = {};
        var outsideAbortEvent = edit === null || edit === void 0 ? void 0 : edit.onEdited;
        edit.abortEditOnEvent.forEach(function (itemEvent) {
          if (itemEvent === "onChange") return;
          var eventName = itemEvent.slice(2, 3).toLocaleLowerCase() + itemEvent.slice(3);

          tListeners[eventName] = function () {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }

            updateAndSaveAbort.apply(void 0, [outsideAbortEvent, {
              trigger: itemEvent,
              newRowData: currentRow.value,
              rowIndex: props.rowIndex
            }].concat(args));
          };
        });
        return tListeners;
      });

      var onEditChange = function onEditChange(val) {
        var _props$onChange, _props$onRuleChange;

        editValue.value = val;
        var params = {
          row: props.row,
          rowIndex: props.rowIndex,
          value: val,
          col: props.col,
          colIndex: props.colIndex
        };
        (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, params);
        (_props$onRuleChange = props.onRuleChange) === null || _props$onRuleChange === void 0 ? void 0 : _props$onRuleChange.call(props, params);
        var isCellEditable = props.editable === void 0;

        if (isCellEditable && isAbortEditOnChange.value) {
          var _col$value$edit;

          var outsideAbortEvent = (_col$value$edit = col.value.edit) === null || _col$value$edit === void 0 ? void 0 : _col$value$edit.onEdited;

          for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
            args[_key3 - 1] = arguments[_key3];
          }

          updateAndSaveAbort.apply(void 0, [outsideAbortEvent, {
            trigger: "onChange",
            newRowData: currentRow.value,
            rowIndex: props.rowIndex
          }].concat(args));
        }
      };

      var documentClickHandler = function documentClickHandler(e) {
        var _e$path, _tableEditableCellRef;

        if (!col.value.edit || !col.value.edit.component) return;
        if (!isEdit.value) return;
        if ((_e$path = e.path) !== null && _e$path !== void 0 && _e$path.includes((_tableEditableCellRef = tableEditableCellRef.value) === null || _tableEditableCellRef === void 0 ? void 0 : _tableEditableCellRef.$el)) return;

        for (var i = 0, len = e.path.length; i < len; i++) {
          var _node$classList, _node$classList$value;

          var node = e.path[i];

          if ((_node$classList = node.classList) !== null && _node$classList !== void 0 && (_node$classList$value = _node$classList.value) !== null && _node$classList$value !== void 0 && _node$classList$value.includes("popup__content")) {
            return;
          }
        }

        var outsideAbortEvent = col.value.edit.onEdited;
        updateAndSaveAbort(outsideAbortEvent, {
          trigger: "document",
          newRowData: currentRow.value,
          rowIndex: props.rowIndex
        });
      };

      var cellValue = VueCompositionAPI.computed(function () {
        return get_1(row.value, col.value.colKey);
      });
      VueCompositionAPI.watch(cellValue, function (cellValue2) {
        var val = cellValue2;

        if (_typeof$1(val) === "object" && val !== null) {
          val = val instanceof Array ? _toConsumableArray(val) : _objectSpread$f({}, val);
        }

        editValue.value = val;
      }, {
        immediate: true
      });
      VueCompositionAPI.watch(isEdit, function (isEdit2) {
        var isCellEditable = props.editable === void 0;
        if (!col.value.edit || !col.value.edit.component || !isCellEditable) return;

        if (isEdit2) {
          document.addEventListener("click", documentClickHandler);
        } else {
          document.removeEventListener("click", documentClickHandler);
        }
      });
      VueCompositionAPI.watch(function () {
        return props.editable;
      }, function () {
        if (props.editable === false) {
          editValue.value = cellValue.value;
        } else {
          var _props$onRuleChange2;

          (_props$onRuleChange2 = props.onRuleChange) === null || _props$onRuleChange2 === void 0 ? void 0 : _props$onRuleChange2.call(props, {
            col: col.value,
            row: row.value,
            rowIndex: props.rowIndex,
            colIndex: props.colIndex,
            value: cellValue.value
          });
        }
      }, {
        immediate: true
      });
      VueCompositionAPI.watch(function () {
        return props.errors;
      }, function () {
        errorList.value = props.errors;
      });
      return {
        editValue: editValue,
        isEdit: isEdit,
        cellNode: cellNode,
        isAbortEditOnChange: isAbortEditOnChange,
        listeners: listeners,
        componentProps: componentProps,
        tableEditableCellRef: tableEditableCellRef,
        errorList: errorList,
        onEditChange: onEditChange,
        Edit1Icon: Edit1Icon
      };
    },
    render: function render() {
      var _this = this,
          _this$col$edit2,
          _this$errorList,
          _this$errorList$,
          _this$tableBaseClass2,
          _this$errorList2,
          _this$errorList2$;

      var h = arguments[0];

      if (this.editable === void 0 && !this.isEdit || this.editable === false) {
        var _this$tableBaseClass, _this$col$edit;

        var Edit1Icon = this.Edit1Icon;
        return h("div", {
          "class": (_this$tableBaseClass = this.tableBaseClass) === null || _this$tableBaseClass === void 0 ? void 0 : _this$tableBaseClass.cellEditable,
          "on": {
            "click": function click(e) {
              _this.isEdit = true;
              e.stopPropagation();
            }
          }
        }, [this.cellNode, ((_this$col$edit = this.col.edit) === null || _this$col$edit === void 0 ? void 0 : _this$col$edit.showEditIcon) !== false && h(Edit1Icon, {
          "attrs": {
            "size": "12px"
          }
        })]);
      }

      var component = (_this$col$edit2 = this.col.edit) === null || _this$col$edit2 === void 0 ? void 0 : _this$col$edit2.component;

      if (!component) {
        log.error("Table", "edit.component is required.");
        return null;
      }

      var errorMessage = (_this$errorList = this.errorList) === null || _this$errorList === void 0 ? void 0 : (_this$errorList$ = _this$errorList[0]) === null || _this$errorList$ === void 0 ? void 0 : _this$errorList$.message;
      return h("div", {
        "class": (_this$tableBaseClass2 = this.tableBaseClass) === null || _this$tableBaseClass2 === void 0 ? void 0 : _this$tableBaseClass2.cellEditWrap,
        "on": {
          "click": function click(e) {
            e.stopPropagation();
          }
        }
      }, [h(component, helper([{
        "ref": "tableEditableCellRef",
        "attrs": {
          "status": errorMessage ? ((_this$errorList2 = this.errorList) === null || _this$errorList2 === void 0 ? void 0 : (_this$errorList2$ = _this$errorList2[0]) === null || _this$errorList2$ === void 0 ? void 0 : _this$errorList2$.type) || "error" : void 0,
          "tips": errorMessage
        }
      }, {
        "props": this.componentProps
      }, {}, {
        "on": this.listeners
      }, {
        "attrs": {
          "value": this.editValue
        },
        "on": {
          "change": this.onEditChange
        }
      }]))]);
    }
  });

  function useEditableCell(props, context) {
    var renderEditableCell = function renderEditableCell(h, p) {
      return h(EditableCell, helper([{}, {
        "props": p
      }, {
        "scopedSlots": context.slots
      }]));
    };

    return {
      renderEditableCell: renderEditableCell
    };
  }

  function ownKeys$e(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$e(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$e(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$e(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var cellRuleMap = /* @__PURE__ */new Map();
  function useRowEdit(props, context) {
    var errorListMap = VueCompositionAPI.ref({});
    var editableKeysMap = VueCompositionAPI.computed(function () {
      return getEditableKeysMap(props.editableRowKeys, props.data, props.rowKey || "id");
    });

    var getErrorListMapByErrors = function getErrorListMapByErrors(errors) {
      var errorMap = {};
      errors.forEach(function (_ref) {
        var row = _ref.row,
            col = _ref.col,
            errorList = _ref.errorList;
        var rowValue = get_1(row, props.rowKey || "id");
        var key = [rowValue, col.colKey].join("__");

        if (errorList !== null && errorList !== void 0 && errorList.length) {
          errorMap[key] = errorList;
        } else {
          delete errorMap[key];
        }
      });
      return errorMap;
    };

    var validateOneRowData = function validateOneRowData(rowValue) {
      var rowRules = cellRuleMap.get(rowValue);
      if (!rowRules) return;
      var list = rowRules.map(function (item) {
        return new Promise(function (resolve) {
          var value = item.value,
              col = item.col;

          if (!col.edit || !col.edit.rules || !col.edit.rules.length) {
            resolve(_objectSpread$e(_objectSpread$e({}, item), {}, {
              errorList: []
            }));
            return;
          }

          validate(value, col.edit.rules).then(function (r) {
            resolve(_objectSpread$e(_objectSpread$e({}, item), {}, {
              errorList: r.filter(function (t) {
                return !t.result;
              })
            }));
          });
        });
      });
      return new Promise(function (resolve, reject) {
        Promise.all(list).then(function (errors) {
          resolve({
            errors: errors.filter(function (t) {
              var _t$errorList;

              return (_t$errorList = t.errorList) === null || _t$errorList === void 0 ? void 0 : _t$errorList.length;
            }),
            errorMap: getErrorListMapByErrors(errors)
          });
        }, reject);
      });
    };

    var validateRowData = function validateRowData(rowValue) {
      return new Promise(function (resolve, reject) {
        validateOneRowData(rowValue).then(function (_ref2) {
          var _props$onRowValidate;

          var errors = _ref2.errors,
              errorMap = _ref2.errorMap;
          errorListMap.value = errorMap;
          var tTrigger = "parent";
          (_props$onRowValidate = props.onRowValidate) === null || _props$onRowValidate === void 0 ? void 0 : _props$onRowValidate.call(props, {
            trigger: tTrigger,
            result: errors
          });
          resolve({
            trigger: tTrigger,
            result: errors
          });
        }, reject);
      });
    };

    var validateTableData = function validateTableData() {
      var promiseList = [];
      var data = props.data || [];

      for (var i = 0, len = data.length; i < len; i++) {
        var rowValue = get_1(data[i], props.rowKey || "id");
        promiseList.push(validateOneRowData(rowValue));
      }

      return new Promise(function (resolve, reject) {
        Promise.all(promiseList).then(function (rList) {
          var _props$onValidate;

          var allErrorListMap = {};
          rList.forEach(function () {
            var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
              errors: [],
              errorMap: {}
            },
                errorMap = _ref3.errorMap;

            errorMap && Object.assign(allErrorListMap, errorMap);
          });
          errorListMap.value = allErrorListMap;
          (_props$onValidate = props.onValidate) === null || _props$onValidate === void 0 ? void 0 : _props$onValidate.call(props, {
            result: allErrorListMap
          });
          resolve({
            result: allErrorListMap
          });
        }, reject);
      });
    };

    var onRuleChange = function onRuleChange(context2) {
      if (props.editableRowKeys) {
        var rowValue = get_1(context2.row, props.rowKey || "id");
        var rules = cellRuleMap.get(rowValue);

        if (rules) {
          var index = rules.findIndex(function (t) {
            return t.col.colKey === context2.col.colKey;
          });

          if (index === -1) {
            rules.push(context2);
          } else {
            rules[index].value = context2.value;
          }

          cellRuleMap.set(rowValue, rules);
        } else {
          cellRuleMap.set(rowValue, [context2]);
        }
      }
    };

    var clearValidateData = function clearValidateData() {
      errorListMap.value = {};
    };

    var onPrimaryTableRowEdit = function onPrimaryTableRowEdit(params) {
      var _props$onRowEdit;

      (_props$onRowEdit = props.onRowEdit) === null || _props$onRowEdit === void 0 ? void 0 : _props$onRowEdit.call(props, params);
      context.emit("row-edit", params);
    };

    var onPrimaryTableRowValidate = function onPrimaryTableRowValidate(params) {
      var _props$onRowValidate2;

      (_props$onRowValidate2 = props.onRowValidate) === null || _props$onRowValidate2 === void 0 ? void 0 : _props$onRowValidate2.call(props, params);
      context.emit("row-validate", params);
    };

    return {
      errorListMap: errorListMap,
      editableKeysMap: editableKeysMap,
      validateTableData: validateTableData,
      validateRowData: validateRowData,
      onRuleChange: onRuleChange,
      clearValidateData: clearValidateData,
      onPrimaryTableRowEdit: onPrimaryTableRowEdit,
      onPrimaryTableRowValidate: onPrimaryTableRowValidate
    };
  }

  function ownKeys$d(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$d(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$d(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$d(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var OMIT_PROPS = ["hideSortTips", "dragSort", "defaultExpandedRowKeys", "defaultSelectedRowKeys", "columnController", "filterRow", "sortOnRowDraggable", "expandOnRowClick", "multipleSort", "expandIcon", "onChange", "onAsyncLoadingClick", "onChange", "onColumnChange", "onColumnControllerVisibleChange", "onDataChange", "onDisplayColumnsChange", "onDragSort", "onExpandChange", "onFilterChange", "onSelectChange", "onSortChange"];
  var _PrimaryTable = VueCompositionAPI.defineComponent({
    name: "TPrimaryTable",
    props: _objectSpread$d(_objectSpread$d({}, baseTableProps), primaryTableProps),
    setup: function setup(props, context) {
      var renderTNode = useTNodeJSX();

      var _toRefs = VueCompositionAPI.toRefs(props),
          columns = _toRefs.columns;

      var primaryTableRef = VueCompositionAPI.ref(null);

      var _useClassName = useClassName(),
          tableDraggableClasses = _useClassName.tableDraggableClasses,
          tableBaseClass = _useClassName.tableBaseClass,
          tableSelectedClasses = _useClassName.tableSelectedClasses;

      var _useColumnController = useColumnController(props, context),
          tDisplayColumns = _useColumnController.tDisplayColumns,
          renderColumnController = _useColumnController.renderColumnController;

      var _useRowExpand = useRowExpand(props, context),
          showExpandedRow = _useRowExpand.showExpandedRow,
          showExpandIconColumn = _useRowExpand.showExpandIconColumn,
          getExpandColumn = _useRowExpand.getExpandColumn,
          renderExpandedRow = _useRowExpand.renderExpandedRow,
          onInnerExpandRowClick = _useRowExpand.onInnerExpandRowClick;

      var _useSorter = useSorter(props, context),
          renderSortIcon = _useSorter.renderSortIcon;

      var _useRowSelect = useRowSelect(props, tableSelectedClasses),
          formatToRowSelectColumn = _useRowSelect.formatToRowSelectColumn,
          selectedRowClassNames = _useRowSelect.selectedRowClassNames;

      var _useFilter = useFilter(props, context),
          hasEmptyCondition = _useFilter.hasEmptyCondition,
          isTableOverflowHidden = _useFilter.isTableOverflowHidden,
          renderFilterIcon = _useFilter.renderFilterIcon,
          renderFirstFilterRow = _useFilter.renderFirstFilterRow,
          setFilterPrimaryTableRef = _useFilter.setFilterPrimaryTableRef;

      var _useDragSort = useDragSort(props, context),
          isRowHandlerDraggable = _useDragSort.isRowHandlerDraggable,
          isRowDraggable = _useDragSort.isRowDraggable,
          isColDraggable = _useDragSort.isColDraggable,
          setDragSortPrimaryTableRef = _useDragSort.setDragSortPrimaryTableRef,
          setDragSortColumns = _useDragSort.setDragSortColumns;

      var _useTableHeader = useTableHeader(props),
          renderTitleWidthIcon = _useTableHeader.renderTitleWidthIcon;

      var _useAsyncLoading = useAsyncLoading(props, context),
          renderAsyncLoading = _useAsyncLoading.renderAsyncLoading;

      var _useEditableCell = useEditableCell(props, context),
          renderEditableCell = _useEditableCell.renderEditableCell;

      var _useEditableRow = useRowEdit(props, context),
          errorListMap = _useEditableRow.errorListMap,
          editableKeysMap = _useEditableRow.editableKeysMap,
          validateRowData = _useEditableRow.validateRowData,
          validateTableData = _useEditableRow.validateTableData,
          onRuleChange = _useEditableRow.onRuleChange,
          clearValidateData = _useEditableRow.clearValidateData,
          onPrimaryTableRowValidate = _useEditableRow.onPrimaryTableRowValidate,
          onPrimaryTableRowEdit = _useEditableRow.onPrimaryTableRowEdit;

      var primaryTableClasses = VueCompositionAPI.computed(function () {
        var _ref;

        return _ref = {}, _defineProperty$3(_ref, tableDraggableClasses.colDraggable, isColDraggable.value), _defineProperty$3(_ref, tableDraggableClasses.rowHandlerDraggable, isRowHandlerDraggable.value), _defineProperty$3(_ref, tableDraggableClasses.rowDraggable, isRowDraggable.value), _defineProperty$3(_ref, tableBaseClass.overflowVisible, isTableOverflowHidden.value === false), _defineProperty$3(_ref, tableBaseClass.tableRowEdit, props.editableRowKeys), _ref;
      });
      var tRowClassNames = VueCompositionAPI.computed(function () {
        var tClassNames = [props.rowClassName, selectedRowClassNames.value];
        return tClassNames.filter(function (v) {
          return v;
        });
      });
      var tRowAttributes = VueCompositionAPI.computed(function () {
        var tAttributes = [props.rowAttributes];

        if (isRowHandlerDraggable.value || isRowDraggable.value) {
          tAttributes.push(function (_ref2) {
            var row = _ref2.row;
            return {
              "data-id": get_1(row, props.rowKey || "id")
            };
          });
        }

        return tAttributes.filter(function (v) {
          return v;
        });
      });
      VueCompositionAPI.onMounted(function () {
        setFilterPrimaryTableRef(primaryTableRef.value);
        setDragSortPrimaryTableRef(primaryTableRef.value);
        setDragSortColumns(props.columns);
      });
      VueCompositionAPI.watch(primaryTableRef, function () {
        setFilterPrimaryTableRef(primaryTableRef.value);
        setDragSortPrimaryTableRef(primaryTableRef.value);
      });

      var getColumns = function getColumns(columns2) {
        var arr = [];

        var _loop = function _loop(i, len) {
          var _item$children, _tDisplayColumns$valu, _item$edit, _item$children2, _item$children3;

          var item = _objectSpread$d({}, columns2[i]);

          var isDisplayColumn = ((_item$children = item.children) === null || _item$children === void 0 ? void 0 : _item$children.length) || ((_tDisplayColumns$valu = tDisplayColumns.value) === null || _tDisplayColumns$valu === void 0 ? void 0 : _tDisplayColumns$valu.includes(item.colKey));
          if (!isDisplayColumn && props.columnController) return "continue";
          item = formatToRowSelectColumn(item);

          if (item.sorter || item.filter) {
            var titleContent = renderTitle(VueCompositionAPI.h, context.slots, item, i);
            var _item = item,
                ellipsisTitle = _item.ellipsisTitle;

            item.title = function (h2, p) {
              var _primaryTableRef$valu, _primaryTableRef$valu2;

              var sortIcon = item.sorter ? renderSortIcon(h2, p) : null;
              var filterIcon = item.filter ? renderFilterIcon(h2, p) : null;
              var attach = (_primaryTableRef$valu = primaryTableRef.value) === null || _primaryTableRef$valu === void 0 ? void 0 : (_primaryTableRef$valu2 = _primaryTableRef$valu.$refs) === null || _primaryTableRef$valu2 === void 0 ? void 0 : _primaryTableRef$valu2.tableContentRef;
              return renderTitleWidthIcon(h2, [titleContent, sortIcon, filterIcon], p.col, p.colIndex, ellipsisTitle, attach);
            };

            item.ellipsisTitle = false;
          }

          if ((_item$edit = item.edit) !== null && _item$edit !== void 0 && _item$edit.component) {
            var oldCell = item.cell;

            item.cell = function (h2, p) {
              var cellProps = _objectSpread$d(_objectSpread$d({}, p), {}, {
                oldCell: oldCell,
                tableBaseClass: tableBaseClass,
                cellEmptyContent: props.cellEmptyContent,
                onChange: onPrimaryTableRowEdit,
                onValidate: onPrimaryTableRowValidate,
                onRuleChange: onRuleChange
              });

              if (props.editableRowKeys) {
                var _errorListMap$value;

                var rowValue = get_1(p.row, props.rowKey || "id");
                cellProps.editable = editableKeysMap.value[rowValue] || false;
                var key = [rowValue, p.col.colKey].join("__");
                var errorList = (_errorListMap$value = errorListMap.value) === null || _errorListMap$value === void 0 ? void 0 : _errorListMap$value[key];
                errorList && (cellProps.errors = errorList);
              }

              return renderEditableCell(h2, cellProps);
            };
          }

          if ((_item$children2 = item.children) !== null && _item$children2 !== void 0 && _item$children2.length) {
            item.children = getColumns(item.children);
          }

          if (!item.children || (_item$children3 = item.children) !== null && _item$children3 !== void 0 && _item$children3.length) {
            arr.push(item);
          }
        };

        for (var i = 0, len = columns2.length; i < len; i++) {
          var _ret = _loop(i);

          if (_ret === "continue") continue;
        }

        return arr;
      };

      var tColumns = VueCompositionAPI.computed(function () {
        var cols = getColumns(columns.value);

        if (showExpandIconColumn.value) {
          cols.unshift(getExpandColumn(VueCompositionAPI.h));
        }

        return cols;
      });

      var onInnerPageChange = function onInnerPageChange(pageInfo, newData) {
        var _props$onPageChange, _props$onChange;

        (_props$onPageChange = props.onPageChange) === null || _props$onPageChange === void 0 ? void 0 : _props$onPageChange.call(props, pageInfo, newData);
        context.emit("page-change", pageInfo, newData);
        var changeParams = [{
          pagination: pageInfo
        }, {
          trigger: "pagination",
          currentData: newData
        }];
        (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call.apply(_props$onChange, [props].concat(changeParams));
        context.emit.apply(context, ["change"].concat(changeParams));
      };

      return {
        tColumns: tColumns,
        showExpandedRow: showExpandedRow,
        tRowClassNames: tRowClassNames,
        hasEmptyCondition: hasEmptyCondition,
        primaryTableRef: primaryTableRef,
        tRowAttributes: tRowAttributes,
        primaryTableClasses: primaryTableClasses,
        errorListMap: errorListMap,
        validateRowData: validateRowData,
        validateTableData: validateTableData,
        clearValidateData: clearValidateData,
        renderTNode: renderTNode,
        renderColumnController: renderColumnController,
        renderExpandedRow: renderExpandedRow,
        onInnerExpandRowClick: onInnerExpandRowClick,
        renderFirstFilterRow: renderFirstFilterRow,
        renderAsyncLoading: renderAsyncLoading,
        onInnerPageChange: onInnerPageChange,
        setDragSortColumns: setDragSortColumns
      };
    },
    methods: {
      getListener: function getListener() {
        var _this = this;

        var listener = {};
        BASE_TABLE_ALL_EVENTS.forEach(function (key) {
          listener[key] = function () {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            _this.$emit.apply(_this, [key].concat(args));
          };
        });
        return listener;
      },
      formatNode: function formatNode(api, renderInnerNode, condition, extra) {
        var h = this.$createElement;
        if (!condition) return this[api];
        var innerNode = renderInnerNode(h);
        var propsNode = this.renderTNode(api);
        if (innerNode && !propsNode) return function () {
          return innerNode;
        };
        if (propsNode && !innerNode) return function () {
          return propsNode;
        };

        if (innerNode && propsNode) {
          return function () {
            return extra !== null && extra !== void 0 && extra.reverse ? h("div", [innerNode, propsNode]) : h("div", [propsNode, innerNode]);
          };
        }

        return null;
      }
    },
    render: function render() {
      var h = arguments[0];
      var isColumnController = !!(this.columnController && Object.keys(this.columnController).length);
      var placement = isColumnController ? this.columnController.placement || "top-right" : "";
      var isBottomController = isColumnController && (placement === null || placement === void 0 ? void 0 : placement.indexOf("bottom")) !== -1;
      var topContent = this.formatNode("topContent", this.renderColumnController, isColumnController && !isBottomController);
      var bottomContent = this.formatNode("bottomContent", this.renderColumnController, isBottomController, {
        reverse: true
      });
      var firstFullRow = this.formatNode("firstFullRow", this.renderFirstFilterRow, !this.hasEmptyCondition);
      var lastFullRow = this.formatNode("lastFullRow", this.renderAsyncLoading, !!this.asyncLoading);

      var props = _objectSpread$d(_objectSpread$d({}, omit_1(this.$props, OMIT_PROPS)), {}, {
        rowClassName: this.tRowClassNames,
        rowAttributes: this.tRowAttributes,
        columns: this.tColumns,
        topContent: topContent,
        bottomContent: bottomContent,
        firstFullRow: firstFullRow,
        lastFullRow: lastFullRow,
        renderExpandedRow: this.showExpandedRow ? this.renderExpandedRow : void 0
      });

      var on = _objectSpread$d(_objectSpread$d({}, this.getListener()), {}, {
        "page-change": this.onInnerPageChange
      });

      if (this.expandOnRowClick) {
        on["row-click"] = this.onInnerExpandRowClick;
      }

      on.LeafColumnsChange = this.setDragSortColumns;
      return h(_BaseTable, helper([{
        "ref": "primaryTableRef",
        "scopedSlots": this.$scopedSlots
      }, {
        "props": props
      }, {}, {
        "on": on
      }, {}, this.$attrs, {
        "class": this.primaryTableClasses
      }]));
    }
  });

  var enhancedTableProps = {
    beforeDragSort: {
      type: Function
    },
    tree: {
      type: Object
    },
    treeExpandAndFoldIcon: {
      type: Function
    },
    onAbnormalDragSort: Function,
    onTreeExpandChange: Function
  };

  function ownKeys$c(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$c(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$c(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL = {
    code: 1001,
    reason: "The same level of rows can not be swapped."
  };

  var TableTreeStore = /*#__PURE__*/function () {
    function TableTreeStore() {
      _classCallCheck(this, TableTreeStore);

      _defineProperty$3(this, "treeDataMap", /* @__PURE__ */new Map());

      _defineProperty$3(this, "expandAllRowIndex", void 0);

      this.treeDataMap = /* @__PURE__ */new Map();
    }

    _createClass(TableTreeStore, [{
      key: "initialTreeStore",
      value: function initialTreeStore(dataSource, columns, keys) {
        var _this$treeDataMap;

        (_this$treeDataMap = this.treeDataMap) === null || _this$treeDataMap === void 0 ? void 0 : _this$treeDataMap.clear();
        this.initialTreeDataMap(this.treeDataMap, dataSource, columns[0], keys);
      }
    }, {
      key: "getAllUniqueKeys",
      value: function getAllUniqueKeys(data, keys) {
        var arr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

        for (var i = 0, len = data.length; i < len; i++) {
          var item = data[i];
          arr.push(get_1(item, keys.rowKey));
          var children = get_1(item, keys.childrenKey);

          if (children !== null && children !== void 0 && children.length) {
            this.getAllUniqueKeys(children, keys, arr);
          }
        }

        return arr;
      }
    }, {
      key: "toggleExpandData",
      value: function toggleExpandData(p, dataSource, keys) {
        if (!p) {
          log.error("EnhancedTable", "the node you want to toggleExpand doest not exist in `data`");
          return dataSource;
        }

        var rowValue = get_1(p.row, keys.rowKey);

        if (rowValue === void 0) {
          log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
          return [];
        }

        var childrenNodes = get_1(p.row, keys.childrenKey);
        if (childrenNodes === true) return dataSource;
        var r = this.treeDataMap.get(rowValue);
        r.rowIndex = p.rowIndex;
        r.expanded = !r.expanded;
        this.treeDataMap.set(rowValue, r);
        return this.updateExpandRow(r, dataSource, keys);
      }
    }, {
      key: "updateExpandRow",
      value: function updateExpandRow(changeRow, dataSource, keys) {
        var row = changeRow.row,
            rowIndex = changeRow.rowIndex,
            expanded = changeRow.expanded;
        var treeDataMap = this.treeDataMap;
        var childrenNodes = get_1(row, keys.childrenKey);
        if (!row || !childrenNodes) return;

        if (expanded) {
          updateChildrenRowState(treeDataMap, changeRow, expanded, keys);
          updateRowExpandLength(treeDataMap, row, childrenNodes.length, "expand", keys);
          dataSource.splice.apply(dataSource, [rowIndex + 1, 0].concat(childrenNodes));
        } else {
          updateChildrenRowState(treeDataMap, changeRow, expanded, keys);
          var len = changeRow.expandChildrenLength || childrenNodes.length;
          updateRowExpandLength(treeDataMap, row, -1 * len, "fold", keys);
          dataSource.splice(rowIndex + 1, len);
        }

        updateRowIndex(treeDataMap, dataSource, {
          rowKey: keys.rowKey,
          minRowIndex: rowIndex + 1
        });
        return dataSource;
      }
    }, {
      key: "getData",
      value: function getData(key) {
        return this.treeDataMap.get(key);
      }
    }, {
      key: "updateData",
      value: function updateData(rowValue, newRowData, dataSource, keys) {
        var newRowValue = get_1(newRowData, keys.rowKey);
        var rowState = this.treeDataMap.get(rowValue);

        if (!rowState || rowState.rowIndex === -1) {
          updateRowData(dataSource, rowValue, newRowData, {
            rowKey: keys.rowKey,
            childrenKey: keys.childrenKey
          });
          return;
        }

        if (get_1(newRowData, keys.childrenKey) === true) {
          var oldChildren = get_1(rowState.row, keys.childrenKey);

          if (oldChildren !== null && oldChildren !== void 0 && oldChildren.length) {
            for (var i = 0, len = oldChildren.length; i < len; i++) {
              var rowValue2 = get_1(oldChildren[i], keys.rowKey);
              var state = this.treeDataMap.get(rowValue2);
              state && this.treeDataMap["delete"](rowValue2);
            }
          }
        }

        var currentRowIndex = rowState.rowIndex;
        rowState.row = newRowData;
        rowState.id = newRowValue;

        if (rowState.parent) {
          var siblings = get_1(rowState.parent.row, keys.childrenKey);
          var index = siblings.findIndex(function (item) {
            return get_1(item, keys.rowKey) === rowValue;
          });
          siblings[index] = newRowData;
        }

        this.treeDataMap.set(newRowValue, rowState);

        if (rowValue !== newRowValue) {
          this.treeDataMap["delete"](rowValue);
        }

        return currentRowIndex;
      }
    }, {
      key: "remove",
      value: function remove(key, dataSource, keys) {
        var r = this.treeDataMap.get(key);

        if (r && r.rowIndex >= 0) {
          var removeNumber = (r.expandChildrenLength || 0) + 1;
          dataSource.splice(r.rowIndex, removeNumber);

          if (r.parent) {
            var siblings = get_1(r.parent.row, keys.childrenKey);
            var index = siblings.findIndex(function (item) {
              return get_1(item, keys.rowKey) === key;
            });
            siblings.splice(index, 1);
            updateRowExpandLength(this.treeDataMap, r.parent.row, -1 * removeNumber, "delete", keys);
          }

          this.treeDataMap["delete"](key);
          updateRowIndex(this.treeDataMap, dataSource, {
            minRowIndex: r.rowIndex,
            rowKey: keys.rowKey,
            type: "remove"
          });
        } else {
          console.warn("TDesign Table Warn: Do not remove this node, which is not appeared.");
        }

        return dataSource;
      }
    }, {
      key: "appendTo",
      value: function appendTo(rowValue, newData, dataSource, keys) {
        var state = this.treeDataMap.get(rowValue);
        if (!this.validateDataExist(state, rowValue)) return dataSource;
        var children = get_1(state.row, keys.childrenKey);
        var isShowNewNode = state.expanded || !(children !== null && children !== void 0 && children.length);
        var tmpData = newData instanceof Array ? newData : [newData];
        var newChildrenData = [];
        var firstNewChildrenIndex = -1;

        for (var i = 0, len = tmpData.length; i < len; i++) {
          var oneData = tmpData[i];
          var newRowValue = get_1(oneData, keys.rowKey);
          var mapState = this.treeDataMap.get(newRowValue);

          if (!this.validateDataDoubleExist(mapState, newRowValue)) {
            log.warn("Table", "Duplicated Data `".concat(newRowValue, "` has been removed."));
          } else {
            var rowIndex = isShowNewNode ? state.rowIndex + (state.expandChildrenLength || 0) + (i + 1) : -1;

            if (i === 0) {
              firstNewChildrenIndex = rowIndex;
            }

            var newState = {
              id: newRowValue,
              row: oneData,
              rowIndex: rowIndex,
              level: state.level + 1,
              expanded: false,
              expandChildrenLength: 0,
              disabled: false,
              path: _toConsumableArray(state.path),
              parent: state
            };
            newState.path = newState.path.concat(newState);
            newChildrenData.push(oneData);
            this.treeDataMap.set(newRowValue, newState);
          }
        }

        if (!newChildrenData.length) return dataSource;

        if (children !== null && children !== void 0 && children.length) {
          state.row[keys.childrenKey] = state.row[keys.childrenKey].concat(newChildrenData);
        } else {
          state.row[keys.childrenKey] = newChildrenData;
          state.expanded = true;
        }

        if (isShowNewNode) {
          dataSource.splice.apply(dataSource, [firstNewChildrenIndex, 0].concat(newChildrenData));
          var newChildrenCount = newChildrenData.length || 1;
          updateRowExpandLength(this.treeDataMap, state.row, newChildrenCount, "insert", {
            rowKey: keys.rowKey,
            childrenKey: keys.childrenKey
          });
          updateRowIndex(this.treeDataMap, dataSource, {
            minRowIndex: firstNewChildrenIndex + newChildrenData.length - 1,
            rowKey: keys.rowKey,
            type: "add",
            count: 1
          });
        }

        return dataSource;
      }
    }, {
      key: "appendToRoot",
      value: function appendToRoot(newData, dataSource, keys) {
        var newDataSource = dataSource.concat(newData);
        var tmpNewData = newData instanceof Array ? newData : [newData];
        var dataSourceLen = dataSource.length;

        for (var i = 0, len = tmpNewData.length; i < len; i++) {
          var rowValue = get_1(tmpNewData[i], keys.rowKey);

          if (!rowValue) {
            log.error("Table", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
            continue;
          }

          var state = {
            id: rowValue,
            row: tmpNewData[i],
            rowIndex: dataSourceLen + i,
            level: 0,
            expanded: false,
            expandChildrenLength: 0,
            disabled: false
          };
          state.path = [state];
          this.treeDataMap.set(rowValue, state);
        }

        return newDataSource;
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(rowValue, newData, dataSource, keys) {
        return this.insert(rowValue, newData, dataSource, keys, "after");
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(rowValue, newData, dataSource, keys) {
        return this.insert(rowValue, newData, dataSource, keys, "before");
      }
    }, {
      key: "insert",
      value: function insert(rowValue, newData, dataSource, keys, type) {
        var state = this.treeDataMap.get(rowValue);
        if (!this.validateDataExist(state, rowValue)) return dataSource;
        var newRowValue = get_1(newData, keys.rowKey);
        var mapState = this.treeDataMap.get(newRowValue);
        if (!this.validateDataDoubleExist(mapState, newRowValue)) return dataSource;
        var rowIndex = type === "after" ? state.rowIndex + 1 : state.rowIndex;
        var newState = {
          id: newRowValue,
          row: newData,
          rowIndex: rowIndex,
          level: state.level,
          expanded: false,
          expandChildrenLength: 0,
          disabled: false,
          path: state.path.slice(0, -1),
          parent: state.parent
        };
        newState.path = newState.path.concat(newState);
        var dataIndex = type === "after" ? state.rowIndex + (state.expandChildrenLength + 1) : state.rowIndex;
        dataSource.splice(dataIndex, 0, newData);
        var distance = type === "after" ? 1 : 0;

        if (state.parent) {
          var childrenIndex = state.parent.row[keys.childrenKey].findIndex(function (t) {
            return rowValue === get_1(t, keys.rowKey);
          });
          state.parent.row[keys.childrenKey].splice(childrenIndex + distance, 0, newData);
          updateRowExpandLength(this.treeDataMap, state.parent.row, 1, "insert", keys);
        }

        this.treeDataMap.set(newRowValue, newState);
        updateRowIndex(this.treeDataMap, dataSource, {
          rowKey: keys.rowKey,
          minRowIndex: state.rowIndex + 1,
          type: "add"
        });
        return dataSource;
      }
    }, {
      key: "swapData",
      value: function swapData(dataSource, params, keys) {
        var startIndex = params.currentIndex;
        var endIndex = params.targetIndex;
        if (startIndex === endIndex) return {
          dataSource: dataSource,
          result: true
        };
        var startRowValue = get_1(params.current, keys.rowKey);
        var endRowValue = get_1(params.target, keys.rowKey);
        var startState = this.treeDataMap.get(startRowValue);
        var endState = this.treeDataMap.get(endRowValue);

        if (startState.level !== endState.level) {
          return {
            dataSource: dataSource,
            result: false,
            code: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.code,
            reason: TABLE_TREE_ERROR_CODE_NOT_SAME_LEVEL.reason
          };
        }

        var startLastIndex = startIndex + startState.expandChildrenLength + 1;
        var endLastIndex = endIndex + endState.expandChildrenLength + 1;
        var startRowList = dataSource.slice(startIndex, startLastIndex);
        var endRowList = dataSource.slice(endIndex, endLastIndex);

        if (startIndex > endIndex) {
          var middleRowList = dataSource.slice(endLastIndex, startIndex);
          var allSwapList = startRowList.concat(endRowList, middleRowList);
          dataSource.splice(endIndex, allSwapList.length);
          dataSource.splice.apply(dataSource, [endIndex, 0].concat(_toConsumableArray(allSwapList)));
          updateRowIndex(this.treeDataMap, dataSource, {
            rowKey: keys.rowKey,
            minRowIndex: endIndex,
            maxRowIndex: startLastIndex
          });
        } else {
          var _middleRowList = dataSource.slice(startLastIndex, endIndex);

          var _allSwapList = _middleRowList.concat(endRowList, startRowList);

          dataSource.splice(startIndex, _allSwapList.length);
          dataSource.splice.apply(dataSource, [startIndex, 0].concat(_toConsumableArray(_allSwapList)));
          updateRowIndex(this.treeDataMap, dataSource, {
            rowKey: keys.rowKey,
            minRowIndex: startIndex,
            maxRowIndex: endLastIndex
          });
        }

        if (startState.parent) {
          var children = startState.parent.row[keys.childrenKey];
          var count = 0;
          var targetIndex = -1;
          var currentIndex = -1;

          for (var i = 0, len = children.length; i < len; i++) {
            if (get_1(children[i], keys.rowKey) === startRowValue) {
              targetIndex = i;
              count += 1;
            }

            if (get_1(children[i], keys.rowKey) === endRowValue) {
              currentIndex = i;
              count += 1;
            }

            if (count >= 2) break;
          }

          children[targetIndex] = params.target;
          children[currentIndex] = params.current;
        }

        return {
          dataSource: dataSource,
          result: true
        };
      }
    }, {
      key: "expandAll",
      value: function expandAll(dataSource, keys) {
        var _this = this;

        this.expandAllRowIndex = 0;

        var expandLoop = function expandLoop(dataSource2, keys2) {
          var newData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
          var parentExpanded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
          var parent = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

          for (var i = 0, len = dataSource2.length; i < len; i++) {
            var item = dataSource2[i];
            var rowValue = get_1(item, keys2.rowKey);

            var state = _this.treeDataMap.get(rowValue);

            var children = get_1(item, keys2.childrenKey);
            var originalExpanded = state.expanded;
            state.rowIndex = _this.expandAllRowIndex;

            if (children !== true && children !== null && children !== void 0 && children.length) {
              state.expanded = true;
            }

            state.expandChildrenLength = (children === null || children === void 0 ? void 0 : children.length) || 0;
            _this.expandAllRowIndex += 1;

            if (!parentExpanded) {
              newData.push(item);
            }

            _this.treeDataMap.set(rowValue, state);

            if (children !== null && children !== void 0 && children.length && !originalExpanded) {
              var tmpParent = parent;

              while ((_tmpParent = tmpParent) !== null && _tmpParent !== void 0 && _tmpParent.row) {
                var _tmpParent;

                tmpParent.expandChildrenLength += children.length;

                _this.treeDataMap.set(tmpParent.id, tmpParent);

                tmpParent = tmpParent.parent;
              }

              expandLoop(children, keys2, newData, originalExpanded, state);
            }
          }

          return newData;
        };

        return expandLoop(dataSource, keys);
      }
    }, {
      key: "foldAll",
      value: function foldAll(dataSource, keys) {
        var newData = [];

        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get_1(item, keys.rowKey);
          var state = this.treeDataMap.get(rowValue);
          state.rowIndex = state.level === 0 ? i : -1;
          state.expanded = false;
          state.expandChildrenLength = 0;

          if (state.level === 0) {
            newData.push(item);
          }

          var children = get_1(item, keys.childrenKey);

          if (children !== null && children !== void 0 && children.length) {
            this.foldAll(children, keys);
          }
        }

        return newData;
      }
    }, {
      key: "getTreeNode",
      value: function getTreeNode(dataSource, keys) {
        var treeData = [];

        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get_1(item, keys.rowKey);
          var state = this.treeDataMap.get(rowValue);

          if (state.level === 0) {
            treeData.push(item);
          }
        }

        return treeData;
      }
    }, {
      key: "initialTreeDataMap",
      value: function initialTreeDataMap(treeDataMap, dataSource, column, keys) {
        var level = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var parent = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;

        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get_1(item, keys.rowKey);

          if (rowValue === void 0) {
            log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
            return;
          }

          var children = get_1(item, keys.childrenKey);
          var state = {
            id: rowValue,
            row: item,
            rowIndex: level === 0 ? i : -1,
            level: level,
            expanded: false,
            expandChildrenLength: 0,
            disabled: isRowSelectedDisabled(column, item, i),
            parent: parent
          };
          state.path = parent ? parent.path.concat(state) : [state];
          treeDataMap.set(rowValue, state);

          if (children !== null && children !== void 0 && children.length) {
            this.initialTreeDataMap(treeDataMap, children, column, keys, level + 1, state);
          }
        }
      }
    }, {
      key: "updateDisabledState",
      value: function updateDisabledState(dataSource, column, keys) {
        for (var i = 0, len = dataSource.length; i < len; i++) {
          var item = dataSource[i];
          var rowValue = get_1(item, keys.rowKey);

          if (rowValue === void 0) {
            log.error("EnhancedTable", "`rowKey` could be wrong, can not get rowValue from `data` by `rowKey`.");
            return;
          }

          var state = this.treeDataMap.get(rowValue);
          state.disabled = isRowSelectedDisabled(column, item, i);
          this.treeDataMap.set(rowValue, state);
          var children = get_1(item, keys.childrenKey);

          if (children !== null && children !== void 0 && children.length) {
            this.updateDisabledState(children, column, keys);
          }
        }
      }
    }, {
      key: "validateDataExist",
      value: function validateDataExist(state, rowValue) {
        if (!state) {
          console.warn("TDesign Table Warn: ".concat(rowValue, " does not exist."));
          return false;
        }

        return true;
      }
    }, {
      key: "validateDataDoubleExist",
      value: function validateDataDoubleExist(state, rowValue) {
        if (state) {
          console.warn("TDesign Table Warn: Duplicated Key. ".concat(rowValue, " already exists."));
          return false;
        }

        return true;
      }
    }]);

    return TableTreeStore;
  }();
  function updateRowExpandLength(treeDataMap, row, distance, type, keys) {
    var tmp = row;

    while (tmp) {
      var _state$parent;

      var state = treeDataMap.get(get_1(tmp, keys.rowKey));
      var expandLen = (state.expandChildrenLength || 0) + distance;
      state.expandChildrenLength = Math.max(0, expandLen);
      tmp = state === null || state === void 0 ? void 0 : (_state$parent = state.parent) === null || _state$parent === void 0 ? void 0 : _state$parent.row;
    }

    if (type === "fold") {
      clearRowExpandLength(treeDataMap, row, keys);
    }
  }
  function clearRowExpandLength(treeDataMap, row, keys) {
    var children = get_1(row, keys.childrenKey);

    if (children !== null && children !== void 0 && children.length) {
      children.forEach(function (item) {
        var state = treeDataMap.get(get_1(item, keys.rowKey));
        if (!state) return;
        state.expandChildrenLength = 0;
        clearRowExpandLength(treeDataMap, state.row, keys);
      });
    }
  }
  function updateChildrenRowState(treeDataMap, rowState, expanded, keys) {
    var row = rowState.row,
        rowIndex = rowState.rowIndex;
    var childrenNodes = get_1(row, keys.childrenKey);
    childrenNodes.forEach(function (item, kidRowIndex) {
      var rowValue = get_1(item, keys.rowKey);
      var index = expanded ? rowIndex + 1 + kidRowIndex : -1;
      var curState = treeDataMap.get(rowValue);

      var newState = _objectSpread$c(_objectSpread$c({}, curState), {}, {
        row: item,
        rowIndex: index,
        expanded: false,
        parent: rowState
      });

      treeDataMap.set(rowValue, newState);

      if (!expanded) {
        var children = get_1(item, keys.childrenKey);

        if (children !== null && children !== void 0 && children.length) {
          updateChildrenRowState(treeDataMap, _objectSpread$c(_objectSpread$c({}, newState), {}, {
            rowIndex: -1,
            expanded: false
          }), expanded, keys);
        }
      }
    });
  }
  function updateRowData(data, key, newData, keys) {
    for (var i = 0, len = data.length; i < len; i++) {
      var item = data[i];

      if (get_1(item, keys.rowKey) === key) {
        data[i] = newData;
        return;
      }

      var children = get_1(item, keys.childrenKey) || [];

      if (children !== null && children !== void 0 && children.length) {
        updateRowData(children, key, newData, keys);
      }
    }
  }
  function updateRowIndex(treeDataMap, dataSource, extra) {
    var start = extra.minRowIndex || 0;
    var end = extra.maxRowIndex || dataSource.length;

    for (var rowIndex = start; rowIndex < end; rowIndex++) {
      var item = dataSource[rowIndex];
      var state = treeDataMap.get(get_1(item, extra.rowKey));

      if (!state) {
        log.warn("Table", "tree map went wrong");
      }

      state.rowIndex = rowIndex + ((extra === null || extra === void 0 ? void 0 : extra.count) || 1) - 1;
    }
  }

  function ownKeys$b(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$b(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$b(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function useTreeData(props, context) {
    var _toRefs = VueCompositionAPI.toRefs(props),
        data = _toRefs.data,
        columns = _toRefs.columns;

    var _useConfig = useConfig("table"),
        t = _useConfig.t,
        global = _useConfig.global;

    var _useGlobalIcon = useGlobalIcon({
      AddRectangleIcon: AddRectangle,
      MinusRectangleIcon: MinusRectangle
    }),
        AddRectangleIcon = _useGlobalIcon.AddRectangleIcon,
        MinusRectangleIcon = _useGlobalIcon.MinusRectangleIcon;

    var store = VueCompositionAPI.ref(new TableTreeStore());
    var treeNodeCol = VueCompositionAPI.ref();
    var dataSource = VueCompositionAPI.ref([]);

    var _useClassName = useClassName(),
        tableTreeClasses = _useClassName.tableTreeClasses;

    var renderTNode = useTNodeDefault();
    var rowDataKeys = VueCompositionAPI.computed(function () {
      var _props$tree;

      return {
        rowKey: props.rowKey || "id",
        childrenKey: ((_props$tree = props.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.childrenKey) || "children"
      };
    });
    var checkedColumn = VueCompositionAPI.computed(function () {
      return columns.value.find(function (col) {
        return col.colKey === "row-select";
      });
    });
    VueCompositionAPI.watch(checkedColumn, function (column) {
      if (!store.value || !checkedColumn.value) return;
      store.value.updateDisabledState(dataSource.value, column, rowDataKeys.value);
    });

    function getFoldIcon(h, context2) {
      var params = _objectSpread$b(_objectSpread$b({}, context2), {}, {
        type: "fold"
      });

      var defaultFoldIcon = t(global.value.treeExpandAndFoldIcon, h, params) || h(MinusRectangleIcon);
      return renderTNode("treeExpandAndFoldIcon", {
        defaultNode: defaultFoldIcon,
        params: params
      });
    }

    function getExpandIcon(h, context2) {
      var params = _objectSpread$b(_objectSpread$b({}, context2), {}, {
        type: "expand"
      });

      var defaultExpandIcon = t(global.value.treeExpandAndFoldIcon, h, params) || h(AddRectangleIcon);
      return renderTNode("treeExpandAndFoldIcon", {
        defaultNode: defaultExpandIcon,
        params: params
      });
    }

    var uniqueKeys = VueCompositionAPI.computed(function () {
      var _store$value, _store$value$getAllUn;

      return ((_store$value = store.value) === null || _store$value === void 0 ? void 0 : (_store$value$getAllUn = _store$value.getAllUniqueKeys(data.value, rowDataKeys.value)) === null || _store$value$getAllUn === void 0 ? void 0 : _store$value$getAllUn.join()) || "";
    });
    VueCompositionAPI.watch([uniqueKeys], function () {
      if (!data.value) return [];

      if (!props.tree) {
        dataSource.value = data.value;
        return;
      }

      resetData(data.value);
    }, {
      immediate: true
    });
    VueCompositionAPI.onUnmounted(function () {
      var _store$value$treeData;

      if (!props.tree) return;
      (_store$value$treeData = store.value.treeDataMap) === null || _store$value$treeData === void 0 ? void 0 : _store$value$treeData.clear();
      store.value = null;
    });
    VueCompositionAPI.watch([columns], function () {
      treeNodeCol.value = getTreeNodeColumnCol();
    }, {
      immediate: true
    });

    function resetData(data2) {
      var _props$tree2;

      var newVal = cloneDeep_1(data2);
      store.value.initialTreeStore(newVal, props.columns, rowDataKeys.value);

      if ((_props$tree2 = props.tree) !== null && _props$tree2 !== void 0 && _props$tree2.defaultExpandAll) {
        newVal = store.value.expandAll(newVal, rowDataKeys.value);
      }

      dataSource.value = newVal;
    }

    function getTreeNodeStyle(level) {
      var _props$tree3, _props$tree4;

      if (level === void 0) return;
      var indent = ((_props$tree3 = props.tree) === null || _props$tree3 === void 0 ? void 0 : _props$tree3.indent) === void 0 ? 24 : (_props$tree4 = props.tree) === null || _props$tree4 === void 0 ? void 0 : _props$tree4.indent;
      return indent ? {
        paddingLeft: "".concat(level * indent || 1, "px")
      } : {};
    }

    function toggleExpandData(p, trigger) {
      var _store$value2, _store$value2$treeDat, _props$onTreeExpandCh;

      dataSource.value = store.value.toggleExpandData(p, dataSource.value, rowDataKeys.value);
      var rowValue = get_1(p.row, rowDataKeys.value.rowKey);
      var rowState = (_store$value2 = store.value) === null || _store$value2 === void 0 ? void 0 : (_store$value2$treeDat = _store$value2.treeDataMap) === null || _store$value2$treeDat === void 0 ? void 0 : _store$value2$treeDat.get(rowValue);
      var params = {
        row: p.row,
        rowIndex: p.rowIndex,
        rowState: rowState,
        trigger: trigger
      };
      (_props$onTreeExpandCh = props.onTreeExpandChange) === null || _props$onTreeExpandCh === void 0 ? void 0 : _props$onTreeExpandCh.call(props, params);
      context.emit("tree-expand-change", params);
    }

    function getTreeNodeColumnCol() {
      var _props$tree5;

      var columns2 = props.columns;
      var treeNodeColumnIndex = ((_props$tree5 = props.tree) === null || _props$tree5 === void 0 ? void 0 : _props$tree5.treeNodeColumnIndex) || 0;

      while ((_columns2$treeNodeCol = columns2[treeNodeColumnIndex]) !== null && _columns2$treeNodeCol !== void 0 && _columns2$treeNodeCol.type || ((_columns2$treeNodeCol2 = columns2[treeNodeColumnIndex]) === null || _columns2$treeNodeCol2 === void 0 ? void 0 : _columns2$treeNodeCol2.colKey) === "__EXPAND_ROW_ICON_COLUMN__") {
        var _columns2$treeNodeCol, _columns2$treeNodeCol2;

        treeNodeColumnIndex += 1;
      }

      return columns2[treeNodeColumnIndex];
    }

    function formatTreeColumn(col) {
      if (!props.tree || col.colKey !== treeNodeCol.value.colKey) return col;

      var newCol = _objectSpread$b({}, treeNodeCol.value);

      newCol.cell = function (h, p) {
        var cellInfo = renderCell(_objectSpread$b(_objectSpread$b({}, p), {}, {
          col: _objectSpread$b({}, treeNodeCol.value)
        }), context.slots, {
          cellEmptyContent: props.cellEmptyContent
        });
        var currentState = store.value.treeDataMap.get(get_1(p.row, rowDataKeys.value.rowKey));
        var colStyle = getTreeNodeStyle(currentState === null || currentState === void 0 ? void 0 : currentState.level);

        var classes = _defineProperty$3({}, tableTreeClasses.inlineCol, !!col.ellipsis);

        var childrenNodes = get_1(p.row, rowDataKeys.value.childrenKey);

        if (childrenNodes && childrenNodes instanceof Array || childrenNodes === true) {
          var _store$value$treeData2;

          var iconNode = (_store$value$treeData2 = store.value.treeDataMap.get(get_1(p.row, rowDataKeys.value.rowKey))) !== null && _store$value$treeData2 !== void 0 && _store$value$treeData2.expanded ? getFoldIcon(h, p) : getExpandIcon(h, p);
          return h("div", {
            "class": [tableTreeClasses.col, classes],
            "style": colStyle
          }, [!!(childrenNodes.length || childrenNodes === true) && h("span", {
            "class": tableTreeClasses.icon,
            "on": {
              "click": function click() {
                return toggleExpandData(p, "expand-fold-icon");
              }
            }
          }, [iconNode]), cellInfo]);
        }

        return h("div", {
          "style": colStyle,
          "class": classes
        }, [cellInfo]);
      };

      if (newCol.ellipsis === true) {
        newCol.ellipsis = function (h, p) {
          return renderCell(_objectSpread$b(_objectSpread$b({}, p), {}, {
            col: _objectSpread$b({}, treeNodeCol.value)
          }), context.slots);
        };
      }

      return newCol;
    }

    function setData(key, newRowData) {
      var rowIndex = store.value.updateData(key, newRowData, dataSource.value, rowDataKeys.value);

      var newData = _toConsumableArray(dataSource.value);

      newData[rowIndex] = newRowData;
      dataSource.value = newData;
    }

    function getData(key) {
      return store.value.getData(key);
    }

    function remove(key) {
      dataSource.value = _toConsumableArray(store.value.remove(key, dataSource.value, rowDataKeys.value));
    }

    function appendTo() {
      var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
      var newData = arguments.length > 1 ? arguments[1] : undefined;

      if (!key) {
        dataSource.value = store.value.appendToRoot(newData, dataSource.value, rowDataKeys.value);
        return;
      }

      dataSource.value = _toConsumableArray(store.value.appendTo(key, newData, dataSource.value, rowDataKeys.value));
    }

    function insertAfter(rowValue, newData) {
      dataSource.value = _toConsumableArray(store.value.insertAfter(rowValue, newData, dataSource.value, rowDataKeys.value));
    }

    function insertBefore(rowValue, newData) {
      dataSource.value = _toConsumableArray(store.value.insertBefore(rowValue, newData, dataSource.value, rowDataKeys.value));
    }

    function expandAll() {
      dataSource.value = _toConsumableArray(store.value.expandAll(dataSource.value, rowDataKeys.value));
    }

    function foldAll() {
      dataSource.value = _toConsumableArray(store.value.foldAll(dataSource.value, rowDataKeys.value));
    }

    function swapData(params) {
      var r = store.value.swapData(dataSource.value, params, rowDataKeys.value);

      if (r.result) {
        dataSource.value = _toConsumableArray(r.dataSource);
      } else {
        var _props$onAbnormalDrag;

        var params2 = {
          code: r.code,
          reason: r.reason
        };
        (_props$onAbnormalDrag = props.onAbnormalDragSort) === null || _props$onAbnormalDrag === void 0 ? void 0 : _props$onAbnormalDrag.call(props, params2);
        context.emit("abnormal-drag-sort", params2);
      }
    }

    function getTreeNode() {
      return store.value.getTreeNode(dataSource.value, rowDataKeys.value);
    }

    return {
      store: store,
      rowDataKeys: rowDataKeys,
      dataSource: dataSource,
      swapData: swapData,
      setData: setData,
      getData: getData,
      remove: remove,
      appendTo: appendTo,
      insertAfter: insertAfter,
      insertBefore: insertBefore,
      formatTreeColumn: formatTreeColumn,
      toggleExpandData: toggleExpandData,
      expandAll: expandAll,
      foldAll: foldAll,
      getTreeNode: getTreeNode,
      resetData: resetData
    };
  }

  function ownKeys$a(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$a(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$a(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var childrenMap = /* @__PURE__ */new Map();
  function getChildrenData(treeDataMap, data, keys, r) {
    if (childrenMap.get(data)) return childrenMap.get(data);
    var result = r || {
      allChildren: [],
      allChildrenKeys: [],
      leafNodeKeys: []
    };
    var children = get_1(data, keys.childrenKey);
    if (!children || !children.length) return result;
    var selectableChildren = children.filter(function (item) {
      var _treeDataMap$get;

      return !((_treeDataMap$get = treeDataMap.get(get_1(item, keys.rowKey))) !== null && _treeDataMap$get !== void 0 && _treeDataMap$get.disabled);
    });
    result.allChildren = _toConsumableArray(new Set(result.allChildren.concat(selectableChildren)));

    for (var i = 0, len = children.length; i < len; i++) {
      var tItem = children[i];
      var c = get_1(tItem, keys.childrenKey);

      if (c !== null && c !== void 0 && c.length) {
        var nextLevelData = getChildrenData(treeDataMap, tItem, keys, result);
        result.allChildren = _toConsumableArray(new Set(result.allChildren.concat(nextLevelData.allChildren)));
      }
    }

    for (var _i = 0, _len = result.allChildren.length; _i < _len; _i++) {
      var item = result.allChildren[_i];
      var children2 = get_1(item, keys.childrenKey);
      var rowValue = get_1(item, keys.rowKey);
      result.allChildrenKeys.push(rowValue);

      if (!children2 || !children2.length) {
        result.leafNodeKeys.push(rowValue);
      }
    }

    result.allChildrenKeys = _toConsumableArray(new Set(result.allChildrenKeys));
    result.leafNodeKeys = _toConsumableArray(new Set(result.leafNodeKeys));
    return result;
  }
  function removeChildrenKeys(p, r) {
    var selectedRowKeys = p.selectedRowKeys,
        removeKeys = p.removeKeys;
    var result = r || {
      data: [],
      keys: []
    };

    for (var i = 0, len = selectedRowKeys.length; i < len; i++) {
      var key = selectedRowKeys[i];

      if (!removeKeys.includes(key)) {
        result.keys.push(key);
      }
    }

    return result;
  }
  function getRowDataByKeys(p) {
    var treeDataMap = p.treeDataMap,
        selectedRowKeys = p.selectedRowKeys;
    var result = [];

    for (var i = 0, len = selectedRowKeys.length; i < len; i++) {
      var key = selectedRowKeys[i];
      result.push(treeDataMap.get(key));
    }

    return result;
  }
  function useTreeSelect(props, treeDataMap) {
    var _toRefs = VueCompositionAPI.toRefs(props),
        selectedRowKeys = _toRefs.selectedRowKeys,
        tree = _toRefs.tree,
        data = _toRefs.data,
        indeterminateSelectedRowKeys = _toRefs.indeterminateSelectedRowKeys;

    var tIndeterminateSelectedRowKeys = VueCompositionAPI.ref([]);

    var _useDefaultValue = useDefaultValue(selectedRowKeys, props.defaultSelectedRowKeys || [], props.onSelectChange, "selectedRowKeys", "select-change"),
        _useDefaultValue2 = _slicedToArray(_useDefaultValue, 2),
        tSelectedRowKeys = _useDefaultValue2[0],
        setTSelectedRowKeys = _useDefaultValue2[1];

    var rowDataKeys = VueCompositionAPI.computed(function () {
      var _props$tree;

      return {
        rowKey: props.rowKey || "id",
        childrenKey: ((_props$tree = props.tree) === null || _props$tree === void 0 ? void 0 : _props$tree.childrenKey) || "children"
      };
    });
    VueCompositionAPI.watch([tree, treeDataMap, data, tSelectedRowKeys], function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          tree2 = _ref2[0],
          treeDataMap2 = _ref2[1];

      if (!tree2 || !treeDataMap2.size || tree2.checkStrictly) return;
      updateIndeterminateState();
    });

    function updateIndeterminateState() {
      if (!tree.value || tree.value.checkStrictly) return;

      if (!tSelectedRowKeys.value.length) {
        tIndeterminateSelectedRowKeys.value = [];
        return;
      }

      var keys = [];
      var parentMap = {};

      for (var i = 0, len = tSelectedRowKeys.value.length; i < len; i++) {
        var rowValue = tSelectedRowKeys.value[i];
        var state = treeDataMap.value.get(rowValue);
        var children = get_1(state.row, rowDataKeys.value.childrenKey);

        if (!children || !children.length) {
          var parentTmp = state.parent;

          while (parentTmp) {
            if (!parentMap[parentTmp.id]) {
              parentMap[parentTmp.id] = [];
            }

            parentMap[parentTmp.id].push(state.row);
            var checkedLength = parentMap[parentTmp.id].length;

            var _getChildrenData = getChildrenData(treeDataMap.value, parentTmp.row, rowDataKeys.value),
                allChildrenKeys = _getChildrenData.allChildrenKeys;

            var parentTmpIndex = keys.indexOf(parentTmp.id);
            var selectedIndex = tSelectedRowKeys.value.indexOf(parentTmp.id);

            if (checkedLength > 0 && checkedLength < allChildrenKeys.length && selectedIndex === -1) {
              parentTmpIndex === -1 && keys.push(parentTmp.id);
            } else {
              parentTmpIndex !== -1 && keys.splice(parentTmpIndex, 1);
            }

            parentTmp = parentTmp.parent;
          }
        }
      }

      tIndeterminateSelectedRowKeys.value = keys;
    }

    function updateParentCheckedState(selectedKeys, currentRowKey, type) {
      if (!tree.value || tree.value.checkStrictly) return;

      var keys = _toConsumableArray(selectedKeys);

      var state = treeDataMap.value.get(currentRowKey);
      var parentTmp = state.parent;

      while (parentTmp) {
        var _getChildrenData2 = getChildrenData(treeDataMap.value, parentTmp.row, rowDataKeys.value),
            leafNodeKeys = _getChildrenData2.leafNodeKeys;

        var checkedChildrenKeys = intersection_1(leafNodeKeys, selectedKeys);
        var selectedIndex = keys.indexOf(parentTmp.id);

        if (type === "uncheck") {
          selectedIndex !== -1 && keys.splice(selectedIndex, 1);
        } else if (checkedChildrenKeys.length === leafNodeKeys.length) {
          selectedIndex === -1 && keys.push(parentTmp.id);
        }

        parentTmp = parentTmp.parent;
      }

      return keys;
    }

    function onInnerSelectChange(rowKeys, extraData) {
      if (!tree.value || tree.value.checkStrictly) {
        setTSelectedRowKeys(rowKeys, extraData);
        return;
      }

      if (extraData.currentRowKey === "CHECK_ALL_BOX") {
        handleSelectAll(extraData);
      } else {
        handleSelect(rowKeys, extraData);
      }
    }

    function handleSelectAll(extraData) {
      var newRowKeys = [];
      var newRowData = [];

      if (extraData.type === "check") {
        var arr = _toConsumableArray(treeDataMap.value.values());

        for (var i = 0, len = arr.length; i < len; i++) {
          var item = arr[i];

          if (!item.disabled) {
            newRowData.push(item.row);
            newRowKeys.push(get_1(item.row, rowDataKeys.value.rowKey));
          }
        }
      }

      var newExtraData = _objectSpread$a(_objectSpread$a({}, extraData), {}, {
        selectedRowData: newRowData || []
      });

      setTSelectedRowKeys(newRowKeys, newExtraData);
    }

    function handleSelect(rowKeys, extraData) {
      var _props$tree2;

      var newRowKeys = _toConsumableArray(rowKeys);

      if (((_props$tree2 = props.tree) === null || _props$tree2 === void 0 ? void 0 : _props$tree2.checkStrictly) === false) {
        if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "check") {
          var result = getChildrenData(treeDataMap.value, extraData.currentRowData, rowDataKeys.value);
          var allChildrenKeys = result.allChildrenKeys;
          childrenMap.set(extraData.currentRowData, result);
          newRowKeys = _toConsumableArray(new Set(newRowKeys.concat(allChildrenKeys)));
        } else if ((extraData === null || extraData === void 0 ? void 0 : extraData.type) === "uncheck") {
          var children = getChildrenData(treeDataMap.value, extraData.currentRowData, rowDataKeys.value);

          var _result = removeChildrenKeys({
            selectedRowKeys: rowKeys,
            removeKeys: children.allChildrenKeys
          });

          newRowKeys = _result.keys;
        }
      }

      newRowKeys = updateParentCheckedState(newRowKeys, extraData.currentRowKey, extraData.type);
      var newRowData = getRowDataByKeys({
        treeDataMap: treeDataMap.value,
        selectedRowKeys: newRowKeys
      });

      var newExtraData = _objectSpread$a(_objectSpread$a({}, extraData), {}, {
        selectedRowData: newRowData
      });

      setTSelectedRowKeys(newRowKeys, newExtraData);
    }

    return {
      tIndeterminateSelectedRowKeys: indeterminateSelectedRowKeys.value ? indeterminateSelectedRowKeys : tIndeterminateSelectedRowKeys,
      onInnerSelectChange: onInnerSelectChange
    };
  }

  var _excluded = ["store", "dataSource", "formatTreeColumn", "swapData"];

  function ownKeys$9(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$9(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$9(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var PRIMARY_B_EVENTS = ["change", "page-change", "expand-change", "filter-change", "sort-change", "data-change", "async-loading-click"];
  var PRIMARY_ALL_EVENTS = BASE_TABLE_ALL_EVENTS.concat(PRIMARY_B_EVENTS);
  var _EnhancedTable = VueCompositionAPI.defineComponent({
    name: "TEnhancedTable",
    props: _objectSpread$9(_objectSpread$9(_objectSpread$9({}, baseTableProps), primaryTableProps), enhancedTableProps),
    setup: function setup(props, context) {
      var _useTreeData = useTreeData(props, context),
          store = _useTreeData.store,
          dataSource = _useTreeData.dataSource,
          formatTreeColumn = _useTreeData.formatTreeColumn,
          swapData = _useTreeData.swapData,
          treeInstanceFunctions = _objectWithoutProperties$2(_useTreeData, _excluded);

      var treeDataMap = VueCompositionAPI.ref(store.value.treeDataMap);

      var _useTreeSelect = useTreeSelect(props, treeDataMap),
          tIndeterminateSelectedRowKeys = _useTreeSelect.tIndeterminateSelectedRowKeys,
          onInnerSelectChange = _useTreeSelect.onInnerSelectChange;

      var getColumns = function getColumns(columns) {
        var arr = [];

        for (var i = 0, len = columns.length; i < len; i++) {
          var _item$children, _item$children2;

          var item = _objectSpread$9({}, columns[i]);

          item = formatTreeColumn(item);

          if ((_item$children = item.children) !== null && _item$children !== void 0 && _item$children.length) {
            item.children = getColumns(item.children);
          }

          if (!item.children || (_item$children2 = item.children) !== null && _item$children2 !== void 0 && _item$children2.length) {
            arr.push(item);
          }
        }

        return arr;
      };

      var tColumns = VueCompositionAPI.computed(function () {
        var isTreeData = !props.tree || !Object.keys(props.tree).length;
        return isTreeData ? props.columns : getColumns(props.columns);
      });

      var onDragSortChange = function onDragSortChange(params) {
        var _props$onDragSort;

        if (props.beforeDragSort && !props.beforeDragSort(params)) return;
        swapData({
          current: params.current,
          target: params.target,
          currentIndex: params.currentIndex,
          targetIndex: params.targetIndex
        });
        (_props$onDragSort = props.onDragSort) === null || _props$onDragSort === void 0 ? void 0 : _props$onDragSort.call(props, params);
        context.emit("drag-sort", params);
      };

      return _objectSpread$9({
        store: store,
        dataSource: dataSource,
        tColumns: tColumns,
        tIndeterminateSelectedRowKeys: tIndeterminateSelectedRowKeys,
        onDragSortChange: onDragSortChange,
        onInnerSelectChange: onInnerSelectChange
      }, treeInstanceFunctions);
    },
    methods: {
      getListener: function getListener() {
        var _this = this;

        var listeners = {};
        PRIMARY_ALL_EVENTS.forEach(function (key) {
          listeners[key] = function () {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            _this.$emit.apply(_this, [key].concat(args));
          };
        });
        return listeners;
      }
    },
    render: function render() {
      var h = arguments[0];

      var props = _objectSpread$9(_objectSpread$9({}, this.$props), {}, {
        data: this.dataSource,
        columns: this.tColumns,
        indeterminateSelectedRowKeys: this.tIndeterminateSelectedRowKeys,
        disableDataPage: Boolean(this.tree && Object.keys(this.tree).length)
      });

      var on = _objectSpread$9(_objectSpread$9({}, this.getListener()), {}, {
        "select-change": this.onInnerSelectChange,
        "drag-sort": this.onDragSortChange
      });

      return h(_PrimaryTable, helper([{
        "scopedSlots": this.$scopedSlots
      }, {
        "props": props
      }, {}, {
        "on": on
      }, {}, this.$attrs]));
    }
  });

  function ownKeys$8(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$8(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$8(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var BaseTable = withInstall(_BaseTable, VueCompositionAPI__default["default"]);
  var PrimaryTable = withInstall(_PrimaryTable, VueCompositionAPI__default["default"]);
  var EnhancedTable = withInstall(_EnhancedTable, VueCompositionAPI__default["default"]);
  var Table = withInstall(_objectSpread$8(_objectSpread$8({}, _PrimaryTable), {}, {
    name: "TTable"
  }), VueCompositionAPI__default["default"]);

  var props$6 = {
    borderless: Boolean,
    defaultExpandAll: Boolean,
    disabled: Boolean,
    expandIcon: {
      type: [Boolean, Function],
      "default": true
    },
    expandIconPlacement: {
      type: String,
      "default": "left",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right"].includes(val);
      }
    },
    expandMutex: Boolean,
    expandOnRowClick: {
      type: Boolean,
      "default": true
    },
    value: {
      type: Array,
      "default": void 0
    },
    defaultValue: {
      type: Array
    },
    onChange: Function
  };

  var _Collapse = VueCompositionAPI.defineComponent({
    name: "TCollapse",
    props: props$6,
    setup: function setup(props2) {
      var componentName = usePrefixClass("collapse");
      var borderlessClass = usePrefixClass("-border-less");

      var _toRefs = VueCompositionAPI.toRefs(props2),
          value = _toRefs.value,
          expandMutex = _toRefs.expandMutex,
          borderless = _toRefs.borderless;

      var _useVModel = useVModel(value, props2.defaultValue, props2.onChange, "change"),
          _useVModel2 = _slicedToArray(_useVModel, 2),
          collapseValue = _useVModel2[0],
          setCollapseValue = _useVModel2[1];

      var updateCollapseValue = function updateCollapseValue(value2) {
        var newValue = [].concat(collapseValue.value || []);
        var index = newValue.indexOf(value2);

        if (index >= 0) {
          newValue.splice(index, 1);
        } else if (expandMutex.value) {
          newValue = [value2];
        } else {
          newValue.push(value2);
        }

        setCollapseValue(newValue);
      };

      var classes = VueCompositionAPI.computed(function () {
        return [componentName.value, _defineProperty$3({}, borderlessClass.value, !!borderless.value)];
      });

      var getUniqId = function () {
        var index = 0;
        return function () {
          return index += 1;
        };
      }();

      VueCompositionAPI.provide("collapseValue", collapseValue);
      VueCompositionAPI.provide("updateCollapseValue", updateCollapseValue);
      VueCompositionAPI.provide("collapseProps", VueCompositionAPI.toRefs(props2));
      VueCompositionAPI.provide("getUniqId", getUniqId);
      return {
        classes: classes
      };
    },
    render: function render() {
      var h = arguments[0];
      var renderTNodeJSX = useTNodeJSX();
      var nodes = renderTNodeJSX("default");
      return h("div", {
        "class": this.classes
      }, [nodes]);
    }
  });

  var props$5 = {
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    destroyOnCollapse: Boolean,
    disabled: {
      type: Boolean,
      "default": void 0
    },
    expandIcon: {
      type: [Boolean, Function],
      "default": void 0
    },
    header: {
      type: [String, Function]
    },
    headerRightContent: {
      type: [String, Function]
    },
    value: {
      type: [String, Number]
    }
  };

  function useCollapseAnimation() {
    var beforeEnter = function beforeEnter(el) {
      el.dataset.oldPaddingTop = el.style.paddingTop;
      el.dataset.oldPaddingBottom = el.style.paddingBottom;
      el.style.height = "0";
      el.style.paddingTop = "0";
      el.style.paddingBottom = "0";
    };

    var enter = function enter(el) {
      el.dataset.oldOverflow = el.style.overflow;
      el.style.height = "".concat(el.scrollHeight, "px");
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
      el.style.overflow = "hidden";
    };

    var afterEnter = function afterEnter(el) {
      el.style.height = "";
      el.style.overflow = el.dataset.oldOverflow;
    };

    var beforeLeave = function beforeLeave(el) {
      el.dataset.oldPaddingTop = el.style.paddingTop;
      el.dataset.oldPaddingBottom = el.style.paddingBottom;
      el.dataset.oldOverflow = el.style.overflow;
      el.style.height = "".concat(el.scrollHeight, "px");
      el.style.overflow = "hidden";
    };

    var leave = function leave(el) {
      if (el.scrollHeight !== 0) {
        el.style.height = "0";
        el.style.paddingTop = "0";
        el.style.paddingBottom = "0";
      }
    };

    var afterLeave = function afterLeave(el) {
      el.style.height = "";
      el.style.overflow = el.dataset.oldOverflow;
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
    };

    return {
      beforeEnter: beforeEnter,
      enter: enter,
      afterEnter: afterEnter,
      beforeLeave: beforeLeave,
      leave: leave,
      afterLeave: afterLeave
    };
  }

  var _CollapsePanel = VueCompositionAPI.defineComponent({
    name: "TCollapsePanel",
    props: props$5,
    setup: function setup(props2) {
      var _toRefs = VueCompositionAPI.toRefs(props2),
          value = _toRefs.value,
          disabled = _toRefs.disabled,
          expandIcon = _toRefs.expandIcon;

      var componentName = usePrefixClass("collapse-panel");
      var disableClass = usePrefixClass("is-disabled");
      var clickableClass = usePrefixClass("is-clickable");
      var transitionClass = usePrefixClass("slide-down");
      var collapseValue = VueCompositionAPI.inject("collapseValue");
      var updateCollapseValue = VueCompositionAPI.inject("updateCollapseValue");
      var getUniqId = VueCompositionAPI.inject("getUniqId", function () {
        return void 0;
      }, false);

      var _inject = VueCompositionAPI.inject("collapseProps"),
          defaultExpandAll = _inject.defaultExpandAll,
          disableAll = _inject.disabled,
          expandIconPlacement = _inject.expandIconPlacement,
          expandOnRowClick = _inject.expandOnRowClick,
          expandIconAll = _inject.expandIcon;

      var innerValue = value.value || getUniqId();
      var showExpandIcon = VueCompositionAPI.computed(function () {
        return expandIcon.value === void 0 ? expandIconAll.value : expandIcon.value;
      });

      if (defaultExpandAll.value) {
        updateCollapseValue(innerValue);
      }

      var isDisabled = VueCompositionAPI.computed(function () {
        return disabled.value || disableAll.value;
      });
      var isActive = VueCompositionAPI.computed(function () {
        return collapseValue.value instanceof Array ? collapseValue.value.includes(innerValue) : collapseValue.value === innerValue;
      });
      var classes = VueCompositionAPI.computed(function () {
        return [componentName.value, _defineProperty$3({}, disableClass.value, isDisabled.value)];
      });
      return {
        isDisabled: isDisabled,
        classes: classes,
        isActive: isActive,
        updateCollapseValue: updateCollapseValue,
        innerValue: innerValue,
        expandIconPlacement: expandIconPlacement,
        expandOnRowClick: expandOnRowClick,
        componentName: componentName,
        clickableClass: clickableClass,
        transitionClass: transitionClass,
        showExpandIcon: showExpandIcon
      };
    },
    methods: {
      renderIcon: function renderIcon(direction) {
        var h = this.$createElement;
        return h(FakeArrow, {
          "attrs": {
            "name": "arrow",
            "isActive": this.isActive,
            "overlayClassName": "".concat(this.componentName, "__icon ").concat(this.componentName, "__icon--").concat(direction)
          }
        });
      },
      renderHeader: function renderHeader() {
        var h = this.$createElement;
        var showExpandIcon = this.showExpandIcon,
            isDisabled = this.isDisabled,
            handleClick = this.handleClick,
            renderIcon = this.renderIcon,
            renderBlank = this.renderBlank;
        var cls = ["".concat(this.componentName, "__header"), _defineProperty$3({}, this.clickableClass, this.expandOnRowClick && !isDisabled)];
        return h("div", {
          "ref": "headRef",
          "class": cls,
          "on": {
            "click": handleClick
          }
        }, [showExpandIcon && this.expandIconPlacement === "left" ? renderIcon(this.expandIconPlacement) : null, renderTNodeJSX(this, "header"), renderBlank(), renderTNodeJSX(this, "headerRightContent"), showExpandIcon && this.expandIconPlacement === "right" ? renderIcon(this.expandIconPlacement) : null]);
      },
      renderBlank: function renderBlank() {
        var h = this.$createElement;
        return h("div", {
          "class": "".concat(this.componentName, "__header--blank")
        });
      },
      renderBody: function renderBody() {
        return this.destroyOnCollapse ? this.renderBodyDestroyOnCollapse() : this.renderBodyByNormal();
      },
      renderBodyByNormal: function renderBodyByNormal() {
        var h = this.$createElement;
        return h("div", {
          "directives": [{
            name: "show",
            value: this.isActive
          }],
          "class": "".concat(this.componentName, "__body")
        }, [h("div", {
          "class": "".concat(this.componentName, "__content")
        }, [renderTNodeJSX(this, "default")])]);
      },
      renderBodyDestroyOnCollapse: function renderBodyDestroyOnCollapse() {
        var h = this.$createElement;
        return this.isActive ? h("div", {
          "class": "".concat(this.componentName, "__body")
        }, [h("div", {
          "class": "".concat(this.componentName, "__content")
        }, [renderTNodeJSX(this, "default")])]) : null;
      },
      handleClick: function handleClick(e) {
        var canExpand = this.expandOnRowClick && e.target === this.$refs.headRef || e.target.getAttribute("name") === "arrow";

        if (canExpand && !this.isDisabled) {
          this.updateCollapseValue(this.innerValue);
        }
      }
    },
    render: function render() {
      var h = arguments[0];

      var _useCollapseAnimation = useCollapseAnimation(),
          beforeEnter = _useCollapseAnimation.beforeEnter,
          enter = _useCollapseAnimation.enter,
          afterEnter = _useCollapseAnimation.afterEnter,
          beforeLeave = _useCollapseAnimation.beforeLeave,
          leave = _useCollapseAnimation.leave,
          afterLeave = _useCollapseAnimation.afterLeave;

      var classes = this.classes;
      return h("div", {
        "class": classes
      }, [h("div", {
        "class": "".concat(this.componentName, "__wrapper")
      }, [this.renderHeader(), h("transition", {
        "attrs": {
          "name": this.transitionClass
        },
        "on": {
          "beforeEnter": beforeEnter,
          "enter": enter,
          "afterEnter": afterEnter,
          "beforeLeave": beforeLeave,
          "leave": leave,
          "afterLeave": afterLeave
        }
      }, [this.renderBody()])])]);
    }
  });

  var Collapse = withInstall(_Collapse);
  var CollapsePanel = withInstall(_CollapsePanel);

  var props$4 = {
    close: {
      type: [String, Boolean, Function],
      "default": false
    },
    "default": {
      type: [String, Function]
    },
    icon: {
      type: Function
    },
    maxLine: {
      type: Number,
      "default": 0
    },
    message: {
      type: [String, Function]
    },
    operation: {
      type: Function
    },
    theme: {
      type: String,
      "default": "info",
      validator: function validator(val) {
        return ["success", "info", "warning", "error"].includes(val);
      }
    },
    title: {
      type: [String, Function]
    },
    onClose: Function,
    onClosed: Function
  };

  function ownKeys$7(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$7(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$7(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Alert = mixins(getConfigReceiverMixins("alert"), getGlobalIconMixins()).extend({
    name: "TAlert",
    data: function data() {
      return {
        visible: true,
        collapsed: true
      };
    },
    props: _objectSpread$7({}, props$4),
    render: function render() {
      var h = arguments[0];
      var compClass = [this.componentName, "".concat(this.componentName, "--").concat(this.theme), _defineProperty$3({}, "".concat(this.classPrefix, "-is-hidden"), !this.visible)];
      return h("div", {
        "class": compClass
      }, [this.renderIcon(), this.renderContent(), this.renderClose()]);
    },
    mounted: function mounted() {
      on$1(this.$el, "transitionend", this.handleCloseEnd);
    },
    beforeDestroy: function beforeDestroy() {
      off$1(this.$el, "transitionend", this.handleCloseEnd);
    },
    methods: {
      renderIcon: function renderIcon() {
        var h = this.$createElement;
        var iconContent;

        if (typeof this.icon === "function") {
          iconContent = this.icon(this.$createElement);
        } else if (this.$scopedSlots.icon) {
          iconContent = this.$scopedSlots.icon && this.$scopedSlots.icon(null)[0];
        } else {
          var _this$useGlobalIcon = this.useGlobalIcon({
            InfoCircleFilledIcon: InfoCircleFilled,
            CheckCircleFilledIcon: CheckCircleFilled,
            ErrorCircleFilledIcon: ErrorCircleFilled
          }),
              InfoCircleFilledIcon = _this$useGlobalIcon.InfoCircleFilledIcon,
              CheckCircleFilledIcon = _this$useGlobalIcon.CheckCircleFilledIcon,
              ErrorCircleFilledIcon = _this$useGlobalIcon.ErrorCircleFilledIcon;

          var component = {
            info: InfoCircleFilledIcon,
            success: CheckCircleFilledIcon,
            warning: ErrorCircleFilledIcon,
            error: ErrorCircleFilledIcon
          }[this.theme];
          iconContent = h(component);
        }

        return iconContent ? h("div", {
          "class": "".concat(this.componentName, "__icon")
        }, [iconContent]) : null;
      },
      renderClose: function renderClose() {
        var h = this.$createElement;

        var _this$useGlobalIcon2 = this.useGlobalIcon({
          CloseIcon: Close
        }),
            CloseIcon = _this$useGlobalIcon2.CloseIcon;

        var closeContent = null;

        if (this.close === true || this.close === "") {
          closeContent = h(CloseIcon);
        } else if (typeof this.close === "string") {
          closeContent = this.close;
        } else if (typeof this.close === "function") {
          closeContent = this.close(this.$createElement);
        } else {
          closeContent = this.$scopedSlots.close && this.$scopedSlots.close(null)[0];
        }

        return closeContent ? h("div", {
          "class": "".concat(this.componentName, "__close"),
          "on": {
            "click": this.handleClose
          }
        }, [closeContent]) : null;
      },
      renderContent: function renderContent() {
        var h = this.$createElement;
        return h("div", {
          "class": "".concat(this.componentName, "__content")
        }, [this.renderTitle(), this.renderMessage()]);
      },
      renderTitle: function renderTitle() {
        var h = this.$createElement;
        var titleContent = renderTNodeJSX(this, "title");
        return titleContent ? h("div", {
          "class": "".concat(this.componentName, "__title")
        }, [" ", titleContent]) : null;
      },
      renderMessage: function renderMessage() {
        var h = this.$createElement;
        var operationContent = renderTNodeJSX(this, "operation");
        return h("div", {
          "class": "".concat(this.componentName, "__message")
        }, [this.renderDescription(), operationContent ? h("div", {
          "class": "".concat(this.componentName, "__operation")
        }, [operationContent]) : null]);
      },
      renderDescription: function renderDescription() {
        var _this = this;

        var h = this.$createElement;
        var messageContent;
        messageContent = renderTNodeJSX(this, "default");

        if (!messageContent) {
          messageContent = renderTNodeJSX(this, "message");
        }

        var contentLength = Object.prototype.toString.call(messageContent) === "[object Array]" ? messageContent.length : 1;
        var hasCollapse = this.maxLine > 0 && this.maxLine < contentLength;

        if (hasCollapse && this.collapsed) {
          messageContent = messageContent.slice(0, this.maxLine);
        }

        return h("div", {
          "class": "".concat(this.componentName, "__description")
        }, [hasCollapse ? messageContent.map(function (content) {
          return h("div", [content]);
        }) : messageContent, hasCollapse ? h("div", {
          "class": "".concat(this.componentName, "__collapse"),
          "on": {
            "click": function click() {
              _this.collapsed = !_this.collapsed;
            }
          }
        }, [this.collapsed ? this.global.expandText : this.global.collapseText]) : null]);
      },
      handleClose: function handleClose(e) {
        this.$emit("close", {
          e: e
        });

        if (this.onClose) {
          this.onClose({
            e: e
          });
        }

        addClass(this.$el, "".concat(this.componentName, "--closing"));
      },
      handleCloseEnd: function handleCloseEnd(e) {
        if (e.propertyName === "opacity") {
          this.visible = false;
          this.$emit("closed", {
            e: e
          });

          if (this.onClosed) {
            this.onClosed({
              e: e
            });
          }
        }
      }
    }
  });

  var Alert = withInstall(_Alert);

  var Dialog = withInstall(_Dialog);

  var props$3 = {
    attach: {
      type: [String, Function],
      "default": ""
    },
    body: {
      type: [String, Function]
    },
    cancelBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    closeBtn: {
      type: [String, Boolean, Function]
    },
    closeOnEscKeydown: {
      type: Boolean,
      "default": void 0
    },
    closeOnOverlayClick: {
      type: Boolean,
      "default": void 0
    },
    confirmBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    "default": {
      type: [String, Function]
    },
    destroyOnClose: Boolean,
    footer: {
      type: [Boolean, Function],
      "default": true
    },
    header: {
      type: [String, Boolean, Function],
      "default": true
    },
    mode: {
      type: String,
      "default": "overlay",
      validator: function validator(val) {
        if (!val) return true;
        return ["overlay", "push"].includes(val);
      }
    },
    placement: {
      type: String,
      "default": "right",
      validator: function validator(val) {
        if (!val) return true;
        return ["left", "right", "top", "bottom"].includes(val);
      }
    },
    preventScrollThrough: {
      type: Boolean,
      "default": true
    },
    showInAttachedElement: Boolean,
    showOverlay: {
      type: Boolean,
      "default": true
    },
    size: {
      type: String,
      "default": void 0
    },
    sizeDraggable: Boolean,
    visible: Boolean,
    zIndex: {
      type: Number
    },
    onCancel: Function,
    onClose: Function,
    onCloseBtnClick: Function,
    onConfirm: Function,
    onEscKeydown: Function,
    onOverlayClick: Function
  };

  var _Drawer = mixins(ActionMixin, getConfigReceiverMixins("drawer"), getGlobalIconMixins()).extend({
    name: "TDrawer",
    components: {
      TButton: Button
    },
    props: props$3,
    directives: {
      TransferDom: TransferDom
    },
    data: function data() {
      return {
        isSizeDragging: false,
        draggedSizeValue: null
      };
    },
    computed: {
      drawerClasses: function drawerClasses() {
        var _ref;

        return [this.componentName, "".concat(this.componentName, "--").concat(this.placement), (_ref = {}, _defineProperty$3(_ref, "".concat(this.componentName, "--open"), this.visible), _defineProperty$3(_ref, "".concat(this.componentName, "--attach"), this.showInAttachedElement), _defineProperty$3(_ref, "".concat(this.componentName, "--without-mask"), !this.showOverlay), _ref)];
      },
      sizeValue: function sizeValue() {
        var _this$size;

        if (this.draggedSizeValue) return this.draggedSizeValue;
        var size = (_this$size = this.size) !== null && _this$size !== void 0 ? _this$size : this.global.size;
        var defaultSize = isNaN(Number(size)) ? size : "".concat(size, "px");
        return {
          small: "300px",
          medium: "500px",
          large: "760px"
        }[size] || defaultSize;
      },
      wrapperStyles: function wrapperStyles() {
        return {
          transform: this.visible ? "translateX(0)" : void 0,
          width: this.isHorizontal ? this.sizeValue : "",
          height: this.isVertical ? this.sizeValue : ""
        };
      },
      wrapperClasses: function wrapperClasses() {
        return ["".concat(this.componentName, "__content-wrapper"), "".concat(this.componentName, "__content-wrapper--").concat(this.placement)];
      },
      parentNode: function parentNode() {
        return this.$el && this.$el.parentNode;
      },
      modeAndPlacement: function modeAndPlacement() {
        return [this.mode, this.placement].join();
      },
      footerStyle: function footerStyle() {
        return {
          display: "flex",
          justifyContent: this.placement === "right" ? "flex-start" : "flex-end"
        };
      },
      isHorizontal: function isHorizontal() {
        return ["right", "left"].includes(this.placement);
      },
      isVertical: function isVertical() {
        return ["top", "bottom"].includes(this.placement);
      },
      draggableLineStyles: function draggableLineStyles() {
        var _ref2;

        var oppositeMap = {
          left: "right",
          right: "left",
          top: "bottom",
          bottom: "top"
        };
        return _ref2 = {
          zIndex: 1,
          position: "absolute",
          background: "transparent"
        }, _defineProperty$3(_ref2, oppositeMap[this.placement], 0), _defineProperty$3(_ref2, "width", this.isHorizontal ? "16px" : "100%"), _defineProperty$3(_ref2, "height", this.isHorizontal ? "100%" : "16px"), _defineProperty$3(_ref2, "cursor", this.isHorizontal ? "col-resize" : "row-resize"), _ref2;
      }
    },
    watch: {
      modeAndPlacement: {
        handler: function handler() {
          this.handlePushMode();
        },
        immediate: true
      },
      visible: {
        handler: function handler(val) {
          if (val) {
            var _this$$refs$drawerCon, _this$$refs$drawerCon2;

            (_this$$refs$drawerCon = this.$refs.drawerContainer) === null || _this$$refs$drawerCon === void 0 ? void 0 : (_this$$refs$drawerCon2 = _this$$refs$drawerCon.focus) === null || _this$$refs$drawerCon2 === void 0 ? void 0 : _this$$refs$drawerCon2.call(_this$$refs$drawerCon);
          }

          this.handleScrollThrough(val);
        }
      }
    },
    updated: function updated() {
      this.updatePushMode();
    },
    mounted: function mounted() {
      this.handleScrollThrough(this.visible);
    },
    render: function render() {
      var h = arguments[0];
      if (this.destroyOnClose && !this.visible) return;

      var _this$useGlobalIcon = this.useGlobalIcon({
        CloseIcon: Close
      }),
          CloseIcon = _this$useGlobalIcon.CloseIcon;

      var defaultCloseBtn = h(CloseIcon, {
        "class": "".concat(this.classPrefix, "-submenu-icon")
      });
      var body = renderContent(this, "default", "body");
      var defaultFooter = this.getDefaultFooter();
      return h("div", {
        "class": this.drawerClasses,
        "style": {
          zIndex: this.zIndex
        },
        "on": {
          "keydown": this.onKeyDown
        },
        "directives": [{
          name: "transfer-dom",
          value: this.attach
        }],
        "ref": "drawerContainer",
        "attrs": {
          "tabindex": 0
        }
      }, [this.showOverlay && h("div", {
        "class": "".concat(this.componentName, "__mask"),
        "on": {
          "click": this.handleWrapperClick
        }
      }), h("div", {
        "class": this.wrapperClasses,
        "style": this.wrapperStyles
      }, [this.header !== false ? h("div", {
        "class": "".concat(this.componentName, "__header")
      }, [renderTNodeJSX(this, "header", h("div"))]) : null, this.closeBtn !== false ? h("div", {
        "class": "".concat(this.componentName, "__close-btn"),
        "on": {
          "click": this.handleCloseBtnClick
        }
      }, [renderTNodeJSX(this, "closeBtn", defaultCloseBtn)]) : null, h("div", {
        "class": "".concat(this.componentName, "__body")
      }, [body]), this.footer !== false ? h("div", {
        "class": "".concat(this.componentName, "__footer")
      }, [renderTNodeJSX(this, "footer", defaultFooter)]) : null, this.sizeDraggable && h("div", {
        "style": this.draggableLineStyles,
        "on": {
          "mousedown": this.enableDrag
        }
      })])]);
    },
    methods: {
      enableDrag: function enableDrag() {
        document.addEventListener("mouseup", this.handleMouseup, true);
        document.addEventListener("mousemove", this.handleMousemove, true);
        this.isSizeDragging = true;
      },
      handleMouseup: function handleMouseup() {
        document.removeEventListener("mouseup", this.handleMouseup, true);
        document.removeEventListener("mousemove", this.handleMousemove, true);
        this.isSizeDragging = false;
      },
      handleMousemove: function handleMousemove(e) {
        var x = e.x,
            y = e.y;

        if (this.isSizeDragging && this.sizeDraggable) {
          if (this.placement === "right") {
            this.draggedSizeValue = "".concat(document.documentElement.clientWidth - x + 8, "px");
          }

          if (this.placement === "left") {
            this.draggedSizeValue = "".concat(x + 8, "px");
          }

          if (this.placement === "top") {
            this.draggedSizeValue = "".concat(y + 8, "px");
          }

          if (this.placement === "bottom") {
            this.draggedSizeValue = "".concat(document.documentElement.clientHeight - y + 8, "px");
          }
        }
      },
      handleScrollThrough: function handleScrollThrough(visible) {
        if (!document || !document.body || !this.preventScrollThrough) return;

        if (visible && !this.showInAttachedElement) {
          this.preventScrollThrough && addClass(document.body, "".concat(this.componentName, "--lock"));
        } else {
          this.preventScrollThrough && removeClass(document.body, "".concat(this.componentName, "--lock"));
        }
      },
      handlePushMode: function handlePushMode() {
        var _this = this;

        if (this.mode !== "push") return;
        this.$nextTick(function () {
          if (!_this.parentNode) return;
          _this.parentNode.style.cssText = "transition: margin 300ms cubic-bezier(0.7, 0.3, 0.1, 1) 0s;";
        });
      },
      updatePushMode: function updatePushMode() {
        if (!this.parentNode) return;
        if (this.mode !== "push" || !this.parentNode) return;
        var marginStr = {
          left: "margin: 0 0 0 ".concat(this.sizeValue),
          right: "margin: 0 0 0 -".concat(this.sizeValue),
          top: "margin: ".concat(this.sizeValue, " 0 0 0"),
          bottom: "margin: -".concat(this.sizeValue, " 0 0 0")
        }[this.placement];

        if (this.visible) {
          this.parentNode.style.cssText += marginStr;
        } else {
          this.parentNode.style.cssText = this.parentNode.style.cssText.replace(/margin:.+;/, "");
        }
      },
      getDefaultBtn: function getDefaultBtn(btnType, btnApi) {
        var h = this.$createElement;
        var isCancel = btnType === "cancel";
        var clickAction = isCancel ? this.cancelBtnAction : this.confirmBtnAction;
        var theme = isCancel ? "default" : "primary";
        var isApiObject = _typeof$1(btnApi) === "object";
        return h("t-button", helper([{
          "attrs": {
            "theme": theme
          },
          "on": {
            "click": clickAction
          }
        }, {
          "props": isApiObject ? btnApi : {}
        }, {
          "class": "".concat(this.componentName, "-").concat(btnType)
        }]), [btnApi && _typeof$1(btnApi) === "object" ? btnApi.content : btnApi]);
      },
      isUseDefault: function isUseDefault(btnApi) {
        var baseTypes = ["string", "object"];
        return Boolean(btnApi && baseTypes.includes(_typeof$1(btnApi)));
      },
      getDefaultFooter: function getDefaultFooter() {
        var h = this.$createElement;
        var confirmBtn = this.getConfirmBtn({
          confirmBtn: this.confirmBtn,
          globalConfirm: this.global.confirm,
          className: "".concat(this.componentName, "__confirm")
        });
        var cancelBtn = this.getCancelBtn({
          cancelBtn: this.cancelBtn,
          globalCancel: this.global.cancel,
          className: "".concat(this.componentName, "__cancel")
        });
        return h("div", {
          "style": this.footerStyle
        }, [this.placement === "right" ? confirmBtn : null, cancelBtn, this.placement !== "right" ? confirmBtn : null]);
      },
      handleCloseBtnClick: function handleCloseBtnClick(e) {
        emitEvent(this, "close-btn-click", {
          e: e
        });
        this.closeDrawer({
          trigger: "close-btn",
          e: e
        });
      },
      handleWrapperClick: function handleWrapperClick(e) {
        var _this$closeOnOverlayC;

        emitEvent(this, "overlay-click", {
          e: e
        });

        if ((_this$closeOnOverlayC = this.closeOnOverlayClick) !== null && _this$closeOnOverlayC !== void 0 ? _this$closeOnOverlayC : this.global.closeOnOverlayClick) {
          this.closeDrawer({
            trigger: "overlay",
            e: e
          });
        }
      },
      onKeyDown: function onKeyDown(e) {
        if (e.key === "Escape") {
          var _this$closeOnEscKeydo;

          emitEvent(this, "esc-keydown", {
            e: e
          });

          if ((_this$closeOnEscKeydo = this.closeOnEscKeydown) !== null && _this$closeOnEscKeydo !== void 0 ? _this$closeOnEscKeydo : this.global.closeOnEscKeydown) {
            this.closeDrawer({
              trigger: "esc",
              e: e
            });
          }
        }
      },
      confirmBtnAction: function confirmBtnAction(e) {
        emitEvent(this, "confirm", {
          e: e
        });
      },
      cancelBtnAction: function cancelBtnAction(e) {
        emitEvent(this, "cancel", {
          e: e
        });
        this.closeDrawer({
          trigger: "cancel",
          e: e
        });
      },
      closeDrawer: function closeDrawer(params) {
        emitEvent(this, "close", params);
        this.$emit("update:visible", false);
      }
    }
  });

  var Drawer = withInstall(_Drawer);

  var Message = withInstall(_Message);

  var props$2 = {
    closeBtn: {
      type: [String, Boolean, Function],
      "default": void 0
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    duration: {
      type: Number,
      "default": 3e3
    },
    footer: {
      type: [String, Function]
    },
    icon: {
      type: [Boolean, Function],
      "default": true
    },
    theme: {
      type: String,
      "default": "info",
      validator: function validator(val) {
        return ["info", "success", "warning", "error"].includes(val);
      }
    },
    title: {
      type: [String, Function]
    },
    onCloseBtnClick: Function,
    onDurationEnd: Function
  };

  function ownKeys$6(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$6(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$6(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins$1 = getClassPrefixMixins("notification");
  var _Notification = mixins(classPrefixMixins$1, getGlobalIconMixins()).extend({
    name: "TNotification",
    props: _objectSpread$6({}, props$2),
    mounted: function mounted() {
      var _this = this;

      if (this.duration > 0) {
        var timer = setTimeout(function () {
          clearTimeout(timer);

          _this.$emit("duration-end");

          if (_this.onDurationEnd) {
            _this.onDurationEnd();
          }
        }, this.duration);
      }
    },
    methods: {
      close: function close(e) {
        this.$emit("close-btn-click", {
          e: e
        });

        if (this.onCloseBtnClick) {
          this.onCloseBtnClick({
            e: e
          });
        }
      },
      renderIcon: function renderIcon(h) {
        var icon;
        if (this.icon === false) return null;

        if (isFunction_1(this.icon)) {
          icon = this.icon(h);
        } else if (this.$scopedSlots.icon) {
          icon = this.$scopedSlots.icon(null);
        } else if (this.theme) {
          var _this$useGlobalIcon = this.useGlobalIcon({
            InfoCircleFilledIcon: InfoCircleFilled,
            CheckCircleFilledIcon: CheckCircleFilled
          }),
              InfoCircleFilledIcon = _this$useGlobalIcon.InfoCircleFilledIcon,
              CheckCircleFilledIcon = _this$useGlobalIcon.CheckCircleFilledIcon;

          var iconType = this.theme === "success" ? h(CheckCircleFilledIcon, {
            "class": "".concat(this.classPrefix, "-is-").concat(this.theme)
          }) : h(InfoCircleFilledIcon, {
            "class": "".concat(this.classPrefix, "-is-").concat(this.theme)
          });
          icon = h("div", {
            "class": "".concat(this.componentName, "__icon")
          }, [iconType]);
        }

        return icon;
      },
      renderClose: function renderClose() {
        var h = this.$createElement;

        var _this$useGlobalIcon2 = this.useGlobalIcon({
          CloseIcon: Close
        }),
            CloseIcon = _this$useGlobalIcon2.CloseIcon;

        var defaultClose = h(CloseIcon);
        return h("span", {
          "class": "".concat(this.classPrefix, "-message__close"),
          "on": {
            "click": this.close
          }
        }, [renderTNodeJSX(this, "closeBtn", defaultClose)]);
      },
      renderContent: function renderContent$1() {
        var h = this.$createElement;
        return h("div", {
          "class": "".concat(this.componentName, "__content")
        }, [renderContent(this, "default", "content")]);
      }
    },
    render: function render(h) {
      var icon = this.renderIcon(h);
      var close = this.renderClose();
      var content = this.renderContent();
      var footer = renderTNodeJSX(this, "footer");
      var title = renderTNodeJSX(this, "title");
      return h("div", {
        "class": "".concat(this.componentName)
      }, [icon, h("div", {
        "class": "".concat(this.componentName, "__main")
      }, [h("div", {
        "class": "".concat(this.componentName, "__title__wrap")
      }, [h("span", {
        "class": "".concat(this.componentName, "__title")
      }, [title]), close]), content, footer])]);
    }
  });

  var DEFAULT_Z_INDEX = 6e3;
  var DISTANCE = "16px";
  var PLACEMENT_OFFSET = {
    "top-left": {
      left: DISTANCE,
      top: DISTANCE
    },
    "top-right": {
      right: DISTANCE,
      top: DISTANCE
    },
    "bottom-right": {
      right: DISTANCE,
      bottom: DISTANCE
    },
    "bottom-left": {
      left: DISTANCE,
      bottom: DISTANCE
    }
  };

  function ownKeys$5(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$5(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$5(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var classPrefixMixins = getClassPrefixMixins("notification");
  var NotificationList = mixins(classPrefixMixins).extend({
    components: {
      Notification: _Notification
    },
    props: {
      placement: {
        type: String,
        "default": "top-right",
        validator: function validator(v) {
          return ["top-left", "top-right", "bottom-left", "bottom-right"].indexOf(v) > -1;
        }
      }
    },
    data: function data() {
      return {
        list: []
      };
    },
    computed: {
      styles: function styles() {
        return _objectSpread$5({
          zIndex: DEFAULT_Z_INDEX
        }, PLACEMENT_OFFSET[this.placement]);
      }
    },
    methods: {
      add: function add(options) {
        this.list.push(options);
        return this.list.length - 1;
      },
      remove: function remove(index) {
        this.list.splice(index, 1);
      },
      removeAll: function removeAll() {
        this.list = [];
      },
      getOffset: function getOffset(val) {
        if (!val) return;
        return isNaN(Number(val)) ? val : "".concat(val, "px");
      },
      notificationStyles: function notificationStyles(item) {
        var styles = {
          marginBottom: DISTANCE
        };

        if (item.offset) {
          styles.position = "relative";
          styles.left = this.getOffset(item.offset[0]);
          styles.top = this.getOffset(item.offset[1]);
        }

        if (item.zIndex) styles["z-index"] = item.zIndex;
        return styles;
      },
      getListeners: function getListeners(index) {
        var _this = this;

        return {
          "close-btn-click": function closeBtnClick() {
            return _this.remove(index);
          },
          "duration-end": function durationEnd() {
            return _this.remove(index);
          }
        };
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];
      if (!this.list.length) return;
      return h("div", {
        "class": "".concat(this.componentName, "__show--").concat(this.placement),
        "style": this.styles
      }, [this.list.map(function (item, index) {
        return h("t-notification", {
          "key": item.id,
          "style": _this2.notificationStyles(item),
          "props": _objectSpread$5({}, item),
          "on": _objectSpread$5({}, _this2.getListeners(index))
        });
      })]);
    }
  });

  function ownKeys$4(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$4(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$4(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var seed = 0;
  var instanceMap = /* @__PURE__ */new Map();

  var NotificationFunction = function NotificationFunction(options) {
    seed += 1;

    var hackOptions = _objectSpread$4({
      placement: "top-right",
      zIndex: 6e3,
      attach: "body",
      id: seed
    }, options);

    hackOptions.content = options.content ? options.content : "";
    var attachEl = getAttach(hackOptions.attach);

    if (!instanceMap.get(attachEl)) {
      instanceMap.set(attachEl, {});
    }

    var tmpInstance = instanceMap.get(attachEl)[hackOptions.placement];

    if (!tmpInstance) {
      var list = new NotificationList({
        propsData: {
          placement: hackOptions.placement
        }
      });
      list.add(hackOptions);
      list.$mount();
      instanceMap.get(attachEl)[hackOptions.placement] = list;
      attachEl.appendChild(list.$el);
      tmpInstance = instanceMap.get(attachEl)[hackOptions.placement];
    } else {
      tmpInstance.add(hackOptions);
    }

    return new Promise(function (resolve) {
      tmpInstance.$nextTick(function () {
        var list = tmpInstance.$children;
        resolve(list[list.length - 1]);
      });
    });
  };

  var showThemeNotification = function showThemeNotification(theme, options) {
    var hackOptions = _objectSpread$4(_objectSpread$4({}, options), {}, {
      theme: theme
    });

    return NotificationFunction(hackOptions);
  };

  var extraApi = {
    info: function info(options) {
      return showThemeNotification("info", options);
    },
    success: function success(options) {
      return showThemeNotification("success", options);
    },
    warning: function warning(options) {
      return showThemeNotification("warning", options);
    },
    error: function error(options) {
      return showThemeNotification("error", options);
    },
    close: function close(promise) {
      promise.then(function (instance) {
        return instance.close();
      });
    },
    closeAll: function closeAll() {
      instanceMap.forEach(function (attach) {
        Object.keys(attach).forEach(function (placement) {
          attach[placement].removeAll();
        });
      });
    }
  };
  var NotificationPlugin = showThemeNotification;
  Object.keys(extraApi).forEach(function (funcName) {
    NotificationPlugin[funcName] = extraApi[funcName];
  });

  NotificationPlugin.install = function () {
    Vue__default["default"].prototype.$notify = NotificationPlugin;
    Vue__default["default"].prototype.$notification = NotificationPlugin;
  };

  var NotifyPlugin = NotificationPlugin;

  var Notification = withInstall(_Notification);

  var props$1 = {
    cancelBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    confirmBtn: {
      type: [String, Object, Function],
      "default": ""
    },
    content: {
      type: [String, Function]
    },
    "default": {
      type: [String, Function]
    },
    destroyOnClose: {
      type: Boolean,
      "default": true
    },
    icon: {
      type: Function
    },
    placement: {
      type: String,
      "default": "top",
      validator: function validator(val) {
        return ["top", "left", "right", "bottom", "top-left", "top-right", "bottom-left", "bottom-right", "left-top", "left-bottom", "right-top", "right-bottom"].includes(val);
      }
    },
    popupProps: {
      type: Object
    },
    showArrow: {
      type: Boolean,
      "default": true
    },
    theme: {
      type: String,
      "default": "default",
      validator: function validator(val) {
        return ["default", "warning", "danger"].includes(val);
      }
    },
    triggerElement: {
      type: [String, Function]
    },
    visible: Boolean,
    defaultVisible: Boolean,
    onCancel: Function,
    onConfirm: Function,
    onVisibleChange: Function
  };

  function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$3(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Popconfirm = mixins(ActionMixin, getConfigReceiverMixins("popconfirm"), getGlobalIconMixins()).extend({
    name: "TPopconfirm",
    props: _objectSpread$3({}, props$1),
    model: {
      prop: "visible",
      event: "visible-change"
    },
    computed: {
      themeIcon: function themeIcon() {
        var _this$useGlobalIcon = this.useGlobalIcon({
          InfoCircleFilledIcon: InfoCircleFilled,
          ErrorCircleFilledIcon: ErrorCircleFilled
        }),
            InfoCircleFilledIcon = _this$useGlobalIcon.InfoCircleFilledIcon,
            ErrorCircleFilledIcon = _this$useGlobalIcon.ErrorCircleFilledIcon;

        var iconMap = {
          "default": InfoCircleFilledIcon,
          warning: ErrorCircleFilledIcon,
          danger: ErrorCircleFilledIcon
        };
        return iconMap[this.theme];
      },
      iconCls: function iconCls() {
        var theme = this.theme || "default";
        return "".concat(this.componentName, "__icon--").concat(theme);
      },
      innerPopupProps: function innerPopupProps() {
        return _objectSpread$3({
          showArrow: this.showArrow,
          overlayClassName: [this.componentName, "".concat(this.componentName, "__popup--").concat(this.theme || "default")],
          trigger: "click",
          destroyOnClose: this.destroyOnClose,
          placement: this.placement
        }, this.popupProps);
      }
    },
    methods: {
      cancelBtnAction: function cancelBtnAction(e) {
        emitEvent(this, "cancel", {
          e: e
        });
        var cancelContext = {
          e: e,
          trigger: "cancel"
        };
        emitEvent(this, "visible-change", false, cancelContext);
      },
      confirmBtnAction: function confirmBtnAction(e) {
        emitEvent(this, "confirm", {
          e: e
        });
        var confirmContext = {
          e: e,
          trigger: "confirm"
        };
        emitEvent(this, "visible-change", false, confirmContext);
      },
      renderIcon: function renderIcon() {
        var h = this.$createElement;
        var Icon = this.themeIcon;
        return renderTNodeJSXDefault(this, "icon", h(Icon, {
          "class": this.iconCls
        }));
      },
      onPopupVisibleChange: function onPopupVisibleChange(val, context) {
        this.$emit("visible-change", val, context);
        this.onVisibleChange && this.onVisibleChange(val, context);
      }
    },
    render: function render() {
      var h = arguments[0];
      var triggerElement = renderContent(this, "default", "triggerElement");
      var cancelBtn = this.getCancelBtn({
        cancelBtn: this.cancelBtn,
        globalCancel: this.global.cancel,
        size: "small",
        className: "".concat(this.componentName, "__cancel")
      });
      var confirmBtn = this.getConfirmBtn({
        theme: this.theme,
        confirmBtn: this.confirmBtn,
        globalConfirm: this.global.confirm,
        size: "small",
        globalConfirmBtnTheme: this.global.confirmBtnTheme,
        className: "".concat(this.componentName, "__confirm")
      });
      return h(Popup, helper([{
        "ref": "popup",
        "attrs": {
          "visible": this.visible
        }
      }, {
        "props": this.innerPopupProps
      }, {}, {
        "on": {
          "visible-change": this.onPopupVisibleChange
        }
      }]), [h("template", {
        "slot": "content",
        "attrs": {
          "role": "popconfirm"
        }
      }, [h("div", {
        "class": "".concat(this.componentName, "__content")
      }, [h("div", {
        "class": "".concat(this.componentName, "__body")
      }, [this.renderIcon(), h("div", {
        "class": "".concat(this.componentName, "__inner")
      }, [renderTNodeJSX(this, "content")])]), Boolean(cancelBtn || confirmBtn) && h("div", {
        "class": "".concat(this.componentName, "__buttons")
      }, [cancelBtn, confirmBtn])])]), triggerElement]);
    }
  });

  var Popconfirm = withInstall(mapProps(["visible"], {
    model: {
      prop: "visible",
      event: "visible-change"
    }
  })(_Popconfirm));

  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG$1 = 1,
      COMPARE_UNORDERED_FLAG$1 = 2;
  /**
   * The base implementation of `_.isMatch` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Array} matchData The property names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */

  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }

    object = Object(object);

    while (index--) {
      var data = matchData[index];

      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }

    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new _Stack();

        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }

        if (!(result === undefined ? _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
          return false;
        }
      }
    }

    return true;
  }

  var _baseIsMatch = baseIsMatch;

  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */

  function isStrictComparable(value) {
    return value === value && !isObject_1(value);
  }

  var _isStrictComparable = isStrictComparable;

  /**
   * Gets the property names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */

  function getMatchData(object) {
    var result = keys_1(object),
        length = result.length;

    while (length--) {
      var key = result[length],
          value = object[key];
      result[length] = [key, value, _isStrictComparable(value)];
    }

    return result;
  }

  var _getMatchData = getMatchData;

  /**
   * A specialized version of `matchesProperty` for source values suitable
   * for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function matchesStrictComparable(key, srcValue) {
    return function (object) {
      if (object == null) {
        return false;
      }

      return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
  }

  var _matchesStrictComparable = matchesStrictComparable;

  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   */

  function baseMatches(source) {
    var matchData = _getMatchData(source);

    if (matchData.length == 1 && matchData[0][2]) {
      return _matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }

    return function (object) {
      return object === source || _baseIsMatch(object, source, matchData);
    };
  }

  var _baseMatches = baseMatches;

  /** Used to compose bitmasks for value comparisons. */

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;
  /**
   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */

  function baseMatchesProperty(path, srcValue) {
    if (_isKey(path) && _isStrictComparable(srcValue)) {
      return _matchesStrictComparable(_toKey(path), srcValue);
    }

    return function (object) {
      var objValue = get_1(object, path);
      return objValue === undefined && objValue === srcValue ? hasIn_1(object, path) : _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
  }

  var _baseMatchesProperty = baseMatchesProperty;

  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   */

  function basePropertyDeep(path) {
    return function (object) {
      return _baseGet(object, path);
    };
  }

  var _basePropertyDeep = basePropertyDeep;

  /**
   * Creates a function that returns the value at `path` of a given object.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': 2 } },
   *   { 'a': { 'b': 1 } }
   * ];
   *
   * _.map(objects, _.property('a.b'));
   * // => [2, 1]
   *
   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
   * // => [1, 2]
   */

  function property(path) {
    return _isKey(path) ? _baseProperty(_toKey(path)) : _basePropertyDeep(path);
  }

  var property_1 = property;

  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */

  function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') {
      return value;
    }

    if (value == null) {
      return identity_1;
    }

    if (_typeof$1(value) == 'object') {
      return isArray_1(value) ? _baseMatchesProperty(value[0], value[1]) : _baseMatches(value);
    }

    return property_1(value);
  }

  var _baseIteratee = baseIteratee;

  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeMax = Math.max;
  /**
   * This method is like `_.find` except that it returns the index of the first
   * element `predicate` returns truthy for instead of the element itself.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the found element, else `-1`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * _.findIndex(users, function(o) { return o.user == 'barney'; });
   * // => 0
   *
   * // The `_.matches` iteratee shorthand.
   * _.findIndex(users, { 'user': 'fred', 'active': false });
   * // => 1
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.findIndex(users, ['active', false]);
   * // => 0
   *
   * // The `_.property` iteratee shorthand.
   * _.findIndex(users, 'active');
   * // => 2
   */

  function findIndex(array, predicate, fromIndex) {
    var length = array == null ? 0 : array.length;

    if (!length) {
      return -1;
    }

    var index = fromIndex == null ? 0 : toInteger_1(fromIndex);

    if (index < 0) {
      index = nativeMax(length + index, 0);
    }

    return _baseFindIndex(array, _baseIteratee(predicate), index);
  }

  var findIndex_1 = findIndex;

  /**
   * Creates an array excluding all given values using
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * **Note:** Unlike `_.pull`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {...*} [values] The values to exclude.
   * @returns {Array} Returns the new array of filtered values.
   * @see _.difference, _.xor
   * @example
   *
   * _.without([2, 1, 2, 3], 1, 2);
   * // => [3]
   */

  var without = _baseRest(function (array, values) {
    return isArrayLikeObject_1(array) ? _baseDifference(array, values) : [];
  });
  var without_1 = without;

  function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$2(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  var SIZE_MAP = {
    B: 1024,
    KB: 1,
    MB: 1048576,
    GB: 1073741824
  };
  function returnFileSize(number) {
    if (number < SIZE_MAP.B) {
      return "".concat(number, " Bytes");
    }

    if (number >= SIZE_MAP.B && number < SIZE_MAP.MB) {
      return "".concat((number / SIZE_MAP.B).toFixed(1), " KB");
    }

    if (number >= SIZE_MAP.MB) {
      return "".concat((number / SIZE_MAP.MB).toFixed(1), " MB");
    }

    return "";
  }
  function getCurrentDate() {
    var d = new Date();
    var month = d.getMonth() + 1;
    month = month < 10 ? "0".concat(month) : month;
    return "".concat(d.getFullYear(), "-").concat(month, "-").concat(d.getDate(), " ").concat(d.getHours(), ":").concat(d.getMinutes(), ":").concat(d.getSeconds());
  }
  function abridgeName(inputName) {
    var leftCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
    var rightCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 7;
    var name = inputName;
    var leftLength = 0;
    var rightLength = 0;

    for (var i = 0; i < name.length; i++) {
      var w = name[i];
      var isCn = escape(w).indexOf("%u") === 0;

      if (i < leftCount * 2 && leftLength < leftCount) {
        isCn ? leftLength += 1 : leftLength += 2;
      } else if (i > i - rightCount && rightLength < rightCount) {
        isCn ? rightLength += 1 : rightLength += 2;
      }
    }

    return name.replace(new RegExp("^(.{".concat(leftLength, "})(.+)(.{").concat(rightLength, "})$")), "$1\u2026$3");
  }
  function isOverSizeLimit(fileSize, sizeLimit, unit) {
    var units = ["B", "KB", "MB", "GB"];
    var KBIndex = 1;
    var index = units.indexOf(unit);

    if (index === -1) {
      console.warn("TDesign Upload Warn: `sizeLimit.unit` can only be one of ".concat(units.join()));
      index = KBIndex;
    }

    var num = SIZE_MAP[unit];
    var limit = index < KBIndex ? sizeLimit / num : sizeLimit * num;
    return fileSize <= limit;
  }
  var urlCreator = function urlCreator() {
    return window.webkitURL || window.URL;
  };
  function formatFiles() {
    var files = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var format = arguments.length > 1 ? arguments[1] : undefined;
    return files.map(function (fileRaw) {
      var _urlCreator;

      var file = typeof format === "function" ? format(fileRaw) : fileRaw;

      var uploadFile = _objectSpread$2({
        raw: fileRaw,
        lastModified: fileRaw.lastModified,
        name: fileRaw.name,
        size: fileRaw.size,
        type: fileRaw.type,
        percent: 0,
        status: "waiting"
      }, file);

      uploadFile.url = (_urlCreator = urlCreator()) === null || _urlCreator === void 0 ? void 0 : _urlCreator.createObjectURL(fileRaw);
      return uploadFile;
    });
  }

  var props = {
    accept: {
      type: String,
      "default": ""
    },
    action: {
      type: String,
      "default": ""
    },
    allowUploadDuplicateFile: Boolean,
    autoUpload: {
      type: Boolean,
      "default": true
    },
    beforeUpload: {
      type: Function
    },
    data: {
      type: Object
    },
    "default": {
      type: [String, Function]
    },
    disabled: Boolean,
    draggable: Boolean,
    fileListDisplay: {
      type: Function
    },
    files: {
      type: Array
    },
    defaultFiles: {
      type: Array
    },
    format: {
      type: Function
    },
    formatResponse: {
      type: Function
    },
    headers: {
      type: Object
    },
    isBatchUpload: Boolean,
    locale: {
      type: Object
    },
    max: {
      type: Number,
      "default": 0
    },
    method: {
      type: String,
      "default": "POST",
      validator: function validator(val) {
        if (!val) return true;
        return ["POST", "GET", "PUT", "OPTION", "PATCH", "post", "get", "put", "option", "patch"].includes(val);
      }
    },
    multiple: Boolean,
    name: {
      type: String,
      "default": "file"
    },
    placeholder: {
      type: String,
      "default": ""
    },
    requestMethod: {
      type: Function
    },
    showUploadProgress: {
      type: Boolean,
      "default": true
    },
    sizeLimit: {
      type: [Number, Object]
    },
    theme: {
      type: String,
      "default": "file",
      validator: function validator(val) {
        if (!val) return true;
        return ["custom", "file", "file-input", "file-flow", "image", "image-flow"].includes(val);
      }
    },
    tips: {
      type: String,
      "default": ""
    },
    trigger: {
      type: [String, Function]
    },
    uploadAllFilesInOneRequest: Boolean,
    useMockProgress: {
      type: Boolean,
      "default": true
    },
    withCredentials: Boolean,
    onCancelUpload: Function,
    onChange: Function,
    onDragenter: Function,
    onDragleave: Function,
    onDrop: Function,
    onFail: Function,
    onPreview: Function,
    onProgress: Function,
    onRemove: Function,
    onSelectChange: Function,
    onSuccess: Function
  };

  function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var Dragger = mixins(getConfigReceiverMixins("upload"), getGlobalIconMixins()).extend({
    name: "TUploadDragger",
    components: {
      TLoading: Loading,
      TButton: Button
    },
    props: {
      showUploadProgress: props.showUploadProgress,
      file: {
        type: Object
      },
      loadingFile: {
        type: Object
      },
      display: {
        type: String,
        validator: function validator(val) {
          return ["file", "file-input", "image", "custom"].includes(val);
        }
      },
      cancel: Function,
      trigger: Function,
      remove: Function,
      upload: Function,
      autoUpload: Boolean
    },
    data: function data() {
      return {
        target: null,
        dragActive: false
      };
    },
    computed: {
      isImage: function isImage() {
        return this.display === "image";
      },
      imageUrl: function imageUrl() {
        return this.loadingFile && this.loadingFile.url || this.file && this.file.url;
      },
      percent: function percent() {
        return this.loadingFile && this.loadingFile.percent;
      },
      inputName: function inputName() {
        return this.loadingFile && this.loadingFile.name || this.file && this.file.name;
      },
      classes: function classes() {
        return ["".concat(this.componentName, "__dragger"), _defineProperty$3({}, "".concat(this.componentName, "__dragger-center"), !this.loadingFile && !this.file), _defineProperty$3({}, "".concat(this.componentName, "__dragger-error"), this.loadingFile && this.loadingFile.status === "fail")];
      },
      size: function size() {
        return this.loadingFile && this.loadingFile.size || this.file && this.file.size;
      },
      showResultOperate: function showResultOperate() {
        var _this$file, _this$loadingFile;

        return Boolean(!this.loadingFile && ((_this$file = this.file) === null || _this$file === void 0 ? void 0 : _this$file.name)) || ["success", "fail"].includes((_this$loadingFile = this.loadingFile) === null || _this$loadingFile === void 0 ? void 0 : _this$loadingFile.status);
      }
    },
    methods: {
      handleDrop: function handleDrop(event) {
        event.preventDefault();
        this.$emit("change", event.dataTransfer.files);
        this.$emit("dragleave", event);
        this.dragActive = false;
      },
      handleDragenter: function handleDragenter(event) {
        this.target = event.target;
        event.preventDefault();
        this.$emit("dragenter", event);
        this.dragActive = true;
      },
      handleDragleave: function handleDragleave(event) {
        if (this.target !== event.target) return;
        event.preventDefault();
        this.$emit("dragleave", event);
        this.dragActive = false;
      },
      handleDragover: function handleDragover(event) {
        event.preventDefault();
      },
      renderDefaultDragElement: function renderDefaultDragElement() {
        var h = this.$createElement;
        var unActiveElement = h("div", [h("span", {
          "class": "".concat(this.componentName, "--highlight")
        }, [this.global.triggerUploadText.normal]), h("span", ["\xA0\xA0/\xA0\xA0", this.global.dragger.draggingText])]);
        var activeElement = h("div", [this.global.dragger.dragDropText]);
        return this.dragActive ? activeElement : unActiveElement;
      },
      renderImage: function renderImage() {
        var h = this.$createElement;
        return h("div", {
          "class": "".concat(this.componentName, "__dragger-img-wrap")
        }, [this.imageUrl && h("img", {
          "attrs": {
            "src": this.imageUrl || "default.png"
          }
        })]);
      },
      renderUploading: function renderUploading() {
        var h = this.$createElement;

        if (this.loadingFile.status === "fail") {
          var _this$useGlobalIcon = this.useGlobalIcon({
            ErrorCircleFilledIcon: ErrorCircleFilled
          }),
              ErrorCircleFilledIcon = _this$useGlobalIcon.ErrorCircleFilledIcon;

          return h(ErrorCircleFilledIcon);
        }

        if (this.loadingFile.status === "progress" && this.showUploadProgress) {
          return h("div", {
            "class": "".concat(this.componentName, "__single-progress")
          }, [h(Loading), h("span", {
            "class": "".concat(this.componentName, "__single-percent")
          }, [Math.min(this.loadingFile.percent, 99), "%"])]);
        }
      },
      reUpload: function reUpload(e) {
        this.remove(e);
        this.trigger(e);
      },
      renderProgress: function renderProgress() {
        var _this$loadingFile2,
            _this$loadingFile3,
            _this = this;

        var h = this.$createElement;

        var _this$useGlobalIcon2 = this.useGlobalIcon({
          CheckCircleFilledIcon: CheckCircleFilled
        }),
            CheckCircleFilledIcon = _this$useGlobalIcon2.CheckCircleFilledIcon;

        return h("div", {
          "class": "".concat(this.componentName, "__dragger-progress")
        }, [this.isImage && this.renderImage(), h("div", {
          "class": "".concat(this.componentName, "__dragger-progress-info")
        }, [h("div", {
          "class": "".concat(this.componentName, "__dragger-text")
        }, [h("span", {
          "class": "".concat(this.componentName, "__single-name")
        }, [abridgeName(this.inputName)]), this.loadingFile && this.renderUploading(), !this.loadingFile && !!this.file && h(CheckCircleFilledIcon)]), h("small", {
          "class": "".concat(this.classPrefix, "-size-s")
        }, [this.global.file.fileSizeText, "\uFF1A", returnFileSize(this.size)]), h("small", {
          "class": "".concat(this.classPrefix, "-size-s")
        }, [this.global.file.fileOperationDateText, "\uFF1A", getCurrentDate()]), h("div", {
          "class": "".concat(this.componentName, "__dragger-btns")
        }, [["progress", "waiting"].includes((_this$loadingFile2 = this.loadingFile) === null || _this$loadingFile2 === void 0 ? void 0 : _this$loadingFile2.status) && h(Button, {
          "attrs": {
            "theme": "primary",
            "variant": "text"
          },
          "class": "".concat(this.componentName, "__dragger-progress-cancel"),
          "on": {
            "click": this.cancel
          }
        }, [this.global.cancelUploadText]), !this.autoUpload && ((_this$loadingFile3 = this.loadingFile) === null || _this$loadingFile3 === void 0 ? void 0 : _this$loadingFile3.status) === "waiting" && h(Button, {
          "attrs": {
            "theme": "primary",
            "variant": "text"
          },
          "on": {
            "click": function click(e) {
              return _this.upload(_objectSpread$1({}, _this.loadingFile), e);
            }
          }
        }, [this.global.triggerUploadText.normal])]), this.showResultOperate && h("div", {
          "class": "".concat(this.componentName, "__dragger-btns")
        }, [h(Button, {
          "attrs": {
            "theme": "primary",
            "variant": "text"
          },
          "class": "".concat(this.componentName, "__dragger-progress-cancel"),
          "on": {
            "click": this.reUpload
          }
        }, [this.global.triggerUploadText.reupload]), h(Button, {
          "attrs": {
            "theme": "primary",
            "variant": "text"
          },
          "on": {
            "click": this.remove
          }
        }, [this.global.triggerUploadText["delete"]])])])]);
      }
    },
    render: function render() {
      var h = arguments[0];
      var content = null;

      if ((this.loadingFile || this.file) && this.display !== "custom") {
        content = this.renderProgress();
      } else {
        content = h("div", {
          "class": "".concat(this.componentName, "__trigger"),
          "on": {
            "click": this.trigger
          }
        }, [this.$scopedSlots["default"] && this.$scopedSlots["default"](null) || this.renderDefaultDragElement()]);
      }

      return h("div", {
        "class": this.classes,
        "on": {
          "drop": this.handleDrop,
          "dragenter": this.handleDragenter,
          "dragover": this.handleDragover,
          "dragleave": this.handleDragleave
        }
      }, [content]);
    }
  });

  var ImageCard = mixins(getConfigReceiverMixins("upload"), getGlobalIconMixins()).extend({
    name: "TImageUpload",
    components: {
      TLoading: Loading
    },
    props: {
      showUploadProgress: props.showUploadProgress,
      files: {
        type: Array
      },
      loadingFile: {
        type: Object
      },
      trigger: {
        type: Function
      },
      remove: {
        type: Function
      },
      multiple: Boolean,
      max: Number,
      disabled: Boolean,
      locale: Object
    },
    computed: {
      showTrigger: function showTrigger() {
        if (this.multiple) {
          return !this.max || this.files.length < this.max;
        }

        return !(this.files && this.files[0]);
      }
    },
    methods: {
      onMaskClick: function onMaskClick(e) {
        !this.showTrigger && this.trigger(e);
      },
      onViewClick: function onViewClick(e, file) {
        this.$emit("imgPreview", e, file);
      }
    },
    render: function render() {
      var _this = this,
          _this$locale,
          _this$locale$triggerU;

      var h = arguments[0];

      var _this$useGlobalIcon = this.useGlobalIcon({
        AddIcon: Add,
        DeleteIcon: Delete,
        BrowseIcon: Browse
      }),
          AddIcon = _this$useGlobalIcon.AddIcon,
          DeleteIcon = _this$useGlobalIcon.DeleteIcon,
          BrowseIcon = _this$useGlobalIcon.BrowseIcon;

      return h("ul", {
        "class": "".concat(this.componentName, "__card")
      }, [this.files && this.files.map(function (file, index) {
        return h("li", {
          "class": "".concat(_this.componentName, "__card-item ").concat(_this.classPrefix, "-is--background")
        }, [h("div", {
          "class": "".concat(_this.componentName, "__card-content ").concat(_this.componentName, "__card-box")
        }, [h("img", {
          "class": "".concat(_this.componentName, "__card-image"),
          "attrs": {
            "src": file.url
          }
        }), h("div", {
          "class": "".concat(_this.componentName, "__card-mask"),
          "on": {
            "click": _this.onMaskClick
          }
        }, [h("span", {
          "class": "".concat(_this.componentName, "__card-mask-item"),
          "on": {
            "click": function click(e) {
              return e.stopPropagation();
            }
          }
        }, [h(BrowseIcon, {
          "nativeOn": {
            "click": function click(e) {
              return _this.onViewClick(e, file);
            }
          }
        })]), !_this.disabled && [h("span", {
          "class": "".concat(_this.componentName, "__card-mask-item-divider"),
          "key": "divider"
        }), h("span", {
          "class": "".concat(_this.componentName, "__card-mask-item"),
          "on": {
            "click": function click(e) {
              return e.stopPropagation();
            }
          },
          "key": "delete-icon"
        }, [h(DeleteIcon, {
          "nativeOn": {
            "click": function click(e) {
              return _this.remove({
                e: e,
                file: file,
                index: index
              });
            }
          }
        })])]])])]);
      }), this.showTrigger && h("li", {
        "class": ["".concat(this.componentName, "__card-item"), "".concat(this.classPrefix, "-is--background"), _defineProperty$3({}, this.commonStatusClassName.disabled, this.disabled)],
        "on": {
          "click": this.trigger
        }
      }, [this.showUploadProgress && this.loadingFile && this.loadingFile.status === "progress" ? h("div", {
        "class": "".concat(this.componentName, "__card-container ").concat(this.componentName, "__card-box")
      }, [h(Loading), h("p", [this.global.progress.uploadingText, " ", Math.min(this.loadingFile.percent, 99), "%"])]) : h("div", {
        "class": "".concat(this.componentName, "__card-container ").concat(this.componentName, "__card-box")
      }, [h(AddIcon), h("p", {
        "class": "".concat(this.classPrefix, "-size-s")
      }, [((_this$locale = this.locale) === null || _this$locale === void 0 ? void 0 : (_this$locale$triggerU = _this$locale.triggerUploadText) === null || _this$locale$triggerU === void 0 ? void 0 : _this$locale$triggerU.image) || this.global.triggerUploadText.image])])])]);
    }
  });

  var FlowList = mixins(getConfigReceiverMixins("upload"), getGlobalIconMixins()).extend({
    name: "TUploadFlowList",
    components: {
      TButton: Button,
      TLoading: Loading
    },
    props: {
      showUploadProgress: props.showUploadProgress,
      allowUploadDuplicateFile: props.allowUploadDuplicateFile,
      files: Array,
      batchUpload: Boolean,
      toUploadFiles: Array,
      placeholder: String,
      autoUpload: Boolean,
      disabled: Boolean,
      remove: Function,
      upload: Function,
      cancel: Function,
      display: {
        type: String,
        validator: function validator(val) {
          return ["file-flow", "image-flow"].includes(val);
        }
      }
    },
    data: function data() {
      return {
        dragActive: false,
        target: null
      };
    },
    computed: {
      showInitial: function showInitial() {
        var isWaitingEmpty = !this.waitingUploadFiles || !this.waitingUploadFiles.length;
        return (!this.files || !this.files.length) && isWaitingEmpty;
      },
      waitingUploadFiles: function waitingUploadFiles() {
        var _this = this;

        var list = [];
        this.toUploadFiles.forEach(function (item) {
          if (!_this.allowUploadDuplicateFile) {
            var r = _this.files.filter(function (t) {
              return t.name === item.name;
            });

            if (!r.length) {
              list.push(item);
            }
          } else {
            list.push(item);
          }
        });
        return list;
      },
      listFiles: function listFiles() {
        if (!this.files || !this.files.length) return this.toUploadFiles;
        return this.files.concat(this.waitingUploadFiles);
      },
      failedList: function failedList() {
        return this.toUploadFiles.filter(function (file) {
          return file.status === "fail";
        });
      },
      processList: function processList() {
        return this.toUploadFiles.filter(function (file) {
          return file.status === "progress";
        });
      },
      isUploading: function isUploading() {
        return !!this.processList.length;
      },
      allowUpload: function allowUpload() {
        return Boolean(this.waitingUploadFiles && this.waitingUploadFiles.length) && !this.isUploading;
      },
      uploadText: function uploadText() {
        if (this.isUploading) return "".concat(this.global.progress.uploadingText, "...");
        return this.failedList && this.failedList.length ? this.global.triggerUploadText.reupload : this.global.triggerUploadText.normal;
      },
      batchRemoveRow: function batchRemoveRow() {
        return this.batchUpload && this.files.length > 0;
      }
    },
    methods: {
      renderStatus: function renderStatus(file) {
        var h = this.$createElement;
        var status = null;

        var _this$useGlobalIcon = this.useGlobalIcon({
          TimeFilledIcon: TimeFilled,
          CheckCircleFilledIcon: CheckCircleFilled,
          ErrorCircleFilledIcon: ErrorCircleFilled
        }),
            TimeFilledIcon = _this$useGlobalIcon.TimeFilledIcon,
            CheckCircleFilledIcon = _this$useGlobalIcon.CheckCircleFilledIcon,
            ErrorCircleFilledIcon = _this$useGlobalIcon.ErrorCircleFilledIcon;

        switch (file.status) {
          case "success":
            status = h("div", {
              "class": "".concat(this.componentName, "__flow-status")
            }, [h(CheckCircleFilledIcon), h("span", [this.global.progress.successText])]);
            break;

          case "fail":
            status = h("div", {
              "class": "".concat(this.componentName, "__flow-status")
            }, [h(ErrorCircleFilledIcon), h("span", [this.global.progress.failText])]);
            break;

          case "progress":
            this.showUploadProgress && (status = h("div", {
              "class": "".concat(this.componentName, "__flow-status")
            }, [h(Loading), h("span", ["".concat(this.global.progress.uploadingText, " ").concat(Math.min(file.percent, 99), "%")])]));
            break;

          case "waiting":
            status = h("div", {
              "class": "".concat(this.componentName, "__flow-status")
            }, [h(TimeFilledIcon), h("span", [this.global.progress.waitingText])]);
            break;
        }

        return status;
      },
      handleDrop: function handleDrop(event) {
        event.preventDefault();
        this.$emit("change", event.dataTransfer.files);
        this.$emit("dragleave", event);
        this.dragActive = false;
      },
      handleDragenter: function handleDragenter(event) {
        this.target = event.target;
        event.preventDefault();
        this.$emit("dragenter", event);
        this.dragActive = true;
      },
      handleDragleave: function handleDragleave(event) {
        if (this.target !== event.target) return;
        event.preventDefault();
        this.$emit("dragleave", event);
        this.dragActive = false;
      },
      handleDragover: function handleDragover(event) {
        event.preventDefault();
      },
      onViewClick: function onViewClick(event, file) {
        this.$emit("imgPreview", event, file);
      },
      renderDragger: function renderDragger() {
        var h = this.$createElement;
        return h("div", {
          "class": "".concat(this.componentName, "__flow-empty"),
          "on": {
            "drop": this.handleDrop,
            "dragenter": this.handleDragenter,
            "dragover": this.handleDragover,
            "dragleave": this.handleDragleave
          }
        }, [this.dragActive ? this.global.dragger.dragDropText : this.global.dragger.clickAndDragText]);
      },
      renderFileList: function renderFileList() {
        var _this2 = this;

        var h = this.$createElement;
        return h("table", {
          "class": "".concat(this.componentName, "__flow-table")
        }, [h("tr", [h("th", [this.global.file.fileNameText]), h("th", [this.global.file.fileSizeText]), h("th", [this.global.file.fileStatusText]), h("th", [this.global.file.fileOperationText])]), this.showInitial && h("tr", [h("td", {
          "attrs": {
            "colspan": 4
          }
        }, [this.renderDragger()])]), this.listFiles.map(function (file, index) {
          var showBatchUploadAction = _this2.batchUpload && _this2.toUploadFiles.length === 0;
          return h("tr", [h("td", [abridgeName(file.name, 7, 10)]), h("td", [returnFileSize(file.size)]), h("td", [_this2.renderStatus(file)]), showBatchUploadAction ? _this2.renderBatchActionCol(index) : _this2.renderNormalActionCol(file, index)]);
        })]);
      },
      renderNormalActionCol: function renderNormalActionCol(file, index) {
        var _this3 = this;

        var h = this.$createElement;
        return h("td", [h("span", {
          "class": "".concat(this.componentName, "__flow-button"),
          "on": {
            "click": function click(e) {
              return _this3.remove({
                e: e,
                index: index,
                file: file
              });
            }
          }
        }, [this.global.triggerUploadText["delete"]])]);
      },
      renderBatchActionCol: function renderBatchActionCol(index) {
        var _this4 = this;

        var h = this.$createElement;
        return index === 0 ? h("td", {
          "attrs": {
            "rowspan": this.listFiles.length
          },
          "class": "".concat(this.componentName, "__flow-table__batch-row")
        }, [h("span", {
          "class": "".concat(this.componentName, "__flow-button"),
          "on": {
            "click": function click(e) {
              return _this4.remove({
                e: e,
                index: -1,
                file: null
              });
            }
          }
        }, [this.global.triggerUploadText["delete"]])]) : "";
      },
      renderImgList: function renderImgList() {
        var _this5 = this;

        var h = this.$createElement;

        var _this$useGlobalIcon2 = this.useGlobalIcon({
          ErrorCircleFilledIcon: ErrorCircleFilled,
          DeleteIcon: Delete,
          BrowseIcon: Browse
        }),
            ErrorCircleFilledIcon = _this$useGlobalIcon2.ErrorCircleFilledIcon,
            DeleteIcon = _this$useGlobalIcon2.DeleteIcon,
            BrowseIcon = _this$useGlobalIcon2.BrowseIcon;

        return h("div", {
          "class": "".concat(this.componentName, "__flow-card-area")
        }, [this.showInitial && this.renderDragger(), !!this.listFiles.length && h("ul", {
          "class": "".concat(this.componentName, "__card clearfix")
        }, [this.listFiles.map(function (file, index) {
          return h("li", {
            "class": "".concat(_this5.componentName, "__card-item")
          }, [h("div", {
            "class": ["".concat(_this5.componentName, "__card-content"), _defineProperty$3({}, "".concat(_this5.classPrefix, "-is-bordered"), file.status !== "waiting")]
          }, [file.status === "fail" && h("div", {
            "class": "".concat(_this5.componentName, "__card-status-wrap")
          }, [h(ErrorCircleFilledIcon), h("p", [_this5.global.progress.failText])]), file.status === "progress" && h("div", {
            "class": "".concat(_this5.componentName, "__card-status-wrap")
          }, [h(Loading), h("p", [_this5.global.progress.uploadingText, " ", Math.min(file.percent, 99)])]), (["waiting", "success"].includes(file.status) || !file.status && file.url) && h("img", {
            "class": "".concat(_this5.componentName, "__card-image"),
            "attrs": {
              "src": file.url || "//tdesign.gtimg.com/tdesign-default-img.png"
            }
          }), h("div", {
            "class": "".concat(_this5.componentName, "__card-mask")
          }, [file.url && h("span", {
            "class": "".concat(_this5.componentName, "__card-mask-item")
          }, [h(BrowseIcon, {
            "nativeOn": {
              "click": function click(e) {
                return _this5.onViewClick(e, file);
              }
            }
          }), h("span", {
            "class": "".concat(_this5.componentName, "__card-mask-item-divider")
          })]), !_this5.disabled && h("span", {
            "class": "".concat(_this5.componentName, "__card-mask-item"),
            "on": {
              "click": function click(e) {
                return _this5.remove({
                  e: e,
                  index: index,
                  file: file
                });
              }
            }
          }, [h(DeleteIcon)])])]), h("p", {
            "class": "".concat(_this5.componentName, "__card-name")
          }, [abridgeName(file.name)])]);
        })])]);
      }
    },
    render: function render() {
      var _this6 = this;

      var h = arguments[0];
      return h("div", {
        "class": ["".concat(this.componentName, "__flow"), "".concat(this.componentName, "__flow-").concat(this.display)]
      }, [h("div", {
        "class": "".concat(this.componentName, "__flow-op")
      }, [this.$scopedSlots["default"] && this.$scopedSlots["default"](null), h("small", {
        "class": "".concat(this.classPrefix, "-size-s ").concat(this.componentName, "__flow-placeholder")
      }, [this.placeholder])]), this.display === "file-flow" && this.renderFileList(), this.display === "image-flow" && this.renderImgList(), h("div", {
        "class": "".concat(this.componentName, "__flow-bottom")
      }, [h(Button, {
        "attrs": {
          "theme": "default"
        },
        "on": {
          "click": this.cancel
        }
      }, [this.global.cancelUploadText]), h(Button, {
        "attrs": {
          "disabled": !this.allowUpload,
          "theme": "primary"
        },
        "on": {
          "click": function click(e) {
            return _this6.upload(_this6.waitingUploadFiles, e);
          }
        }
      }, [this.uploadText])])]);
    }
  });

  function xhr(_ref) {
    var _ref$method = _ref.method,
        method = _ref$method === void 0 ? "POST" : _ref$method,
        action = _ref.action,
        _ref$withCredentials = _ref.withCredentials,
        withCredentials = _ref$withCredentials === void 0 ? false : _ref$withCredentials,
        _ref$headers = _ref.headers,
        headers = _ref$headers === void 0 ? {} : _ref$headers,
        _ref$data = _ref.data,
        data = _ref$data === void 0 ? {} : _ref$data,
        file = _ref.file,
        files = _ref.files,
        _ref$name = _ref.name,
        name = _ref$name === void 0 ? "file" : _ref$name,
        onError = _ref.onError,
        onProgress = _ref.onProgress,
        onSuccess = _ref.onSuccess;
    var innerFiles = files || [];
    var xhr2 = new XMLHttpRequest();

    if (withCredentials) {
      xhr2.withCredentials = true;
    }

    var formData = new FormData();
    var sendData = typeof data === "function" ? data(file) : data;
    Object.keys(sendData).forEach(function (key) {
      formData.append(key, sendData[key]);
    });
    innerFiles.forEach(function (f) {
      formData.append(name, f && f.raw);
    });
    xhr2.open(method, action, true);
    Object.keys(headers).forEach(function (key) {
      xhr2.setRequestHeader(key, headers[key]);
    });

    xhr2.onerror = function (event) {
      return onError({
        event: event,
        file: file,
        files: innerFiles
      });
    };

    if (xhr2.upload) {
      xhr2.upload.onprogress = function (event) {
        var percent = 0;

        if (event.total > 0) {
          percent = Math.round(event.loaded / event.total * 100);
        }

        onProgress({
          event: event,
          percent: percent,
          file: file,
          files: innerFiles
        });
      };
    }

    xhr2.onload = function (event) {
      var response;
      var isFail = xhr2.status < 200 || xhr2.status >= 300;

      if (isFail) {
        return onError({
          event: event,
          file: file,
          files: innerFiles,
          response: response
        });
      }

      var text = xhr2.responseText || xhr2.response;

      try {
        response = JSON.parse(text);
      } catch (e) {
        response = text;
      }

      onSuccess({
        event: event,
        file: file,
        files: innerFiles,
        response: response
      });
    };

    xhr2.send(formData);
    return xhr2;
  }

  var SingleFile = mixins(getConfigReceiverMixins("upload"), getGlobalIconMixins()).extend({
    name: "TUploadSingleFile",
    components: {
      Loading: Loading
    },
    data: function data() {
      return {};
    },
    props: {
      showUploadProgress: props.showUploadProgress,
      file: Object,
      loadingFile: Object,
      remove: Function,
      placeholder: String,
      display: {
        type: String,
        validator: function validator(val) {
          return ["file", "file-input"].includes(val);
        }
      }
    },
    computed: {
      percent: function percent() {
        return this.loadingFile && this.loadingFile.percent;
      },
      showPreview: function showPreview() {
        return Boolean(this.file && this.file.name);
      },
      showTextPreview: function showTextPreview() {
        return this.display === "file";
      },
      showInput: function showInput() {
        return this.display === "file-input";
      },
      showProgress: function showProgress() {
        return !!(this.loadingFile && this.loadingFile.status === "progress");
      },
      showDelete: function showDelete() {
        return this.file && this.file.name && !this.loadingFile;
      },
      inputName: function inputName() {
        var fileName = this.file && this.file.name;
        var loadingName = this.loadingFile && this.loadingFile.name;
        return this.showProgress ? loadingName : fileName;
      },
      inputText: function inputText() {
        return this.inputName || this.placeholder;
      },
      inputTextClass: function inputTextClass() {
        return ["".concat(this.classPrefix, "-input__inner"), _defineProperty$3({}, "".concat(this.componentName, "__placeholder"), !this.inputName)];
      },
      classes: function classes() {
        return ["".concat(this.componentName, "__single"), "".concat(this.componentName, "__single-").concat(this.display)];
      }
    },
    methods: {
      renderProgress: function renderProgress() {
        var h = this.$createElement;

        if (this.loadingFile.status === "fail") {
          var _this$useGlobalIcon = this.useGlobalIcon({
            ErrorCircleFilledIcon: ErrorCircleFilled
          }),
              ErrorCircleFilledIcon = _this$useGlobalIcon.ErrorCircleFilledIcon;

          return h(ErrorCircleFilledIcon);
        }

        if (this.showUploadProgress) {
          return h("div", {
            "class": "".concat(this.componentName, "__single-progress")
          }, [h(Loading), h("span", {
            "class": "".concat(this.componentName, "__single-percent")
          }, [Math.min(this.loadingFile.percent, 99), "%"])]);
        }
      },
      renderResult: function renderResult() {
        var h = this.$createElement;

        if (!!this.loadingFile && this.loadingFile.status === "fail") {
          var _this$useGlobalIcon2 = this.useGlobalIcon({
            ErrorCircleFilledIcon: ErrorCircleFilled
          }),
              ErrorCircleFilledIcon = _this$useGlobalIcon2.ErrorCircleFilledIcon;

          return h(ErrorCircleFilledIcon);
        }

        if (this.file && this.file.name && !this.loadingFile) {
          var _this$useGlobalIcon3 = this.useGlobalIcon({
            CheckCircleFilledIcon: CheckCircleFilled
          }),
              CheckCircleFilledIcon = _this$useGlobalIcon3.CheckCircleFilledIcon;

          return h(CheckCircleFilledIcon);
        }

        return "";
      },
      renderFilePreviewAsText: function renderFilePreviewAsText() {
        var _this = this;

        var h = this.$createElement;
        if (!this.inputName) return;
        var fileListDisplay = renderTNodeJSX(this, "fileListDisplay");

        var _this$useGlobalIcon4 = this.useGlobalIcon({
          CloseCircleFilledIcon: CloseCircleFilled
        }),
            CloseCircleFilledIcon = _this$useGlobalIcon4.CloseCircleFilledIcon;

        return h("div", {
          "class": ["".concat(this.componentName, "__single-display-text"), "".concat(this.componentName, "__display-text--margin")]
        }, [fileListDisplay || h("span", {
          "class": "".concat(this.componentName, "__single-name")
        }, [this.inputName]), this.showProgress ? this.renderProgress() : h(CloseCircleFilledIcon, {
          "class": "".concat(this.componentName, "__icon-delete"),
          "nativeOn": {
            "click": function click(e) {
              return _this.remove(e);
            }
          }
        })]);
      },
      renderFilePreviewAsInput: function renderFilePreviewAsInput() {
        var h = this.$createElement;
        return h("div", {
          "class": "".concat(this.componentName, "__single-input-preview ").concat(this.classPrefix, "-input")
        }, [h("div", {
          "class": this.inputTextClass
        }, [h("span", {
          "class": "".concat(this.componentName, "__single-input-text")
        }, [abridgeName(this.inputText, 4, 6)]), this.showProgress && this.renderProgress(), this.renderResult()])]);
      }
    },
    render: function render() {
      var _this2 = this;

      var h = arguments[0];
      return h("div", {
        "class": this.classes
      }, [this.showInput && this.renderFilePreviewAsInput(), this.$scopedSlots["default"] && this.$scopedSlots["default"](null), this.showTextPreview && this.renderFilePreviewAsText(), this.showInput && this.showDelete && h("span", {
        "class": "".concat(this.componentName, "__single-input-delete"),
        "on": {
          "click": function click(e) {
            return _this2.remove(e);
          }
        }
      }, ["\u5220\u9664"])]);
    }
  });

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty$3(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  var _Upload = mixins(getConfigReceiverMixins("upload"), getGlobalIconMixins()).extend({
    name: "TUpload",
    components: {
      Dragger: Dragger,
      SingleFile: SingleFile,
      ImageCard: ImageCard,
      FlowList: FlowList,
      TDialog: Dialog
    },
    model: {
      prop: "files",
      event: "change"
    },
    props: _objectSpread({}, props),
    data: function data() {
      return {
        formDisabled: void 0,
        dragActive: false,
        loadingFile: null,
        toUploadFiles: [],
        errorMsg: "",
        showImageViewDialog: false,
        showImageViewUrl: "",
        xhrReq: null
      };
    },
    computed: {
      isSingleRequest: function isSingleRequest() {
        return !this.multiple || this.isBatchUpload;
      },
      tDisabled: function tDisabled() {
        return this.formDisabled || this.disabled;
      },
      showTips: function showTips() {
        if (this.theme === "file") {
          var hasNoFile = (!this.files || !this.files.length) && !this.loadingFile;
          return this.tips && hasNoFile;
        }

        return Boolean(this.tips);
      },
      showCustomDisplay: function showCustomDisplay() {
        return this.theme === "custom";
      },
      showSingleDisplay: function showSingleDisplay() {
        return !this.draggable && ["file", "file-input"].includes(this.theme);
      },
      showImgCard: function showImgCard() {
        return !this.draggable && this.theme === "image";
      },
      singleDraggable: function singleDraggable() {
        return !this.multiple && this.draggable && ["file", "file-input", "image"].includes(this.theme);
      },
      showUploadList: function showUploadList() {
        return this.multiple && ["file-flow", "image-flow"].includes(this.theme);
      },
      showImgDialog: function showImgDialog() {
        return ["image", "image-flow", "custom"].includes(this.theme);
      },
      showErrorMsg: function showErrorMsg() {
        return !!this.errorMsg;
      },
      tipsClasses: function tipsClasses() {
        return ["".concat(this.componentName, "__tips"), "".concat(this.classPrefix, "-size-s")];
      },
      errorClasses: function errorClasses() {
        return this.tipsClasses.concat("".concat(this.componentName, "__tips-error"));
      },
      uploadInOneRequest: function uploadInOneRequest() {
        return this.multiple && this.uploadAllFilesInOneRequest;
      },
      canBatchUpload: function canBatchUpload() {
        return this.uploadInOneRequest && this.isBatchUpload;
      },
      uploadListTriggerText: function uploadListTriggerText() {
        var _this$toUploadFiles, _this$files;

        var uploadText = this.global.triggerUploadText.fileInput;

        if (((_this$toUploadFiles = this.toUploadFiles) === null || _this$toUploadFiles === void 0 ? void 0 : _this$toUploadFiles.length) > 0 || ((_this$files = this.files) === null || _this$files === void 0 ? void 0 : _this$files.length) > 0) {
          var _this$files2;

          if (this.theme === "file-input" || ((_this$files2 = this.files) === null || _this$files2 === void 0 ? void 0 : _this$files2.length) > 0 && this.canBatchUpload) {
            uploadText = this.global.triggerUploadText.reupload;
          } else {
            uploadText = this.global.triggerUploadText.continueUpload;
          }
        }

        return uploadText;
      }
    },
    methods: {
      emitChangeEvent: function emitChangeEvent(files, ctx) {
        emitEvent(this, "change", files, ctx);
      },
      emitRemoveEvent: function emitRemoveEvent(ctx) {
        emitEvent(this, "remove", ctx);
      },
      handlePreviewImg: function handlePreviewImg(event, file) {
        if (!file || !file.url) return log.error("Uploader", "Preview Error file");
        this.showImageViewUrl = file.url;
        this.showImageViewDialog = true;
        var previewCtx = {
          file: file,
          e: event
        };
        emitEvent(this, "preview", previewCtx);
      },
      handleChange: function handleChange(event) {
        var files = event.target.files;
        if (this.tDisabled) return;
        this.uploadFiles(files);
        emitEvent(this, "select-change", formatFiles(Array.from(files), this.format));
        this.$refs.input.value = "";
      },
      handleDragChange: function handleDragChange(files) {
        if (this.tDisabled) return;
        this.uploadFiles(files);
        emitEvent(this, "select-change", formatFiles(Array.from(files), this.format));
      },
      handleSingleRemove: function handleSingleRemove(e) {
        var changeCtx = {
          trigger: "remove"
        };
        if (this.loadingFile) this.loadingFile = null;
        this.errorMsg = "";
        this.emitChangeEvent([], changeCtx);
        this.emitRemoveEvent({
          e: e
        });
      },
      handleFileInputRemove: function handleFileInputRemove(e) {
        e === null || e === void 0 ? void 0 : e.stopPropagation();
        this.handleSingleRemove(e);
      },
      handleMultipleRemove: function handleMultipleRemove(options) {
        var changeCtx = _objectSpread({
          trigger: "remove"
        }, options);

        var files;

        if (!this.canBatchUpload) {
          files = this.files.concat();
          files.splice(options.index, 1);
        } else {
          files = [];
          options.files = this.files.concat();
        }

        this.emitChangeEvent(files, changeCtx);
        this.emitRemoveEvent(options);
      },
      handleListRemove: function handleListRemove(context) {
        var file = context.file,
            e = context.e;
        var index = findIndex_1(this.toUploadFiles, function (o) {
          return o.name === (file === null || file === void 0 ? void 0 : file.name);
        });

        if (index >= 0) {
          this.toUploadFiles.splice(index, 1);
          this.emitRemoveEvent({
            e: e,
            file: file,
            index: index
          });
        } else {
          var index2 = findIndex_1(this.files, function (o) {
            return o.name === (file === null || file === void 0 ? void 0 : file.name);
          });
          this.handleMultipleRemove({
            e: e,
            index: index2
          });
        }
      },
      uploadFiles: function uploadFiles(files) {
        var _this$files3,
            _this = this;

        if (this.canBatchUpload && ((_this$files3 = this.files) === null || _this$files3 === void 0 ? void 0 : _this$files3.length) > 0) {
          var context = {
            trigger: "batch-clear"
          };
          this.emitChangeEvent([], context);
        }

        var tmpFiles = _toConsumableArray(files);

        if (this.max) {
          tmpFiles = tmpFiles.slice(0, this.max - this.toUploadFiles.length - this.files.length);

          if (tmpFiles.length !== files.length) {
            console.warn("TDesign Upload Warn: you can only upload ".concat(this.max, " files"));
          }
        }

        tmpFiles.forEach(function (fileRaw) {
          var file = fileRaw;

          if (typeof _this.format === "function") {
            file = _this.format(fileRaw);
          }

          var uploadFile = _objectSpread({
            raw: fileRaw,
            lastModified: fileRaw.lastModified,
            name: fileRaw.name,
            size: fileRaw.size,
            type: fileRaw.type,
            percent: 0,
            status: "waiting"
          }, file);

          var reader = new FileReader();
          reader.readAsDataURL(fileRaw);

          reader.onload = function (event) {
            uploadFile.url = event.target.result;
          };

          _this.handleBeforeUpload(file).then(function (canUpload) {
            if (!canUpload) return;

            var newFiles = _this.toUploadFiles.concat();

            if (_this.allowUploadDuplicateFile || !_this.toUploadFiles.find(function (file2) {
              return file2.name === uploadFile.name;
            })) {
              newFiles.push(uploadFile);
            }

            _this.toUploadFiles = newFiles;
            _this.loadingFile = uploadFile;

            if (_this.autoUpload) {
              _this.upload(uploadFile);
            }
          });
        });
      },
      upload: function upload(currentFiles, index) {
        var _this2 = this;

        return _asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var innerFiles, request, currentXhr;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  innerFiles = Array.isArray(currentFiles) ? currentFiles : [currentFiles];

                  if (!(!_this2.action && !_this2.requestMethod)) {
                    _context.next = 4;
                    break;
                  }

                  console.error("TDesign Upload Error: one of action and requestMethod must be exist.");
                  return _context.abrupt("return");

                case 4:
                  _this2.errorMsg = "";
                  innerFiles.forEach(function (file) {
                    file.status = "progress";
                    _this2.loadingFile = file;
                  });

                  if (_this2.requestMethod) {
                    _this2.handleRequestMethod(innerFiles);
                  } else {
                    if (_this2.useMockProgress) {
                      _this2.handleMockProgress(innerFiles);
                    }

                    request = xhr;
                    currentXhr = request({
                      method: _this2.method,
                      action: _this2.action,
                      data: _this2.data,
                      files: innerFiles,
                      name: _this2.name,
                      headers: _this2.headers,
                      withCredentials: _this2.withCredentials,
                      onError: _this2.onError,
                      onProgress: _this2.handleProgress,
                      onSuccess: _this2.handleSuccess
                    });

                    if (_this2.isSingleRequest) {
                      _this2.xhrReq = currentXhr;
                    } else if (typeof index === "number") _this2.toUploadFiles[index].xhr = currentXhr;
                  }

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }))();
      },
      handleMockProgress: function handleMockProgress(files) {
        var _this3 = this;

        var timer = setInterval(function () {
          files.forEach(function (file) {
            if (file.status === "success" || file.percent >= 99) {
              clearInterval(timer);
              return;
            }

            file.percent += 1;
          });
          var percent = files[0].percent;

          _this3.handleProgress({
            files: files,
            percent: percent,
            type: "mock"
          });
        }, 10);
      },
      handleRequestMethod: function handleRequestMethod(files) {
        var _this4 = this;

        if (!isFunction_1(this.requestMethod)) {
          console.warn("TDesign Upload Warn: `requestMethod` must be a function.");
          return;
        }

        var requestMethodParam = this.uploadInOneRequest ? files : files[0];
        this.requestMethod(requestMethodParam).then(function (res) {
          if (!_this4.handleRequestMethodResponse(res)) return;

          if (res.status === "success") {
            _this4.handleSuccess({
              files: files,
              response: res.response
            });
          } else if (res.status === "fail") {
            var r = res.response || {};

            _this4.onError({
              file: _this4.uploadInOneRequest ? null : files[0],
              files: files,
              response: _objectSpread(_objectSpread({}, r), {}, {
                error: res.error
              })
            });
          }
        });
      },
      handleRequestMethodResponse: function handleRequestMethodResponse(res) {
        if (!res) {
          console.error("TDesign Upload Error: `requestMethodResponse` is required.");
          return false;
        }

        if (!res.status) {
          console.error("TDesign Upload Error: `requestMethodResponse.status` is missing, which value is `success` or `fail`");
          return false;
        }

        if (!["success", "fail"].includes(res.status)) {
          console.error("TDesign Upload Error: `requestMethodResponse.status` must be `success` or `fail`");
          return false;
        }

        if (res.status === "success" && (!res.response || !res.response.url)) {
          console.warn("TDesign Upload Warn: `requestMethodResponse.response.url` is required, when `status` is `success`");
        }

        return true;
      },
      multipleUpload: function multipleUpload(currentFiles) {
        var _this5 = this;

        if (this.uploadAllFilesInOneRequest) {
          this.upload(currentFiles);
        } else {
          currentFiles.forEach(function (file, index) {
            _this5.upload(file, index);
          });
        }
      },
      onError: function onError(options) {
        var _this6 = this,
            _res;

        var event = options.event,
            file = options.file,
            files = options.files,
            response = options.response,
            resFormatted = options.resFormatted;
        var innerFiles = Array.isArray(files) ? files : [file];
        innerFiles.forEach(function (file2) {
          file2.status = "fail";
          _this6.loadingFile = file2;
        });
        var res = response;

        if (!resFormatted && typeof this.formatResponse === "function") {
          res = this.formatResponse(response, {
            file: file,
            currentFiles: files
          });
        }

        this.errorMsg = (_res = res) === null || _res === void 0 ? void 0 : _res.error;
        var context = {
          e: event,
          file: this.uploadInOneRequest ? null : innerFiles[0],
          currentFiles: innerFiles
        };
        emitEvent(this, "fail", context);
      },
      handleProgress: function handleProgress(_ref) {
        var _this7 = this;

        var event = _ref.event,
            file = _ref.file,
            currentFiles = _ref.files,
            percent = _ref.percent,
            _ref$type = _ref.type,
            type = _ref$type === void 0 ? "real" : _ref$type;
        var innerFiles = Array.isArray(currentFiles) ? currentFiles : [file];
        if ((innerFiles === null || innerFiles === void 0 ? void 0 : innerFiles.length) <= 0) return log.error("Uploader", "Progress Error files");
        innerFiles.forEach(function (file2) {
          file2.percent = Math.min(percent, 100);
          _this7.loadingFile = file2.status === "success" ? null : file2;
        });
        var progressCtx = {
          percent: percent,
          e: event,
          file: file,
          type: type,
          currentFiles: innerFiles
        };
        emitEvent(this, "progress", progressCtx);
      },
      handleSuccess: function handleSuccess(_ref2) {
        var _res2, _this$files4;

        var event = _ref2.event,
            file = _ref2.file,
            currentFiles = _ref2.files,
            response = _ref2.response;
        var innerFiles = Array.isArray(currentFiles) ? currentFiles : [file];
        if ((innerFiles === null || innerFiles === void 0 ? void 0 : innerFiles.length) <= 0) return log.error("Uploader", "success no files");
        innerFiles.forEach(function (file2) {
          file2.status = "success";
        });
        var res = response;

        if (typeof this.formatResponse === "function") {
          res = this.formatResponse(response, {
            file: this.uploadInOneRequest ? null : innerFiles[0],
            currentFiles: innerFiles
          });
        }

        if ((_res2 = res) !== null && _res2 !== void 0 && _res2.error) {
          this.onError({
            event: event,
            file: this.uploadInOneRequest ? null : innerFiles[0],
            files: innerFiles,
            response: res,
            resFormatted: true
          });
          return;
        }

        if (!this.uploadInOneRequest) {
          innerFiles[0].url = res.url || innerFiles[0].url;
        }

        this.toUploadFiles = without_1.apply(void 0, [this.toUploadFiles].concat(_toConsumableArray(innerFiles)));
        var newFiles = innerFiles.map(function (file2) {
          return _objectSpread(_objectSpread({}, file2), {}, {
            response: res
          });
        });
        this.multiple && (_this$files4 = this.files).push.apply(_this$files4, _toConsumableArray(newFiles));
        var uploadedFiles = this.multiple ? this.files : newFiles;
        var context = {
          e: event,
          response: res,
          trigger: "upload-success"
        };
        this.emitChangeEvent(uploadedFiles, context);
        var sContext = {
          file: this.uploadInOneRequest ? null : newFiles[0],
          fileList: uploadedFiles,
          currentFiles: newFiles,
          e: event,
          response: res
        };
        emitEvent(this, "success", sContext);
        this.loadingFile = null;
      },
      handlePreview: function handlePreview(_ref3) {
        var file = _ref3.file,
            event = _ref3.event;
        return {
          file: file,
          event: event
        };
      },
      triggerUpload: function triggerUpload() {
        if (this.tDisabled) return;
        this.$refs.input.click();
      },
      handleDragenter: function handleDragenter(e) {
        if (this.tDisabled) return;
        this.dragActive = true;
        emitEvent(this, "dragenter", {
          e: e
        });
      },
      handleDragleave: function handleDragleave(e) {
        if (this.tDisabled) return;
        this.dragActive = false;
        emitEvent(this, "dragleave", {
          e: e
        });
      },
      handleBeforeUpload: function handleBeforeUpload(file) {
        var _this8 = this;

        if (typeof this.beforeUpload === "function") {
          var r = this.beforeUpload(file);
          if (r instanceof Promise) return r;
          return new Promise(function (resolve) {
            return resolve(r);
          });
        }

        return new Promise(function (resolve) {
          if (_this8.sizeLimit) {
            resolve(_this8.handleSizeLimit(file.size));
          }

          resolve(true);
        });
      },
      handleSizeLimit: function handleSizeLimit(fileSize) {
        var sizeLimit = typeof this.sizeLimit === "number" ? {
          size: this.sizeLimit,
          unit: "KB"
        } : this.sizeLimit;
        var rSize = isOverSizeLimit(fileSize, sizeLimit.size, sizeLimit.unit);

        if (!rSize) {
          this.errorMsg = sizeLimit.message ? this.t(sizeLimit.message, {
            sizeLimit: sizeLimit.size
          }) : "".concat(this.t(this.global.sizeLimitMessage, {
            sizeLimit: sizeLimit.size
          }), " ").concat(sizeLimit.unit);
        }

        return rSize;
      },
      cancelUpload: function cancelUpload() {
        var _this9 = this;

        if (this.loadingFile) {
          if (!this.requestMethod) {
            var _this$xhrReq, _this$xhrReq$abort;

            this.isSingleRequest && ((_this$xhrReq = this.xhrReq) === null || _this$xhrReq === void 0 ? void 0 : (_this$xhrReq$abort = _this$xhrReq.abort) === null || _this$xhrReq$abort === void 0 ? void 0 : _this$xhrReq$abort.call(_this$xhrReq));
            this.multiple && this.toUploadFiles.forEach(function (file) {
              if (file.status === "progress") {
                !_this9.isBatchUpload && file.xhr.abort();
                file.status = "waiting";
              }
            });
          }

          emitEvent(this, "cancel-upload");
          this.loadingFile = null;
        }

        this.$refs.input.value = "";
      },
      cancelPreviewImgDialog: function cancelPreviewImgDialog() {
        var _this10 = this;

        this.showImageViewDialog = false;
        var timer = setTimeout(function () {
          _this10.showImageViewUrl = "";
          clearTimeout(timer);
          timer = null;
        }, 500);
      },
      getDefaultTrigger: function getDefaultTrigger() {
        var _this$files5;

        var h = this.$createElement;

        if (this.theme === "file-input" || this.showUploadList) {
          return h(Button, {
            "attrs": {
              "variant": "outline"
            }
          }, [this.uploadListTriggerText]);
        }

        var _this$useGlobalIcon = this.useGlobalIcon({
          UploadIcon: Upload$1
        }),
            UploadIcon = _this$useGlobalIcon.UploadIcon;

        return h(Button, {
          "attrs": {
            "variant": "outline"
          }
        }, [h(UploadIcon, {
          "slot": "icon"
        }), (_this$files5 = this.files) !== null && _this$files5 !== void 0 && _this$files5.length ? this.global.triggerUploadText.reupload : this.global.triggerUploadText.normal]);
      },
      renderInput: function renderInput() {
        var h = this.$createElement;
        return h("input", {
          "ref": "input",
          "attrs": {
            "type": "file",
            "disabled": this.tDisabled,
            "multiple": this.multiple,
            "accept": this.accept,
            "hidden": true
          },
          "on": {
            "change": this.handleChange
          }
        });
      },
      renderSingleDisplay: function renderSingleDisplay(triggerElement) {
        var h = this.$createElement;
        return h(SingleFile, {
          "attrs": {
            "file": this.files && this.files[0],
            "loadingFile": this.loadingFile,
            "display": this.theme,
            "remove": this.handleSingleRemove,
            "showUploadProgress": this.showUploadProgress,
            "placeholder": this.placeholder,
            "fileListDisplay": this.fileListDisplay
          }
        }, [h("div", {
          "class": "".concat(this.componentName, "__trigger"),
          "on": {
            "click": this.triggerUpload
          }
        }, [triggerElement])]);
      },
      renderDraggerTrigger: function renderDraggerTrigger() {
        var h = this.$createElement;
        var params = {
          dragActive: this.dragActive,
          uploadingFile: this.multiple ? this.toUploadFiles : this.loadingFile
        };
        var triggerElement = renderContent(this, "default", "trigger", {
          params: params
        });
        return h(Dragger, {
          "attrs": {
            "showUploadProgress": this.showUploadProgress,
            "loadingFile": this.loadingFile,
            "file": this.files && this.files[0],
            "display": this.theme,
            "cancel": this.cancelUpload,
            "trigger": this.triggerUpload,
            "remove": this.handleSingleRemove,
            "upload": this.upload,
            "autoUpload": this.autoUpload
          },
          "on": {
            "change": this.handleDragChange,
            "dragenter": this.handleDragenter,
            "dragleave": this.handleDragleave
          }
        }, [triggerElement]);
      },
      renderTrigger: function renderTrigger() {
        var defaultNode = this.getDefaultTrigger();
        return renderContent(this, "default", "trigger", defaultNode);
      },
      renderCustom: function renderCustom(triggerElement) {
        var h = this.$createElement;
        return this.draggable ? this.renderDraggerTrigger() : h("div", {
          "class": "".concat(this.componentName, "__trigger"),
          "on": {
            "click": this.triggerUpload
          }
        }, [triggerElement]);
      }
    },
    render: function render() {
      var h = arguments[0];
      var triggerElement = this.renderTrigger();
      return h("div", {
        "class": this.componentName
      }, [this.renderInput(), this.showCustomDisplay && this.renderCustom(triggerElement), this.showSingleDisplay && this.renderSingleDisplay(triggerElement), this.singleDraggable && this.renderDraggerTrigger(), this.showImgCard && h(ImageCard, {
        "attrs": {
          "files": this.files,
          "multiple": this.multiple,
          "remove": this.handleMultipleRemove,
          "trigger": this.triggerUpload,
          "loadingFile": this.loadingFile,
          "toUploadFiles": this.toUploadFiles,
          "max": this.max,
          "disabled": this.tDisabled,
          "locale": this.locale
        },
        "on": {
          "imgPreview": this.handlePreviewImg
        }
      }), this.showUploadList && h(FlowList, {
        "attrs": {
          "files": this.files,
          "disabled": this.tDisabled,
          "placeholder": this.placeholder,
          "autoUpload": this.autoUpload,
          "toUploadFiles": this.toUploadFiles,
          "remove": this.handleListRemove,
          "showUploadProgress": this.showUploadProgress,
          "allowUploadDuplicateFile": this.allowUploadDuplicateFile,
          "upload": this.multipleUpload,
          "cancel": this.cancelUpload,
          "display": this.theme,
          "batchUpload": this.canBatchUpload
        },
        "on": {
          "imgPreview": this.handlePreviewImg,
          "change": this.handleDragChange,
          "dragenter": this.handleDragenter,
          "dragleave": this.handleDragleave
        }
      }, [h("div", {
        "class": "".concat(this.componentName, "__trigger"),
        "on": {
          "click": this.triggerUpload
        }
      }, [triggerElement])]), this.showImgDialog && h(Dialog, {
        "attrs": {
          "visible": this.showImageViewDialog,
          "showOverlay": true,
          "width": "auto",
          "top": "10%",
          "footer": false,
          "header": false
        },
        "class": "".concat(this.componentName, "__dialog"),
        "on": {
          "close": this.cancelPreviewImgDialog
        }
      }, [h("div", {
        "class": "".concat(this.classPrefix, "__dialog-body-img-box")
      }, [h("img", {
        "attrs": {
          "src": this.showImageViewUrl,
          "alt": ""
        }
      })])]), !this.errorMsg && this.showTips && h("small", {
        "class": this.tipsClasses
      }, [this.tips]), this.showErrorMsg && h("small", {
        "class": this.errorClasses
      }, [this.errorMsg])]);
    }
  });

  var Upload = withInstall(_Upload);

  var ConfigProvider$1 = Vue__default["default"].extend({
    name: "TConfigProvider",
    props: {
      globalConfig: Object
    },
    data: function data() {
      return {
        defaultData: cloneDeep_1(defaultGlobalConfig)
      };
    },
    provide: function provide() {
      return {
        globalConfig: this.mergedGlobalConfig
      };
    },
    computed: {
      mergedGlobalConfig: function mergedGlobalConfig() {
        var mergedGlobalConfig = mergeWith(this.defaultData, this.globalConfig);
        return mergedGlobalConfig;
      }
    },
    render: function render() {
      var h = arguments[0];

      if (this.$slots["default"].length === 1) {
        return this.$slots["default"][0];
      }

      return h("div", [this.$slots["default"]]);
    }
  });

  var ConfigProvider = withInstall(ConfigProvider$1);

  var components = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Button: Button,
    Icon: Icon,
    Link: Link,
    Col: Col,
    Row: Row,
    Aside: Aside,
    Layout: Layout,
    Header: Header,
    Footer: Footer,
    Content: Content,
    Divider: Divider,
    Space: Space,
    Affix: Affix,
    Anchor: Anchor,
    AnchorItem: AnchorItem,
    AnchorTarget: AnchorTarget,
    BreadcrumbItem: BreadcrumbItem,
    Breadcrumb: Breadcrumb,
    Dropdown: Dropdown,
    DropdownItem: DropdownItem,
    DropdownMenu: DropdownMenu,
    Jumper: Jumper,
    Menu: Menu,
    HeadMenu: HeadMenu,
    Submenu: Submenu,
    MenuItem: MenuItem,
    MenuGroup: MenuGroup,
    Pagination: Pagination,
    StepItem: StepItem,
    Steps: Steps,
    Tabs: Tabs,
    TabPanel: TabPanel,
    Cascader: Cascader,
    CascaderPanel: CascaderPanel,
    Checkbox: Checkbox,
    CheckboxGroup: CheckboxGroup,
    ColorPickerPanel: ColorPickerPanel,
    ColorPicker: ColorPicker,
    DatePicker: DatePicker,
    DatePickerPanel: DatePickerPanel,
    DateRangePicker: DateRangePicker,
    DateRangePickerPanel: DateRangePickerPanel,
    Form: Form,
    FormItem: FormItem,
    InputAdornment: InputAdornment,
    Input: Input,
    InputGroup: InputGroup,
    RangeInput: RangeInput,
    RangeInputPopup: RangeInputPopup,
    InputNumber: InputNumber,
    Radio: Radio,
    RadioGroup: RadioGroup,
    RadioButton: RadioButton,
    Select: Select,
    Option: Option,
    OptionGroup: OptionGroup,
    Slider: Slider,
    Switch: Switch,
    TagInput: TagInput,
    SelectInput: SelectInput,
    Textarea: Textarea,
    Transfer: Transfer,
    KeyboardDirection: KeyboardDirection,
    EPickerCols: EPickerCols,
    TimePicker: TimePicker,
    TimeRangePicker: TimeRangePicker,
    TimePickerPanel: TimePickerPanel,
    TreeSelect: TreeSelect,
    Avatar: Avatar,
    AvatarGroup: AvatarGroup,
    Badge: Badge,
    Calendar: Calendar,
    Card: Card,
    Comment: Comment,
    List: List,
    ListItem: ListItem,
    ListItemMeta: ListItemMeta,
    LoadingPlugin: LoadingPlugin,
    Loading: Loading,
    Progress: Progress,
    Skeleton: Skeleton,
    Swiper: Swiper,
    SwiperItem: SwiperItem,
    BaseTable: BaseTable,
    PrimaryTable: PrimaryTable,
    EnhancedTable: EnhancedTable,
    Table: Table,
    Tag: Tag,
    CheckTag: CheckTag,
    Tooltip: Tooltip,
    Tree: Tree,
    Collapse: Collapse,
    CollapsePanel: CollapsePanel,
    Alert: Alert,
    DialogPlugin: DialogPlugin,
    Dialog: Dialog,
    Drawer: Drawer,
    MessagePlugin: MessagePlugin,
    Message: Message,
    NotificationPlugin: NotificationPlugin,
    NotifyPlugin: NotifyPlugin,
    Notification: Notification,
    Popconfirm: Popconfirm,
    Popup: Popup,
    Upload: Upload,
    ConfigProvider: ConfigProvider
  });

  function install(Vue, config) {
    if (Vue._installedPlugins.indexOf(VueCompositionAPI__default["default"]) === -1) {
      Vue.use(VueCompositionAPI__default["default"]);
    }

    Object.keys(components).forEach(function (key) {
      if (components[key]) {
        /plugin/i.test(key) ? Vue.use(components[key]) : Vue.use(components[key], config);
      }
    });
  }

  if (typeof window !== "undefined" && window.Vue) {
    install(window.Vue);
  }
  var tdesign = {
    install: install,
    version: "0.46.1"
  };

  if (typeof console !== "undefined" && console.warn && typeof window !== "undefined") {
    console.warn("You are using a whole package of TDesign!");
  }

  exports.Affix = Affix;
  exports.Alert = Alert;
  exports.Anchor = Anchor;
  exports.AnchorItem = AnchorItem;
  exports.AnchorTarget = AnchorTarget;
  exports.Aside = Aside;
  exports.Avatar = Avatar;
  exports.AvatarGroup = AvatarGroup;
  exports.Badge = Badge;
  exports.BaseTable = BaseTable;
  exports.Breadcrumb = Breadcrumb;
  exports.BreadcrumbItem = BreadcrumbItem;
  exports.Button = Button;
  exports.Calendar = Calendar;
  exports.Card = Card;
  exports.Cascader = Cascader;
  exports.CascaderPanel = CascaderPanel;
  exports.CheckTag = CheckTag;
  exports.Checkbox = Checkbox;
  exports.CheckboxGroup = CheckboxGroup;
  exports.Col = Col;
  exports.Collapse = Collapse;
  exports.CollapsePanel = CollapsePanel;
  exports.ColorPicker = ColorPicker;
  exports.ColorPickerPanel = ColorPickerPanel;
  exports.Comment = Comment;
  exports.ConfigProvider = ConfigProvider;
  exports.Content = Content;
  exports.DatePicker = DatePicker;
  exports.DatePickerPanel = DatePickerPanel;
  exports.DateRangePicker = DateRangePicker;
  exports.DateRangePickerPanel = DateRangePickerPanel;
  exports.Dialog = Dialog;
  exports.DialogPlugin = DialogPlugin;
  exports.Divider = Divider;
  exports.Drawer = Drawer;
  exports.Dropdown = Dropdown;
  exports.DropdownItem = DropdownItem;
  exports.DropdownMenu = DropdownMenu;
  exports.EPickerCols = EPickerCols;
  exports.EnhancedTable = EnhancedTable;
  exports.Footer = Footer;
  exports.Form = Form;
  exports.FormItem = FormItem;
  exports.HeadMenu = HeadMenu;
  exports.Header = Header;
  exports.Icon = Icon;
  exports.Input = Input;
  exports.InputAdornment = InputAdornment;
  exports.InputGroup = InputGroup;
  exports.InputNumber = InputNumber;
  exports.Jumper = Jumper;
  exports.KeyboardDirection = KeyboardDirection;
  exports.Layout = Layout;
  exports.Link = Link;
  exports.List = List;
  exports.ListItem = ListItem;
  exports.ListItemMeta = ListItemMeta;
  exports.Loading = Loading;
  exports.LoadingPlugin = LoadingPlugin;
  exports.Menu = Menu;
  exports.MenuGroup = MenuGroup;
  exports.MenuItem = MenuItem;
  exports.Message = Message;
  exports.MessagePlugin = MessagePlugin;
  exports.Notification = Notification;
  exports.NotificationPlugin = NotificationPlugin;
  exports.NotifyPlugin = NotifyPlugin;
  exports.Option = Option;
  exports.OptionGroup = OptionGroup;
  exports.Pagination = Pagination;
  exports.Popconfirm = Popconfirm;
  exports.Popup = Popup;
  exports.PrimaryTable = PrimaryTable;
  exports.Progress = Progress;
  exports.Radio = Radio;
  exports.RadioButton = RadioButton;
  exports.RadioGroup = RadioGroup;
  exports.RangeInput = RangeInput;
  exports.RangeInputPopup = RangeInputPopup;
  exports.Row = Row;
  exports.Select = Select;
  exports.SelectInput = SelectInput;
  exports.Skeleton = Skeleton;
  exports.Slider = Slider;
  exports.Space = Space;
  exports.StepItem = StepItem;
  exports.Steps = Steps;
  exports.Submenu = Submenu;
  exports.Swiper = Swiper;
  exports.SwiperItem = SwiperItem;
  exports.Switch = Switch;
  exports.TabPanel = TabPanel;
  exports.Table = Table;
  exports.Tabs = Tabs;
  exports.Tag = Tag;
  exports.TagInput = TagInput;
  exports.Textarea = Textarea;
  exports.TimePicker = TimePicker;
  exports.TimePickerPanel = TimePickerPanel;
  exports.TimeRangePicker = TimeRangePicker;
  exports.Tooltip = Tooltip;
  exports.Transfer = Transfer;
  exports.Tree = Tree;
  exports.TreeSelect = TreeSelect;
  exports.Upload = Upload;
  exports["default"] = tdesign;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=tdesign.js.map
