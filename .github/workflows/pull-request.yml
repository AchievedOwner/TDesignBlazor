name: "PR"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
jobs:
  SonarCloud:
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"AchievedOwner_TDesignBlazor" /o:"playermaker" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          dotnet build --no-incremental
          dotnet tool install --global dotnet-coverage
          dotnet-coverage collect 'dotnet test' -f xml  -o 'coverage.xml'
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  Codacy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET Version
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x
      - name: Build & Test
        run: |
          dotnet build
          dotnet test --collect:"XPlat Code Coverage"
          find ./src/TDesign.Test/*TestResults* -name "*coverage*.xml" -type f -exec cp {} ./ \;
      - name: Codacy Coverage Reporter
        uses: codacy/codacy-coverage-reporter-action@v1.3.0
        with:
          api-token: ${{ secrets.CODACY_ACCOUNT_TOKEN }}
          coverage-reports: 'coverage.cobertura.xml'
  DotNet:
    runs-on: ubuntu-latest
    steps:      
      - uses: actions/checkout@v3
      - name: Setup .NET Version
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x
      - name: Build
        run: dotnet build
      - name: Test
        run: dotnet test --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage"
      - name: Test Reporting
        uses: phoenix-actions/test-reporting@v8
        id: test-report
        if: success() || failure()
        with:
          name: 'Unit Test'
          path: './src/TDesign.Test/TestResults/*'
          reporter: 'dotnet-trx'
      - name: Generate Report
        run: |
          echo "url is ${{ steps.test-report.outputs.runHtmlUrl }}"

      - name: Dotnet Test Reporter
        uses: bibipkins/dotnet-test-reporter@v1.0.0-beta.4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          test-results: ./src/TDesign.Test/TestResults/
          test-coverage: ./src/TDesign.Test/TestResults/**/*coverage*.xml
          min-coverage: 80
          comment-title: 'Unit Test Results'      
      - name: PR Comment
        uses: github-actions-up-and-running/pr-comment@v1.0.1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message: 查看测试结果 ${{ steps.test-report.outputs.runHtmlUrl }}


